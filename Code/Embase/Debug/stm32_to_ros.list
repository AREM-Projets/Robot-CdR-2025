
stm32_to_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a48  08016ed8  08016ed8  00017ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00001274  08018920  08018920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d88  08019b94  08019b94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a91c  0801a91c  0001c1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801a91c  0801a91c  0001b91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a928  0801a928  0001b928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801a92c  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001f8  0801ab24  0001c1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0801ab24  0001c6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1bb  00000000  00000000  0001c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e76  00000000  00000000  000493e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d0  00000000  00000000  0004d260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000197e  00000000  00000000  0004f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e82  00000000  00000000  00050cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea91  00000000  00000000  00079b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5154  00000000  00000000  000985c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d1e0  00000000  00000000  0017d758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  0018a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016ec0 	.word	0x08016ec0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08016ec0 	.word	0x08016ec0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f001 b8f6 	b.w	8001eec <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <selfrel_offset31>:
 8000fd4:	6803      	ldr	r3, [r0, #0]
 8000fd6:	005a      	lsls	r2, r3, #1
 8000fd8:	bf4c      	ite	mi
 8000fda:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000fde:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fe2:	4418      	add	r0, r3
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <search_EIT_table>:
 8000fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fec:	b349      	cbz	r1, 8001042 <search_EIT_table+0x5a>
 8000fee:	1e4f      	subs	r7, r1, #1
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	4615      	mov	r5, r2
 8000ff4:	463e      	mov	r6, r7
 8000ff6:	f04f 0900 	mov.w	r9, #0
 8000ffa:	eb09 0106 	add.w	r1, r9, r6
 8000ffe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8001002:	1049      	asrs	r1, r1, #1
 8001004:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8001008:	4640      	mov	r0, r8
 800100a:	f7ff ffe3 	bl	8000fd4 <selfrel_offset31>
 800100e:	428f      	cmp	r7, r1
 8001010:	4603      	mov	r3, r0
 8001012:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8001016:	d00f      	beq.n	8001038 <search_EIT_table+0x50>
 8001018:	3008      	adds	r0, #8
 800101a:	42ab      	cmp	r3, r5
 800101c:	4420      	add	r0, r4
 800101e:	d807      	bhi.n	8001030 <search_EIT_table+0x48>
 8001020:	f7ff ffd8 	bl	8000fd4 <selfrel_offset31>
 8001024:	3801      	subs	r0, #1
 8001026:	42a8      	cmp	r0, r5
 8001028:	d208      	bcs.n	800103c <search_EIT_table+0x54>
 800102a:	f101 0901 	add.w	r9, r1, #1
 800102e:	e7e4      	b.n	8000ffa <search_EIT_table+0x12>
 8001030:	4589      	cmp	r9, r1
 8001032:	d006      	beq.n	8001042 <search_EIT_table+0x5a>
 8001034:	1e4e      	subs	r6, r1, #1
 8001036:	e7e0      	b.n	8000ffa <search_EIT_table+0x12>
 8001038:	42ab      	cmp	r3, r5
 800103a:	d8f9      	bhi.n	8001030 <search_EIT_table+0x48>
 800103c:	4640      	mov	r0, r8
 800103e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001042:	f04f 0800 	mov.w	r8, #0
 8001046:	4640      	mov	r0, r8
 8001048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800104c <__gnu_unwind_get_pr_addr>:
 800104c:	2801      	cmp	r0, #1
 800104e:	d007      	beq.n	8001060 <__gnu_unwind_get_pr_addr+0x14>
 8001050:	2802      	cmp	r0, #2
 8001052:	d007      	beq.n	8001064 <__gnu_unwind_get_pr_addr+0x18>
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <__gnu_unwind_get_pr_addr+0x1c>)
 8001056:	2800      	cmp	r0, #0
 8001058:	bf0c      	ite	eq
 800105a:	4618      	moveq	r0, r3
 800105c:	2000      	movne	r0, #0
 800105e:	4770      	bx	lr
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <__gnu_unwind_get_pr_addr+0x20>)
 8001062:	4770      	bx	lr
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <__gnu_unwind_get_pr_addr+0x24>)
 8001066:	4770      	bx	lr
 8001068:	08001715 	.word	0x08001715
 800106c:	08001719 	.word	0x08001719
 8001070:	0800171d 	.word	0x0800171d

08001074 <get_eit_entry>:
 8001074:	b530      	push	{r4, r5, lr}
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <get_eit_entry+0x88>)
 8001078:	b083      	sub	sp, #12
 800107a:	4604      	mov	r4, r0
 800107c:	1e8d      	subs	r5, r1, #2
 800107e:	b31b      	cbz	r3, 80010c8 <get_eit_entry+0x54>
 8001080:	a901      	add	r1, sp, #4
 8001082:	4628      	mov	r0, r5
 8001084:	f3af 8000 	nop.w
 8001088:	b388      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 800108a:	9901      	ldr	r1, [sp, #4]
 800108c:	462a      	mov	r2, r5
 800108e:	f7ff ffab 	bl	8000fe8 <search_EIT_table>
 8001092:	4601      	mov	r1, r0
 8001094:	b358      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 8001096:	f7ff ff9d 	bl	8000fd4 <selfrel_offset31>
 800109a:	684b      	ldr	r3, [r1, #4]
 800109c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d028      	beq.n	80010f4 <get_eit_entry+0x80>
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f101 0004 	add.w	r0, r1, #4
 80010a8:	db1f      	blt.n	80010ea <get_eit_entry+0x76>
 80010aa:	f7ff ff93 	bl	8000fd4 <selfrel_offset31>
 80010ae:	2300      	movs	r3, #0
 80010b0:	6523      	str	r3, [r4, #80]	@ 0x50
 80010b2:	6803      	ldr	r3, [r0, #0]
 80010b4:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0d      	blt.n	80010d6 <get_eit_entry+0x62>
 80010ba:	f7ff ff8b 	bl	8000fd4 <selfrel_offset31>
 80010be:	4603      	mov	r3, r0
 80010c0:	2000      	movs	r0, #0
 80010c2:	6123      	str	r3, [r4, #16]
 80010c4:	b003      	add	sp, #12
 80010c6:	bd30      	pop	{r4, r5, pc}
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <get_eit_entry+0x8c>)
 80010ca:	490e      	ldr	r1, [pc, #56]	@ (8001104 <get_eit_entry+0x90>)
 80010cc:	1ac9      	subs	r1, r1, r3
 80010ce:	10c9      	asrs	r1, r1, #3
 80010d0:	4618      	mov	r0, r3
 80010d2:	9101      	str	r1, [sp, #4]
 80010d4:	e7da      	b.n	800108c <get_eit_entry+0x18>
 80010d6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80010da:	f7ff ffb7 	bl	800104c <__gnu_unwind_get_pr_addr>
 80010de:	4603      	mov	r3, r0
 80010e0:	b128      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 80010e2:	2000      	movs	r0, #0
 80010e4:	6123      	str	r3, [r4, #16]
 80010e6:	b003      	add	sp, #12
 80010e8:	bd30      	pop	{r4, r5, pc}
 80010ea:	2301      	movs	r3, #1
 80010ec:	e7e0      	b.n	80010b0 <get_eit_entry+0x3c>
 80010ee:	2300      	movs	r3, #0
 80010f0:	2009      	movs	r0, #9
 80010f2:	e7e6      	b.n	80010c2 <get_eit_entry+0x4e>
 80010f4:	2300      	movs	r3, #0
 80010f6:	2005      	movs	r0, #5
 80010f8:	e7e3      	b.n	80010c2 <get_eit_entry+0x4e>
 80010fa:	bf00      	nop
 80010fc:	00000000 	.word	0x00000000
 8001100:	08019b94 	.word	0x08019b94
 8001104:	0801a91c 	.word	0x0801a91c

08001108 <restore_non_core_regs>:
 8001108:	6803      	ldr	r3, [r0, #0]
 800110a:	07da      	lsls	r2, r3, #31
 800110c:	b510      	push	{r4, lr}
 800110e:	4604      	mov	r4, r0
 8001110:	d406      	bmi.n	8001120 <restore_non_core_regs+0x18>
 8001112:	079b      	lsls	r3, r3, #30
 8001114:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8001118:	d509      	bpl.n	800112e <restore_non_core_regs+0x26>
 800111a:	f000 fc69 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	0759      	lsls	r1, r3, #29
 8001122:	d509      	bpl.n	8001138 <restore_non_core_regs+0x30>
 8001124:	071a      	lsls	r2, r3, #28
 8001126:	d50e      	bpl.n	8001146 <restore_non_core_regs+0x3e>
 8001128:	06db      	lsls	r3, r3, #27
 800112a:	d513      	bpl.n	8001154 <restore_non_core_regs+0x4c>
 800112c:	bd10      	pop	{r4, pc}
 800112e:	f000 fc57 	bl	80019e0 <__gnu_Unwind_Restore_VFP>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	0759      	lsls	r1, r3, #29
 8001136:	d4f5      	bmi.n	8001124 <restore_non_core_regs+0x1c>
 8001138:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800113c:	f000 fc60 	bl	8001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	071a      	lsls	r2, r3, #28
 8001144:	d4f0      	bmi.n	8001128 <restore_non_core_regs+0x20>
 8001146:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800114a:	f000 fc61 	bl	8001a10 <__gnu_Unwind_Restore_WMMXD>
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	06db      	lsls	r3, r3, #27
 8001152:	d4eb      	bmi.n	800112c <restore_non_core_regs+0x24>
 8001154:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800115c:	f000 bc9c 	b.w	8001a98 <__gnu_Unwind_Restore_WMMXC>

08001160 <__gnu_unwind_24bit.constprop.0>:
 8001160:	2009      	movs	r0, #9
 8001162:	4770      	bx	lr

08001164 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001164:	4603      	mov	r3, r0
 8001166:	6800      	ldr	r0, [r0, #0]
 8001168:	b100      	cbz	r0, 800116c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800116a:	4418      	add	r0, r3
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <_Unwind_DebugHook>:
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <unwind_phase2>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	4604      	mov	r4, r0
 8001178:	460e      	mov	r6, r1
 800117a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff ff79 	bl	8001074 <get_eit_entry>
 8001182:	4605      	mov	r5, r0
 8001184:	b988      	cbnz	r0, 80011aa <unwind_phase2+0x36>
 8001186:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001188:	6162      	str	r2, [r4, #20]
 800118a:	6923      	ldr	r3, [r4, #16]
 800118c:	4632      	mov	r2, r6
 800118e:	4621      	mov	r1, r4
 8001190:	2001      	movs	r0, #1
 8001192:	4798      	blx	r3
 8001194:	2808      	cmp	r0, #8
 8001196:	d0f0      	beq.n	800117a <unwind_phase2+0x6>
 8001198:	2807      	cmp	r0, #7
 800119a:	d106      	bne.n	80011aa <unwind_phase2+0x36>
 800119c:	4628      	mov	r0, r5
 800119e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011a0:	f7ff ffe6 	bl	8001170 <_Unwind_DebugHook>
 80011a4:	1d30      	adds	r0, r6, #4
 80011a6:	f000 fc0f 	bl	80019c8 <__restore_core_regs>
 80011aa:	f013 f9ed 	bl	8014588 <abort>
 80011ae:	bf00      	nop

080011b0 <unwind_phase2_forced>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	1d0d      	adds	r5, r1, #4
 80011b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80011ba:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80011be:	4607      	mov	r7, r0
 80011c0:	4614      	mov	r4, r2
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80011c8:	f10d 0c0c 	add.w	ip, sp, #12
 80011cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011e0:	ae02      	add	r6, sp, #8
 80011e2:	f04f 0e00 	mov.w	lr, #0
 80011e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011ea:	f8c6 e000 	str.w	lr, [r6]
 80011ee:	e020      	b.n	8001232 <unwind_phase2_forced+0x82>
 80011f0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011f8:	4631      	mov	r1, r6
 80011fa:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011fc:	f014 f8c9 	bl	8015392 <memcpy>
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	aa7a      	add	r2, sp, #488	@ 0x1e8
 8001204:	4639      	mov	r1, r7
 8001206:	4650      	mov	r0, sl
 8001208:	4798      	blx	r3
 800120a:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 800120c:	6473      	str	r3, [r6, #68]	@ 0x44
 800120e:	4621      	mov	r1, r4
 8001210:	e9cd 6900 	strd	r6, r9, [sp]
 8001214:	4605      	mov	r5, r0
 8001216:	463b      	mov	r3, r7
 8001218:	463a      	mov	r2, r7
 800121a:	2001      	movs	r0, #1
 800121c:	47c0      	blx	r8
 800121e:	4604      	mov	r4, r0
 8001220:	bb18      	cbnz	r0, 800126a <unwind_phase2_forced+0xba>
 8001222:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001226:	a97a      	add	r1, sp, #488	@ 0x1e8
 8001228:	4630      	mov	r0, r6
 800122a:	f014 f8b2 	bl	8015392 <memcpy>
 800122e:	2d08      	cmp	r5, #8
 8001230:	d119      	bne.n	8001266 <unwind_phase2_forced+0xb6>
 8001232:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001234:	4638      	mov	r0, r7
 8001236:	f7ff ff1d 	bl	8001074 <get_eit_entry>
 800123a:	3409      	adds	r4, #9
 800123c:	fa5f fa84 	uxtb.w	sl, r4
 8001240:	4605      	mov	r5, r0
 8001242:	2800      	cmp	r0, #0
 8001244:	d0d4      	beq.n	80011f0 <unwind_phase2_forced+0x40>
 8001246:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001248:	6473      	str	r3, [r6, #68]	@ 0x44
 800124a:	463a      	mov	r2, r7
 800124c:	e9cd 6900 	strd	r6, r9, [sp]
 8001250:	463b      	mov	r3, r7
 8001252:	f04a 0110 	orr.w	r1, sl, #16
 8001256:	2001      	movs	r0, #1
 8001258:	47c0      	blx	r8
 800125a:	b930      	cbnz	r0, 800126a <unwind_phase2_forced+0xba>
 800125c:	4628      	mov	r0, r5
 800125e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001266:	2d07      	cmp	r5, #7
 8001268:	d005      	beq.n	8001276 <unwind_phase2_forced+0xc6>
 800126a:	2509      	movs	r5, #9
 800126c:	4628      	mov	r0, r5
 800126e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	4620      	mov	r0, r4
 8001278:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800127a:	f7ff ff79 	bl	8001170 <_Unwind_DebugHook>
 800127e:	a803      	add	r0, sp, #12
 8001280:	f000 fba2 	bl	80019c8 <__restore_core_regs>

08001284 <_Unwind_GetCFA>:
 8001284:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001286:	4770      	bx	lr

08001288 <__gnu_Unwind_RaiseException>:
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800128c:	640b      	str	r3, [r1, #64]	@ 0x40
 800128e:	f101 0c04 	add.w	ip, r1, #4
 8001292:	460e      	mov	r6, r1
 8001294:	4605      	mov	r5, r0
 8001296:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800129a:	b0f9      	sub	sp, #484	@ 0x1e4
 800129c:	ac01      	add	r4, sp, #4
 800129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80012b0:	f04f 37ff 	mov.w	r7, #4294967295
 80012b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012b8:	9700      	str	r7, [sp, #0]
 80012ba:	e006      	b.n	80012ca <__gnu_Unwind_RaiseException+0x42>
 80012bc:	692b      	ldr	r3, [r5, #16]
 80012be:	466a      	mov	r2, sp
 80012c0:	4629      	mov	r1, r5
 80012c2:	4798      	blx	r3
 80012c4:	2808      	cmp	r0, #8
 80012c6:	4604      	mov	r4, r0
 80012c8:	d108      	bne.n	80012dc <__gnu_Unwind_RaiseException+0x54>
 80012ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80012cc:	4628      	mov	r0, r5
 80012ce:	f7ff fed1 	bl	8001074 <get_eit_entry>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d0f2      	beq.n	80012bc <__gnu_Unwind_RaiseException+0x34>
 80012d6:	2009      	movs	r0, #9
 80012d8:	b079      	add	sp, #484	@ 0x1e4
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012dc:	4668      	mov	r0, sp
 80012de:	f7ff ff13 	bl	8001108 <restore_non_core_regs>
 80012e2:	2c06      	cmp	r4, #6
 80012e4:	d1f7      	bne.n	80012d6 <__gnu_Unwind_RaiseException+0x4e>
 80012e6:	4631      	mov	r1, r6
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7ff ff43 	bl	8001174 <unwind_phase2>
 80012ee:	bf00      	nop

080012f0 <__gnu_Unwind_ForcedUnwind>:
 80012f0:	60c1      	str	r1, [r0, #12]
 80012f2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012f4:	6182      	str	r2, [r0, #24]
 80012f6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	e758      	b.n	80011b0 <unwind_phase2_forced>
 80012fe:	bf00      	nop

08001300 <__gnu_Unwind_Resume>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	68c6      	ldr	r6, [r0, #12]
 8001304:	6943      	ldr	r3, [r0, #20]
 8001306:	640b      	str	r3, [r1, #64]	@ 0x40
 8001308:	b9ae      	cbnz	r6, 8001336 <__gnu_Unwind_Resume+0x36>
 800130a:	6903      	ldr	r3, [r0, #16]
 800130c:	460a      	mov	r2, r1
 800130e:	4604      	mov	r4, r0
 8001310:	460d      	mov	r5, r1
 8001312:	4601      	mov	r1, r0
 8001314:	2002      	movs	r0, #2
 8001316:	4798      	blx	r3
 8001318:	2807      	cmp	r0, #7
 800131a:	d005      	beq.n	8001328 <__gnu_Unwind_Resume+0x28>
 800131c:	2808      	cmp	r0, #8
 800131e:	d10f      	bne.n	8001340 <__gnu_Unwind_Resume+0x40>
 8001320:	4629      	mov	r1, r5
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff ff26 	bl	8001174 <unwind_phase2>
 8001328:	4630      	mov	r0, r6
 800132a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800132c:	f7ff ff20 	bl	8001170 <_Unwind_DebugHook>
 8001330:	1d28      	adds	r0, r5, #4
 8001332:	f000 fb49 	bl	80019c8 <__restore_core_regs>
 8001336:	2201      	movs	r2, #1
 8001338:	f7ff ff3a 	bl	80011b0 <unwind_phase2_forced>
 800133c:	f013 f924 	bl	8014588 <abort>
 8001340:	f013 f922 	bl	8014588 <abort>

08001344 <__gnu_Unwind_Resume_or_Rethrow>:
 8001344:	68c2      	ldr	r2, [r0, #12]
 8001346:	b11a      	cbz	r2, 8001350 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001348:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800134a:	640a      	str	r2, [r1, #64]	@ 0x40
 800134c:	2200      	movs	r2, #0
 800134e:	e72f      	b.n	80011b0 <unwind_phase2_forced>
 8001350:	e79a      	b.n	8001288 <__gnu_Unwind_RaiseException>
 8001352:	bf00      	nop

08001354 <_Unwind_Complete>:
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <_Unwind_DeleteException>:
 8001358:	6883      	ldr	r3, [r0, #8]
 800135a:	4601      	mov	r1, r0
 800135c:	b10b      	cbz	r3, 8001362 <_Unwind_DeleteException+0xa>
 800135e:	2001      	movs	r0, #1
 8001360:	4718      	bx	r3
 8001362:	4770      	bx	lr

08001364 <_Unwind_VRS_Get>:
 8001364:	2901      	cmp	r1, #1
 8001366:	d010      	beq.n	800138a <_Unwind_VRS_Get+0x26>
 8001368:	d809      	bhi.n	800137e <_Unwind_VRS_Get+0x1a>
 800136a:	b983      	cbnz	r3, 800138e <_Unwind_VRS_Get+0x2a>
 800136c:	2a0f      	cmp	r2, #15
 800136e:	d80e      	bhi.n	800138e <_Unwind_VRS_Get+0x2a>
 8001370:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001374:	4618      	mov	r0, r3
 8001376:	6853      	ldr	r3, [r2, #4]
 8001378:	9a00      	ldr	r2, [sp, #0]
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4770      	bx	lr
 800137e:	3903      	subs	r1, #3
 8001380:	2901      	cmp	r1, #1
 8001382:	bf8c      	ite	hi
 8001384:	2002      	movhi	r0, #2
 8001386:	2001      	movls	r0, #1
 8001388:	4770      	bx	lr
 800138a:	4608      	mov	r0, r1
 800138c:	4770      	bx	lr
 800138e:	2002      	movs	r0, #2
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <_Unwind_GetGR>:
 8001394:	b500      	push	{lr}
 8001396:	b085      	sub	sp, #20
 8001398:	460a      	mov	r2, r1
 800139a:	2300      	movs	r3, #0
 800139c:	a903      	add	r1, sp, #12
 800139e:	9100      	str	r1, [sp, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff ffdf 	bl	8001364 <_Unwind_VRS_Get>
 80013a6:	9803      	ldr	r0, [sp, #12]
 80013a8:	b005      	add	sp, #20
 80013aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ae:	bf00      	nop

080013b0 <_Unwind_VRS_Set>:
 80013b0:	2901      	cmp	r1, #1
 80013b2:	d010      	beq.n	80013d6 <_Unwind_VRS_Set+0x26>
 80013b4:	d809      	bhi.n	80013ca <_Unwind_VRS_Set+0x1a>
 80013b6:	b983      	cbnz	r3, 80013da <_Unwind_VRS_Set+0x2a>
 80013b8:	2a0f      	cmp	r2, #15
 80013ba:	d80e      	bhi.n	80013da <_Unwind_VRS_Set+0x2a>
 80013bc:	9900      	ldr	r1, [sp, #0]
 80013be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80013c2:	6809      	ldr	r1, [r1, #0]
 80013c4:	6051      	str	r1, [r2, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	4770      	bx	lr
 80013ca:	3903      	subs	r1, #3
 80013cc:	2901      	cmp	r1, #1
 80013ce:	bf8c      	ite	hi
 80013d0:	2002      	movhi	r0, #2
 80013d2:	2001      	movls	r0, #1
 80013d4:	4770      	bx	lr
 80013d6:	4608      	mov	r0, r1
 80013d8:	4770      	bx	lr
 80013da:	2002      	movs	r0, #2
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <_Unwind_SetGR>:
 80013e0:	b510      	push	{r4, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	2300      	movs	r3, #0
 80013e6:	ac03      	add	r4, sp, #12
 80013e8:	9203      	str	r2, [sp, #12]
 80013ea:	9400      	str	r4, [sp, #0]
 80013ec:	460a      	mov	r2, r1
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff ffde 	bl	80013b0 <_Unwind_VRS_Set>
 80013f4:	b004      	add	sp, #16
 80013f6:	bd10      	pop	{r4, pc}

080013f8 <__gnu_Unwind_Backtrace>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	f102 0c04 	add.w	ip, r2, #4
 8001402:	4605      	mov	r5, r0
 8001404:	460c      	mov	r4, r1
 8001406:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800140a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800140e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8001412:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001416:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800141a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800141e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001422:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001426:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800142a:	f04f 36ff 	mov.w	r6, #4294967295
 800142e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001432:	9616      	str	r6, [sp, #88]	@ 0x58
 8001434:	e010      	b.n	8001458 <__gnu_Unwind_Backtrace+0x60>
 8001436:	f7ff ffd3 	bl	80013e0 <_Unwind_SetGR>
 800143a:	4621      	mov	r1, r4
 800143c:	a816      	add	r0, sp, #88	@ 0x58
 800143e:	47a8      	blx	r5
 8001440:	4603      	mov	r3, r0
 8001442:	aa16      	add	r2, sp, #88	@ 0x58
 8001444:	4669      	mov	r1, sp
 8001446:	2008      	movs	r0, #8
 8001448:	b983      	cbnz	r3, 800146c <__gnu_Unwind_Backtrace+0x74>
 800144a:	9b04      	ldr	r3, [sp, #16]
 800144c:	4798      	blx	r3
 800144e:	2805      	cmp	r0, #5
 8001450:	4606      	mov	r6, r0
 8001452:	d00c      	beq.n	800146e <__gnu_Unwind_Backtrace+0x76>
 8001454:	2809      	cmp	r0, #9
 8001456:	d009      	beq.n	800146c <__gnu_Unwind_Backtrace+0x74>
 8001458:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800145a:	4668      	mov	r0, sp
 800145c:	f7ff fe0a 	bl	8001074 <get_eit_entry>
 8001460:	4603      	mov	r3, r0
 8001462:	466a      	mov	r2, sp
 8001464:	210c      	movs	r1, #12
 8001466:	a816      	add	r0, sp, #88	@ 0x58
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0e4      	beq.n	8001436 <__gnu_Unwind_Backtrace+0x3e>
 800146c:	2609      	movs	r6, #9
 800146e:	a816      	add	r0, sp, #88	@ 0x58
 8001470:	f7ff fe4a 	bl	8001108 <restore_non_core_regs>
 8001474:	4630      	mov	r0, r6
 8001476:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800147a:	bd70      	pop	{r4, r5, r6, pc}

0800147c <__gnu_unwind_pr_common>:
 800147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001480:	4693      	mov	fp, r2
 8001482:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001484:	b089      	sub	sp, #36	@ 0x24
 8001486:	460d      	mov	r5, r1
 8001488:	f852 1b04 	ldr.w	r1, [r2], #4
 800148c:	9206      	str	r2, [sp, #24]
 800148e:	f000 0c03 	and.w	ip, r0, #3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d079      	beq.n	800158a <__gnu_unwind_pr_common+0x10e>
 8001496:	0c0c      	lsrs	r4, r1, #16
 8001498:	f88d 401d 	strb.w	r4, [sp, #29]
 800149c:	0409      	lsls	r1, r1, #16
 800149e:	b2e4      	uxtb	r4, r4
 80014a0:	9105      	str	r1, [sp, #20]
 80014a2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80014a6:	2102      	movs	r1, #2
 80014a8:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 80014aa:	f88d 101c 	strb.w	r1, [sp, #28]
 80014ae:	f1bc 0f02 	cmp.w	ip, #2
 80014b2:	bf08      	it	eq
 80014b4:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 80014b6:	f017 0701 	ands.w	r7, r7, #1
 80014ba:	d00c      	beq.n	80014d6 <__gnu_unwind_pr_common+0x5a>
 80014bc:	a905      	add	r1, sp, #20
 80014be:	4658      	mov	r0, fp
 80014c0:	f000 fb84 	bl	8001bcc <__gnu_unwind_execute>
 80014c4:	b918      	cbnz	r0, 80014ce <__gnu_unwind_pr_common+0x52>
 80014c6:	2008      	movs	r0, #8
 80014c8:	b009      	add	sp, #36	@ 0x24
 80014ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ce:	2009      	movs	r0, #9
 80014d0:	b009      	add	sp, #36	@ 0x24
 80014d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014d6:	6816      	ldr	r6, [r2, #0]
 80014d8:	2e00      	cmp	r6, #0
 80014da:	d0ef      	beq.n	80014bc <__gnu_unwind_pr_common+0x40>
 80014dc:	f000 0108 	and.w	r1, r0, #8
 80014e0:	9101      	str	r1, [sp, #4]
 80014e2:	46b2      	mov	sl, r6
 80014e4:	9702      	str	r7, [sp, #8]
 80014e6:	4664      	mov	r4, ip
 80014e8:	4699      	mov	r9, r3
 80014ea:	f1b9 0f02 	cmp.w	r9, #2
 80014ee:	d048      	beq.n	8001582 <__gnu_unwind_pr_common+0x106>
 80014f0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014f4:	8856      	ldrh	r6, [r2, #2]
 80014f6:	f102 0804 	add.w	r8, r2, #4
 80014fa:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014fc:	f026 0301 	bic.w	r3, r6, #1
 8001500:	210f      	movs	r1, #15
 8001502:	4658      	mov	r0, fp
 8001504:	189f      	adds	r7, r3, r2
 8001506:	f7ff ff45 	bl	8001394 <_Unwind_GetGR>
 800150a:	4287      	cmp	r7, r0
 800150c:	d837      	bhi.n	800157e <__gnu_unwind_pr_common+0x102>
 800150e:	f02a 0201 	bic.w	r2, sl, #1
 8001512:	443a      	add	r2, r7
 8001514:	4282      	cmp	r2, r0
 8001516:	bf94      	ite	ls
 8001518:	2200      	movls	r2, #0
 800151a:	2201      	movhi	r2, #1
 800151c:	0073      	lsls	r3, r6, #1
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	f00a 0a01 	and.w	sl, sl, #1
 8001526:	ea43 030a 	orr.w	r3, r3, sl
 800152a:	2b01      	cmp	r3, #1
 800152c:	d047      	beq.n	80015be <__gnu_unwind_pr_common+0x142>
 800152e:	2b02      	cmp	r3, #2
 8001530:	d031      	beq.n	8001596 <__gnu_unwind_pr_common+0x11a>
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1cb      	bne.n	80014ce <__gnu_unwind_pr_common+0x52>
 8001536:	b114      	cbz	r4, 800153e <__gnu_unwind_pr_common+0xc2>
 8001538:	2a00      	cmp	r2, #0
 800153a:	f040 80c9 	bne.w	80016d0 <__gnu_unwind_pr_common+0x254>
 800153e:	f108 0204 	add.w	r2, r8, #4
 8001542:	f8d2 a000 	ldr.w	sl, [r2]
 8001546:	f1ba 0f00 	cmp.w	sl, #0
 800154a:	d1ce      	bne.n	80014ea <__gnu_unwind_pr_common+0x6e>
 800154c:	a905      	add	r1, sp, #20
 800154e:	4658      	mov	r0, fp
 8001550:	9f02      	ldr	r7, [sp, #8]
 8001552:	f000 fb3b 	bl	8001bcc <__gnu_unwind_execute>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1b9      	bne.n	80014ce <__gnu_unwind_pr_common+0x52>
 800155a:	2f00      	cmp	r7, #0
 800155c:	d0b3      	beq.n	80014c6 <__gnu_unwind_pr_common+0x4a>
 800155e:	210f      	movs	r1, #15
 8001560:	4658      	mov	r0, fp
 8001562:	f7ff ff17 	bl	8001394 <_Unwind_GetGR>
 8001566:	210e      	movs	r1, #14
 8001568:	4602      	mov	r2, r0
 800156a:	4658      	mov	r0, fp
 800156c:	f7ff ff38 	bl	80013e0 <_Unwind_SetGR>
 8001570:	4a67      	ldr	r2, [pc, #412]	@ (8001710 <__gnu_unwind_pr_common+0x294>)
 8001572:	210f      	movs	r1, #15
 8001574:	4658      	mov	r0, fp
 8001576:	f7ff ff33 	bl	80013e0 <_Unwind_SetGR>
 800157a:	2007      	movs	r0, #7
 800157c:	e7a8      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 800157e:	2200      	movs	r2, #0
 8001580:	e7cc      	b.n	800151c <__gnu_unwind_pr_common+0xa0>
 8001582:	6856      	ldr	r6, [r2, #4]
 8001584:	f102 0808 	add.w	r8, r2, #8
 8001588:	e7b7      	b.n	80014fa <__gnu_unwind_pr_common+0x7e>
 800158a:	0209      	lsls	r1, r1, #8
 800158c:	9105      	str	r1, [sp, #20]
 800158e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001592:	2103      	movs	r1, #3
 8001594:	e788      	b.n	80014a8 <__gnu_unwind_pr_common+0x2c>
 8001596:	f8d8 6000 	ldr.w	r6, [r8]
 800159a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800159e:	2c00      	cmp	r4, #0
 80015a0:	d144      	bne.n	800162c <__gnu_unwind_pr_common+0x1b0>
 80015a2:	b122      	cbz	r2, 80015ae <__gnu_unwind_pr_common+0x132>
 80015a4:	9a01      	ldr	r2, [sp, #4]
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	d05a      	beq.n	8001660 <__gnu_unwind_pr_common+0x1e4>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d058      	beq.n	8001660 <__gnu_unwind_pr_common+0x1e4>
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	da01      	bge.n	80015b6 <__gnu_unwind_pr_common+0x13a>
 80015b2:	f108 0804 	add.w	r8, r8, #4
 80015b6:	3301      	adds	r3, #1
 80015b8:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 80015bc:	e7c1      	b.n	8001542 <__gnu_unwind_pr_common+0xc6>
 80015be:	b9ec      	cbnz	r4, 80015fc <__gnu_unwind_pr_common+0x180>
 80015c0:	b1ca      	cbz	r2, 80015f6 <__gnu_unwind_pr_common+0x17a>
 80015c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80015c6:	f8d8 2000 	ldr.w	r2, [r8]
 80015ca:	1c99      	adds	r1, r3, #2
 80015cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80015d0:	f43f af7d 	beq.w	80014ce <__gnu_unwind_pr_common+0x52>
 80015d4:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 80015d8:	3301      	adds	r3, #1
 80015da:	9104      	str	r1, [sp, #16]
 80015dc:	f000 808b 	beq.w	80016f6 <__gnu_unwind_pr_common+0x27a>
 80015e0:	f108 0004 	add.w	r0, r8, #4
 80015e4:	f7ff fdbe 	bl	8001164 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015e8:	ab04      	add	r3, sp, #16
 80015ea:	4601      	mov	r1, r0
 80015ec:	4628      	mov	r0, r5
 80015ee:	f011 f833 	bl	8012658 <__cxa_type_match>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d157      	bne.n	80016a6 <__gnu_unwind_pr_common+0x22a>
 80015f6:	f108 0208 	add.w	r2, r8, #8
 80015fa:	e7a2      	b.n	8001542 <__gnu_unwind_pr_common+0xc6>
 80015fc:	210d      	movs	r1, #13
 80015fe:	4658      	mov	r0, fp
 8001600:	f7ff fec8 	bl	8001394 <_Unwind_GetGR>
 8001604:	6a2b      	ldr	r3, [r5, #32]
 8001606:	4283      	cmp	r3, r0
 8001608:	d1f5      	bne.n	80015f6 <__gnu_unwind_pr_common+0x17a>
 800160a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800160c:	4598      	cmp	r8, r3
 800160e:	d1f2      	bne.n	80015f6 <__gnu_unwind_pr_common+0x17a>
 8001610:	4640      	mov	r0, r8
 8001612:	f7ff fcdf 	bl	8000fd4 <selfrel_offset31>
 8001616:	210f      	movs	r1, #15
 8001618:	4602      	mov	r2, r0
 800161a:	4658      	mov	r0, fp
 800161c:	f7ff fee0 	bl	80013e0 <_Unwind_SetGR>
 8001620:	462a      	mov	r2, r5
 8001622:	2100      	movs	r1, #0
 8001624:	4658      	mov	r0, fp
 8001626:	f7ff fedb 	bl	80013e0 <_Unwind_SetGR>
 800162a:	e7a6      	b.n	800157a <__gnu_unwind_pr_common+0xfe>
 800162c:	210d      	movs	r1, #13
 800162e:	4658      	mov	r0, fp
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	f7ff feaf 	bl	8001394 <_Unwind_GetGR>
 8001636:	6a2a      	ldr	r2, [r5, #32]
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	4282      	cmp	r2, r0
 800163c:	d1b7      	bne.n	80015ae <__gnu_unwind_pr_common+0x132>
 800163e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001640:	4590      	cmp	r8, r2
 8001642:	d1b4      	bne.n	80015ae <__gnu_unwind_pr_common+0x132>
 8001644:	2700      	movs	r7, #0
 8001646:	2204      	movs	r2, #4
 8001648:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800164c:	4442      	add	r2, r8
 800164e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001650:	636a      	str	r2, [r5, #52]	@ 0x34
 8001652:	f8d8 2000 	ldr.w	r2, [r8]
 8001656:	42ba      	cmp	r2, r7
 8001658:	db55      	blt.n	8001706 <__gnu_unwind_pr_common+0x28a>
 800165a:	2201      	movs	r2, #1
 800165c:	9202      	str	r2, [sp, #8]
 800165e:	e7aa      	b.n	80015b6 <__gnu_unwind_pr_common+0x13a>
 8001660:	9403      	str	r4, [sp, #12]
 8001662:	f108 0a04 	add.w	sl, r8, #4
 8001666:	2600      	movs	r6, #0
 8001668:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800166c:	461c      	mov	r4, r3
 800166e:	e00d      	b.n	800168c <__gnu_unwind_pr_common+0x210>
 8001670:	4650      	mov	r0, sl
 8001672:	9704      	str	r7, [sp, #16]
 8001674:	f7ff fd76 	bl	8001164 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001678:	2200      	movs	r2, #0
 800167a:	4601      	mov	r1, r0
 800167c:	ab04      	add	r3, sp, #16
 800167e:	4628      	mov	r0, r5
 8001680:	3601      	adds	r6, #1
 8001682:	f10a 0a04 	add.w	sl, sl, #4
 8001686:	f010 ffe7 	bl	8012658 <__cxa_type_match>
 800168a:	b9e0      	cbnz	r0, 80016c6 <__gnu_unwind_pr_common+0x24a>
 800168c:	42a6      	cmp	r6, r4
 800168e:	d1ef      	bne.n	8001670 <__gnu_unwind_pr_common+0x1f4>
 8001690:	210d      	movs	r1, #13
 8001692:	4658      	mov	r0, fp
 8001694:	f7ff fe7e 	bl	8001394 <_Unwind_GetGR>
 8001698:	9b04      	ldr	r3, [sp, #16]
 800169a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800169e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 80016a2:	2006      	movs	r0, #6
 80016a4:	e714      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 80016a6:	4604      	mov	r4, r0
 80016a8:	210d      	movs	r1, #13
 80016aa:	4658      	mov	r0, fp
 80016ac:	f7ff fe72 	bl	8001394 <_Unwind_GetGR>
 80016b0:	9e04      	ldr	r6, [sp, #16]
 80016b2:	6228      	str	r0, [r5, #32]
 80016b4:	2c02      	cmp	r4, #2
 80016b6:	bf04      	itt	eq
 80016b8:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 80016ba:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 80016be:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 80016c2:	2006      	movs	r0, #6
 80016c4:	e704      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 80016c6:	4623      	mov	r3, r4
 80016c8:	f8d8 6000 	ldr.w	r6, [r8]
 80016cc:	9c03      	ldr	r4, [sp, #12]
 80016ce:	e76e      	b.n	80015ae <__gnu_unwind_pr_common+0x132>
 80016d0:	4640      	mov	r0, r8
 80016d2:	f7ff fc7f 	bl	8000fd4 <selfrel_offset31>
 80016d6:	f108 0204 	add.w	r2, r8, #4
 80016da:	4604      	mov	r4, r0
 80016dc:	63aa      	str	r2, [r5, #56]	@ 0x38
 80016de:	4628      	mov	r0, r5
 80016e0:	f011 f818 	bl	8012714 <__cxa_begin_cleanup>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	f43f aef2 	beq.w	80014ce <__gnu_unwind_pr_common+0x52>
 80016ea:	4622      	mov	r2, r4
 80016ec:	210f      	movs	r1, #15
 80016ee:	4658      	mov	r0, fp
 80016f0:	f7ff fe76 	bl	80013e0 <_Unwind_SetGR>
 80016f4:	e741      	b.n	800157a <__gnu_unwind_pr_common+0xfe>
 80016f6:	460c      	mov	r4, r1
 80016f8:	4658      	mov	r0, fp
 80016fa:	210d      	movs	r1, #13
 80016fc:	f7ff fe4a 	bl	8001394 <_Unwind_GetGR>
 8001700:	4626      	mov	r6, r4
 8001702:	6228      	str	r0, [r5, #32]
 8001704:	e7db      	b.n	80016be <__gnu_unwind_pr_common+0x242>
 8001706:	1c58      	adds	r0, r3, #1
 8001708:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800170c:	e781      	b.n	8001612 <__gnu_unwind_pr_common+0x196>
 800170e:	bf00      	nop
 8001710:	080130ed 	.word	0x080130ed

08001714 <__aeabi_unwind_cpp_pr0>:
 8001714:	2300      	movs	r3, #0
 8001716:	e6b1      	b.n	800147c <__gnu_unwind_pr_common>

08001718 <__aeabi_unwind_cpp_pr1>:
 8001718:	2301      	movs	r3, #1
 800171a:	e6af      	b.n	800147c <__gnu_unwind_pr_common>

0800171c <__aeabi_unwind_cpp_pr2>:
 800171c:	2302      	movs	r3, #2
 800171e:	e6ad      	b.n	800147c <__gnu_unwind_pr_common>

08001720 <_Unwind_VRS_Pop>:
 8001720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001724:	4606      	mov	r6, r0
 8001726:	b0c3      	sub	sp, #268	@ 0x10c
 8001728:	4615      	mov	r5, r2
 800172a:	461c      	mov	r4, r3
 800172c:	2904      	cmp	r1, #4
 800172e:	f200 80d1 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001732:	e8df f001 	tbb	[pc, r1]
 8001736:	51ac      	.short	0x51ac
 8001738:	2acf      	.short	0x2acf
 800173a:	03          	.byte	0x03
 800173b:	00          	.byte	0x00
 800173c:	2c00      	cmp	r4, #0
 800173e:	f040 80c9 	bne.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001742:	2a10      	cmp	r2, #16
 8001744:	f200 80c6 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001748:	6803      	ldr	r3, [r0, #0]
 800174a:	06dc      	lsls	r4, r3, #27
 800174c:	f100 80e7 	bmi.w	800191e <_Unwind_VRS_Pop+0x1fe>
 8001750:	af20      	add	r7, sp, #128	@ 0x80
 8001752:	4638      	mov	r0, r7
 8001754:	f000 f9aa 	bl	8001aac <__gnu_Unwind_Save_WMMXC>
 8001758:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800175a:	4639      	mov	r1, r7
 800175c:	2300      	movs	r3, #0
 800175e:	f04f 0c01 	mov.w	ip, #1
 8001762:	fa0c f203 	lsl.w	r2, ip, r3
 8001766:	422a      	tst	r2, r5
 8001768:	4620      	mov	r0, r4
 800176a:	f103 0301 	add.w	r3, r3, #1
 800176e:	d003      	beq.n	8001778 <_Unwind_VRS_Pop+0x58>
 8001770:	f850 2b04 	ldr.w	r2, [r0], #4
 8001774:	600a      	str	r2, [r1, #0]
 8001776:	4604      	mov	r4, r0
 8001778:	2b04      	cmp	r3, #4
 800177a:	f101 0104 	add.w	r1, r1, #4
 800177e:	d1f0      	bne.n	8001762 <_Unwind_VRS_Pop+0x42>
 8001780:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001782:	4638      	mov	r0, r7
 8001784:	f000 f988 	bl	8001a98 <__gnu_Unwind_Restore_WMMXC>
 8001788:	e099      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800178a:	2c03      	cmp	r4, #3
 800178c:	f040 80a2 	bne.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001790:	b294      	uxth	r4, r2
 8001792:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001796:	2b10      	cmp	r3, #16
 8001798:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800179c:	f200 809a 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017a0:	6803      	ldr	r3, [r0, #0]
 80017a2:	071f      	lsls	r7, r3, #28
 80017a4:	f100 80c3 	bmi.w	800192e <_Unwind_VRS_Pop+0x20e>
 80017a8:	af20      	add	r7, sp, #128	@ 0x80
 80017aa:	4638      	mov	r0, r7
 80017ac:	f000 f952 	bl	8001a54 <__gnu_Unwind_Save_WMMXD>
 80017b0:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80017b2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80017b6:	b154      	cbz	r4, 80017ce <_Unwind_VRS_Pop+0xae>
 80017b8:	460b      	mov	r3, r1
 80017ba:	1ad0      	subs	r0, r2, r3
 80017bc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80017c0:	00e4      	lsls	r4, r4, #3
 80017c2:	581d      	ldr	r5, [r3, r0]
 80017c4:	f843 5b04 	str.w	r5, [r3], #4
 80017c8:	428b      	cmp	r3, r1
 80017ca:	d1fa      	bne.n	80017c2 <_Unwind_VRS_Pop+0xa2>
 80017cc:	4422      	add	r2, r4
 80017ce:	63b2      	str	r2, [r6, #56]	@ 0x38
 80017d0:	4638      	mov	r0, r7
 80017d2:	f000 f91d 	bl	8001a10 <__gnu_Unwind_Restore_WMMXD>
 80017d6:	e072      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 80017d8:	2c01      	cmp	r4, #1
 80017da:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80017de:	b295      	uxth	r5, r2
 80017e0:	d071      	beq.n	80018c6 <_Unwind_VRS_Pop+0x1a6>
 80017e2:	2c05      	cmp	r4, #5
 80017e4:	d176      	bne.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017e6:	eb08 0905 	add.w	r9, r8, r5
 80017ea:	f1b9 0f20 	cmp.w	r9, #32
 80017ee:	d871      	bhi.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017f0:	f1b8 0f0f 	cmp.w	r8, #15
 80017f4:	d872      	bhi.n	80018dc <_Unwind_VRS_Pop+0x1bc>
 80017f6:	f1b9 0f10 	cmp.w	r9, #16
 80017fa:	6803      	ldr	r3, [r0, #0]
 80017fc:	f200 809f 	bhi.w	800193e <_Unwind_VRS_Pop+0x21e>
 8001800:	07d9      	lsls	r1, r3, #31
 8001802:	d508      	bpl.n	8001816 <_Unwind_VRS_Pop+0xf6>
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	4630      	mov	r0, r6
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	f840 3b48 	str.w	r3, [r0], #72
 8001812:	f000 f8f1 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 8001816:	af20      	add	r7, sp, #128	@ 0x80
 8001818:	4638      	mov	r0, r7
 800181a:	f000 f8ed 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 800181e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001820:	2d00      	cmp	r5, #0
 8001822:	f000 80b9 	beq.w	8001998 <_Unwind_VRS_Pop+0x278>
 8001826:	006d      	lsls	r5, r5, #1
 8001828:	1e6a      	subs	r2, r5, #1
 800182a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 800182e:	2500      	movs	r5, #0
 8001830:	3201      	adds	r2, #1
 8001832:	3904      	subs	r1, #4
 8001834:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001838:	f853 0b04 	ldr.w	r0, [r3], #4
 800183c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001840:	4293      	cmp	r3, r2
 8001842:	d1f9      	bne.n	8001838 <_Unwind_VRS_Pop+0x118>
 8001844:	2d00      	cmp	r5, #0
 8001846:	f000 80a1 	beq.w	800198c <_Unwind_VRS_Pop+0x26c>
 800184a:	4641      	mov	r1, r8
 800184c:	2910      	cmp	r1, #16
 800184e:	bf38      	it	cc
 8001850:	2110      	movcc	r1, #16
 8001852:	006b      	lsls	r3, r5, #1
 8001854:	3910      	subs	r1, #16
 8001856:	466f      	mov	r7, sp
 8001858:	3b01      	subs	r3, #1
 800185a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800185e:	3301      	adds	r3, #1
 8001860:	3904      	subs	r1, #4
 8001862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001866:	f852 0b04 	ldr.w	r0, [r2], #4
 800186a:	f841 0f04 	str.w	r0, [r1, #4]!
 800186e:	429a      	cmp	r2, r3
 8001870:	d1f9      	bne.n	8001866 <_Unwind_VRS_Pop+0x146>
 8001872:	2c01      	cmp	r4, #1
 8001874:	f000 8088 	beq.w	8001988 <_Unwind_VRS_Pop+0x268>
 8001878:	f1b8 0f0f 	cmp.w	r8, #15
 800187c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800187e:	d802      	bhi.n	8001886 <_Unwind_VRS_Pop+0x166>
 8001880:	a820      	add	r0, sp, #128	@ 0x80
 8001882:	f000 f8b5 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 8001886:	4638      	mov	r0, r7
 8001888:	f000 f8ba 	bl	8001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800188c:	e017      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800188e:	bb0c      	cbnz	r4, 80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001890:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001892:	4623      	mov	r3, r4
 8001894:	fa1f fc82 	uxth.w	ip, r2
 8001898:	2401      	movs	r4, #1
 800189a:	1d37      	adds	r7, r6, #4
 800189c:	fa04 f103 	lsl.w	r1, r4, r3
 80018a0:	ea11 0f0c 	tst.w	r1, ip
 80018a4:	4602      	mov	r2, r0
 80018a6:	d004      	beq.n	80018b2 <_Unwind_VRS_Pop+0x192>
 80018a8:	f852 1b04 	ldr.w	r1, [r2], #4
 80018ac:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 80018b0:	4610      	mov	r0, r2
 80018b2:	3301      	adds	r3, #1
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d1f1      	bne.n	800189c <_Unwind_VRS_Pop+0x17c>
 80018b8:	04ac      	lsls	r4, r5, #18
 80018ba:	d400      	bmi.n	80018be <_Unwind_VRS_Pop+0x19e>
 80018bc:	63b0      	str	r0, [r6, #56]	@ 0x38
 80018be:	2000      	movs	r0, #0
 80018c0:	b043      	add	sp, #268	@ 0x10c
 80018c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018c6:	eb08 0305 	add.w	r3, r8, r5
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d802      	bhi.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80018ce:	f1b8 0f10 	cmp.w	r8, #16
 80018d2:	d114      	bne.n	80018fe <_Unwind_VRS_Pop+0x1de>
 80018d4:	2002      	movs	r0, #2
 80018d6:	b043      	add	sp, #268	@ 0x10c
 80018d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d0ee      	beq.n	80018be <_Unwind_VRS_Pop+0x19e>
 80018e0:	6803      	ldr	r3, [r0, #0]
 80018e2:	075a      	lsls	r2, r3, #29
 80018e4:	d45c      	bmi.n	80019a0 <_Unwind_VRS_Pop+0x280>
 80018e6:	466f      	mov	r7, sp
 80018e8:	4638      	mov	r0, r7
 80018ea:	f000 f88d 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ee:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018f0:	006b      	lsls	r3, r5, #1
 80018f2:	f1a8 0110 	sub.w	r1, r8, #16
 80018f6:	3b01      	subs	r3, #1
 80018f8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018fc:	e7af      	b.n	800185e <_Unwind_VRS_Pop+0x13e>
 80018fe:	6803      	ldr	r3, [r0, #0]
 8001900:	07da      	lsls	r2, r3, #31
 8001902:	d459      	bmi.n	80019b8 <_Unwind_VRS_Pop+0x298>
 8001904:	af20      	add	r7, sp, #128	@ 0x80
 8001906:	4638      	mov	r0, r7
 8001908:	f000 f86e 	bl	80019e8 <__gnu_Unwind_Save_VFP>
 800190c:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800190e:	2d00      	cmp	r5, #0
 8001910:	d189      	bne.n	8001826 <_Unwind_VRS_Pop+0x106>
 8001912:	3304      	adds	r3, #4
 8001914:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001916:	4638      	mov	r0, r7
 8001918:	f000 f862 	bl	80019e0 <__gnu_Unwind_Restore_VFP>
 800191c:	e7cf      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800191e:	f023 0310 	bic.w	r3, r3, #16
 8001922:	6003      	str	r3, [r0, #0]
 8001924:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8001928:	f000 f8c0 	bl	8001aac <__gnu_Unwind_Save_WMMXC>
 800192c:	e710      	b.n	8001750 <_Unwind_VRS_Pop+0x30>
 800192e:	f023 0308 	bic.w	r3, r3, #8
 8001932:	6003      	str	r3, [r0, #0]
 8001934:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8001938:	f000 f88c 	bl	8001a54 <__gnu_Unwind_Save_WMMXD>
 800193c:	e734      	b.n	80017a8 <_Unwind_VRS_Pop+0x88>
 800193e:	07d9      	lsls	r1, r3, #31
 8001940:	d508      	bpl.n	8001954 <_Unwind_VRS_Pop+0x234>
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	f840 3b48 	str.w	r3, [r0], #72
 800194e:	f000 f853 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 8001952:	6833      	ldr	r3, [r6, #0]
 8001954:	0758      	lsls	r0, r3, #29
 8001956:	d506      	bpl.n	8001966 <_Unwind_VRS_Pop+0x246>
 8001958:	4630      	mov	r0, r6
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	f840 3bd0 	str.w	r3, [r0], #208
 8001962:	f000 f851 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001966:	af20      	add	r7, sp, #128	@ 0x80
 8001968:	4638      	mov	r0, r7
 800196a:	f000 f845 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 800196e:	4668      	mov	r0, sp
 8001970:	f000 f84a 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	f1c8 0210 	rsb	r2, r8, #16
 8001978:	0052      	lsls	r2, r2, #1
 800197a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800197c:	f1a9 0510 	sub.w	r5, r9, #16
 8001980:	3a01      	subs	r2, #1
 8001982:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001986:	e753      	b.n	8001830 <_Unwind_VRS_Pop+0x110>
 8001988:	af20      	add	r7, sp, #128	@ 0x80
 800198a:	e7c2      	b.n	8001912 <_Unwind_VRS_Pop+0x1f2>
 800198c:	2c01      	cmp	r4, #1
 800198e:	d0c0      	beq.n	8001912 <_Unwind_VRS_Pop+0x1f2>
 8001990:	f1b8 0f0f 	cmp.w	r8, #15
 8001994:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001996:	d892      	bhi.n	80018be <_Unwind_VRS_Pop+0x19e>
 8001998:	4638      	mov	r0, r7
 800199a:	f000 f829 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 800199e:	e78e      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	f840 3bd0 	str.w	r3, [r0], #208
 80019a8:	466f      	mov	r7, sp
 80019aa:	f000 f82d 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80019ae:	4638      	mov	r0, r7
 80019b0:	f000 f82a 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80019b4:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80019b6:	e79b      	b.n	80018f0 <_Unwind_VRS_Pop+0x1d0>
 80019b8:	4630      	mov	r0, r6
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	f840 3b48 	str.w	r3, [r0], #72
 80019c2:	f000 f811 	bl	80019e8 <__gnu_Unwind_Save_VFP>
 80019c6:	e79d      	b.n	8001904 <_Unwind_VRS_Pop+0x1e4>

080019c8 <__restore_core_regs>:
 80019c8:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 80019cc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80019d0:	469c      	mov	ip, r3
 80019d2:	46a6      	mov	lr, r4
 80019d4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80019d8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80019dc:	46e5      	mov	sp, ip
 80019de:	bd00      	pop	{pc}

080019e0 <__gnu_Unwind_Restore_VFP>:
 80019e0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <__gnu_Unwind_Save_VFP>:
 80019e8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop

080019f0 <__gnu_Unwind_Restore_VFP_D>:
 80019f0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <__gnu_Unwind_Save_VFP_D>:
 80019f8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001a00:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001a08:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <__gnu_Unwind_Restore_WMMXD>:
 8001a10:	ecf0 0102 	ldfe	f0, [r0], #8
 8001a14:	ecf0 1102 	ldfe	f1, [r0], #8
 8001a18:	ecf0 2102 	ldfe	f2, [r0], #8
 8001a1c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001a20:	ecf0 4102 	ldfe	f4, [r0], #8
 8001a24:	ecf0 5102 	ldfe	f5, [r0], #8
 8001a28:	ecf0 6102 	ldfe	f6, [r0], #8
 8001a2c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001a30:	ecf0 8102 	ldfp	f0, [r0], #8
 8001a34:	ecf0 9102 	ldfp	f1, [r0], #8
 8001a38:	ecf0 a102 	ldfp	f2, [r0], #8
 8001a3c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a40:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a44:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a48:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a4c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <__gnu_Unwind_Save_WMMXD>:
 8001a54:	ece0 0102 	stfe	f0, [r0], #8
 8001a58:	ece0 1102 	stfe	f1, [r0], #8
 8001a5c:	ece0 2102 	stfe	f2, [r0], #8
 8001a60:	ece0 3102 	stfe	f3, [r0], #8
 8001a64:	ece0 4102 	stfe	f4, [r0], #8
 8001a68:	ece0 5102 	stfe	f5, [r0], #8
 8001a6c:	ece0 6102 	stfe	f6, [r0], #8
 8001a70:	ece0 7102 	stfe	f7, [r0], #8
 8001a74:	ece0 8102 	stfp	f0, [r0], #8
 8001a78:	ece0 9102 	stfp	f1, [r0], #8
 8001a7c:	ece0 a102 	stfp	f2, [r0], #8
 8001a80:	ece0 b102 	stfp	f3, [r0], #8
 8001a84:	ece0 c102 	stfp	f4, [r0], #8
 8001a88:	ece0 d102 	stfp	f5, [r0], #8
 8001a8c:	ece0 e102 	stfp	f6, [r0], #8
 8001a90:	ece0 f102 	stfp	f7, [r0], #8
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <__gnu_Unwind_Restore_WMMXC>:
 8001a98:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a9c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001aa0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001aa4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <__gnu_Unwind_Save_WMMXC>:
 8001aac:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001ab0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001ab4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001ab8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <_Unwind_RaiseException>:
 8001ac0:	46ec      	mov	ip, sp
 8001ac2:	b500      	push	{lr}
 8001ac4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ac8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ad4:	a901      	add	r1, sp, #4
 8001ad6:	f7ff fbd7 	bl	8001288 <__gnu_Unwind_RaiseException>
 8001ada:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ade:	b012      	add	sp, #72	@ 0x48
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop

08001ae4 <_Unwind_Resume>:
 8001ae4:	46ec      	mov	ip, sp
 8001ae6:	b500      	push	{lr}
 8001ae8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001af8:	a901      	add	r1, sp, #4
 8001afa:	f7ff fc01 	bl	8001300 <__gnu_Unwind_Resume>
 8001afe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b02:	b012      	add	sp, #72	@ 0x48
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <_Unwind_Resume_or_Rethrow>:
 8001b08:	46ec      	mov	ip, sp
 8001b0a:	b500      	push	{lr}
 8001b0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b1c:	a901      	add	r1, sp, #4
 8001b1e:	f7ff fc11 	bl	8001344 <__gnu_Unwind_Resume_or_Rethrow>
 8001b22:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b26:	b012      	add	sp, #72	@ 0x48
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <_Unwind_ForcedUnwind>:
 8001b2c:	46ec      	mov	ip, sp
 8001b2e:	b500      	push	{lr}
 8001b30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b40:	ab01      	add	r3, sp, #4
 8001b42:	f7ff fbd5 	bl	80012f0 <__gnu_Unwind_ForcedUnwind>
 8001b46:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b4a:	b012      	add	sp, #72	@ 0x48
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <_Unwind_Backtrace>:
 8001b50:	46ec      	mov	ip, sp
 8001b52:	b500      	push	{lr}
 8001b54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b64:	aa01      	add	r2, sp, #4
 8001b66:	f7ff fc47 	bl	80013f8 <__gnu_Unwind_Backtrace>
 8001b6a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b6e:	b012      	add	sp, #72	@ 0x48
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <next_unwind_byte>:
 8001b74:	7a02      	ldrb	r2, [r0, #8]
 8001b76:	4603      	mov	r3, r0
 8001b78:	b97a      	cbnz	r2, 8001b9a <next_unwind_byte+0x26>
 8001b7a:	7a42      	ldrb	r2, [r0, #9]
 8001b7c:	b1a2      	cbz	r2, 8001ba8 <next_unwind_byte+0x34>
 8001b7e:	6841      	ldr	r1, [r0, #4]
 8001b80:	3a01      	subs	r2, #1
 8001b82:	b410      	push	{r4}
 8001b84:	7242      	strb	r2, [r0, #9]
 8001b86:	6808      	ldr	r0, [r1, #0]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	1d0c      	adds	r4, r1, #4
 8001b8c:	721a      	strb	r2, [r3, #8]
 8001b8e:	0202      	lsls	r2, r0, #8
 8001b90:	605c      	str	r4, [r3, #4]
 8001b92:	0e00      	lsrs	r0, r0, #24
 8001b94:	bc10      	pop	{r4}
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	4770      	bx	lr
 8001b9a:	6800      	ldr	r0, [r0, #0]
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	721a      	strb	r2, [r3, #8]
 8001ba0:	0202      	lsls	r2, r0, #8
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	0e00      	lsrs	r0, r0, #24
 8001ba6:	4770      	bx	lr
 8001ba8:	20b0      	movs	r0, #176	@ 0xb0
 8001baa:	4770      	bx	lr

08001bac <_Unwind_GetGR.constprop.0>:
 8001bac:	b500      	push	{lr}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	aa03      	add	r2, sp, #12
 8001bb4:	9200      	str	r2, [sp, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	220c      	movs	r2, #12
 8001bba:	f7ff fbd3 	bl	8001364 <_Unwind_VRS_Get>
 8001bbe:	9803      	ldr	r0, [sp, #12]
 8001bc0:	b005      	add	sp, #20
 8001bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc6:	bf00      	nop

08001bc8 <unwind_UCB_from_context>:
 8001bc8:	e7f0      	b.n	8001bac <_Unwind_GetGR.constprop.0>
 8001bca:	bf00      	nop

08001bcc <__gnu_unwind_execute>:
 8001bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bd0:	4606      	mov	r6, r0
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	460d      	mov	r5, r1
 8001bd6:	f04f 0800 	mov.w	r8, #0
 8001bda:	4628      	mov	r0, r5
 8001bdc:	f7ff ffca 	bl	8001b74 <next_unwind_byte>
 8001be0:	28b0      	cmp	r0, #176	@ 0xb0
 8001be2:	4604      	mov	r4, r0
 8001be4:	f000 80da 	beq.w	8001d9c <__gnu_unwind_execute+0x1d0>
 8001be8:	0607      	lsls	r7, r0, #24
 8001bea:	d546      	bpl.n	8001c7a <__gnu_unwind_execute+0xae>
 8001bec:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bf0:	2b80      	cmp	r3, #128	@ 0x80
 8001bf2:	d05e      	beq.n	8001cb2 <__gnu_unwind_execute+0xe6>
 8001bf4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bf6:	d073      	beq.n	8001ce0 <__gnu_unwind_execute+0x114>
 8001bf8:	d81b      	bhi.n	8001c32 <__gnu_unwind_execute+0x66>
 8001bfa:	2b90      	cmp	r3, #144	@ 0x90
 8001bfc:	f000 809b 	beq.w	8001d36 <__gnu_unwind_execute+0x16a>
 8001c00:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c02:	d112      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c04:	43c3      	mvns	r3, r0
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001c0e:	411a      	asrs	r2, r3
 8001c10:	0701      	lsls	r1, r0, #28
 8001c12:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001c16:	d501      	bpl.n	8001c1c <__gnu_unwind_execute+0x50>
 8001c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4630      	mov	r0, r6
 8001c22:	f7ff fd7d 	bl	8001720 <_Unwind_VRS_Pop>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d0d7      	beq.n	8001bda <__gnu_unwind_execute+0xe>
 8001c2a:	2009      	movs	r0, #9
 8001c2c:	b005      	add	sp, #20
 8001c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c34:	d16d      	bne.n	8001d12 <__gnu_unwind_execute+0x146>
 8001c36:	28c6      	cmp	r0, #198	@ 0xc6
 8001c38:	f000 8093 	beq.w	8001d62 <__gnu_unwind_execute+0x196>
 8001c3c:	28c7      	cmp	r0, #199	@ 0xc7
 8001c3e:	f000 80b2 	beq.w	8001da6 <__gnu_unwind_execute+0x1da>
 8001c42:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c48:	f000 80d2 	beq.w	8001df0 <__gnu_unwind_execute+0x224>
 8001c4c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c4e:	f000 80dd 	beq.w	8001e0c <__gnu_unwind_execute+0x240>
 8001c52:	28c9      	cmp	r0, #201	@ 0xc9
 8001c54:	d1e9      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c56:	4628      	mov	r0, r5
 8001c58:	f7ff ff8c 	bl	8001b74 <next_unwind_byte>
 8001c5c:	0302      	lsls	r2, r0, #12
 8001c5e:	f000 000f 	and.w	r0, r0, #15
 8001c62:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c66:	3001      	adds	r0, #1
 8001c68:	4302      	orrs	r2, r0
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff fd56 	bl	8001720 <_Unwind_VRS_Pop>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	d0b0      	beq.n	8001bda <__gnu_unwind_execute+0xe>
 8001c78:	e7d7      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c7a:	0083      	lsls	r3, r0, #2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	1d1f      	adds	r7, r3, #4
 8001c80:	f10d 090c 	add.w	r9, sp, #12
 8001c84:	2300      	movs	r3, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	f8cd 9000 	str.w	r9, [sp]
 8001c8c:	220d      	movs	r2, #13
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f7ff fb68 	bl	8001364 <_Unwind_VRS_Get>
 8001c94:	9b03      	ldr	r3, [sp, #12]
 8001c96:	f8cd 9000 	str.w	r9, [sp]
 8001c9a:	0660      	lsls	r0, r4, #25
 8001c9c:	bf4c      	ite	mi
 8001c9e:	1bdf      	submi	r7, r3, r7
 8001ca0:	18ff      	addpl	r7, r7, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	220d      	movs	r2, #13
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4630      	mov	r0, r6
 8001caa:	9703      	str	r7, [sp, #12]
 8001cac:	f7ff fb80 	bl	80013b0 <_Unwind_VRS_Set>
 8001cb0:	e793      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f7ff ff5e 	bl	8001b74 <next_unwind_byte>
 8001cb8:	0224      	lsls	r4, r4, #8
 8001cba:	4320      	orrs	r0, r4
 8001cbc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001cc0:	d0b3      	beq.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cc2:	0104      	lsls	r4, r0, #4
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	b2a2      	uxth	r2, r4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff fd28 	bl	8001720 <_Unwind_VRS_Pop>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d1aa      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cd4:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001cd8:	bf18      	it	ne
 8001cda:	f04f 0801 	movne.w	r8, #1
 8001cde:	e77c      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001ce0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ce2:	d051      	beq.n	8001d88 <__gnu_unwind_execute+0x1bc>
 8001ce4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ce6:	f000 80ad 	beq.w	8001e44 <__gnu_unwind_execute+0x278>
 8001cea:	28b3      	cmp	r0, #179	@ 0xb3
 8001cec:	d06d      	beq.n	8001dca <__gnu_unwind_execute+0x1fe>
 8001cee:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cf2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cf4:	d099      	beq.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 0207 	and.w	r2, r0, #7
 8001cfa:	3201      	adds	r2, #1
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001d02:	4619      	mov	r1, r3
 8001d04:	4630      	mov	r0, r6
 8001d06:	f7ff fd0b 	bl	8001720 <_Unwind_VRS_Pop>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	f43f af65 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d10:	e78b      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d12:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001d16:	2bd0      	cmp	r3, #208	@ 0xd0
 8001d18:	d187      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d1a:	f000 0207 	and.w	r2, r0, #7
 8001d1e:	3201      	adds	r2, #1
 8001d20:	2305      	movs	r3, #5
 8001d22:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001d26:	2101      	movs	r1, #1
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f7ff fcf9 	bl	8001720 <_Unwind_VRS_Pop>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	f43f af53 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d34:	e779      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d36:	f000 030d 	and.w	r3, r0, #13
 8001d3a:	2b0d      	cmp	r3, #13
 8001d3c:	f43f af75 	beq.w	8001c2a <__gnu_unwind_execute+0x5e>
 8001d40:	af03      	add	r7, sp, #12
 8001d42:	2300      	movs	r3, #0
 8001d44:	f000 020f 	and.w	r2, r0, #15
 8001d48:	4619      	mov	r1, r3
 8001d4a:	9700      	str	r7, [sp, #0]
 8001d4c:	4630      	mov	r0, r6
 8001d4e:	f7ff fb09 	bl	8001364 <_Unwind_VRS_Get>
 8001d52:	2300      	movs	r3, #0
 8001d54:	9700      	str	r7, [sp, #0]
 8001d56:	220d      	movs	r2, #13
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f7ff fb28 	bl	80013b0 <_Unwind_VRS_Set>
 8001d60:	e73b      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff ff06 	bl	8001b74 <next_unwind_byte>
 8001d68:	0302      	lsls	r2, r0, #12
 8001d6a:	f000 000f 	and.w	r0, r0, #15
 8001d6e:	3001      	adds	r0, #1
 8001d70:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d74:	2303      	movs	r3, #3
 8001d76:	4302      	orrs	r2, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f7ff fcd0 	bl	8001720 <_Unwind_VRS_Pop>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	f43f af2a 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d86:	e750      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f7ff fef3 	bl	8001b74 <next_unwind_byte>
 8001d8e:	1e43      	subs	r3, r0, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b0e      	cmp	r3, #14
 8001d94:	4602      	mov	r2, r0
 8001d96:	f67f af41 	bls.w	8001c1c <__gnu_unwind_execute+0x50>
 8001d9a:	e746      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d9c:	f1b8 0f00 	cmp.w	r8, #0
 8001da0:	d040      	beq.n	8001e24 <__gnu_unwind_execute+0x258>
 8001da2:	2000      	movs	r0, #0
 8001da4:	e742      	b.n	8001c2c <__gnu_unwind_execute+0x60>
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7ff fee4 	bl	8001b74 <next_unwind_byte>
 8001dac:	1e43      	subs	r3, r0, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b0e      	cmp	r3, #14
 8001db2:	4602      	mov	r2, r0
 8001db4:	f63f af39 	bhi.w	8001c2a <__gnu_unwind_execute+0x5e>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2104      	movs	r1, #4
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	f7ff fcaf 	bl	8001720 <_Unwind_VRS_Pop>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	f43f af09 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001dc8:	e72f      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7ff fed2 	bl	8001b74 <next_unwind_byte>
 8001dd0:	0302      	lsls	r2, r0, #12
 8001dd2:	f000 000f 	and.w	r0, r0, #15
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001ddc:	2301      	movs	r3, #1
 8001dde:	4302      	orrs	r2, r0
 8001de0:	4619      	mov	r1, r3
 8001de2:	4630      	mov	r0, r6
 8001de4:	f7ff fc9c 	bl	8001720 <_Unwind_VRS_Pop>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	f43f aef6 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001dee:	e71c      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001df0:	f000 020f 	and.w	r2, r0, #15
 8001df4:	3201      	adds	r2, #1
 8001df6:	2303      	movs	r3, #3
 8001df8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f7ff fc8e 	bl	8001720 <_Unwind_VRS_Pop>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	f43f aee8 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001e0a:	e70e      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7ff feb1 	bl	8001b74 <next_unwind_byte>
 8001e12:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001e16:	f000 030f 	and.w	r3, r0, #15
 8001e1a:	3210      	adds	r2, #16
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001e22:	e722      	b.n	8001c6a <__gnu_unwind_execute+0x9e>
 8001e24:	ac03      	add	r4, sp, #12
 8001e26:	4643      	mov	r3, r8
 8001e28:	4641      	mov	r1, r8
 8001e2a:	220e      	movs	r2, #14
 8001e2c:	9400      	str	r4, [sp, #0]
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff fa98 	bl	8001364 <_Unwind_VRS_Get>
 8001e34:	9400      	str	r4, [sp, #0]
 8001e36:	4643      	mov	r3, r8
 8001e38:	220f      	movs	r2, #15
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	f7ff fab7 	bl	80013b0 <_Unwind_VRS_Set>
 8001e42:	e7ae      	b.n	8001da2 <__gnu_unwind_execute+0x1d6>
 8001e44:	2300      	movs	r3, #0
 8001e46:	f10d 090c 	add.w	r9, sp, #12
 8001e4a:	220d      	movs	r2, #13
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	4630      	mov	r0, r6
 8001e54:	f7ff fa86 	bl	8001364 <_Unwind_VRS_Get>
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f7ff fe8b 	bl	8001b74 <next_unwind_byte>
 8001e5e:	0602      	lsls	r2, r0, #24
 8001e60:	9c03      	ldr	r4, [sp, #12]
 8001e62:	f04f 0702 	mov.w	r7, #2
 8001e66:	d50b      	bpl.n	8001e80 <__gnu_unwind_execute+0x2b4>
 8001e68:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e6c:	40b8      	lsls	r0, r7
 8001e6e:	4404      	add	r4, r0
 8001e70:	4628      	mov	r0, r5
 8001e72:	9403      	str	r4, [sp, #12]
 8001e74:	f7ff fe7e 	bl	8001b74 <next_unwind_byte>
 8001e78:	0603      	lsls	r3, r0, #24
 8001e7a:	f107 0707 	add.w	r7, r7, #7
 8001e7e:	d4f3      	bmi.n	8001e68 <__gnu_unwind_execute+0x29c>
 8001e80:	fa00 f207 	lsl.w	r2, r0, r7
 8001e84:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e88:	4422      	add	r2, r4
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9203      	str	r2, [sp, #12]
 8001e8e:	f8cd 9000 	str.w	r9, [sp]
 8001e92:	220d      	movs	r2, #13
 8001e94:	4619      	mov	r1, r3
 8001e96:	4630      	mov	r0, r6
 8001e98:	f7ff fa8a 	bl	80013b0 <_Unwind_VRS_Set>
 8001e9c:	e69d      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001e9e:	bf00      	nop

08001ea0 <__gnu_unwind_frame>:
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001ea4:	6853      	ldr	r3, [r2, #4]
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	f04f 0c03 	mov.w	ip, #3
 8001eac:	3208      	adds	r2, #8
 8001eae:	021c      	lsls	r4, r3, #8
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	0e1b      	lsrs	r3, r3, #24
 8001eb4:	a901      	add	r1, sp, #4
 8001eb6:	9401      	str	r4, [sp, #4]
 8001eb8:	9202      	str	r2, [sp, #8]
 8001eba:	f88d c00c 	strb.w	ip, [sp, #12]
 8001ebe:	f88d 300d 	strb.w	r3, [sp, #13]
 8001ec2:	f7ff fe83 	bl	8001bcc <__gnu_unwind_execute>
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop

08001ecc <_Unwind_GetRegionStart>:
 8001ecc:	b508      	push	{r3, lr}
 8001ece:	f7ff fe7b 	bl	8001bc8 <unwind_UCB_from_context>
 8001ed2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001ed4:	bd08      	pop	{r3, pc}
 8001ed6:	bf00      	nop

08001ed8 <_Unwind_GetLanguageSpecificData>:
 8001ed8:	b508      	push	{r3, lr}
 8001eda:	f7ff fe75 	bl	8001bc8 <unwind_UCB_from_context>
 8001ede:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ee0:	79c3      	ldrb	r3, [r0, #7]
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ee8:	bd08      	pop	{r3, pc}
 8001eea:	bf00      	nop

08001eec <__aeabi_idiv0>:
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f0e:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001f10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f12:	2201      	movs	r2, #1
 8001f14:	4619      	mov	r1, r3
 8001f16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f18:	f00c fd48 	bl	800e9ac <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001f1c:	4b69      	ldr	r3, [pc, #420]	@ (80020c4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d126      	bne.n	8001f72 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f24:	2008      	movs	r0, #8
 8001f26:	f010 ff46 	bl	8012db6 <_Znaj>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e018      	b.n	8001f6a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f38:	206c      	movs	r0, #108	@ 0x6c
 8001f3a:	f010 ff2b 	bl	8012d94 <_Znwj>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461c      	mov	r4, r3
 8001f42:	2501      	movs	r5, #1
 8001f44:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 fb98 	bl	8002688 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	dde3      	ble.n	8001f38 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f70:	e063      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f72:	4b55      	ldr	r3, [pc, #340]	@ (80020c8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d126      	bne.n	8001fc8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f7a:	2008      	movs	r0, #8
 8001f7c:	f010 ff1b 	bl	8012db6 <_Znaj>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	e018      	b.n	8001fc0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f8e:	206c      	movs	r0, #108	@ 0x6c
 8001f90:	f010 ff00 	bl	8012d94 <_Znwj>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461c      	mov	r4, r3
 8001f98:	2501      	movs	r5, #1
 8001f9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f000 fbdf 	bl	800276c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	dde3      	ble.n	8001f8e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001fc6:	e038      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001fc8:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1dc>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d126      	bne.n	800201e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12e>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001fd0:	2008      	movs	r0, #8
 8001fd2:	f010 fef0 	bl	8012db6 <_Znaj>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e018      	b.n	8002016 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fe4:	206c      	movs	r0, #108	@ 0x6c
 8001fe6:	f010 fed5 	bl	8012d94 <_Znwj>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461c      	mov	r4, r3
 8001fee:	2501      	movs	r5, #1
 8001ff0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ffe:	4620      	mov	r0, r4
 8002000:	f000 fc26 	bl	8002850 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b01      	cmp	r3, #1
 800201a:	dde3      	ble.n	8001fe4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>
 800201c:	e00d      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else
	    {
	    	throw std::runtime_error("Cannot create more than 3 shields");
 800201e:	2008      	movs	r0, #8
 8002020:	f010 fabc 	bl	801259c <__cxa_allocate_exception>
 8002024:	4603      	mov	r3, r0
 8002026:	461c      	mov	r4, r3
 8002028:	4929      	ldr	r1, [pc, #164]	@ (80020d0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e0>)
 800202a:	4620      	mov	r0, r4
 800202c:	f010 ffb6 	bl	8012f9c <_ZNSt13runtime_errorC1EPKc>
 8002030:	4a28      	ldr	r2, [pc, #160]	@ (80020d4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e4>)
 8002032:	4929      	ldr	r1, [pc, #164]	@ (80020d8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e8>)
 8002034:	4620      	mov	r0, r4
 8002036:	f010 fe93 	bl	8012d60 <__cxa_throw>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f84a 	bl	80020e0 <_ZNK14XNucleoIHM02A14initEv>
 800204c:	4603      	mov	r3, r0
 800204e:	f083 0301 	eor.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>
	        /*Do nothing*/
	    	throw std::runtime_error("init failed");
 8002058:	2008      	movs	r0, #8
 800205a:	f010 fa9f 	bl	801259c <__cxa_allocate_exception>
 800205e:	4603      	mov	r3, r0
 8002060:	461c      	mov	r4, r3
 8002062:	491e      	ldr	r1, [pc, #120]	@ (80020dc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1ec>)
 8002064:	4620      	mov	r0, r4
 8002066:	f010 ff99 	bl	8012f9c <_ZNSt13runtime_errorC1EPKc>
 800206a:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e4>)
 800206c:	491a      	ldr	r1, [pc, #104]	@ (80020d8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e8>)
 800206e:	4620      	mov	r0, r4
 8002070:	f010 fe76 	bl	8012d60 <__cxa_throw>
	    }
	}
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	e021      	b.n	80020bc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1cc>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002078:	2d00      	cmp	r5, #0
 800207a:	d003      	beq.n	8002084 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x194>
 800207c:	216c      	movs	r1, #108	@ 0x6c
 800207e:	4620      	mov	r0, r4
 8002080:	f010 fa30 	bl	80124e4 <_ZdlPvj>
 8002084:	f010 fac4 	bl	8012610 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002088:	2d00      	cmp	r5, #0
 800208a:	d003      	beq.n	8002094 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1a4>
 800208c:	216c      	movs	r1, #108	@ 0x6c
 800208e:	4620      	mov	r0, r4
 8002090:	f010 fa28 	bl	80124e4 <_ZdlPvj>
 8002094:	f010 fabc 	bl	8012610 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002098:	2d00      	cmp	r5, #0
 800209a:	d003      	beq.n	80020a4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1b4>
 800209c:	216c      	movs	r1, #108	@ 0x6c
 800209e:	4620      	mov	r0, r4
 80020a0:	f010 fa20 	bl	80124e4 <_ZdlPvj>
 80020a4:	f010 fab4 	bl	8012610 <__cxa_end_cleanup>
	    	throw std::runtime_error("Cannot create more than 3 shields");
 80020a8:	4620      	mov	r0, r4
 80020aa:	f010 fa8d 	bl	80125c8 <__cxa_free_exception>
 80020ae:	f010 faaf 	bl	8012610 <__cxa_end_cleanup>
	    	throw std::runtime_error("init failed");
 80020b2:	4620      	mov	r0, r4
 80020b4:	f010 fa88 	bl	80125c8 <__cxa_free_exception>
 80020b8:	f010 faaa 	bl	8012610 <__cxa_end_cleanup>
	}
 80020bc:	4618      	mov	r0, r3
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	200002b0 	.word	0x200002b0
 80020c8:	200002b1 	.word	0x200002b1
 80020cc:	200002b2 	.word	0x200002b2
 80020d0:	08016ed8 	.word	0x08016ed8
 80020d4:	08012ef5 	.word	0x08012ef5
 80020d8:	080184ac 	.word	0x080184ac
 80020dc:	08016efc 	.word	0x08016efc

080020e0 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6998      	ldr	r0, [r3, #24]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8b9b      	ldrh	r3, [r3, #28]
 80020f0:	2200      	movs	r2, #0
 80020f2:	4619      	mov	r1, r3
 80020f4:	f00c fc5a 	bl	800e9ac <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f00c f8fb 	bl	800e2f4 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6998      	ldr	r0, [r3, #24]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8b9b      	ldrh	r3, [r3, #28]
 8002106:	2201      	movs	r2, #1
 8002108:	4619      	mov	r1, r3
 800210a:	f00c fc4f 	bl	800e9ac <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 800210e:	2001      	movs	r0, #1
 8002110:	f00c f8f0 	bl	800e2f4 <HAL_Delay>



        return init_all_motor_drivers();
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f892 	bl	800223e <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 800211a:	4603      	mov	r3, r0
    }
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
    }
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e040      	b.n	80021cc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4608      	mov	r0, r1
 800216c:	4798      	blx	r3
 800216e:	4603      	mov	r3, r0
 8002170:	2b09      	cmp	r3, #9
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d023      	beq.n	80021c6 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	681d      	ldr	r5, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	33cc      	adds	r3, #204	@ 0xcc
 800219a:	681c      	ldr	r4, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	6819      	ldr	r1, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4608      	mov	r0, r1
 80021bc:	4798      	blx	r3
 80021be:	4603      	mov	r3, r0
 80021c0:	4619      	mov	r1, r3
 80021c2:	4628      	mov	r0, r5
 80021c4:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	ddbb      	ble.n	800214a <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4610      	mov	r0, r2
 80021e8:	4798      	blx	r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e01b      	b.n	800222c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68f9      	ldr	r1, [r7, #12]
 8002216:	4798      	blx	r3
 8002218:	4603      	mov	r3, r0
 800221a:	4619      	mov	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	3204      	adds	r2, #4
 8002222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	3301      	adds	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	dde0      	ble.n	80021f4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3310      	adds	r3, #16
    }
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bdb0      	pop	{r4, r5, r7, pc}

0800223e <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e022      	b.n	8002292 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3308      	adds	r3, #8
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68f9      	ldr	r1, [r7, #12]
 800226e:	3102      	adds	r1, #2
 8002270:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002274:	4611      	mov	r1, r2
 8002276:	4798      	blx	r3
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf14      	ite	ne
 800227e:	2301      	movne	r3, #1
 8002280:	2300      	moveq	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 8002288:	2300      	movs	r3, #0
 800228a:	e006      	b.n	800229a <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	ddd9      	ble.n	800224c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 8002298:	2301      	movs	r3, #1

    }
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af04      	add	r7, sp, #16
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a44      	ldr	r2, [pc, #272]	@ (80023c8 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 80022b6:	3318      	adds	r3, #24
 80022b8:	4611      	mov	r1, r2
 80022ba:	22b0      	movs	r2, #176	@ 0xb0
 80022bc:	4618      	mov	r0, r3
 80022be:	f013 f868 	bl	8015392 <memcpy>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4a40      	ldr	r2, [pc, #256]	@ (80023c8 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 80022c6:	33c8      	adds	r3, #200	@ 0xc8
 80022c8:	4611      	mov	r1, r2
 80022ca:	22b0      	movs	r2, #176	@ 0xb0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f013 f860 	bl	8015392 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80022de:	605a      	str	r2, [r3, #4]

    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 80022e0:	2020      	movs	r0, #32
 80022e2:	f010 fd57 	bl	8012d94 <_Znwj>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461c      	mov	r4, r3
 80022ea:	2501      	movs	r5, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f103 0118 	add.w	r1, r3, #24
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80022f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80022fa:	9303      	str	r3, [sp, #12]
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4620      	mov	r0, r4
 800230c:	f7ff fdf0 	bl	8001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	609c      	str	r4, [r3, #8]
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002314:	2020      	movs	r0, #32
 8002316:	f010 fd3d 	bl	8012d94 <_Znwj>
 800231a:	4603      	mov	r3, r0
 800231c:	461c      	mov	r4, r3
 800231e:	2501      	movs	r5, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f103 0118 	add.w	r1, r3, #24
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800232c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800232e:	9303      	str	r3, [sp, #12]
 8002330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002332:	9302      	str	r3, [sp, #8]
 8002334:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff fdd6 	bl	8001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	60dc      	str	r4, [r3, #12]
    abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fee9 	bl	8002124 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 8002352:	6178      	str	r0, [r7, #20]
    abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fee3 	bl	8002124 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 800235e:	6138      	str	r0, [r7, #16]
    moteurs = new abstractL6470*[NMOTEURS];
 8002360:	2010      	movs	r0, #16
 8002362:	f010 fd28 	bl	8012db6 <_Znaj>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	611a      	str	r2, [r3, #16]

	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		moteurs[front_left] = moteurs_shield_1[left];
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	601a      	str	r2, [r3, #0]
		moteurs[front_right] = moteurs_shield_1[right];
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	3304      	adds	r3, #4
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	6852      	ldr	r2, [r2, #4]
 8002382:	601a      	str	r2, [r3, #0]
		moteurs[back_left] = moteurs_shield_2[left];
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	3308      	adds	r3, #8
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_2[right];
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	330c      	adds	r3, #12
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	6852      	ldr	r2, [r2, #4]
 800239a:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_1[right];
	#endif



}
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	e00f      	b.n	80023c0 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x11c>
    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 80023a0:	2d00      	cmp	r5, #0
 80023a2:	d003      	beq.n	80023ac <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x108>
 80023a4:	2120      	movs	r1, #32
 80023a6:	4620      	mov	r0, r4
 80023a8:	f010 f89c 	bl	80124e4 <_ZdlPvj>
 80023ac:	f010 f930 	bl	8012610 <__cxa_end_cleanup>
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d003      	beq.n	80023bc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>
 80023b4:	2120      	movs	r1, #32
 80023b6:	4620      	mov	r0, r4
 80023b8:	f010 f894 	bl	80124e4 <_ZdlPvj>
 80023bc:	f010 f928 	bl	8012610 <__cxa_end_cleanup>
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bdb0      	pop	{r4, r5, r7, pc}
 80023c8:	08016f08 	.word	0x08016f08

080023cc <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 80023d8:	edd7 7a00 	vldr	s15, [r7]
 80023dc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80023f8 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 80023e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023e4:	eef0 7a66 	vmov.f32	s15, s13
}
 80023e8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	3d00adfd 	.word	0x3d00adfd

080023fc <_ZN11BlocMoteurs19commande_step_indivEjN12StepperMotor11direction_tEjS1_jS1_jS1_>:
  * @param  dir_FR direction du moteur avant droite, FWD:sens trigo BWD: sens horaire
  * @param  dir_BL direction du moteur arriere gauche, FWD:sens trigo BWD: sens horaire
  * @param  dir_BR direction du moteur arriere droite, FWD:sens trigo BWD: sens horaire
  */
void BlocMoteurs::commande_step_indiv(unsigned int number_of_step_FL, direction_t dir_FL ,unsigned int number_of_step_FR, direction_t dir_FR,unsigned int number_of_step_BL,  direction_t dir_BL,unsigned int number_of_step_BR, direction_t dir_BR)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	71fb      	strb	r3, [r7, #7]
	set_step_moteur(number_of_step_FL, dir_FL, id_moteurs::front_left);
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	2300      	movs	r3, #0
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f822 	bl	800245c <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_FR, dir_FR, id_moteurs::front_right);
 8002418:	7e3a      	ldrb	r2, [r7, #24]
 800241a:	2301      	movs	r3, #1
 800241c:	6839      	ldr	r1, [r7, #0]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f81c 	bl	800245c <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_BL, dir_BL, id_moteurs::back_left);
 8002424:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002428:	2302      	movs	r3, #2
 800242a:	69f9      	ldr	r1, [r7, #28]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f815 	bl	800245c <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_BR, dir_BR, id_moteurs::back_right);
 8002432:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002436:	2303      	movs	r3, #3
 8002438:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f80e 	bl	800245c <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fe79 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fe74 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param step , nombre de step
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_step_moteur(unsigned int steps, StepperMotor::direction_t dir, id_moteurs id)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	460b      	mov	r3, r1
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	4613      	mov	r3, r2
 8002470:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4c>
    {
        moteurs[id]->prepare_move(dir, steps);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	79bb      	ldrb	r3, [r7, #6]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	79bb      	ldrb	r3, [r7, #6]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	79f9      	ldrb	r1, [r7, #7]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 80024a6:	e011      	b.n	80024cc <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x70>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	79bb      	ldrb	r3, [r7, #6]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	79bb      	ldrb	r3, [r7, #6]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4798      	blx	r3
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    initShield1[1].step_sel = step_mode;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    initShield2[0].step_sel = step_mode;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    initShield2[0].step_sel = step_mode;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    bool return_value = true;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	e01c      	b.n	8002544 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3354      	adds	r3, #84	@ 0x54
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	4611      	mov	r1, r2
 800252c:	4798      	blx	r3
 800252e:	4603      	mov	r3, r0
 8002530:	f083 0301 	eor.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3301      	adds	r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b03      	cmp	r3, #3
 8002548:	dddf      	ble.n	800250a <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 800254a:	7bfb      	ldrb	r3, [r7, #15]

}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <_ZN11BlocMoteurs16motors_stop_hardEv>:
  * Le passage a la vitesse a zero ne respecte pas les parametre de deceleration maximale du robot
  * et se realise au mieux des capacites du driver
  * (contrairement a la methode motors_stop_soft)
  */
void BlocMoteurs::motors_stop_hard()
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e014      	b.n	80025a6 <_ZN11BlocMoteurs16motors_stop_hardEv+0x38>
	{
		moteurs[i]->prepare_hard_stop();
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	6819      	ldr	r1, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4608      	mov	r0, r1
 800259e:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	dde7      	ble.n	800257c <_ZN11BlocMoteurs16motors_stop_hardEv+0xe>
	}
    shield_1->perform_prepared_actions();
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fdc3 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fdbe 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZN11BlocMoteurs21set_max_speed_moteursEf>:
  * @brief  Set la vitesse maximale des moteurs
  *
  * @param  radian_par_seconde la valeur maximale de vitesse angulaire en rad/s
  */
void BlocMoteurs::set_max_speed_moteurs(float radian_par_seconde)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	ed87 0a00 	vstr	s0, [r7]
	unsigned int pps = rad_to_step(radian_par_seconde);
 80025da:	ed97 0a00 	vldr	s0, [r7]
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff fef4 	bl	80023cc <_ZN11BlocMoteurs11rad_to_stepEf>
 80025e4:	eef0 7a40 	vmov.f32	s15, s0
 80025e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
 80025f0:	60bb      	str	r3, [r7, #8]
	for( int i = 0; i < NMOTEURS; i ++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	e013      	b.n	8002620 <_ZN11BlocMoteurs21set_max_speed_moteursEf+0x52>
	{
		moteurs[i]->prepare_set_max_speed(pps);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	33d4      	adds	r3, #212	@ 0xd4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b03      	cmp	r3, #3
 8002624:	dde8      	ble.n	80025f8 <_ZN11BlocMoteurs21set_max_speed_moteursEf+0x2a>
	}
    shield_1->perform_prepared_actions();
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fd86 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fd81 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
	initShield1[0].maxspeed = pps;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	initShield1[1].maxspeed = pps;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	ee07 3a90 	vmov	s15, r3
 8002650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	initShield2[0].maxspeed = pps;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
	initShield2[1].maxspeed = pps;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
	max_vitesse = pps;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	605a      	str	r2, [r3, #4]
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	80fb      	strh	r3, [r7, #6]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4618      	mov	r0, r3
 800269c:	f00a f982 	bl	800c9a4 <_ZN13abstractL6470C1Ev>
 80026a0:	4a27      	ldr	r2, [pc, #156]	@ (8002740 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	819a      	strh	r2, [r3, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	611a      	str	r2, [r3, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8b3a      	ldrh	r2, [r7, #24]
 80026bc:	829a      	strh	r2, [r3, #20]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 80026ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80026d4:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002748 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80026da:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a1b      	ldr	r2, [pc, #108]	@ (800274c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002750 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80026e6:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002754 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80026ec:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002700:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	b2d1      	uxtb	r1, r2
 8002708:	4a13      	ldr	r2, [pc, #76]	@ (8002758 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 800270a:	7011      	strb	r1, [r2, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002716:	2220      	movs	r2, #32
 8002718:	2100      	movs	r1, #0
 800271a:	4811      	ldr	r0, [pc, #68]	@ (8002760 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 800271c:	f012 fd65 	bl	80151ea <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002720:	2208      	movs	r2, #8
 8002722:	2100      	movs	r1, #0
 8002724:	480f      	ldr	r0, [pc, #60]	@ (8002764 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002726:	f012 fd60 	bl	80151ea <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800272a:	2208      	movs	r2, #8
 800272c:	2100      	movs	r1, #0
 800272e:	480e      	ldr	r0, [pc, #56]	@ (8002768 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002730:	f012 fd5b 	bl	80151ea <memset>
    }
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	08017498 	.word	0x08017498
 8002744:	200002b0 	.word	0x200002b0
 8002748:	0801775c 	.word	0x0801775c
 800274c:	08017950 	.word	0x08017950
 8002750:	08017a5c 	.word	0x08017a5c
 8002754:	08017a70 	.word	0x08017a70
 8002758:	20000214 	.word	0x20000214
 800275c:	20000215 	.word	0x20000215
 8002760:	20000218 	.word	0x20000218
 8002764:	20000238 	.word	0x20000238
 8002768:	20000240 	.word	0x20000240

0800276c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	80fb      	strh	r3, [r7, #6]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4618      	mov	r0, r3
 8002780:	f00a f910 	bl	800c9a4 <_ZN13abstractL6470C1Ev>
 8002784:	4a27      	ldr	r2, [pc, #156]	@ (8002824 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	88fa      	ldrh	r2, [r7, #6]
 8002794:	819a      	strh	r2, [r3, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	611a      	str	r2, [r3, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8b3a      	ldrh	r2, [r7, #24]
 80027a0:	829a      	strh	r2, [r3, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2202      	movs	r2, #2
 80027ac:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80027b8:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80027be:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002834 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80027ca:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002838 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 80027e4:	4b15      	ldr	r3, [pc, #84]	@ (800283c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	b2d1      	uxtb	r1, r2
 80027ec:	4a13      	ldr	r2, [pc, #76]	@ (800283c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80027ee:	7011      	strb	r1, [r2, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80027fa:	2220      	movs	r2, #32
 80027fc:	2100      	movs	r1, #0
 80027fe:	4811      	ldr	r0, [pc, #68]	@ (8002844 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002800:	f012 fcf3 	bl	80151ea <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002804:	2208      	movs	r2, #8
 8002806:	2100      	movs	r1, #0
 8002808:	480f      	ldr	r0, [pc, #60]	@ (8002848 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 800280a:	f012 fcee 	bl	80151ea <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800280e:	2208      	movs	r2, #8
 8002810:	2100      	movs	r1, #0
 8002812:	480e      	ldr	r0, [pc, #56]	@ (800284c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002814:	f012 fce9 	bl	80151ea <memset>
    }
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	0801722c 	.word	0x0801722c
 8002828:	200002b1 	.word	0x200002b1
 800282c:	08017a7c 	.word	0x08017a7c
 8002830:	08017c70 	.word	0x08017c70
 8002834:	08017d7c 	.word	0x08017d7c
 8002838:	08017d90 	.word	0x08017d90
 800283c:	20000248 	.word	0x20000248
 8002840:	20000249 	.word	0x20000249
 8002844:	2000024c 	.word	0x2000024c
 8002848:	2000026c 	.word	0x2000026c
 800284c:	20000274 	.word	0x20000274

08002850 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	80fb      	strh	r3, [r7, #6]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4618      	mov	r0, r3
 8002864:	f00a f89e 	bl	800c9a4 <_ZN13abstractL6470C1Ev>
 8002868:	4a27      	ldr	r2, [pc, #156]	@ (8002908 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	819a      	strh	r2, [r3, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	611a      	str	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8b3a      	ldrh	r2, [r7, #24]
 8002884:	829a      	strh	r2, [r3, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2203      	movs	r2, #3
 8002890:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002892:	4b1e      	ldr	r3, [pc, #120]	@ (800290c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 800289c:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80028a2:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002918 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80028ae:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a1a      	ldr	r2, [pc, #104]	@ (800291c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80028b4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 80028c8:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	b2d1      	uxtb	r1, r2
 80028d0:	4a13      	ldr	r2, [pc, #76]	@ (8002920 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80028d2:	7011      	strb	r1, [r2, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80028d8:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80028de:	2220      	movs	r2, #32
 80028e0:	2100      	movs	r1, #0
 80028e2:	4811      	ldr	r0, [pc, #68]	@ (8002928 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 80028e4:	f012 fc81 	bl	80151ea <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80028e8:	2208      	movs	r2, #8
 80028ea:	2100      	movs	r1, #0
 80028ec:	480f      	ldr	r0, [pc, #60]	@ (800292c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 80028ee:	f012 fc7c 	bl	80151ea <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80028f2:	2208      	movs	r2, #8
 80028f4:	2100      	movs	r1, #0
 80028f6:	480e      	ldr	r0, [pc, #56]	@ (8002930 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 80028f8:	f012 fc77 	bl	80151ea <memset>
    }
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	08016fc0 	.word	0x08016fc0
 800290c:	200002b2 	.word	0x200002b2
 8002910:	08017d9c 	.word	0x08017d9c
 8002914:	08017f90 	.word	0x08017f90
 8002918:	0801809c 	.word	0x0801809c
 800291c:	080180b0 	.word	0x080180b0
 8002920:	2000027c 	.word	0x2000027c
 8002924:	2000027d 	.word	0x2000027d
 8002928:	20000280 	.word	0x20000280
 800292c:	200002a0 	.word	0x200002a0
 8002930:	200002a8 	.word	0x200002a8

08002934 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	f00a f83d 	bl	800c9c4 <_ZN13abstractL6470D1Ev>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	08016fc0 	.word	0x08016fc0

08002958 <_ZN5L6470I8shield_3ED0Ev>:
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ffe7 	bl	8002934 <_ZN5L6470I8shield_3ED1Ev>
 8002966:	216c      	movs	r1, #108	@ 0x6c
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f00f fdbb 	bl	80124e4 <_ZdlPvj>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZN5L6470I8shield_2ED1Ev>:
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	4a05      	ldr	r2, [pc, #20]	@ (8002998 <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	f00a f81b 	bl	800c9c4 <_ZN13abstractL6470D1Ev>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	0801722c 	.word	0x0801722c

0800299c <_ZN5L6470I8shield_2ED0Ev>:
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ffe7 	bl	8002978 <_ZN5L6470I8shield_2ED1Ev>
 80029aa:	216c      	movs	r1, #108	@ 0x6c
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f00f fd99 	bl	80124e4 <_ZdlPvj>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <_ZN5L6470I8shield_1ED1Ev>:
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <_ZN5L6470I8shield_1ED1Ev+0x20>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f009 fff9 	bl	800c9c4 <_ZN13abstractL6470D1Ev>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	08017498 	.word	0x08017498

080029e0 <_ZN5L6470I8shield_1ED0Ev>:
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ffe7 	bl	80029bc <_ZN5L6470I8shield_1ED1Ev>
 80029ee:	216c      	movs	r1, #108	@ 0x6c
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f00f fd77 	bl	80124e4 <_ZdlPvj>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
 8002a1a:	4603      	mov	r3, r0
    }
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
 8002a3a:	4603      	mov	r3, r0
    }
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
 8002a62:	4603      	mov	r3, r0
    }
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002a7c:	681c      	ldr	r4, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2100      	movs	r1, #0
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	47a0      	blx	r4
 8002a96:	4603      	mov	r3, r0
    }
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002ab0:	681c      	ldr	r4, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2102      	movs	r1, #2
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	47a0      	blx	r4
 8002aca:	4603      	mov	r3, r0
    }
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd90      	pop	{r4, r7, pc}

08002ad4 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002ad4:	b5b0      	push	{r4, r5, r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ae4:	681c      	ldr	r4, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002aee:	681d      	ldr	r5, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2103      	movs	r1, #3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
 8002b00:	4603      	mov	r3, r0
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	47a8      	blx	r5
 8002b08:	eef0 7a40 	vmov.f32	s15, s0
 8002b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	47a0      	blx	r4
 8002b14:	4603      	mov	r3, r0
    }
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bdb0      	pop	{r4, r5, r7, pc}

08002b1e <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002b1e:	b5b0      	push	{r4, r5, r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b2e:	681c      	ldr	r4, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b38:	681d      	ldr	r5, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2106      	movs	r1, #6
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	47a8      	blx	r5
 8002b54:	eef0 7a40 	vmov.f32	s15, s0
 8002b58:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	47a0      	blx	r4
 8002b60:	4603      	mov	r3, r0
    }
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bdb0      	pop	{r4, r5, r7, pc}

08002b6a <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002b6a:	b5b0      	push	{r4, r5, r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b7a:	681c      	ldr	r4, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002b84:	681d      	ldr	r5, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2107      	movs	r1, #7
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	47a8      	blx	r5
 8002ba0:	eef0 7a40 	vmov.f32	s15, s0
 8002ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	47a0      	blx	r4
 8002bac:	4603      	mov	r3, r0
    }
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bdb0      	pop	{r4, r5, r7, pc}

08002bb6 <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002bb6:	b5b0      	push	{r4, r5, r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bc6:	681c      	ldr	r4, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bd0:	681d      	ldr	r5, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2104      	movs	r1, #4
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	47a8      	blx	r5
 8002bec:	eef0 7a40 	vmov.f32	s15, s0
 8002bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	47a0      	blx	r4
 8002bf8:	4603      	mov	r3, r0
    }
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bdb0      	pop	{r4, r5, r7, pc}

08002c02 <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002c02:	b5b0      	push	{r4, r5, r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c12:	681c      	ldr	r4, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002c1c:	681d      	ldr	r5, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2105      	movs	r1, #5
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	47a8      	blx	r5
 8002c38:	eef0 7a40 	vmov.f32	s15, s0
 8002c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	47a0      	blx	r4
 8002c44:	4603      	mov	r3, r0
    }
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bdb0      	pop	{r4, r5, r7, pc}

08002c4e <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2104      	movs	r1, #4
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002c70:	2300      	movs	r3, #0
    }
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	b2d1      	uxtb	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	4798      	blx	r3
    }
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
    }
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002cd0:	681c      	ldr	r4, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	47a0      	blx	r4
    }
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd90      	pop	{r4, r7, pc}

08002cf4 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002d06:	681c      	ldr	r4, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6839      	ldr	r1, [r7, #0]
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	47a0      	blx	r4
    }
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}

08002d2a <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 8002d2a:	b590      	push	{r4, r7, lr}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002d3c:	681c      	ldr	r4, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	ee07 2a90 	vmov	s15, r2
 8002d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d52:	eeb0 0a67 	vmov.f32	s0, s15
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2106      	movs	r1, #6
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	47a0      	blx	r4
        return true;
 8002d64:	2301      	movs	r3, #1
    }
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}

08002d6e <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 8002d6e:	b590      	push	{r4, r7, lr}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002d80:	681c      	ldr	r4, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	ee07 2a90 	vmov	s15, r2
 8002d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d96:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	2107      	movs	r1, #7
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	47a0      	blx	r4
        return true;
 8002da8:	2301      	movs	r3, #1
    }
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}

08002db2 <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8002db2:	b590      	push	{r4, r7, lr}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002dc4:	681c      	ldr	r4, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	ee07 2a90 	vmov	s15, r2
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eeb0 0a67 	vmov.f32	s0, s15
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	461a      	mov	r2, r3
 8002de6:	2104      	movs	r1, #4
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	47a0      	blx	r4
        return true;
 8002dec:	2301      	movs	r3, #1
    }
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}

08002df6 <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 8002df6:	b590      	push	{r4, r7, lr}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002e08:	681c      	ldr	r4, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	ee07 2a90 	vmov	s15, r2
 8002e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2105      	movs	r1, #5
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	47a0      	blx	r4
        return true;
 8002e30:	2301      	movs	r3, #1
    }
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}

08002e3a <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	2b07      	cmp	r3, #7
 8002e4a:	d901      	bls.n	8002e50 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e00f      	b.n	8002e70 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3380      	adds	r3, #128	@ 0x80
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	2115      	movs	r1, #21
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
        return true;
 8002e6e:	2301      	movs	r3, #1
    }
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002e8a:	681c      	ldr	r4, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6839      	ldr	r1, [r7, #0]
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	47a0      	blx	r4
    }
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}

08002eac <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8002eac:	b5b0      	push	{r4, r5, r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8002ec2:	681c      	ldr	r4, [r3, #0]
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 8002eca:	2501      	movs	r5, #1
 8002ecc:	e000      	b.n	8002ed0 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 8002ece:	2500      	movs	r5, #0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	4798      	blx	r3
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	47a0      	blx	r4
    }
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bdb0      	pop	{r4, r5, r7, pc}

08002ef2 <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
    }
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
    }
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8002f2e:	b5b0      	push	{r4, r5, r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	72fb      	strb	r3, [r7, #11]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002f48:	681c      	ldr	r4, [r3, #0]
 8002f4a:	7abb      	ldrb	r3, [r7, #10]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8002f50:	2501      	movs	r5, #1
 8002f52:	e000      	b.n	8002f56 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8002f54:	2500      	movs	r5, #0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	ee07 2a90 	vmov	s15, r2
 8002f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	4798      	blx	r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	7af9      	ldrb	r1, [r7, #11]
 8002f76:	462a      	mov	r2, r5
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	47a0      	blx	r4
    }
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bdb0      	pop	{r4, r5, r7, pc}

08002f84 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 8002f84:	b5b0      	push	{r4, r5, r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8002f98:	681c      	ldr	r4, [r3, #0]
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8002fa0:	2501      	movs	r5, #1
 8002fa2:	e000      	b.n	8002fa6 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 8002fa4:	2500      	movs	r5, #0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2106      	movs	r1, #6
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4629      	mov	r1, r5
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	47a0      	blx	r4
    }
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bdb0      	pop	{r4, r5, r7, pc}

08002fc8 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8002fde:	681c      	ldr	r4, [r3, #0]
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 8002fe6:	2501      	movs	r5, #1
 8002fe8:	e000      	b.n	8002fec <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 8002fea:	2500      	movs	r5, #0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	ee07 2a90 	vmov	s15, r2
 8002ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003000:	eeb0 0a67 	vmov.f32	s0, s15
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	4798      	blx	r3
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	4629      	mov	r1, r5
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	47a0      	blx	r4
    }
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bdb0      	pop	{r4, r5, r7, pc}

0800301a <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	460b      	mov	r3, r1
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	7afa      	ldrb	r2, [r7, #11]
 8003034:	2a01      	cmp	r2, #1
 8003036:	d101      	bne.n	800303c <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 8003038:	2101      	movs	r1, #1
 800303a:	e000      	b.n	800303e <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 800303c:	2100      	movs	r1, #0
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	4798      	blx	r3
    }
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
    }
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
    }
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
    }
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
    }
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80030cc:	bf00      	nop
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2101      	movs	r1, #1
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ef      	bne.n	80030ce <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3380      	adds	r3, #128	@ 0x80
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	2a01      	cmp	r2, #1
 800311e:	d101      	bne.n	8003124 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8003120:	2201      	movs	r2, #1
 8003122:	e000      	b.n	8003126 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8003124:	2200      	movs	r2, #0
 8003126:	4611      	mov	r1, r2
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
    }
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
 8003140:	4613      	mov	r3, r2
 8003142:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	78ba      	ldrb	r2, [r7, #2]
 8003150:	2a01      	cmp	r2, #1
 8003152:	d101      	bne.n	8003158 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003154:	2201      	movs	r2, #1
 8003156:	e000      	b.n	800315a <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003158:	2200      	movs	r2, #0
 800315a:	78f9      	ldrb	r1, [r7, #3]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
    }
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
    }
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2100      	movs	r1, #0
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2102      	movs	r1, #2
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2103      	movs	r1, #3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2203      	movs	r2, #3
 8003246:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2106      	movs	r1, #6
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2107      	movs	r1, #7
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2205      	movs	r2, #5
 8003296:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2104      	movs	r1, #4
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2206      	movs	r2, #6
 80032be:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2105      	movs	r1, #5
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2207      	movs	r2, #7
 80032e6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4906      	ldr	r1, [pc, #24]	@ (8003330 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2208      	movs	r2, #8
 800331e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000027d 	.word	0x2000027d
 8003330:	20000280 	.word	0x20000280

08003334 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	b2d1      	uxtb	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	2102      	movs	r1, #2
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2209      	movs	r2, #9
 80033a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80033c6:	681c      	ldr	r4, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6839      	ldr	r1, [r7, #0]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	2102      	movs	r1, #2
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}

080033f2 <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 80033f2:	b590      	push	{r4, r7, lr}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003404:	681c      	ldr	r4, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	ee07 2a90 	vmov	s15, r2
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eeb0 0a67 	vmov.f32	s0, s15
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	2103      	movs	r1, #3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}

0800343c <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800344e:	681c      	ldr	r4, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	ee07 2a90 	vmov	s15, r2
 8003460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003464:	eeb0 0a67 	vmov.f32	s0, s15
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	2106      	movs	r1, #6
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bd90      	pop	{r4, r7, pc}

08003486 <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 8003486:	b590      	push	{r4, r7, lr}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003498:	681c      	ldr	r4, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	ee07 2a90 	vmov	s15, r2
 80034aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ae:	eeb0 0a67 	vmov.f32	s0, s15
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	2107      	movs	r1, #7
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}

080034d0 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80034e2:	681c      	ldr	r4, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	ee07 2a90 	vmov	s15, r2
 80034f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f8:	eeb0 0a67 	vmov.f32	s0, s15
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	2104      	movs	r1, #4
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800351a:	b590      	push	{r4, r7, lr}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800352c:	681c      	ldr	r4, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	ee07 2a90 	vmov	s15, r2
 800353e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003542:	eeb0 0a67 	vmov.f32	s0, s15
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	2105      	movs	r1, #5
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bd90      	pop	{r4, r7, pc}

08003564 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003576:	681c      	ldr	r4, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	4603      	mov	r3, r0
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}

080035a0 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80035b6:	681c      	ldr	r4, [r3, #0]
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 80035be:	2501      	movs	r5, #1
 80035c0:	e000      	b.n	80035c4 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 80035c2:	2500      	movs	r5, #0
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	4798      	blx	r3
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	4629      	mov	r1, r5
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}

080035ee <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 800363a:	b5b0      	push	{r4, r5, r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	72fb      	strb	r3, [r7, #11]
 8003648:	4613      	mov	r3, r2
 800364a:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003654:	681c      	ldr	r4, [r3, #0]
 8003656:	7abb      	ldrb	r3, [r7, #10]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800365c:	2501      	movs	r5, #1
 800365e:	e000      	b.n	8003662 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8003660:	2500      	movs	r5, #0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	ee07 2a90 	vmov	s15, r2
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eeb0 0a67 	vmov.f32	s0, s15
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	4798      	blx	r3
 800367e:	4603      	mov	r3, r0
 8003680:	7af9      	ldrb	r1, [r7, #11]
 8003682:	462a      	mov	r2, r5
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bdb0      	pop	{r4, r5, r7, pc}

08003698 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80036ac:	681c      	ldr	r4, [r3, #0]
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 80036b4:	2501      	movs	r5, #1
 80036b6:	e000      	b.n	80036ba <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 80036b8:	2500      	movs	r5, #0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2106      	movs	r1, #6
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	4629      	mov	r1, r5
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bdb0      	pop	{r4, r5, r7, pc}

080036e4 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 80036e4:	b5b0      	push	{r4, r5, r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	460b      	mov	r3, r1
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80036fa:	681c      	ldr	r4, [r3, #0]
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8003702:	2501      	movs	r5, #1
 8003704:	e000      	b.n	8003708 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8003706:	2500      	movs	r5, #0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	ee07 2a90 	vmov	s15, r2
 8003718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371c:	eeb0 0a67 	vmov.f32	s0, s15
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	4798      	blx	r3
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4629      	mov	r1, r5
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bdb0      	pop	{r4, r5, r7, pc}

0800373e <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	460b      	mov	r3, r1
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	7afa      	ldrb	r2, [r7, #11]
 8003758:	2a01      	cmp	r2, #1
 800375a:	d101      	bne.n	8003760 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 800375c:	2101      	movs	r1, #1
 800375e:	e000      	b.n	8003762 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003760:	2100      	movs	r1, #0
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	2a01      	cmp	r2, #1
 800382a:	d101      	bne.n	8003830 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 800382c:	2201      	movs	r2, #1
 800382e:	e000      	b.n	8003832 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003830:	2200      	movs	r2, #0
 8003832:	4611      	mov	r1, r2
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]
 8003854:	4613      	mov	r3, r2
 8003856:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	78ba      	ldrb	r2, [r7, #2]
 8003864:	2a01      	cmp	r2, #1
 8003866:	d101      	bne.n	800386c <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003868:	2201      	movs	r2, #1
 800386a:	e000      	b.n	800386e <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800386c:	2200      	movs	r2, #0
 800386e:	78f9      	ldrb	r1, [r7, #3]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
 80038c0:	4603      	mov	r3, r0
    }
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 80038e4:	b5b0      	push	{r4, r5, r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80038f4:	3b01      	subs	r3, #1
 80038f6:	2b07      	cmp	r3, #7
 80038f8:	f200 80fe 	bhi.w	8003af8 <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 80038fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003925 	.word	0x08003925
 8003908:	08003951 	.word	0x08003951
 800390c:	0800397f 	.word	0x0800397f
 8003910:	080039c3 	.word	0x080039c3
 8003914:	08003a09 	.word	0x08003a09
 8003918:	08003a4f 	.word	0x08003a4f
 800391c:	08003a95 	.word	0x08003a95
 8003920:	08003adb 	.word	0x08003adb
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800392c:	681c      	ldr	r4, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6a12      	ldr	r2, [r2, #32]
 800393c:	7b92      	ldrb	r2, [r2, #14]
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	4603      	mov	r3, r0
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	47a0      	blx	r4
 800394c:	4603      	mov	r3, r0
 800394e:	e0d4      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003958:	681c      	ldr	r4, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6a12      	ldr	r2, [r2, #32]
 8003968:	3228      	adds	r2, #40	@ 0x28
 800396a:	7b92      	ldrb	r2, [r2, #14]
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
 8003972:	4603      	mov	r3, r0
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	47a0      	blx	r4
 800397a:	4603      	mov	r3, r0
 800397c:	e0bd      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003986:	681c      	ldr	r4, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003990:	681d      	ldr	r5, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6a12      	ldr	r2, [r2, #32]
 80039a0:	323c      	adds	r2, #60	@ 0x3c
 80039a2:	7b92      	ldrb	r2, [r2, #14]
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	47a8      	blx	r5
 80039b2:	eef0 7a40 	vmov.f32	s15, s0
 80039b6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	47a0      	blx	r4
 80039be:	4603      	mov	r3, r0
 80039c0:	e09b      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039ca:	681c      	ldr	r4, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039d4:	681d      	ldr	r5, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6a12      	ldr	r2, [r2, #32]
 80039e4:	3278      	adds	r2, #120	@ 0x78
 80039e6:	7b92      	ldrb	r2, [r2, #14]
 80039e8:	6839      	ldr	r1, [r7, #0]
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	47a8      	blx	r5
 80039f8:	eef0 7a40 	vmov.f32	s15, s0
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	47a0      	blx	r4
 8003a04:	4603      	mov	r3, r0
 8003a06:	e078      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a10:	681c      	ldr	r4, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003a1a:	681d      	ldr	r5, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6a12      	ldr	r2, [r2, #32]
 8003a2a:	328c      	adds	r2, #140	@ 0x8c
 8003a2c:	7b92      	ldrb	r2, [r2, #14]
 8003a2e:	6839      	ldr	r1, [r7, #0]
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
 8003a34:	4603      	mov	r3, r0
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	47a8      	blx	r5
 8003a3e:	eef0 7a40 	vmov.f32	s15, s0
 8003a42:	eeb0 0a67 	vmov.f32	s0, s15
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	47a0      	blx	r4
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	e055      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a56:	681c      	ldr	r4, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003a60:	681d      	ldr	r5, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6a12      	ldr	r2, [r2, #32]
 8003a70:	3250      	adds	r2, #80	@ 0x50
 8003a72:	7b92      	ldrb	r2, [r2, #14]
 8003a74:	6839      	ldr	r1, [r7, #0]
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	47a8      	blx	r5
 8003a84:	eef0 7a40 	vmov.f32	s15, s0
 8003a88:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	47a0      	blx	r4
 8003a90:	4603      	mov	r3, r0
 8003a92:	e032      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a9c:	681c      	ldr	r4, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003aa6:	681d      	ldr	r5, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6a12      	ldr	r2, [r2, #32]
 8003ab6:	3264      	adds	r2, #100	@ 0x64
 8003ab8:	7b92      	ldrb	r2, [r2, #14]
 8003aba:	6839      	ldr	r1, [r7, #0]
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	47a8      	blx	r5
 8003aca:	eef0 7a40 	vmov.f32	s15, s0
 8003ace:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	47a0      	blx	r4
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	e00f      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e002      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003af8:	2300      	movs	r3, #0
        }
    }
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bdb0      	pop	{r4, r5, r7, pc}
 8003b02:	bf00      	nop

08003b04 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6898      	ldr	r0, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	899b      	ldrh	r3, [r3, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	4619      	mov	r1, r3
 8003b18:	f00a ff48 	bl	800e9ac <HAL_GPIO_WritePin>
    }
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b34:	d303      	bcc.n	8003b3e <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8003b3c:	e000      	b.n	8003b40 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003b3e:	683b      	ldr	r3, [r7, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	db05      	blt.n	8003b68 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b62:	da01      	bge.n	8003b68 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	e00c      	b.n	8003b82 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8003b6e:	db06      	blt.n	8003b7e <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	da03      	bge.n	8003b7e <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8003b7c:	e001      	b.n	8003b82 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003b7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003bbc <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003bac:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	3c74242a 	.word	0x3c74242a

08003bc0 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003bcc:	edd7 7a00 	vldr	s15, [r7]
 8003bd0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003c04 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	d80a      	bhi.n	8003bf4 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003bde:	ed97 7a00 	vldr	s14, [r7]
 8003be2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003c08 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 3a90 	vmov	r3, s15
 8003bf2:	e000      	b.n	8003bf6 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	4674241b 	.word	0x4674241b
 8003c08:	3c74242a 	.word	0x3c74242a

08003c0c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8003c18:	887b      	ldrh	r3, [r7, #2]
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c1e:	d209      	bcs.n	8003c34 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003c48 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8003c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c32:	e001      	b.n	8003c38 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003c34:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003c4c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8003c38:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	4168d4fe 	.word	0x4168d4fe
 8003c4c:	00000000 	.word	0x00000000

08003c50 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003c5c:	edd7 7a00 	vldr	s15, [r7]
 8003c60:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003c94 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6c:	d80b      	bhi.n	8003c86 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003c6e:	ed97 7a00 	vldr	s14, [r7]
 8003c72:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003c98 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8003c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7e:	ee17 3a90 	vmov	r3, s15
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	e000      	b.n	8003c88 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	4768c671 	.word	0x4768c671
 8003c98:	4168d4fe 	.word	0x4168d4fe

08003c9c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cae:	d209      	bcs.n	8003cc4 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003cd8 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 8003cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc2:	e001      	b.n	8003cc8 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003cc4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003cdc <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 8003cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	4168d4fe 	.word	0x4168d4fe
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8003cec:	edd7 7a00 	vldr	s15, [r7]
 8003cf0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003d24 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8003cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfc:	d80b      	bhi.n	8003d16 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003cfe:	ed97 7a00 	vldr	s14, [r7]
 8003d02:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003d28 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 8003d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0e:	ee17 3a90 	vmov	r3, s15
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	e000      	b.n	8003d18 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	4768c671 	.word	0x4768c671
 8003d28:	4168d4fe 	.word	0x4168d4fe

08003d2c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d209      	bcs.n	8003d54 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8003d40:	887b      	ldrh	r3, [r7, #2]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d4a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003d68 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8003d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d52:	e001      	b.n	8003d58 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003d54:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003d6c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8003d58:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	4174240b 	.word	0x4174240b
 8003d6c:	00000000 	.word	0x00000000

08003d70 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8003d7c:	edd7 7a00 	vldr	s15, [r7]
 8003d80:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003db4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8003d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d80b      	bhi.n	8003da6 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8003d8e:	ed97 7a00 	vldr	s14, [r7]
 8003d92:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003db8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8003d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	ee17 3a90 	vmov	r3, s15
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	e000      	b.n	8003da8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	4673e702 	.word	0x4673e702
 8003db8:	4174240b 	.word	0x4174240b

08003dbc <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8003dc8:	887b      	ldrh	r3, [r7, #2]
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dce:	d209      	bcs.n	8003de4 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8003dd0:	887b      	ldrh	r3, [r7, #2]
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dda:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003df8 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8003dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de2:	e001      	b.n	8003de8 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003de4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003dfc <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8003de8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	3e742401 	.word	0x3e742401
 8003dfc:	00000000 	.word	0x00000000

08003e00 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8003e0c:	edd7 7a00 	vldr	s15, [r7]
 8003e10:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003e44 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 8003e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	d80b      	bhi.n	8003e36 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8003e1e:	ed97 7a00 	vldr	s14, [r7]
 8003e22:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003e48 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 8003e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2e:	ee17 3a90 	vmov	r3, s15
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	e000      	b.n	8003e38 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	447414bf 	.word	0x447414bf
 8003e48:	3e742401 	.word	0x3e742401

08003e4c <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e5e:	d219      	bcs.n	8003e94 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8003e60:	887b      	ldrh	r3, [r7, #2]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc fb8e 	bl	8000584 <__aeabi_i2d>
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea8 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8003e6e:	f7fc fa3d 	bl	80002ec <__adddf3>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4610      	mov	r0, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 8003e80:	f7fc fbea 	bl	8000658 <__aeabi_dmul>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f7fc fedc 	bl	8000c48 <__aeabi_d2f>
 8003e90:	4603      	mov	r3, r0
 8003e92:	e001      	b.n	8003e98 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 8003e94:	f04f 0300 	mov.w	r3, #0
}
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	3fe00000 	.word	0x3fe00000
 8003eac:	402e8000 	.word	0x402e8000

08003eb0 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8003ebc:	edd7 7a00 	vldr	s15, [r7]
 8003ec0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003efc <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 8003ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ecc:	d80f      	bhi.n	8003eee <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8003ece:	ed97 7a00 	vldr	s14, [r7]
 8003ed2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003f00 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 8003ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee6:	ee17 3a90 	vmov	r3, s15
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	e000      	b.n	8003ef0 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	4673e180 	.word	0x4673e180
 8003f00:	41740000 	.word	0x41740000

08003f04 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f16:	d209      	bcs.n	8003f2c <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f22:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003f40 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 8003f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f2a:	e001      	b.n	8003f30 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003f2c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003f44 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8003f30:	eeb0 0a67 	vmov.f32	s0, s15
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	3d7423f4 	.word	0x3d7423f4
 8003f44:	00000000 	.word	0x00000000

08003f48 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8003f54:	edd7 7a00 	vldr	s15, [r7]
 8003f58:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003f8c <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 8003f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f64:	d80b      	bhi.n	8003f7e <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8003f66:	ed97 7a00 	vldr	s14, [r7]
 8003f6a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003f90 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 8003f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f76:	ee17 3a90 	vmov	r3, s15
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	e000      	b.n	8003f80 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	44742023 	.word	0x44742023
 8003f90:	3d7423f4 	.word	0x3d7423f4

08003f94 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003faa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003fc0 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 8003fae:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8003fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	3783956e 	.word	0x3783956e

08003fc4 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8003fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fd4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800400c <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 8003fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe0:	d80c      	bhi.n	8003ffc <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8003fe2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fe6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004010 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 8003fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff2:	edc7 7a01 	vstr	s15, [r7, #4]
 8003ff6:	793b      	ldrb	r3, [r7, #4]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e000      	b.n	8003ffe <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	3b8311d9 	.word	0x3b8311d9
 8004010:	3783956e 	.word	0x3783956e

08004014 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800402a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004040 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800402e:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004032:	eeb0 0a67 	vmov.f32	s0, s15
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	3783956e 	.word	0x3783956e

08004044 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8004050:	edd7 7a02 	vldr	s15, [r7, #8]
 8004054:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800408c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8004058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004060:	d80c      	bhi.n	800407c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004062:	ed97 7a02 	vldr	s14, [r7, #8]
 8004066:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004090 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800406a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800406e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004072:	edc7 7a01 	vstr	s15, [r7, #4]
 8004076:	793b      	ldrb	r3, [r7, #4]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e000      	b.n	800407e <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	3b8311d9 	.word	0x3b8311d9
 8004090:	3783956e 	.word	0x3783956e

08004094 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80040c0 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80040ae:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80040b2:	eeb0 0a67 	vmov.f32	s0, s15
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	3783956e 	.word	0x3783956e

080040c4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80040d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80040d4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800410c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80040d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e0:	d80c      	bhi.n	80040fc <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80040e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80040e6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004110 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 80040ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80040f6:	793b      	ldrb	r3, [r7, #4]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e000      	b.n	80040fe <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	3b8311d9 	.word	0x3b8311d9
 8004110:	3783956e 	.word	0x3783956e

08004114 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	2b0f      	cmp	r3, #15
 8004124:	d80a      	bhi.n	800413c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	3301      	adds	r3, #1
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004132:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004150 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 8004136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413a:	e001      	b.n	8004140 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 800413c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004154 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 8004140:	eeb0 0a67 	vmov.f32	s0, s15
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	43bb8000 	.word	0x43bb8000
 8004154:	00000000 	.word	0x00000000

08004158 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8004164:	edd7 7a02 	vldr	s15, [r7, #8]
 8004168:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80041f4 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 800416c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004174:	d836      	bhi.n	80041e4 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 8004176:	ed97 7a02 	vldr	s14, [r7, #8]
 800417a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80041f8 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 800417e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004182:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8004186:	edd7 7a05 	vldr	s15, [r7, #20]
 800418a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004192:	793b      	ldrb	r3, [r7, #4]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419e:	ed97 7a05 	vldr	s14, [r7, #20]
 80041a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a6:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80041aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80041b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ba:	d50a      	bpl.n	80041d2 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80041bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80041c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80041c8:	793b      	ldrb	r3, [r7, #4]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	e009      	b.n	80041e6 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 80041d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80041d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041da:	edc7 7a01 	vstr	s15, [r7, #4]
 80041de:	793b      	ldrb	r3, [r7, #4]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e000      	b.n	80041e6 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	45bb8000 	.word	0x45bb8000
 80041f8:	43bb8000 	.word	0x43bb8000

080041fc <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 8004208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800420c:	2b00      	cmp	r3, #0
 800420e:	db0a      	blt.n	8004226 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	3301      	adds	r3, #1
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004238 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8004220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004224:	e001      	b.n	800422a <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 8004226:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800423c <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 800422a:	eeb0 0a67 	vmov.f32	s0, s15
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	41fa0000 	.word	0x41fa0000
 800423c:	00000000 	.word	0x00000000

08004240 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800424c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004250:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80042dc <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 8004254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425c:	d836      	bhi.n	80042cc <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 800425e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004262:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80042e0 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 8004266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800426a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800426e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004276:	edc7 7a01 	vstr	s15, [r7, #4]
 800427a:	793b      	ldrb	r3, [r7, #4]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004286:	ed97 7a05 	vldr	s14, [r7, #20]
 800428a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800428e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8004292:	edd7 7a04 	vldr	s15, [r7, #16]
 8004296:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800429a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800429e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a2:	d50a      	bpl.n	80042ba <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80042a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80042a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80042b0:	793b      	ldrb	r3, [r7, #4]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	e009      	b.n	80042ce <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 80042ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80042be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80042c6:	793b      	ldrb	r3, [r7, #4]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e000      	b.n	80042ce <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	457a0000 	.word	0x457a0000
 80042e0:	41fa0000 	.word	0x41fa0000

080042e4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3394      	adds	r3, #148	@ 0x94
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	edd2 7a05 	vldr	s15, [r2, #20]
 800431a:	eeb0 0a67 	vmov.f32	s0, s15
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	4798      	blx	r3
 8004322:	4603      	mov	r3, r0
 8004324:	461a      	mov	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	edd2 7a06 	vldr	s15, [r2, #24]
 800433c:	eeb0 0a67 	vmov.f32	s0, s15
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	4798      	blx	r3
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	edd2 7a07 	vldr	s15, [r2, #28]
 800435e:	eeb0 0a67 	vmov.f32	s0, s15
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	4798      	blx	r3
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	edd2 7a08 	vldr	s15, [r2, #32]
 8004380:	eeb0 0a67 	vmov.f32	s0, s15
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	4798      	blx	r3
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80043a2:	eeb0 0a67 	vmov.f32	s0, s15
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	4798      	blx	r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80043ba:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800468c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80043be:	ee67 6a87 	vmul.f32	s13, s15, s14
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	ed93 7a00 	vldr	s14, [r3]
 80043c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80043d4:	793b      	ldrb	r3, [r7, #4]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80043e4:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800468c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80043e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ed93 7a00 	vldr	s14, [r3]
 80043f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80043fe:	793b      	ldrb	r3, [r7, #4]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800440e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800468c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004412:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	ed93 7a00 	vldr	s14, [r3]
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004424:	edc7 7a01 	vstr	s15, [r7, #4]
 8004428:	793b      	ldrb	r3, [r7, #4]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004438:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800468c <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800443c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ed93 7a00 	vldr	s14, [r3]
 8004446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800444a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004452:	793b      	ldrb	r3, [r7, #4]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800446c:	eeb0 0a67 	vmov.f32	s0, s15
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	4798      	blx	r3
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800448e:	eeb0 0a67 	vmov.f32	s0, s15
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	4798      	blx	r3
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 80044b0:	eeb0 0a67 	vmov.f32	s0, s15
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	4798      	blx	r3
 80044b8:	4603      	mov	r3, r0
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 80044d2:	eeb0 0a67 	vmov.f32	s0, s15
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	4798      	blx	r3
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8004500:	eeb0 0a67 	vmov.f32	s0, s15
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	4798      	blx	r3
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8004522:	eeb0 0a67 	vmov.f32	s0, s15
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	4798      	blx	r3
 800452a:	4603      	mov	r3, r0
 800452c:	461a      	mov	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8004568:	2104      	movs	r1, #4
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800457e:	2105      	movs	r1, #5
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8004594:	2106      	movs	r1, #6
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 80045aa:	2107      	movs	r1, #7
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80045c0:	2108      	movs	r1, #8
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80045d6:	2109      	movs	r1, #9
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 80045ec:	210a      	movs	r1, #10
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004602:	210b      	movs	r1, #11
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004618:	210c      	movs	r1, #12
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800462e:	210d      	movs	r1, #13
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8004644:	210e      	movs	r1, #14
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800465a:	210f      	movs	r1, #15
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8004670:	2110      	movs	r1, #16
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8004686:	2111      	movs	r1, #17
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	e001      	b.n	8004690 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 800468c:	43800000 	.word	0x43800000
 8004690:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 80046a2:	2113      	movs	r1, #19
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 80046b8:	2114      	movs	r1, #20
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80046ce:	2116      	movs	r1, #22
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 80046e4:	2117      	movs	r1, #23
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3354      	adds	r3, #84	@ 0x54
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 80046f8:	4611      	mov	r1, r2
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	4798      	blx	r3
 80046fe:	4603      	mov	r3, r0
 8004700:	f083 0301 	eor.w	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	460b      	mov	r3, r1
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800472e:	681c      	ldr	r4, [r3, #0]
 8004730:	7afa      	ldrb	r2, [r7, #11]
 8004732:	2300      	movs	r3, #0
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	2201      	movs	r2, #1
 800473e:	490c      	ldr	r1, [pc, #48]	@ (8004770 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a09      	ldr	r2, [pc, #36]	@ (8004774 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004750:	4907      	ldr	r1, [pc, #28]	@ (8004770 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a05      	ldr	r2, [pc, #20]	@ (8004778 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004762:	4904      	ldr	r1, [pc, #16]	@ (8004774 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	4798      	blx	r3
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bd90      	pop	{r4, r7, pc}
 8004770:	20000280 	.word	0x20000280
 8004774:	200002a0 	.word	0x200002a0
 8004778:	200002a8 	.word	0x200002a8

0800477c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b087      	sub	sp, #28
 8004780:	af02      	add	r7, sp, #8
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004790:	681c      	ldr	r4, [r3, #0]
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	2200      	movs	r2, #0
 8004796:	9201      	str	r2, [sp, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	9200      	str	r2, [sp, #0]
 800479c:	2202      	movs	r2, #2
 800479e:	4917      	ldr	r1, [pc, #92]	@ (80047fc <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a14      	ldr	r2, [pc, #80]	@ (8004800 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 80047b0:	4912      	ldr	r1, [pc, #72]	@ (80047fc <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a10      	ldr	r2, [pc, #64]	@ (8004804 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 80047c2:	490f      	ldr	r1, [pc, #60]	@ (8004800 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a19      	ldr	r1, [r3, #32]
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	7b9b      	ldrb	r3, [r3, #14]
 80047da:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	4906      	ldr	r1, [pc, #24]	@ (8004804 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 80047f2:	68bb      	ldr	r3, [r7, #8]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	20000280 	.word	0x20000280
 8004800:	200002a0 	.word	0x200002a0
 8004804:	200002a8 	.word	0x200002a8

08004808 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b087      	sub	sp, #28
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	460b      	mov	r3, r1
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800481e:	681c      	ldr	r4, [r3, #0]
 8004820:	7afa      	ldrb	r2, [r7, #11]
 8004822:	2300      	movs	r3, #0
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	4613      	mov	r3, r2
 800482c:	2203      	movs	r2, #3
 800482e:	490c      	ldr	r1, [pc, #48]	@ (8004860 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a09      	ldr	r2, [pc, #36]	@ (8004864 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004840:	4907      	ldr	r1, [pc, #28]	@ (8004860 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a05      	ldr	r2, [pc, #20]	@ (8004868 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004852:	4904      	ldr	r1, [pc, #16]	@ (8004864 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	4798      	blx	r3
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	bd90      	pop	{r4, r7, pc}
 8004860:	20000280 	.word	0x20000280
 8004864:	200002a0 	.word	0x200002a0
 8004868:	200002a8 	.word	0x200002a8

0800486c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b085      	sub	sp, #20
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004880:	681c      	ldr	r4, [r3, #0]
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	2200      	movs	r2, #0
 8004886:	9201      	str	r2, [sp, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	9200      	str	r2, [sp, #0]
 800488c:	2204      	movs	r2, #4
 800488e:	490c      	ldr	r1, [pc, #48]	@ (80048c0 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a09      	ldr	r2, [pc, #36]	@ (80048c4 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 80048a0:	4907      	ldr	r1, [pc, #28]	@ (80048c0 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a05      	ldr	r2, [pc, #20]	@ (80048c8 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 80048b2:	4904      	ldr	r1, [pc, #16]	@ (80048c4 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}
 80048c0:	20000280 	.word	0x20000280
 80048c4:	200002a0 	.word	0x200002a0
 80048c8:	200002a8 	.word	0x200002a8

080048cc <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	460b      	mov	r3, r1
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80048e2:	681c      	ldr	r4, [r3, #0]
 80048e4:	7afa      	ldrb	r2, [r7, #11]
 80048e6:	2300      	movs	r3, #0
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	2205      	movs	r2, #5
 80048f2:	490c      	ldr	r1, [pc, #48]	@ (8004924 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a09      	ldr	r2, [pc, #36]	@ (8004928 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004904:	4907      	ldr	r1, [pc, #28]	@ (8004924 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a05      	ldr	r2, [pc, #20]	@ (800492c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004916:	4904      	ldr	r1, [pc, #16]	@ (8004928 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	4798      	blx	r3
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	bd90      	pop	{r4, r7, pc}
 8004924:	20000280 	.word	0x20000280
 8004928:	200002a0 	.word	0x200002a0
 800492c:	200002a8 	.word	0x200002a8

08004930 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b085      	sub	sp, #20
 8004934:	af02      	add	r7, sp, #8
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004940:	d21f      	bcs.n	8004982 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800494a:	681c      	ldr	r4, [r3, #0]
 800494c:	2300      	movs	r3, #0
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	2300      	movs	r3, #0
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2206      	movs	r2, #6
 8004958:	490c      	ldr	r1, [pc, #48]	@ (800498c <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a09      	ldr	r2, [pc, #36]	@ (8004990 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 800496a:	4908      	ldr	r1, [pc, #32]	@ (800498c <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a06      	ldr	r2, [pc, #24]	@ (8004994 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 800497c:	4904      	ldr	r1, [pc, #16]	@ (8004990 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	4798      	blx	r3
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bd90      	pop	{r4, r7, pc}
 800498a:	bf00      	nop
 800498c:	20000280 	.word	0x20000280
 8004990:	200002a0 	.word	0x200002a0
 8004994:	200002a8 	.word	0x200002a8

08004998 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b087      	sub	sp, #28
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	460b      	mov	r3, r1
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ac:	d220      	bcs.n	80049f0 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80049b6:	681c      	ldr	r4, [r3, #0]
 80049b8:	7afa      	ldrb	r2, [r7, #11]
 80049ba:	2300      	movs	r3, #0
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	2207      	movs	r2, #7
 80049c6:	490c      	ldr	r1, [pc, #48]	@ (80049f8 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a09      	ldr	r2, [pc, #36]	@ (80049fc <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 80049d8:	4907      	ldr	r1, [pc, #28]	@ (80049f8 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a05      	ldr	r2, [pc, #20]	@ (8004a00 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 80049ea:	4904      	ldr	r1, [pc, #16]	@ (80049fc <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	4798      	blx	r3
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd90      	pop	{r4, r7, pc}
 80049f8:	20000280 	.word	0x20000280
 80049fc:	200002a0 	.word	0x200002a0
 8004a00:	200002a8 	.word	0x200002a8

08004a04 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	72fb      	strb	r3, [r7, #11]
 8004a12:	4613      	mov	r3, r2
 8004a14:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004a1e:	681c      	ldr	r4, [r3, #0]
 8004a20:	7af9      	ldrb	r1, [r7, #11]
 8004a22:	7abb      	ldrb	r3, [r7, #10]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	9201      	str	r2, [sp, #4]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	490c      	ldr	r1, [pc, #48]	@ (8004a60 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a09      	ldr	r2, [pc, #36]	@ (8004a64 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004a40:	4907      	ldr	r1, [pc, #28]	@ (8004a60 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a05      	ldr	r2, [pc, #20]	@ (8004a68 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004a52:	4904      	ldr	r1, [pc, #16]	@ (8004a64 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	4798      	blx	r3
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd90      	pop	{r4, r7, pc}
 8004a60:	20000280 	.word	0x20000280
 8004a64:	200002a0 	.word	0x200002a0
 8004a68:	200002a8 	.word	0x200002a8

08004a6c <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004a84:	681c      	ldr	r4, [r3, #0]
 8004a86:	78fa      	ldrb	r2, [r7, #3]
 8004a88:	78bb      	ldrb	r3, [r7, #2]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	9101      	str	r1, [sp, #4]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	2209      	movs	r2, #9
 8004a94:	490c      	ldr	r1, [pc, #48]	@ (8004ac8 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a09      	ldr	r2, [pc, #36]	@ (8004acc <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004aa6:	4908      	ldr	r1, [pc, #32]	@ (8004ac8 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a06      	ldr	r2, [pc, #24]	@ (8004ad0 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004ab8:	4904      	ldr	r1, [pc, #16]	@ (8004acc <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd90      	pop	{r4, r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000280 	.word	0x20000280
 8004acc:	200002a0 	.word	0x200002a0
 8004ad0:	200002a8 	.word	0x200002a8

08004ad4 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004ae4:	681c      	ldr	r4, [r3, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	220a      	movs	r2, #10
 8004af2:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004b04:	4907      	ldr	r1, [pc, #28]	@ (8004b24 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a05      	ldr	r2, [pc, #20]	@ (8004b2c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004b16:	4904      	ldr	r1, [pc, #16]	@ (8004b28 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}
 8004b24:	20000280 	.word	0x20000280
 8004b28:	200002a0 	.word	0x200002a0
 8004b2c:	200002a8 	.word	0x200002a8

08004b30 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b40:	681c      	ldr	r4, [r3, #0]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	2300      	movs	r3, #0
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	220b      	movs	r2, #11
 8004b4e:	490c      	ldr	r1, [pc, #48]	@ (8004b80 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a09      	ldr	r2, [pc, #36]	@ (8004b84 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004b60:	4907      	ldr	r1, [pc, #28]	@ (8004b80 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a05      	ldr	r2, [pc, #20]	@ (8004b88 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004b72:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	20000280 	.word	0x20000280
 8004b84:	200002a0 	.word	0x200002a0
 8004b88:	200002a8 	.word	0x200002a8

08004b8c <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b9c:	681c      	ldr	r4, [r3, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	220c      	movs	r2, #12
 8004baa:	490c      	ldr	r1, [pc, #48]	@ (8004bdc <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004bbc:	4907      	ldr	r1, [pc, #28]	@ (8004bdc <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a05      	ldr	r2, [pc, #20]	@ (8004be4 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004bce:	4904      	ldr	r1, [pc, #16]	@ (8004be0 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}
 8004bdc:	20000280 	.word	0x20000280
 8004be0:	200002a0 	.word	0x200002a0
 8004be4:	200002a8 	.word	0x200002a8

08004be8 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004bf8:	681c      	ldr	r4, [r3, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2300      	movs	r3, #0
 8004c04:	220d      	movs	r2, #13
 8004c06:	490c      	ldr	r1, [pc, #48]	@ (8004c38 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a09      	ldr	r2, [pc, #36]	@ (8004c3c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004c18:	4907      	ldr	r1, [pc, #28]	@ (8004c38 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a05      	ldr	r2, [pc, #20]	@ (8004c40 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8004c2a:	4904      	ldr	r1, [pc, #16]	@ (8004c3c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd90      	pop	{r4, r7, pc}
 8004c38:	20000280 	.word	0x20000280
 8004c3c:	200002a0 	.word	0x200002a0
 8004c40:	200002a8 	.word	0x200002a8

08004c44 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004c54:	681c      	ldr	r4, [r3, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	220e      	movs	r2, #14
 8004c62:	490c      	ldr	r1, [pc, #48]	@ (8004c94 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a09      	ldr	r2, [pc, #36]	@ (8004c98 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004c74:	4907      	ldr	r1, [pc, #28]	@ (8004c94 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a05      	ldr	r2, [pc, #20]	@ (8004c9c <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8004c86:	4904      	ldr	r1, [pc, #16]	@ (8004c98 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd90      	pop	{r4, r7, pc}
 8004c94:	20000280 	.word	0x20000280
 8004c98:	200002a0 	.word	0x200002a0
 8004c9c:	200002a8 	.word	0x200002a8

08004ca0 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004cb0:	681c      	ldr	r4, [r3, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	220f      	movs	r2, #15
 8004cbe:	490c      	ldr	r1, [pc, #48]	@ (8004cf0 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a09      	ldr	r2, [pc, #36]	@ (8004cf4 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004cd0:	4907      	ldr	r1, [pc, #28]	@ (8004cf0 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a05      	ldr	r2, [pc, #20]	@ (8004cf8 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8004ce2:	4904      	ldr	r1, [pc, #16]	@ (8004cf4 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd90      	pop	{r4, r7, pc}
 8004cf0:	20000280 	.word	0x20000280
 8004cf4:	200002a0 	.word	0x200002a0
 8004cf8:	200002a8 	.word	0x200002a8

08004cfc <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d0c:	681c      	ldr	r4, [r3, #0]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	2300      	movs	r3, #0
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	2300      	movs	r3, #0
 8004d18:	2210      	movs	r2, #16
 8004d1a:	490c      	ldr	r1, [pc, #48]	@ (8004d4c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a09      	ldr	r2, [pc, #36]	@ (8004d50 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8004d2c:	4907      	ldr	r1, [pc, #28]	@ (8004d4c <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a05      	ldr	r2, [pc, #20]	@ (8004d54 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 8004d3e:	4904      	ldr	r1, [pc, #16]	@ (8004d50 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd90      	pop	{r4, r7, pc}
 8004d4c:	20000280 	.word	0x20000280
 8004d50:	200002a0 	.word	0x200002a0
 8004d54:	200002a8 	.word	0x200002a8

08004d58 <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d68:	681c      	ldr	r4, [r3, #0]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2300      	movs	r3, #0
 8004d74:	2211      	movs	r2, #17
 8004d76:	490c      	ldr	r1, [pc, #48]	@ (8004da8 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a09      	ldr	r2, [pc, #36]	@ (8004dac <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8004d88:	4907      	ldr	r1, [pc, #28]	@ (8004da8 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a05      	ldr	r2, [pc, #20]	@ (8004db0 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 8004d9a:	4904      	ldr	r1, [pc, #16]	@ (8004dac <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd90      	pop	{r4, r7, pc}
 8004da8:	20000280 	.word	0x20000280
 8004dac:	200002a0 	.word	0x200002a0
 8004db0:	200002a8 	.word	0x200002a8

08004db4 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004dc4:	681c      	ldr	r4, [r3, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2212      	movs	r2, #18
 8004dd2:	4912      	ldr	r1, [pc, #72]	@ (8004e1c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e20 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8004de4:	490d      	ldr	r1, [pc, #52]	@ (8004e1c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a0b      	ldr	r2, [pc, #44]	@ (8004e24 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8004df6:	490a      	ldr	r1, [pc, #40]	@ (8004e20 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2202      	movs	r2, #2
 8004e08:	4906      	ldr	r1, [pc, #24]	@ (8004e24 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8004e12:	89fb      	ldrh	r3, [r7, #14]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}
 8004e1c:	20000280 	.word	0x20000280
 8004e20:	200002a0 	.word	0x200002a0
 8004e24:	200002a8 	.word	0x200002a8

08004e28 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	460b      	mov	r3, r1
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e3e:	681c      	ldr	r4, [r3, #0]
 8004e40:	7afa      	ldrb	r2, [r7, #11]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4903      	ldr	r1, [pc, #12]	@ (8004e5c <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	47a0      	blx	r4
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd90      	pop	{r4, r7, pc}
 8004e5c:	20000280 	.word	0x20000280

08004e60 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e74:	681c      	ldr	r4, [r3, #0]
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	9201      	str	r2, [sp, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	9200      	str	r2, [sp, #0]
 8004e80:	2202      	movs	r2, #2
 8004e82:	4903      	ldr	r1, [pc, #12]	@ (8004e90 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	47a0      	blx	r4
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}
 8004e90:	20000280 	.word	0x20000280

08004e94 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004eaa:	681c      	ldr	r4, [r3, #0]
 8004eac:	7afa      	ldrb	r2, [r7, #11]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	2203      	movs	r2, #3
 8004eba:	4903      	ldr	r1, [pc, #12]	@ (8004ec8 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	47a0      	blx	r4
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd90      	pop	{r4, r7, pc}
 8004ec8:	20000280 	.word	0x20000280

08004ecc <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004ee0:	681c      	ldr	r4, [r3, #0]
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	9201      	str	r2, [sp, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	9200      	str	r2, [sp, #0]
 8004eec:	2204      	movs	r2, #4
 8004eee:	4903      	ldr	r1, [pc, #12]	@ (8004efc <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	47a0      	blx	r4
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd90      	pop	{r4, r7, pc}
 8004efc:	20000280 	.word	0x20000280

08004f00 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f16:	681c      	ldr	r4, [r3, #0]
 8004f18:	7afa      	ldrb	r2, [r7, #11]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	2205      	movs	r2, #5
 8004f26:	4903      	ldr	r1, [pc, #12]	@ (8004f34 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	47a0      	blx	r4
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd90      	pop	{r4, r7, pc}
 8004f34:	20000280 	.word	0x20000280

08004f38 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f4a:	681c      	ldr	r4, [r3, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	2300      	movs	r3, #0
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2206      	movs	r2, #6
 8004f58:	4903      	ldr	r1, [pc, #12]	@ (8004f68 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	47a0      	blx	r4
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd90      	pop	{r4, r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000280 	.word	0x20000280

08004f6c <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	460b      	mov	r3, r1
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f82:	681c      	ldr	r4, [r3, #0]
 8004f84:	7afa      	ldrb	r2, [r7, #11]
 8004f86:	2300      	movs	r3, #0
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	2207      	movs	r2, #7
 8004f92:	4903      	ldr	r1, [pc, #12]	@ (8004fa0 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	47a0      	blx	r4
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd90      	pop	{r4, r7, pc}
 8004fa0:	20000280 	.word	0x20000280

08004fa4 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	72fb      	strb	r3, [r7, #11]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fbe:	681c      	ldr	r4, [r3, #0]
 8004fc0:	7af9      	ldrb	r1, [r7, #11]
 8004fc2:	7abb      	ldrb	r3, [r7, #10]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	9201      	str	r2, [sp, #4]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	2208      	movs	r2, #8
 8004fce:	4903      	ldr	r1, [pc, #12]	@ (8004fdc <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	47a0      	blx	r4
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd90      	pop	{r4, r7, pc}
 8004fdc:	20000280 	.word	0x20000280

08004fe0 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
 8004fec:	4613      	mov	r3, r2
 8004fee:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004ff8:	681c      	ldr	r4, [r3, #0]
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	78bb      	ldrb	r3, [r7, #2]
 8004ffe:	2100      	movs	r1, #0
 8005000:	9101      	str	r1, [sp, #4]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	2209      	movs	r2, #9
 8005008:	4903      	ldr	r1, [pc, #12]	@ (8005018 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	47a0      	blx	r4
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bd90      	pop	{r4, r7, pc}
 8005016:	bf00      	nop
 8005018:	20000280 	.word	0x20000280

0800501c <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b085      	sub	sp, #20
 8005020:	af02      	add	r7, sp, #8
 8005022:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800502c:	681c      	ldr	r4, [r3, #0]
 800502e:	2300      	movs	r3, #0
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	2300      	movs	r3, #0
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2300      	movs	r3, #0
 8005038:	220a      	movs	r2, #10
 800503a:	4903      	ldr	r1, [pc, #12]	@ (8005048 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	47a0      	blx	r4
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bd90      	pop	{r4, r7, pc}
 8005048:	20000280 	.word	0x20000280

0800504c <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b085      	sub	sp, #20
 8005050:	af02      	add	r7, sp, #8
 8005052:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800505c:	681c      	ldr	r4, [r3, #0]
 800505e:	2300      	movs	r3, #0
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	2300      	movs	r3, #0
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2300      	movs	r3, #0
 8005068:	220b      	movs	r2, #11
 800506a:	4903      	ldr	r1, [pc, #12]	@ (8005078 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	47a0      	blx	r4
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bd90      	pop	{r4, r7, pc}
 8005078:	20000280 	.word	0x20000280

0800507c <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b085      	sub	sp, #20
 8005080:	af02      	add	r7, sp, #8
 8005082:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800508c:	681c      	ldr	r4, [r3, #0]
 800508e:	2300      	movs	r3, #0
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	2300      	movs	r3, #0
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	220c      	movs	r2, #12
 800509a:	4903      	ldr	r1, [pc, #12]	@ (80050a8 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	47a0      	blx	r4
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd90      	pop	{r4, r7, pc}
 80050a8:	20000280 	.word	0x20000280

080050ac <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050bc:	681c      	ldr	r4, [r3, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	2300      	movs	r3, #0
 80050c8:	220d      	movs	r2, #13
 80050ca:	4903      	ldr	r1, [pc, #12]	@ (80050d8 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	47a0      	blx	r4
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	20000280 	.word	0x20000280

080050dc <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b085      	sub	sp, #20
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050ec:	681c      	ldr	r4, [r3, #0]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	2300      	movs	r3, #0
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	2300      	movs	r3, #0
 80050f8:	220e      	movs	r2, #14
 80050fa:	4903      	ldr	r1, [pc, #12]	@ (8005108 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	47a0      	blx	r4
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	20000280 	.word	0x20000280

0800510c <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b085      	sub	sp, #20
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800511c:	681c      	ldr	r4, [r3, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	2300      	movs	r3, #0
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	2300      	movs	r3, #0
 8005128:	220f      	movs	r2, #15
 800512a:	4903      	ldr	r1, [pc, #12]	@ (8005138 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	47a0      	blx	r4
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	bd90      	pop	{r4, r7, pc}
 8005138:	20000280 	.word	0x20000280

0800513c <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b085      	sub	sp, #20
 8005140:	af02      	add	r7, sp, #8
 8005142:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800514c:	681c      	ldr	r4, [r3, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	2300      	movs	r3, #0
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	2210      	movs	r2, #16
 800515a:	4903      	ldr	r1, [pc, #12]	@ (8005168 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	47a0      	blx	r4
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	20000280 	.word	0x20000280

0800516c <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b085      	sub	sp, #20
 8005170:	af02      	add	r7, sp, #8
 8005172:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800517c:	681c      	ldr	r4, [r3, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	2300      	movs	r3, #0
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	2300      	movs	r3, #0
 8005188:	2211      	movs	r2, #17
 800518a:	4903      	ldr	r1, [pc, #12]	@ (8005198 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	47a0      	blx	r4
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bd90      	pop	{r4, r7, pc}
 8005198:	20000280 	.word	0x20000280

0800519c <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051ac:	681c      	ldr	r4, [r3, #0]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2300      	movs	r3, #0
 80051b8:	2212      	movs	r2, #18
 80051ba:	4903      	ldr	r1, [pc, #12]	@ (80051c8 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	47a0      	blx	r4
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd90      	pop	{r4, r7, pc}
 80051c8:	20000280 	.word	0x20000280

080051cc <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a09      	ldr	r2, [pc, #36]	@ (8005204 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80051e0:	4909      	ldr	r1, [pc, #36]	@ (8005208 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a06      	ldr	r2, [pc, #24]	@ (800520c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 80051f2:	4904      	ldr	r1, [pc, #16]	@ (8005204 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80051f8:	4b04      	ldr	r3, [pc, #16]	@ (800520c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200002a0 	.word	0x200002a0
 8005208:	20000280 	.word	0x20000280
 800520c:	200002a8 	.word	0x200002a8

08005210 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b089      	sub	sp, #36	@ 0x24
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800521c:	4b17      	ldr	r3, [pc, #92]	@ (800527c <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005222:	2300      	movs	r3, #0
 8005224:	75fb      	strb	r3, [r7, #23]
 8005226:	e020      	b.n	800526a <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005230:	681c      	ldr	r4, [r3, #0]
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	461a      	mov	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	1899      	adds	r1, r3, r2
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	441a      	add	r2, r3
 8005246:	230a      	movs	r3, #10
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2302      	movs	r3, #2
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8005250:	2300      	movs	r3, #0
 8005252:	75bb      	strb	r3, [r7, #22]
 8005254:	e003      	b.n	800525e <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 8005256:	bf00      	nop
 8005258:	7dbb      	ldrb	r3, [r7, #22]
 800525a:	3301      	adds	r3, #1
 800525c:	75bb      	strb	r3, [r7, #22]
 800525e:	7dbb      	ldrb	r3, [r7, #22]
 8005260:	2b7c      	cmp	r3, #124	@ 0x7c
 8005262:	d9f8      	bls.n	8005256 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	3301      	adds	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d9db      	bls.n	8005228 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8005270:	bf00      	nop
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bd90      	pop	{r4, r7, pc}
 800527a:	bf00      	nop
 800527c:	2000027d 	.word	0x2000027d

08005280 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005292:	2301      	movs	r3, #1
 8005294:	74fb      	strb	r3, [r7, #19]
 8005296:	e016      	b.n	80052c6 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	461a      	mov	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	7f1b      	ldrb	r3, [r3, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	4413      	add	r3, r2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	4619      	mov	r1, r3
 80052ac:	79fa      	ldrb	r2, [r7, #7]
 80052ae:	7cfb      	ldrb	r3, [r7, #19]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80052c0:	7cfb      	ldrb	r3, [r7, #19]
 80052c2:	3301      	adds	r3, #1
 80052c4:	74fb      	strb	r3, [r7, #19]
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d9e5      	bls.n	8005298 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80052cc:	697b      	ldr	r3, [r7, #20]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2118      	movs	r1, #24
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
 80052fc:	4602      	mov	r2, r0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005302:	b292      	uxth	r2, r2
 8005304:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	2b0e      	cmp	r3, #14
 800530a:	f200 8099 	bhi.w	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 800530e:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005351 	.word	0x08005351
 8005318:	08005361 	.word	0x08005361
 800531c:	08005371 	.word	0x08005371
 8005320:	08005381 	.word	0x08005381
 8005324:	08005391 	.word	0x08005391
 8005328:	080053a1 	.word	0x080053a1
 800532c:	080053b1 	.word	0x080053b1
 8005330:	080053c1 	.word	0x080053c1
 8005334:	080053d1 	.word	0x080053d1
 8005338:	080053e1 	.word	0x080053e1
 800533c:	080053f1 	.word	0x080053f1
 8005340:	08005401 	.word	0x08005401
 8005344:	08005411 	.word	0x08005411
 8005348:	08005421 	.word	0x08005421
 800534c:	08005431 	.word	0x08005431
      state = pL6470_StatusRegister->HiZ;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	73fb      	strb	r3, [r7, #15]
      break;
 800535e:	e06f      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800536a:	b2db      	uxtb	r3, r3
 800536c:	73fb      	strb	r3, [r7, #15]
      break;
 800536e:	e067      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	73fb      	strb	r3, [r7, #15]
      break;
 800537e:	e05f      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	73fb      	strb	r3, [r7, #15]
      break;
 800538e:	e057      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	73fb      	strb	r3, [r7, #15]
      break;
 800539e:	e04f      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	73fb      	strb	r3, [r7, #15]
      break;
 80053ae:	e047      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	73fb      	strb	r3, [r7, #15]
      break;
 80053be:	e03f      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	73fb      	strb	r3, [r7, #15]
      break;
 80053ce:	e037      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	73fb      	strb	r3, [r7, #15]
      break;
 80053de:	e02f      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	73fb      	strb	r3, [r7, #15]
      break;
 80053ee:	e027      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	73fb      	strb	r3, [r7, #15]
      break;
 80053fe:	e01f      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005404:	785b      	ldrb	r3, [r3, #1]
 8005406:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	73fb      	strb	r3, [r7, #15]
      break;
 800540e:	e017      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005414:	785b      	ldrb	r3, [r3, #1]
 8005416:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800541a:	b2db      	uxtb	r3, r3
 800541c:	73fb      	strb	r3, [r7, #15]
      break;
 800541e:	e00f      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	73fb      	strb	r3, [r7, #15]
      break;
 800542e:	e007      	b.n	8005440 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	73fb      	strb	r3, [r7, #15]
      break;
 800543e:	bf00      	nop
  return state;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop

0800544c <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	2b18      	cmp	r3, #24
 800545c:	d809      	bhi.n	8005472 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a19      	ldr	r1, [r3, #32]
 8005462:	78fa      	ldrb	r2, [r7, #3]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3301      	adds	r3, #1
 8005470:	e000      	b.n	8005474 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
 800548e:	e01a      	b.n	80054c6 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	4413      	add	r3, r2
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	4413      	add	r3, r2
 80054a4:	2200      	movs	r2, #0
 80054a6:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	4413      	add	r3, r2
 80054b0:	2200      	movs	r2, #0
 80054b2:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	4413      	add	r3, r2
 80054bc:	2200      	movs	r2, #0
 80054be:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	3301      	adds	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d9e1      	bls.n	8005490 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	7f1b      	ldrb	r3, [r3, #28]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	4413      	add	r3, r2
 80054f4:	79fa      	ldrb	r2, [r7, #7]
 80054f6:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	7f1b      	ldrb	r3, [r3, #28]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4413      	add	r3, r2
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	7f1b      	ldrb	r3, [r3, #28]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	4413      	add	r3, r2
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	7f1b      	ldrb	r3, [r3, #28]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4413      	add	r3, r2
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	60da      	str	r2, [r3, #12]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b087      	sub	sp, #28
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8005540:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8005548:	4b0e      	ldr	r3, [pc, #56]	@ (8005584 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8005566:	681c      	ldr	r4, [r3, #0]
 8005568:	79fa      	ldrb	r2, [r7, #7]
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	47a0      	blx	r4
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bd90      	pop	{r4, r7, pc}
 8005582:	bf00      	nop
 8005584:	2000027d 	.word	0x2000027d

08005588 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005598:	2300      	movs	r3, #0
 800559a:	75bb      	strb	r3, [r7, #22]
 800559c:	e013      	b.n	80055c6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]
 80055a2:	e00a      	b.n	80055ba <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80055a4:	7d7b      	ldrb	r3, [r7, #21]
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	757a      	strb	r2, [r7, #21]
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4413      	add	r3, r2
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	3301      	adds	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d9f1      	bls.n	80055a4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80055c0:	7dbb      	ldrb	r3, [r7, #22]
 80055c2:	3301      	adds	r3, #1
 80055c4:	75bb      	strb	r3, [r7, #22]
 80055c6:	7dbb      	ldrb	r3, [r7, #22]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d9e8      	bls.n	800559e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
 80055d0:	e1f1      	b.n	80059b6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	440b      	add	r3, r1
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	4619      	mov	r1, r3
 80055e2:	460b      	mov	r3, r1
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	1a5b      	subs	r3, r3, r1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	441a      	add	r2, r3
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	440b      	add	r3, r1
 80055f2:	7b12      	ldrb	r2, [r2, #12]
 80055f4:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	4413      	add	r3, r2
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b12      	cmp	r3, #18
 8005602:	f200 81d5 	bhi.w	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8005606:	a201      	add	r2, pc, #4	@ (adr r2, 800560c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8005608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560c:	080059b1 	.word	0x080059b1
 8005610:	08005659 	.word	0x08005659
 8005614:	080056e1 	.word	0x080056e1
 8005618:	08005711 	.word	0x08005711
 800561c:	08005779 	.word	0x08005779
 8005620:	080057a7 	.word	0x080057a7
 8005624:	0800580f 	.word	0x0800580f
 8005628:	0800584b 	.word	0x0800584b
 800562c:	080058b3 	.word	0x080058b3
 8005630:	0800594f 	.word	0x0800594f
 8005634:	080059b1 	.word	0x080059b1
 8005638:	080059b1 	.word	0x080059b1
 800563c:	080059b1 	.word	0x080059b1
 8005640:	080059b1 	.word	0x080059b1
 8005644:	080059b1 	.word	0x080059b1
 8005648:	080059b1 	.word	0x080059b1
 800564c:	080059b1 	.word	0x080059b1
 8005650:	080059b1 	.word	0x080059b1
 8005654:	080059b1 	.word	0x080059b1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	7819      	ldrb	r1, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a18      	ldr	r0, [r3, #32]
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	4413      	add	r3, r2
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4403      	add	r3, r0
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4403      	add	r3, r0
 8005680:	430a      	orrs	r2, r1
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a19      	ldr	r1, [r3, #32]
 800568a:	7dfb      	ldrb	r3, [r7, #23]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4413      	add	r3, r2
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	7b9b      	ldrb	r3, [r3, #14]
 80056a0:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80056a2:	2301      	movs	r3, #1
 80056a4:	75bb      	strb	r3, [r7, #22]
 80056a6:	e016      	b.n	80056d6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	4413      	add	r3, r2
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	7d39      	ldrb	r1, [r7, #20]
 80056b4:	7dbb      	ldrb	r3, [r7, #22]
 80056b6:	1acb      	subs	r3, r1, r3
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	fa22 f103 	lsr.w	r1, r2, r3
 80056be:	7dbb      	ldrb	r3, [r7, #22]
 80056c0:	005a      	lsls	r2, r3, #1
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	4413      	add	r3, r2
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4413      	add	r3, r2
 80056cc:	b2ca      	uxtb	r2, r1
 80056ce:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80056d0:	7dbb      	ldrb	r3, [r7, #22]
 80056d2:	3301      	adds	r3, #1
 80056d4:	75bb      	strb	r3, [r7, #22]
 80056d6:	7d3a      	ldrb	r2, [r7, #20]
 80056d8:	7dbb      	ldrb	r3, [r7, #22]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d2e4      	bcs.n	80056a8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 80056de:	e167      	b.n	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4413      	add	r3, r2
 80056e6:	7819      	ldrb	r1, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a18      	ldr	r0, [r3, #32]
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	4413      	add	r3, r2
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4403      	add	r3, r0
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4403      	add	r3, r0
 8005708:	430a      	orrs	r2, r1
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
      break;
 800570e:	e14f      	b.n	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4413      	add	r3, r2
 8005716:	7819      	ldrb	r1, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4413      	add	r3, r2
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4413      	add	r3, r2
 800572c:	4403      	add	r3, r0
 800572e:	7a1a      	ldrb	r2, [r3, #8]
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4403      	add	r3, r0
 8005736:	430a      	orrs	r2, r1
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800573c:	2301      	movs	r3, #1
 800573e:	75bb      	strb	r3, [r7, #22]
 8005740:	e016      	b.n	8005770 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	4413      	add	r3, r2
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	7dbb      	ldrb	r3, [r7, #22]
 800574e:	f1c3 0303 	rsb	r3, r3, #3
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	fa22 f103 	lsr.w	r1, r2, r3
 8005758:	7dbb      	ldrb	r3, [r7, #22]
 800575a:	005a      	lsls	r2, r3, #1
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	4413      	add	r3, r2
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	b2ca      	uxtb	r2, r1
 8005768:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800576a:	7dbb      	ldrb	r3, [r7, #22]
 800576c:	3301      	adds	r3, #1
 800576e:	75bb      	strb	r3, [r7, #22]
 8005770:	7dbb      	ldrb	r3, [r7, #22]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d9e5      	bls.n	8005742 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8005776:	e11b      	b.n	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005778:	7dfb      	ldrb	r3, [r7, #23]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	7819      	ldrb	r1, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	4413      	add	r3, r2
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	4413      	add	r3, r2
 8005794:	4403      	add	r3, r0
 8005796:	7a1a      	ldrb	r2, [r3, #8]
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4403      	add	r3, r0
 800579e:	430a      	orrs	r2, r1
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
      break;
 80057a4:	e104      	b.n	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	4413      	add	r3, r2
 80057ac:	7819      	ldrb	r1, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	4403      	add	r3, r0
 80057c4:	7a1a      	ldrb	r2, [r3, #8]
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4403      	add	r3, r0
 80057cc:	430a      	orrs	r2, r1
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80057d2:	2301      	movs	r3, #1
 80057d4:	75bb      	strb	r3, [r7, #22]
 80057d6:	e016      	b.n	8005806 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	4413      	add	r3, r2
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	7dbb      	ldrb	r3, [r7, #22]
 80057e4:	f1c3 0303 	rsb	r3, r3, #3
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	fa22 f103 	lsr.w	r1, r2, r3
 80057ee:	7dbb      	ldrb	r3, [r7, #22]
 80057f0:	005a      	lsls	r2, r3, #1
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	4413      	add	r3, r2
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4413      	add	r3, r2
 80057fc:	b2ca      	uxtb	r2, r1
 80057fe:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005800:	7dbb      	ldrb	r3, [r7, #22]
 8005802:	3301      	adds	r3, #1
 8005804:	75bb      	strb	r3, [r7, #22]
 8005806:	7dbb      	ldrb	r3, [r7, #22]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d9e5      	bls.n	80057d8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800580c:	e0d0      	b.n	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800580e:	2301      	movs	r3, #1
 8005810:	75bb      	strb	r3, [r7, #22]
 8005812:	e016      	b.n	8005842 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4413      	add	r3, r2
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	7dbb      	ldrb	r3, [r7, #22]
 8005820:	f1c3 0303 	rsb	r3, r3, #3
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	fa22 f103 	lsr.w	r1, r2, r3
 800582a:	7dbb      	ldrb	r3, [r7, #22]
 800582c:	005a      	lsls	r2, r3, #1
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	4413      	add	r3, r2
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4413      	add	r3, r2
 8005838:	b2ca      	uxtb	r2, r1
 800583a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800583c:	7dbb      	ldrb	r3, [r7, #22]
 800583e:	3301      	adds	r3, #1
 8005840:	75bb      	strb	r3, [r7, #22]
 8005842:	7dbb      	ldrb	r3, [r7, #22]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d9e5      	bls.n	8005814 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005848:	e0b2      	b.n	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	7819      	ldrb	r1, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005856:	7dfb      	ldrb	r3, [r7, #23]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	4403      	add	r3, r0
 8005868:	7a1a      	ldrb	r2, [r3, #8]
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	4403      	add	r3, r0
 8005870:	430a      	orrs	r2, r1
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005876:	2301      	movs	r3, #1
 8005878:	75bb      	strb	r3, [r7, #22]
 800587a:	e016      	b.n	80058aa <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	4413      	add	r3, r2
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	7dbb      	ldrb	r3, [r7, #22]
 8005888:	f1c3 0303 	rsb	r3, r3, #3
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	fa22 f103 	lsr.w	r1, r2, r3
 8005892:	7dbb      	ldrb	r3, [r7, #22]
 8005894:	005a      	lsls	r2, r3, #1
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	4413      	add	r3, r2
 800589a:	461a      	mov	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4413      	add	r3, r2
 80058a0:	b2ca      	uxtb	r2, r1
 80058a2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80058a4:	7dbb      	ldrb	r3, [r7, #22]
 80058a6:	3301      	adds	r3, #1
 80058a8:	75bb      	strb	r3, [r7, #22]
 80058aa:	7dbb      	ldrb	r3, [r7, #22]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d9e5      	bls.n	800587c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 80058b0:	e07e      	b.n	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	b259      	sxtb	r1, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	4413      	add	r3, r2
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	4403      	add	r3, r0
 80058d2:	791b      	ldrb	r3, [r3, #4]
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	b25b      	sxtb	r3, r3
 80058d8:	430b      	orrs	r3, r1
 80058da:	b259      	sxtb	r1, r3
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	b2ca      	uxtb	r2, r1
 80058e4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	4413      	add	r3, r2
 80058ec:	7819      	ldrb	r1, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4413      	add	r3, r2
 8005902:	4403      	add	r3, r0
 8005904:	7a1a      	ldrb	r2, [r3, #8]
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4403      	add	r3, r0
 800590c:	430a      	orrs	r2, r1
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005912:	2301      	movs	r3, #1
 8005914:	75bb      	strb	r3, [r7, #22]
 8005916:	e016      	b.n	8005946 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	4413      	add	r3, r2
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	7dbb      	ldrb	r3, [r7, #22]
 8005924:	f1c3 0303 	rsb	r3, r3, #3
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	fa22 f103 	lsr.w	r1, r2, r3
 800592e:	7dbb      	ldrb	r3, [r7, #22]
 8005930:	005a      	lsls	r2, r3, #1
 8005932:	7dfb      	ldrb	r3, [r7, #23]
 8005934:	4413      	add	r3, r2
 8005936:	461a      	mov	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4413      	add	r3, r2
 800593c:	b2ca      	uxtb	r2, r1
 800593e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005940:	7dbb      	ldrb	r3, [r7, #22]
 8005942:	3301      	adds	r3, #1
 8005944:	75bb      	strb	r3, [r7, #22]
 8005946:	7dbb      	ldrb	r3, [r7, #22]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d9e5      	bls.n	8005918 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800594c:	e030      	b.n	80059b0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4413      	add	r3, r2
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	b259      	sxtb	r1, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	4413      	add	r3, r2
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	4403      	add	r3, r0
 800596e:	791b      	ldrb	r3, [r3, #4]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	b25b      	sxtb	r3, r3
 8005974:	430b      	orrs	r3, r1
 8005976:	b259      	sxtb	r1, r3
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	b2ca      	uxtb	r2, r1
 8005980:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	7819      	ldrb	r1, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4413      	add	r3, r2
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	4403      	add	r3, r0
 80059a0:	7a1a      	ldrb	r2, [r3, #8]
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4403      	add	r3, r0
 80059a8:	430a      	orrs	r2, r1
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]
      break;
 80059ae:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	3301      	adds	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f67f ae0a 	bls.w	80055d2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 80059d8:	edd7 7a00 	vldr	s15, [r7]
 80059dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e4:	db1e      	blt.n	8005a24 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 80059e6:	edd7 7a00 	vldr	s15, [r7]
 80059ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059ee:	ee17 2a90 	vmov	r2, s15
 80059f2:	edd7 7a00 	vldr	s15, [r7]
 80059f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059fe:	ed97 7a00 	vldr	s14, [r7]
 8005a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a12:	bf4c      	ite	mi
 8005a14:	2301      	movmi	r3, #1
 8005a16:	2300      	movpl	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	f083 0301 	eor.w	r3, r3, #1
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	4413      	add	r3, r2
 8005a22:	e01a      	b.n	8005a5a <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005a24:	edd7 7a00 	vldr	s15, [r7]
 8005a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a2c:	ee17 2a90 	vmov	r2, s15
 8005a30:	edd7 7a00 	vldr	s15, [r7]
 8005a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a3c:	ed97 7a00 	vldr	s14, [r7]
 8005a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a44:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8005a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a50:	d501      	bpl.n	8005a56 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005a56:	2300      	movs	r3, #0
 8005a58:	1ad3      	subs	r3, r2, r3
        }
    }
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	4613      	mov	r3, r2
 8005a72:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6918      	ldr	r0, [r3, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8a9b      	ldrh	r3, [r3, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4619      	mov	r1, r3
 8005a80:	f008 ff94 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6998      	ldr	r0, [r3, #24]
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	2364      	movs	r3, #100	@ 0x64
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	f009 ffbc 	bl	800fa0a <HAL_SPI_Receive>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6918      	ldr	r0, [r3, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8a9b      	ldrh	r3, [r3, #20]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f008 ff83 	bl	800e9ac <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005ab0:	2300      	movs	r3, #0
    }
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b086      	sub	sp, #24
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6918      	ldr	r0, [r3, #16]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8a9b      	ldrh	r3, [r3, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f008 ff6a 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6998      	ldr	r0, [r3, #24]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	2364      	movs	r3, #100	@ 0x64
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	f009 fe56 	bl	800f792 <HAL_SPI_Transmit>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6918      	ldr	r0, [r3, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8a9b      	ldrh	r3, [r3, #20]
 8005af2:	2201      	movs	r2, #1
 8005af4:	4619      	mov	r1, r3
 8005af6:	f008 ff59 	bl	800e9ac <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005b04:	2300      	movs	r3, #0
    }
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b088      	sub	sp, #32
 8005b12:	af02      	add	r7, sp, #8
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6918      	ldr	r0, [r3, #16]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8a9b      	ldrh	r3, [r3, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	4619      	mov	r1, r3
 8005b28:	f008 ff40 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6998      	ldr	r0, [r3, #24]
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b36:	9200      	str	r2, [sp, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	f00a f876 	bl	800fc2c <HAL_SPI_TransmitReceive>
 8005b40:	4603      	mov	r3, r0
 8005b42:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6918      	ldr	r0, [r3, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8a9b      	ldrh	r3, [r3, #20]
 8005b52:	2201      	movs	r2, #1
 8005b54:	4619      	mov	r1, r3
 8005b56:	f008 ff29 	bl	800e9ac <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e008      	b.n	8005b70 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6918      	ldr	r0, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8a9b      	ldrh	r3, [r3, #20]
 8005b66:	2201      	movs	r2, #1
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f008 ff1f 	bl	800e9ac <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005b6e:	2300      	movs	r3, #0
    }
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005b8e:	681c      	ldr	r4, [r3, #0]
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	47a0      	blx	r4
    }
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd90      	pop	{r4, r7, pc}

08005ba2 <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
 8005bbc:	4603      	mov	r3, r0
    }
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
 8005bdc:	4603      	mov	r3, r0
    }
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	4611      	mov	r1, r2
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
 8005c04:	4603      	mov	r3, r0
    }
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005c0e:	b590      	push	{r4, r7, lr}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005c1e:	681c      	ldr	r4, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
 8005c30:	4603      	mov	r3, r0
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	47a0      	blx	r4
 8005c38:	4603      	mov	r3, r0
    }
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd90      	pop	{r4, r7, pc}

08005c42 <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8005c42:	b590      	push	{r4, r7, lr}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005c52:	681c      	ldr	r4, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2102      	movs	r1, #2
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
 8005c64:	4603      	mov	r3, r0
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	47a0      	blx	r4
 8005c6c:	4603      	mov	r3, r0
    }
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}

08005c76 <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8005c76:	b5b0      	push	{r4, r5, r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c86:	681c      	ldr	r4, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8005c90:	681d      	ldr	r5, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2103      	movs	r1, #3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	47a8      	blx	r5
 8005caa:	eef0 7a40 	vmov.f32	s15, s0
 8005cae:	eeb0 0a67 	vmov.f32	s0, s15
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	47a0      	blx	r4
 8005cb6:	4603      	mov	r3, r0
    }
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bdb0      	pop	{r4, r5, r7, pc}

08005cc0 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8005cc0:	b5b0      	push	{r4, r5, r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cd0:	681c      	ldr	r4, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cda:	681d      	ldr	r5, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2106      	movs	r1, #6
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
 8005cec:	4603      	mov	r3, r0
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	47a8      	blx	r5
 8005cf6:	eef0 7a40 	vmov.f32	s15, s0
 8005cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	47a0      	blx	r4
 8005d02:	4603      	mov	r3, r0
    }
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bdb0      	pop	{r4, r5, r7, pc}

08005d0c <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8005d0c:	b5b0      	push	{r4, r5, r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d1c:	681c      	ldr	r4, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005d26:	681d      	ldr	r5, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2107      	movs	r1, #7
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	4798      	blx	r3
 8005d38:	4603      	mov	r3, r0
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	47a8      	blx	r5
 8005d42:	eef0 7a40 	vmov.f32	s15, s0
 8005d46:	eeb0 0a67 	vmov.f32	s0, s15
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	47a0      	blx	r4
 8005d4e:	4603      	mov	r3, r0
    }
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bdb0      	pop	{r4, r5, r7, pc}

08005d58 <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8005d58:	b5b0      	push	{r4, r5, r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d68:	681c      	ldr	r4, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005d72:	681d      	ldr	r5, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2104      	movs	r1, #4
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
 8005d84:	4603      	mov	r3, r0
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	47a8      	blx	r5
 8005d8e:	eef0 7a40 	vmov.f32	s15, s0
 8005d92:	eeb0 0a67 	vmov.f32	s0, s15
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	47a0      	blx	r4
 8005d9a:	4603      	mov	r3, r0
    }
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bdb0      	pop	{r4, r5, r7, pc}

08005da4 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8005da4:	b5b0      	push	{r4, r5, r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005db4:	681c      	ldr	r4, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005dbe:	681d      	ldr	r5, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2105      	movs	r1, #5
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	47a8      	blx	r5
 8005dda:	eef0 7a40 	vmov.f32	s15, s0
 8005dde:	eeb0 0a67 	vmov.f32	s0, s15
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	47a0      	blx	r4
 8005de6:	4603      	mov	r3, r0
    }
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bdb0      	pop	{r4, r5, r7, pc}

08005df0 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2104      	movs	r1, #4
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 8005e12:	2300      	movs	r3, #0
    }
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	b2d1      	uxtb	r1, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	4798      	blx	r3
    }
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
    }
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 8005e62:	b590      	push	{r4, r7, lr}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005e72:	681c      	ldr	r4, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2100      	movs	r1, #0
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	2102      	movs	r1, #2
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	47a0      	blx	r4
    }
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd90      	pop	{r4, r7, pc}

08005e96 <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 8005e96:	b590      	push	{r4, r7, lr}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005ea8:	681c      	ldr	r4, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	47a0      	blx	r4
    }
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd90      	pop	{r4, r7, pc}

08005ecc <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005ede:	681c      	ldr	r4, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	ee07 2a90 	vmov	s15, r2
 8005ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	2106      	movs	r1, #6
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	47a0      	blx	r4
        return true;
 8005f06:	2301      	movs	r3, #1
    }
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd90      	pop	{r4, r7, pc}

08005f10 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005f22:	681c      	ldr	r4, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	ee07 2a90 	vmov	s15, r2
 8005f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f38:	eeb0 0a67 	vmov.f32	s0, s15
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	2107      	movs	r1, #7
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	47a0      	blx	r4
        return true;
 8005f4a:	2301      	movs	r3, #1
    }
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd90      	pop	{r4, r7, pc}

08005f54 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8005f54:	b590      	push	{r4, r7, lr}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005f66:	681c      	ldr	r4, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	ee07 2a90 	vmov	s15, r2
 8005f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	2104      	movs	r1, #4
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	47a0      	blx	r4
        return true;
 8005f8e:	2301      	movs	r3, #1
    }
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd90      	pop	{r4, r7, pc}

08005f98 <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005faa:	681c      	ldr	r4, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	ee07 2a90 	vmov	s15, r2
 8005fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3
 8005fc8:	4603      	mov	r3, r0
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2105      	movs	r1, #5
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	47a0      	blx	r4
        return true;
 8005fd2:	2301      	movs	r3, #1
    }
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd90      	pop	{r4, r7, pc}

08005fdc <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	2b07      	cmp	r3, #7
 8005fec:	d901      	bls.n	8005ff2 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e00f      	b.n	8006012 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3380      	adds	r3, #128	@ 0x80
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	2115      	movs	r1, #21
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
        return true;
 8006010:	2301      	movs	r3, #1
    }
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 800601a:	b590      	push	{r4, r7, lr}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800602c:	681c      	ldr	r4, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
 800603e:	4603      	mov	r3, r0
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	47a0      	blx	r4
    }
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}

0800604e <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 800604e:	b5b0      	push	{r4, r5, r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	4613      	mov	r3, r2
 800605a:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8006064:	681c      	ldr	r4, [r3, #0]
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 800606c:	2501      	movs	r5, #1
 800606e:	e000      	b.n	8006072 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 8006070:	2500      	movs	r5, #0
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	4798      	blx	r3
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	4629      	mov	r1, r5
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	47a0      	blx	r4
    }
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bdb0      	pop	{r4, r5, r7, pc}

08006094 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
    }
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
    }
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80060d0:	b5b0      	push	{r4, r5, r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	607b      	str	r3, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	72fb      	strb	r3, [r7, #11]
 80060de:	4613      	mov	r3, r2
 80060e0:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80060ea:	681c      	ldr	r4, [r3, #0]
 80060ec:	7abb      	ldrb	r3, [r7, #10]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80060f2:	2501      	movs	r5, #1
 80060f4:	e000      	b.n	80060f8 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80060f6:	2500      	movs	r5, #0
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	ee07 2a90 	vmov	s15, r2
 8006108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610c:	eeb0 0a67 	vmov.f32	s0, s15
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	4798      	blx	r3
 8006114:	4603      	mov	r3, r0
 8006116:	7af9      	ldrb	r1, [r7, #11]
 8006118:	462a      	mov	r2, r5
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	47a0      	blx	r4
    }
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bdb0      	pop	{r4, r5, r7, pc}

08006126 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 8006126:	b5b0      	push	{r4, r5, r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800613a:	681c      	ldr	r4, [r3, #0]
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 8006142:	2501      	movs	r5, #1
 8006144:	e000      	b.n	8006148 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 8006146:	2500      	movs	r5, #0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2106      	movs	r1, #6
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	4629      	mov	r1, r5
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	47a0      	blx	r4
    }
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bdb0      	pop	{r4, r5, r7, pc}

0800616a <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800616a:	b5b0      	push	{r4, r5, r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	460b      	mov	r3, r1
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006180:	681c      	ldr	r4, [r3, #0]
 8006182:	7afb      	ldrb	r3, [r7, #11]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 8006188:	2501      	movs	r5, #1
 800618a:	e000      	b.n	800618e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 800618c:	2500      	movs	r5, #0
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	ee07 2a90 	vmov	s15, r2
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	eeb0 0a67 	vmov.f32	s0, s15
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	4798      	blx	r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	461a      	mov	r2, r3
 80061ae:	4629      	mov	r1, r5
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	47a0      	blx	r4
    }
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bdb0      	pop	{r4, r5, r7, pc}

080061bc <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	460b      	mov	r3, r1
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	7afa      	ldrb	r2, [r7, #11]
 80061d6:	2a01      	cmp	r2, #1
 80061d8:	d101      	bne.n	80061de <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 80061da:	2101      	movs	r1, #1
 80061dc:	e000      	b.n	80061e0 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 80061de:	2100      	movs	r1, #0
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	4798      	blx	r3
    }
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
    }
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
    }
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
    }
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
    }
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 800626e:	bf00      	nop
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2101      	movs	r1, #1
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1ef      	bne.n	8006270 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3380      	adds	r3, #128	@ 0x80
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	2a01      	cmp	r2, #1
 80062c0:	d101      	bne.n	80062c6 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80062c2:	2201      	movs	r2, #1
 80062c4:	e000      	b.n	80062c8 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80062c6:	2200      	movs	r2, #0
 80062c8:	4611      	mov	r1, r2
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
    }
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
 80062e2:	4613      	mov	r3, r2
 80062e4:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	78ba      	ldrb	r2, [r7, #2]
 80062f2:	2a01      	cmp	r2, #1
 80062f4:	d101      	bne.n	80062fa <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80062f6:	2201      	movs	r2, #1
 80062f8:	e000      	b.n	80062fc <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80062fa:	2200      	movs	r2, #0
 80062fc:	78f9      	ldrb	r1, [r7, #3]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
    }
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
    }
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	4611      	mov	r1, r2
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2100      	movs	r1, #0
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2102      	movs	r1, #2
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2103      	movs	r1, #3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2203      	movs	r2, #3
 80063e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2106      	movs	r1, #6
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2204      	movs	r2, #4
 8006410:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2107      	movs	r1, #7
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2205      	movs	r2, #5
 8006438:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2104      	movs	r1, #4
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2206      	movs	r2, #6
 8006460:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2105      	movs	r1, #5
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2207      	movs	r2, #7
 8006488:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 800649c:	4b0b      	ldr	r3, [pc, #44]	@ (80064cc <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80064a4:	4b09      	ldr	r3, [pc, #36]	@ (80064cc <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4906      	ldr	r1, [pc, #24]	@ (80064d0 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2208      	movs	r2, #8
 80064be:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000249 	.word	0x20000249
 80064d0:	2000024c 	.word	0x2000024c

080064d4 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	b2d1      	uxtb	r1, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2200      	movs	r2, #0
 800653e:	2102      	movs	r1, #2
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2209      	movs	r2, #9
 8006548:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800654c:	bf00      	nop
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006566:	681c      	ldr	r4, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
 8006578:	4603      	mov	r3, r0
 800657a:	461a      	mov	r2, r3
 800657c:	2102      	movs	r1, #2
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}

08006592 <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8006592:	b590      	push	{r4, r7, lr}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80065a4:	681c      	ldr	r4, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	ee07 2a90 	vmov	s15, r2
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eeb0 0a67 	vmov.f32	s0, s15
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	2103      	movs	r1, #3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd90      	pop	{r4, r7, pc}

080065dc <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80065ee:	681c      	ldr	r4, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	ee07 2a90 	vmov	s15, r2
 8006600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006604:	eeb0 0a67 	vmov.f32	s0, s15
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
 800660c:	4603      	mov	r3, r0
 800660e:	461a      	mov	r2, r3
 8006610:	2106      	movs	r1, #6
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	bd90      	pop	{r4, r7, pc}

08006626 <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8006626:	b590      	push	{r4, r7, lr}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006638:	681c      	ldr	r4, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	ee07 2a90 	vmov	s15, r2
 800664a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664e:	eeb0 0a67 	vmov.f32	s0, s15
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	2107      	movs	r1, #7
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bd90      	pop	{r4, r7, pc}

08006670 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006682:	681c      	ldr	r4, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	ee07 2a90 	vmov	s15, r2
 8006694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006698:	eeb0 0a67 	vmov.f32	s0, s15
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
 80066a0:	4603      	mov	r3, r0
 80066a2:	461a      	mov	r2, r3
 80066a4:	2104      	movs	r1, #4
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd90      	pop	{r4, r7, pc}

080066ba <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 80066ba:	b590      	push	{r4, r7, lr}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80066cc:	681c      	ldr	r4, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	ee07 2a90 	vmov	s15, r2
 80066de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e2:	eeb0 0a67 	vmov.f32	s0, s15
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	2105      	movs	r1, #5
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bd90      	pop	{r4, r7, pc}

08006704 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8006704:	b590      	push	{r4, r7, lr}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8006716:	681c      	ldr	r4, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
 8006728:	4603      	mov	r3, r0
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bd90      	pop	{r4, r7, pc}

08006740 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006740:	b5b0      	push	{r4, r5, r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8006756:	681c      	ldr	r4, [r3, #0]
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 800675e:	2501      	movs	r5, #1
 8006760:	e000      	b.n	8006764 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006762:	2500      	movs	r5, #0
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	4798      	blx	r3
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	4629      	mov	r1, r5
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bdb0      	pop	{r4, r5, r7, pc}

0800678e <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 80067da:	b5b0      	push	{r4, r5, r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	72fb      	strb	r3, [r7, #11]
 80067e8:	4613      	mov	r3, r2
 80067ea:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80067f4:	681c      	ldr	r4, [r3, #0]
 80067f6:	7abb      	ldrb	r3, [r7, #10]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80067fc:	2501      	movs	r5, #1
 80067fe:	e000      	b.n	8006802 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006800:	2500      	movs	r5, #0
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	ee07 2a90 	vmov	s15, r2
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	eeb0 0a67 	vmov.f32	s0, s15
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	4798      	blx	r3
 800681e:	4603      	mov	r3, r0
 8006820:	7af9      	ldrb	r1, [r7, #11]
 8006822:	462a      	mov	r2, r5
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bdb0      	pop	{r4, r5, r7, pc}

08006838 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006838:	b5b0      	push	{r4, r5, r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800684c:	681c      	ldr	r4, [r3, #0]
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006854:	2501      	movs	r5, #1
 8006856:	e000      	b.n	800685a <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006858:	2500      	movs	r5, #0
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2106      	movs	r1, #6
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	4629      	mov	r1, r5
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bdb0      	pop	{r4, r5, r7, pc}

08006884 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006884:	b5b0      	push	{r4, r5, r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	460b      	mov	r3, r1
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800689a:	681c      	ldr	r4, [r3, #0]
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 80068a2:	2501      	movs	r5, #1
 80068a4:	e000      	b.n	80068a8 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 80068a6:	2500      	movs	r5, #0
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	ee07 2a90 	vmov	s15, r2
 80068b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068bc:	eeb0 0a67 	vmov.f32	s0, s15
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	4798      	blx	r3
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	4629      	mov	r1, r5
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bdb0      	pop	{r4, r5, r7, pc}

080068de <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	460b      	mov	r3, r1
 80068e8:	607a      	str	r2, [r7, #4]
 80068ea:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	7afa      	ldrb	r2, [r7, #11]
 80068f8:	2a01      	cmp	r2, #1
 80068fa:	d101      	bne.n	8006900 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 80068fc:	2101      	movs	r1, #1
 80068fe:	e000      	b.n	8006902 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006900:	2100      	movs	r1, #0
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006936:	bf00      	nop
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	2a01      	cmp	r2, #1
 80069ca:	d101      	bne.n	80069d0 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 80069cc:	2201      	movs	r2, #1
 80069ce:	e000      	b.n	80069d2 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 80069d0:	2200      	movs	r2, #0
 80069d2:	4611      	mov	r1, r2
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
 80069f4:	4613      	mov	r3, r2
 80069f6:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	78ba      	ldrb	r2, [r7, #2]
 8006a04:	2a01      	cmp	r2, #1
 8006a06:	d101      	bne.n	8006a0c <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006a08:	2201      	movs	r2, #1
 8006a0a:	e000      	b.n	8006a0e <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	78f9      	ldrb	r1, [r7, #3]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
 8006a60:	4603      	mov	r3, r0
    }
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006a84:	b5b0      	push	{r4, r5, r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006a94:	3b01      	subs	r3, #1
 8006a96:	2b07      	cmp	r3, #7
 8006a98:	f200 80fe 	bhi.w	8006c98 <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa4 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006ac5 	.word	0x08006ac5
 8006aa8:	08006af1 	.word	0x08006af1
 8006aac:	08006b1f 	.word	0x08006b1f
 8006ab0:	08006b63 	.word	0x08006b63
 8006ab4:	08006ba9 	.word	0x08006ba9
 8006ab8:	08006bef 	.word	0x08006bef
 8006abc:	08006c35 	.word	0x08006c35
 8006ac0:	08006c7b 	.word	0x08006c7b
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006acc:	681c      	ldr	r4, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6a12      	ldr	r2, [r2, #32]
 8006adc:	7b92      	ldrb	r2, [r2, #14]
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	47a0      	blx	r4
 8006aec:	4603      	mov	r3, r0
 8006aee:	e0d4      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006af8:	681c      	ldr	r4, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6a12      	ldr	r2, [r2, #32]
 8006b08:	3228      	adds	r2, #40	@ 0x28
 8006b0a:	7b92      	ldrb	r2, [r2, #14]
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	47a0      	blx	r4
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	e0bd      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b26:	681c      	ldr	r4, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006b30:	681d      	ldr	r5, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6a12      	ldr	r2, [r2, #32]
 8006b40:	323c      	adds	r2, #60	@ 0x3c
 8006b42:	7b92      	ldrb	r2, [r2, #14]
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	47a8      	blx	r5
 8006b52:	eef0 7a40 	vmov.f32	s15, s0
 8006b56:	eeb0 0a67 	vmov.f32	s0, s15
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	47a0      	blx	r4
 8006b5e:	4603      	mov	r3, r0
 8006b60:	e09b      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b6a:	681c      	ldr	r4, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b74:	681d      	ldr	r5, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6a12      	ldr	r2, [r2, #32]
 8006b84:	3278      	adds	r2, #120	@ 0x78
 8006b86:	7b92      	ldrb	r2, [r2, #14]
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	47a8      	blx	r5
 8006b98:	eef0 7a40 	vmov.f32	s15, s0
 8006b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	47a0      	blx	r4
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	e078      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bb0:	681c      	ldr	r4, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006bba:	681d      	ldr	r5, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6a12      	ldr	r2, [r2, #32]
 8006bca:	328c      	adds	r2, #140	@ 0x8c
 8006bcc:	7b92      	ldrb	r2, [r2, #14]
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	47a8      	blx	r5
 8006bde:	eef0 7a40 	vmov.f32	s15, s0
 8006be2:	eeb0 0a67 	vmov.f32	s0, s15
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	47a0      	blx	r4
 8006bea:	4603      	mov	r3, r0
 8006bec:	e055      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bf6:	681c      	ldr	r4, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006c00:	681d      	ldr	r5, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6a12      	ldr	r2, [r2, #32]
 8006c10:	3250      	adds	r2, #80	@ 0x50
 8006c12:	7b92      	ldrb	r2, [r2, #14]
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	47a8      	blx	r5
 8006c24:	eef0 7a40 	vmov.f32	s15, s0
 8006c28:	eeb0 0a67 	vmov.f32	s0, s15
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	47a0      	blx	r4
 8006c30:	4603      	mov	r3, r0
 8006c32:	e032      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c3c:	681c      	ldr	r4, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006c46:	681d      	ldr	r5, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6a12      	ldr	r2, [r2, #32]
 8006c56:	3264      	adds	r2, #100	@ 0x64
 8006c58:	7b92      	ldrb	r2, [r2, #14]
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
 8006c60:	4603      	mov	r3, r0
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	47a8      	blx	r5
 8006c6a:	eef0 7a40 	vmov.f32	s15, s0
 8006c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	47a0      	blx	r4
 8006c76:	4603      	mov	r3, r0
 8006c78:	e00f      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2104      	movs	r1, #4
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e002      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8006c98:	2300      	movs	r3, #0
    }
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ca2:	bf00      	nop

08006ca4 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6898      	ldr	r0, [r3, #8]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	899b      	ldrh	r3, [r3, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f007 fe78 	bl	800e9ac <HAL_GPIO_WritePin>
    }
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cd4:	d303      	bcc.n	8006cde <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8006cdc:	e000      	b.n	8006ce0 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8006cde:	683b      	ldr	r3, [r7, #0]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	db05      	blt.n	8006d08 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d02:	da01      	bge.n	8006d08 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	e00c      	b.n	8006d22 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8006d0e:	db06      	blt.n	8006d1e <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da03      	bge.n	8006d1e <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8006d1c:	e001      	b.n	8006d22 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 8006d1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d44:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006d5c <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 8006d48:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	3c74242a 	.word	0x3c74242a

08006d60 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8006d6c:	edd7 7a00 	vldr	s15, [r7]
 8006d70:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006da4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 8006d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7c:	d80a      	bhi.n	8006d94 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8006d7e:	ed97 7a00 	vldr	s14, [r7]
 8006d82:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006da8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 8006d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8e:	ee17 3a90 	vmov	r3, s15
 8006d92:	e000      	b.n	8006d96 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	4674241b 	.word	0x4674241b
 8006da8:	3c74242a 	.word	0x3c74242a

08006dac <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 8006db8:	887b      	ldrh	r3, [r7, #2]
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbe:	d209      	bcs.n	8006dd4 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8006dc0:	887b      	ldrh	r3, [r7, #2]
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dca:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006de8 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 8006dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dd2:	e001      	b.n	8006dd8 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8006dd4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006dec <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 8006dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	4168d4fe 	.word	0x4168d4fe
 8006dec:	00000000 	.word	0x00000000

08006df0 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8006dfc:	edd7 7a00 	vldr	s15, [r7]
 8006e00:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006e34 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 8006e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0c:	d80b      	bhi.n	8006e26 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8006e0e:	ed97 7a00 	vldr	s14, [r7]
 8006e12:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006e38 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 8006e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1e:	ee17 3a90 	vmov	r3, s15
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	e000      	b.n	8006e28 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	4768c671 	.word	0x4768c671
 8006e38:	4168d4fe 	.word	0x4168d4fe

08006e3c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 8006e48:	887b      	ldrh	r3, [r7, #2]
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e4e:	d209      	bcs.n	8006e64 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8006e50:	887b      	ldrh	r3, [r7, #2]
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e5a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006e78 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 8006e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e62:	e001      	b.n	8006e68 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8006e64:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006e7c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 8006e68:	eeb0 0a67 	vmov.f32	s0, s15
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	4168d4fe 	.word	0x4168d4fe
 8006e7c:	00000000 	.word	0x00000000

08006e80 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8006e8c:	edd7 7a00 	vldr	s15, [r7]
 8006e90:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006ec4 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 8006e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9c:	d80b      	bhi.n	8006eb6 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8006e9e:	ed97 7a00 	vldr	s14, [r7]
 8006ea2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006ec8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 8006ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eae:	ee17 3a90 	vmov	r3, s15
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	e000      	b.n	8006eb8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	4768c671 	.word	0x4768c671
 8006ec8:	4168d4fe 	.word	0x4168d4fe

08006ecc <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8006ed8:	887b      	ldrh	r3, [r7, #2]
 8006eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ede:	d209      	bcs.n	8006ef4 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8006ee0:	887b      	ldrh	r3, [r7, #2]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eea:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006f08 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8006eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ef2:	e001      	b.n	8006ef8 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8006ef4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006f0c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8006ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	4174240b 	.word	0x4174240b
 8006f0c:	00000000 	.word	0x00000000

08006f10 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8006f1c:	edd7 7a00 	vldr	s15, [r7]
 8006f20:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006f54 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8006f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2c:	d80b      	bhi.n	8006f46 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8006f2e:	ed97 7a00 	vldr	s14, [r7]
 8006f32:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006f58 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8006f36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3e:	ee17 3a90 	vmov	r3, s15
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	e000      	b.n	8006f48 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	4673e702 	.word	0x4673e702
 8006f58:	4174240b 	.word	0x4174240b

08006f5c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8006f68:	887b      	ldrh	r3, [r7, #2]
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f6e:	d209      	bcs.n	8006f84 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8006f70:	887b      	ldrh	r3, [r7, #2]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f7a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006f98 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8006f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f82:	e001      	b.n	8006f88 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8006f84:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006f9c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8006f88:	eeb0 0a67 	vmov.f32	s0, s15
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	3e742401 	.word	0x3e742401
 8006f9c:	00000000 	.word	0x00000000

08006fa0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8006fac:	edd7 7a00 	vldr	s15, [r7]
 8006fb0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006fe4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 8006fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbc:	d80b      	bhi.n	8006fd6 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8006fbe:	ed97 7a00 	vldr	s14, [r7]
 8006fc2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006fe8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 8006fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fce:	ee17 3a90 	vmov	r3, s15
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	e000      	b.n	8006fd8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	447414bf 	.word	0x447414bf
 8006fe8:	3e742401 	.word	0x3e742401

08006fec <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8006ff8:	887b      	ldrh	r3, [r7, #2]
 8006ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ffe:	d219      	bcs.n	8007034 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007000:	887b      	ldrh	r3, [r7, #2]
 8007002:	4618      	mov	r0, r3
 8007004:	f7f9 fabe 	bl	8000584 <__aeabi_i2d>
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	4b0e      	ldr	r3, [pc, #56]	@ (8007048 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800700e:	f7f9 f96d 	bl	80002ec <__adddf3>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4610      	mov	r0, r2
 8007018:	4619      	mov	r1, r3
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	4b0b      	ldr	r3, [pc, #44]	@ (800704c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8007020:	f7f9 fb1a 	bl	8000658 <__aeabi_dmul>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4610      	mov	r0, r2
 800702a:	4619      	mov	r1, r3
 800702c:	f7f9 fe0c 	bl	8000c48 <__aeabi_d2f>
 8007030:	4603      	mov	r3, r0
 8007032:	e001      	b.n	8007038 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 8007034:	f04f 0300 	mov.w	r3, #0
}
 8007038:	ee07 3a90 	vmov	s15, r3
 800703c:	eeb0 0a67 	vmov.f32	s0, s15
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	3fe00000 	.word	0x3fe00000
 800704c:	402e8000 	.word	0x402e8000

08007050 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800705c:	edd7 7a00 	vldr	s15, [r7]
 8007060:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800709c <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 8007064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706c:	d80f      	bhi.n	800708e <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800706e:	ed97 7a00 	vldr	s14, [r7]
 8007072:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80070a0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 8007076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800707a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800707e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007086:	ee17 3a90 	vmov	r3, s15
 800708a:	b29b      	uxth	r3, r3
 800708c:	e000      	b.n	8007090 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	4673e180 	.word	0x4673e180
 80070a0:	41740000 	.word	0x41740000

080070a4 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 80070b0:	887b      	ldrh	r3, [r7, #2]
 80070b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070b6:	d209      	bcs.n	80070cc <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 80070b8:	887b      	ldrh	r3, [r7, #2]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80070e0 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 80070c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070ca:	e001      	b.n	80070d0 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80070cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80070e4 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 80070d0:	eeb0 0a67 	vmov.f32	s0, s15
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	3d7423f4 	.word	0x3d7423f4
 80070e4:	00000000 	.word	0x00000000

080070e8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 80070f4:	edd7 7a00 	vldr	s15, [r7]
 80070f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800712c <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 80070fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007104:	d80b      	bhi.n	800711e <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8007106:	ed97 7a00 	vldr	s14, [r7]
 800710a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007130 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 800710e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007116:	ee17 3a90 	vmov	r3, s15
 800711a:	b29b      	uxth	r3, r3
 800711c:	e000      	b.n	8007120 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	44742023 	.word	0x44742023
 8007130:	3d7423f4 	.word	0x3d7423f4

08007134 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800714a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007160 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 800714e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007152:	eeb0 0a67 	vmov.f32	s0, s15
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	3783956e 	.word	0x3783956e

08007164 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8007170:	edd7 7a02 	vldr	s15, [r7, #8]
 8007174:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80071ac <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 8007178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800717c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007180:	d80c      	bhi.n	800719c <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007182:	ed97 7a02 	vldr	s14, [r7, #8]
 8007186:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80071b0 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 800718a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800718e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007192:	edc7 7a01 	vstr	s15, [r7, #4]
 8007196:	793b      	ldrb	r3, [r7, #4]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	e000      	b.n	800719e <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	3b8311d9 	.word	0x3b8311d9
 80071b0:	3783956e 	.word	0x3783956e

080071b4 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071ca:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80071e0 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 80071ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80071d2:	eeb0 0a67 	vmov.f32	s0, s15
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	3783956e 	.word	0x3783956e

080071e4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80071f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80071f4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800722c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 80071f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007200:	d80c      	bhi.n	800721c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007202:	ed97 7a02 	vldr	s14, [r7, #8]
 8007206:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007230 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800720a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800720e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007212:	edc7 7a01 	vstr	s15, [r7, #4]
 8007216:	793b      	ldrb	r3, [r7, #4]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	e000      	b.n	800721e <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	3b8311d9 	.word	0x3b8311d9
 8007230:	3783956e 	.word	0x3783956e

08007234 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800724a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007260 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800724e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007252:	eeb0 0a67 	vmov.f32	s0, s15
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	3783956e 	.word	0x3783956e

08007264 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8007270:	edd7 7a02 	vldr	s15, [r7, #8]
 8007274:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80072ac <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8007278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800727c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007280:	d80c      	bhi.n	800729c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007282:	ed97 7a02 	vldr	s14, [r7, #8]
 8007286:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80072b0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800728a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800728e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007292:	edc7 7a01 	vstr	s15, [r7, #4]
 8007296:	793b      	ldrb	r3, [r7, #4]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	e000      	b.n	800729e <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	3b8311d9 	.word	0x3b8311d9
 80072b0:	3783956e 	.word	0x3783956e

080072b4 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	2b0f      	cmp	r3, #15
 80072c4:	d80a      	bhi.n	80072dc <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	3301      	adds	r3, #1
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072d2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80072f0 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 80072d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072da:	e001      	b.n	80072e0 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 80072dc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80072f4 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 80072e0:	eeb0 0a67 	vmov.f32	s0, s15
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	43bb8000 	.word	0x43bb8000
 80072f4:	00000000 	.word	0x00000000

080072f8 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8007304:	edd7 7a02 	vldr	s15, [r7, #8]
 8007308:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007394 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 800730c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	d836      	bhi.n	8007384 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 8007316:	ed97 7a02 	vldr	s14, [r7, #8]
 800731a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007398 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 800731e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007322:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007326:	edd7 7a05 	vldr	s15, [r7, #20]
 800732a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007332:	793b      	ldrb	r3, [r7, #4]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800733e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007346:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800734a:	edd7 7a04 	vldr	s15, [r7, #16]
 800734e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735a:	d50a      	bpl.n	8007372 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800735c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007364:	edc7 7a01 	vstr	s15, [r7, #4]
 8007368:	793b      	ldrb	r3, [r7, #4]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b2db      	uxtb	r3, r3
 8007370:	e009      	b.n	8007386 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 8007372:	edd7 7a05 	vldr	s15, [r7, #20]
 8007376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737a:	edc7 7a01 	vstr	s15, [r7, #4]
 800737e:	793b      	ldrb	r3, [r7, #4]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	e000      	b.n	8007386 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	45bb8000 	.word	0x45bb8000
 8007398:	43bb8000 	.word	0x43bb8000

0800739c <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 80073a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	db0a      	blt.n	80073c6 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	3301      	adds	r3, #1
 80073b4:	ee07 3a90 	vmov	s15, r3
 80073b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073bc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80073d8 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 80073c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073c4:	e001      	b.n	80073ca <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 80073c6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80073dc <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 80073ca:	eeb0 0a67 	vmov.f32	s0, s15
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	41fa0000 	.word	0x41fa0000
 80073dc:	00000000 	.word	0x00000000

080073e0 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 80073ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80073f0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800747c <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 80073f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fc:	d836      	bhi.n	800746c <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 80073fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8007402:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007480 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 8007406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800740a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800740e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007416:	edc7 7a01 	vstr	s15, [r7, #4]
 800741a:	793b      	ldrb	r3, [r7, #4]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007426:	ed97 7a05 	vldr	s14, [r7, #20]
 800742a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800742e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8007432:	edd7 7a04 	vldr	s15, [r7, #16]
 8007436:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800743a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007442:	d50a      	bpl.n	800745a <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8007444:	edd7 7a05 	vldr	s15, [r7, #20]
 8007448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800744c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007450:	793b      	ldrb	r3, [r7, #4]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	e009      	b.n	800746e <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800745a:	edd7 7a05 	vldr	s15, [r7, #20]
 800745e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007462:	edc7 7a01 	vstr	s15, [r7, #4]
 8007466:	793b      	ldrb	r3, [r7, #4]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	e000      	b.n	800746e <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	457a0000 	.word	0x457a0000
 8007480:	41fa0000 	.word	0x41fa0000

08007484 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
  reset_device();
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3394      	adds	r3, #148	@ 0x94
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	4798      	blx	r3
  get_status();
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	edd2 7a05 	vldr	s15, [r2, #20]
 80074ba:	eeb0 0a67 	vmov.f32	s0, s15
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	4798      	blx	r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	461a      	mov	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	edd2 7a06 	vldr	s15, [r2, #24]
 80074dc:	eeb0 0a67 	vmov.f32	s0, s15
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	4798      	blx	r3
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	edd2 7a07 	vldr	s15, [r2, #28]
 80074fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	4798      	blx	r3
 8007506:	4603      	mov	r3, r0
 8007508:	461a      	mov	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	edd2 7a08 	vldr	s15, [r2, #32]
 8007520:	eeb0 0a67 	vmov.f32	s0, s15
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	4798      	blx	r3
 8007528:	4603      	mov	r3, r0
 800752a:	461a      	mov	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8007542:	eeb0 0a67 	vmov.f32	s0, s15
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	4798      	blx	r3
 800754a:	4603      	mov	r3, r0
 800754c:	461a      	mov	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800755a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800782c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800755e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	ed93 7a00 	vldr	s14, [r3]
 8007568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007570:	edc7 7a01 	vstr	s15, [r7, #4]
 8007574:	793b      	ldrb	r3, [r7, #4]
 8007576:	b2da      	uxtb	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007584:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800782c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007588:	ee67 6a87 	vmul.f32	s13, s15, s14
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ed93 7a00 	vldr	s14, [r3]
 8007592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800759a:	edc7 7a01 	vstr	s15, [r7, #4]
 800759e:	793b      	ldrb	r3, [r7, #4]
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80075ae:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800782c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80075b2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	ed93 7a00 	vldr	s14, [r3]
 80075bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80075c8:	793b      	ldrb	r3, [r7, #4]
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80075d8:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800782c <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80075dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	ed93 7a00 	vldr	s14, [r3]
 80075e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80075f2:	793b      	ldrb	r3, [r7, #4]
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800760c:	eeb0 0a67 	vmov.f32	s0, s15
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	4798      	blx	r3
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800762e:	eeb0 0a67 	vmov.f32	s0, s15
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	4798      	blx	r3
 8007636:	4603      	mov	r3, r0
 8007638:	461a      	mov	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8007650:	eeb0 0a67 	vmov.f32	s0, s15
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	4798      	blx	r3
 8007658:	4603      	mov	r3, r0
 800765a:	461a      	mov	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8007672:	eeb0 0a67 	vmov.f32	s0, s15
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	4798      	blx	r3
 800767a:	4603      	mov	r3, r0
 800767c:	461a      	mov	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 80076a0:	eeb0 0a67 	vmov.f32	s0, s15
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	4798      	blx	r3
 80076a8:	4603      	mov	r3, r0
 80076aa:	461a      	mov	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 80076c2:	eeb0 0a67 	vmov.f32	s0, s15
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8007708:	2104      	movs	r1, #4
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800771e:	2105      	movs	r1, #5
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8007734:	2106      	movs	r1, #6
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800774a:	2107      	movs	r1, #7
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8007760:	2108      	movs	r1, #8
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8007776:	2109      	movs	r1, #9
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800778c:	210a      	movs	r1, #10
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80077a2:	210b      	movs	r1, #11
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80077b8:	210c      	movs	r1, #12
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 80077ce:	210d      	movs	r1, #13
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 80077e4:	210e      	movs	r1, #14
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 80077fa:	210f      	movs	r1, #15
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8007810:	2110      	movs	r1, #16
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8007826:	2111      	movs	r1, #17
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	e001      	b.n	8007830 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 800782c:	43800000 	.word	0x43800000
 8007830:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8007842:	2113      	movs	r1, #19
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8007858:	2114      	movs	r1, #20
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800786e:	2116      	movs	r1, #22
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8007884:	2117      	movs	r1, #23
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3354      	adds	r3, #84	@ 0x54
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8007898:	4611      	mov	r1, r2
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	4798      	blx	r3
 800789e:	4603      	mov	r3, r0
 80078a0:	f083 0301 	eor.w	r3, r3, #1
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80078b8:	b590      	push	{r4, r7, lr}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af02      	add	r7, sp, #8
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	460b      	mov	r3, r1
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80078ce:	681c      	ldr	r4, [r3, #0]
 80078d0:	7afa      	ldrb	r2, [r7, #11]
 80078d2:	2300      	movs	r3, #0
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	4613      	mov	r3, r2
 80078dc:	2201      	movs	r2, #1
 80078de:	490c      	ldr	r1, [pc, #48]	@ (8007910 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a09      	ldr	r2, [pc, #36]	@ (8007914 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 80078f0:	4907      	ldr	r1, [pc, #28]	@ (8007910 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a05      	ldr	r2, [pc, #20]	@ (8007918 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007902:	4904      	ldr	r1, [pc, #16]	@ (8007914 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	4798      	blx	r3
}
 8007908:	bf00      	nop
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	bd90      	pop	{r4, r7, pc}
 8007910:	2000024c 	.word	0x2000024c
 8007914:	2000026c 	.word	0x2000026c
 8007918:	20000274 	.word	0x20000274

0800791c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b087      	sub	sp, #28
 8007920:	af02      	add	r7, sp, #8
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007930:	681c      	ldr	r4, [r3, #0]
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	2200      	movs	r2, #0
 8007936:	9201      	str	r2, [sp, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	9200      	str	r2, [sp, #0]
 800793c:	2202      	movs	r2, #2
 800793e:	4917      	ldr	r1, [pc, #92]	@ (800799c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a14      	ldr	r2, [pc, #80]	@ (80079a0 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007950:	4912      	ldr	r1, [pc, #72]	@ (800799c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a10      	ldr	r2, [pc, #64]	@ (80079a4 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007962:	490f      	ldr	r1, [pc, #60]	@ (80079a0 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a19      	ldr	r1, [r3, #32]
 800796c:	78fa      	ldrb	r2, [r7, #3]
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	440b      	add	r3, r1
 8007978:	7b9b      	ldrb	r3, [r3, #14]
 800797a:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	7bfa      	ldrb	r2, [r7, #15]
 8007988:	4906      	ldr	r1, [pc, #24]	@ (80079a4 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	4798      	blx	r3
 800798e:	4603      	mov	r3, r0
 8007990:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007992:	68bb      	ldr	r3, [r7, #8]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	bd90      	pop	{r4, r7, pc}
 800799c:	2000024c 	.word	0x2000024c
 80079a0:	2000026c 	.word	0x2000026c
 80079a4:	20000274 	.word	0x20000274

080079a8 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80079a8:	b590      	push	{r4, r7, lr}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	460b      	mov	r3, r1
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80079be:	681c      	ldr	r4, [r3, #0]
 80079c0:	7afa      	ldrb	r2, [r7, #11]
 80079c2:	2300      	movs	r3, #0
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	2203      	movs	r2, #3
 80079ce:	490c      	ldr	r1, [pc, #48]	@ (8007a00 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a09      	ldr	r2, [pc, #36]	@ (8007a04 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 80079e0:	4907      	ldr	r1, [pc, #28]	@ (8007a00 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a05      	ldr	r2, [pc, #20]	@ (8007a08 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 80079f2:	4904      	ldr	r1, [pc, #16]	@ (8007a04 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	4798      	blx	r3
}
 80079f8:	bf00      	nop
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}
 8007a00:	2000024c 	.word	0x2000024c
 8007a04:	2000026c 	.word	0x2000026c
 8007a08:	20000274 	.word	0x20000274

08007a0c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007a20:	681c      	ldr	r4, [r3, #0]
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	2200      	movs	r2, #0
 8007a26:	9201      	str	r2, [sp, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	9200      	str	r2, [sp, #0]
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	490c      	ldr	r1, [pc, #48]	@ (8007a60 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a09      	ldr	r2, [pc, #36]	@ (8007a64 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007a40:	4907      	ldr	r1, [pc, #28]	@ (8007a60 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a05      	ldr	r2, [pc, #20]	@ (8007a68 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007a52:	4904      	ldr	r1, [pc, #16]	@ (8007a64 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	4798      	blx	r3
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd90      	pop	{r4, r7, pc}
 8007a60:	2000024c 	.word	0x2000024c
 8007a64:	2000026c 	.word	0x2000026c
 8007a68:	20000274 	.word	0x20000274

08007a6c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007a6c:	b590      	push	{r4, r7, lr}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	460b      	mov	r3, r1
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007a82:	681c      	ldr	r4, [r3, #0]
 8007a84:	7afa      	ldrb	r2, [r7, #11]
 8007a86:	2300      	movs	r3, #0
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	2205      	movs	r2, #5
 8007a92:	490c      	ldr	r1, [pc, #48]	@ (8007ac4 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a09      	ldr	r2, [pc, #36]	@ (8007ac8 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007aa4:	4907      	ldr	r1, [pc, #28]	@ (8007ac4 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a05      	ldr	r2, [pc, #20]	@ (8007acc <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007ab6:	4904      	ldr	r1, [pc, #16]	@ (8007ac8 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	4798      	blx	r3
}
 8007abc:	bf00      	nop
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd90      	pop	{r4, r7, pc}
 8007ac4:	2000024c 	.word	0x2000024c
 8007ac8:	2000026c 	.word	0x2000026c
 8007acc:	20000274 	.word	0x20000274

08007ad0 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007ad0:	b590      	push	{r4, r7, lr}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae0:	d21f      	bcs.n	8007b22 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007aea:	681c      	ldr	r4, [r3, #0]
 8007aec:	2300      	movs	r3, #0
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2206      	movs	r2, #6
 8007af8:	490c      	ldr	r1, [pc, #48]	@ (8007b2c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a09      	ldr	r2, [pc, #36]	@ (8007b30 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007b0a:	4908      	ldr	r1, [pc, #32]	@ (8007b2c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a06      	ldr	r2, [pc, #24]	@ (8007b34 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007b1c:	4904      	ldr	r1, [pc, #16]	@ (8007b30 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd90      	pop	{r4, r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	2000024c 	.word	0x2000024c
 8007b30:	2000026c 	.word	0x2000026c
 8007b34:	20000274 	.word	0x20000274

08007b38 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	460b      	mov	r3, r1
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b4c:	d220      	bcs.n	8007b90 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007b56:	681c      	ldr	r4, [r3, #0]
 8007b58:	7afa      	ldrb	r2, [r7, #11]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	2207      	movs	r2, #7
 8007b66:	490c      	ldr	r1, [pc, #48]	@ (8007b98 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a09      	ldr	r2, [pc, #36]	@ (8007b9c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007b78:	4907      	ldr	r1, [pc, #28]	@ (8007b98 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a05      	ldr	r2, [pc, #20]	@ (8007ba0 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007b8a:	4904      	ldr	r1, [pc, #16]	@ (8007b9c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	4798      	blx	r3
}
 8007b90:	bf00      	nop
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd90      	pop	{r4, r7, pc}
 8007b98:	2000024c 	.word	0x2000024c
 8007b9c:	2000026c 	.word	0x2000026c
 8007ba0:	20000274 	.word	0x20000274

08007ba4 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007ba4:	b590      	push	{r4, r7, lr}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	72fb      	strb	r3, [r7, #11]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007bbe:	681c      	ldr	r4, [r3, #0]
 8007bc0:	7af9      	ldrb	r1, [r7, #11]
 8007bc2:	7abb      	ldrb	r3, [r7, #10]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	9201      	str	r2, [sp, #4]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	2208      	movs	r2, #8
 8007bce:	490c      	ldr	r1, [pc, #48]	@ (8007c00 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a09      	ldr	r2, [pc, #36]	@ (8007c04 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007be0:	4907      	ldr	r1, [pc, #28]	@ (8007c00 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a05      	ldr	r2, [pc, #20]	@ (8007c08 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007bf2:	4904      	ldr	r1, [pc, #16]	@ (8007c04 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	4798      	blx	r3
}
 8007bf8:	bf00      	nop
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}
 8007c00:	2000024c 	.word	0x2000024c
 8007c04:	2000026c 	.word	0x2000026c
 8007c08:	20000274 	.word	0x20000274

08007c0c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007c0c:	b590      	push	{r4, r7, lr}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c24:	681c      	ldr	r4, [r3, #0]
 8007c26:	78fa      	ldrb	r2, [r7, #3]
 8007c28:	78bb      	ldrb	r3, [r7, #2]
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	9101      	str	r1, [sp, #4]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	4613      	mov	r3, r2
 8007c32:	2209      	movs	r2, #9
 8007c34:	490c      	ldr	r1, [pc, #48]	@ (8007c68 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a09      	ldr	r2, [pc, #36]	@ (8007c6c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007c46:	4908      	ldr	r1, [pc, #32]	@ (8007c68 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a06      	ldr	r2, [pc, #24]	@ (8007c70 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8007c58:	4904      	ldr	r1, [pc, #16]	@ (8007c6c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd90      	pop	{r4, r7, pc}
 8007c66:	bf00      	nop
 8007c68:	2000024c 	.word	0x2000024c
 8007c6c:	2000026c 	.word	0x2000026c
 8007c70:	20000274 	.word	0x20000274

08007c74 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007c74:	b590      	push	{r4, r7, lr}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c84:	681c      	ldr	r4, [r3, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	220a      	movs	r2, #10
 8007c92:	490c      	ldr	r1, [pc, #48]	@ (8007cc4 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a09      	ldr	r2, [pc, #36]	@ (8007cc8 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007ca4:	4907      	ldr	r1, [pc, #28]	@ (8007cc4 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a05      	ldr	r2, [pc, #20]	@ (8007ccc <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 8007cb6:	4904      	ldr	r1, [pc, #16]	@ (8007cc8 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4798      	blx	r3
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd90      	pop	{r4, r7, pc}
 8007cc4:	2000024c 	.word	0x2000024c
 8007cc8:	2000026c 	.word	0x2000026c
 8007ccc:	20000274 	.word	0x20000274

08007cd0 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ce0:	681c      	ldr	r4, [r3, #0]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	2300      	movs	r3, #0
 8007cec:	220b      	movs	r2, #11
 8007cee:	490c      	ldr	r1, [pc, #48]	@ (8007d20 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a09      	ldr	r2, [pc, #36]	@ (8007d24 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8007d00:	4907      	ldr	r1, [pc, #28]	@ (8007d20 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a05      	ldr	r2, [pc, #20]	@ (8007d28 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 8007d12:	4904      	ldr	r1, [pc, #16]	@ (8007d24 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd90      	pop	{r4, r7, pc}
 8007d20:	2000024c 	.word	0x2000024c
 8007d24:	2000026c 	.word	0x2000026c
 8007d28:	20000274 	.word	0x20000274

08007d2c <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8007d2c:	b590      	push	{r4, r7, lr}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d3c:	681c      	ldr	r4, [r3, #0]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	2300      	movs	r3, #0
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	2300      	movs	r3, #0
 8007d48:	220c      	movs	r2, #12
 8007d4a:	490c      	ldr	r1, [pc, #48]	@ (8007d7c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a09      	ldr	r2, [pc, #36]	@ (8007d80 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8007d5c:	4907      	ldr	r1, [pc, #28]	@ (8007d7c <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a05      	ldr	r2, [pc, #20]	@ (8007d84 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 8007d6e:	4904      	ldr	r1, [pc, #16]	@ (8007d80 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd90      	pop	{r4, r7, pc}
 8007d7c:	2000024c 	.word	0x2000024c
 8007d80:	2000026c 	.word	0x2000026c
 8007d84:	20000274 	.word	0x20000274

08007d88 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d98:	681c      	ldr	r4, [r3, #0]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	2300      	movs	r3, #0
 8007da4:	220d      	movs	r2, #13
 8007da6:	490c      	ldr	r1, [pc, #48]	@ (8007dd8 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a09      	ldr	r2, [pc, #36]	@ (8007ddc <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8007db8:	4907      	ldr	r1, [pc, #28]	@ (8007dd8 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a05      	ldr	r2, [pc, #20]	@ (8007de0 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 8007dca:	4904      	ldr	r1, [pc, #16]	@ (8007ddc <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd90      	pop	{r4, r7, pc}
 8007dd8:	2000024c 	.word	0x2000024c
 8007ddc:	2000026c 	.word	0x2000026c
 8007de0:	20000274 	.word	0x20000274

08007de4 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8007de4:	b590      	push	{r4, r7, lr}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007df4:	681c      	ldr	r4, [r3, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	220e      	movs	r2, #14
 8007e02:	490c      	ldr	r1, [pc, #48]	@ (8007e34 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a09      	ldr	r2, [pc, #36]	@ (8007e38 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8007e14:	4907      	ldr	r1, [pc, #28]	@ (8007e34 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a05      	ldr	r2, [pc, #20]	@ (8007e3c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 8007e26:	4904      	ldr	r1, [pc, #16]	@ (8007e38 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd90      	pop	{r4, r7, pc}
 8007e34:	2000024c 	.word	0x2000024c
 8007e38:	2000026c 	.word	0x2000026c
 8007e3c:	20000274 	.word	0x20000274

08007e40 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8007e40:	b590      	push	{r4, r7, lr}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e50:	681c      	ldr	r4, [r3, #0]
 8007e52:	2300      	movs	r3, #0
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	2300      	movs	r3, #0
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	490c      	ldr	r1, [pc, #48]	@ (8007e90 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a09      	ldr	r2, [pc, #36]	@ (8007e94 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8007e70:	4907      	ldr	r1, [pc, #28]	@ (8007e90 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a05      	ldr	r2, [pc, #20]	@ (8007e98 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 8007e82:	4904      	ldr	r1, [pc, #16]	@ (8007e94 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd90      	pop	{r4, r7, pc}
 8007e90:	2000024c 	.word	0x2000024c
 8007e94:	2000026c 	.word	0x2000026c
 8007e98:	20000274 	.word	0x20000274

08007e9c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8007e9c:	b590      	push	{r4, r7, lr}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007eac:	681c      	ldr	r4, [r3, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2210      	movs	r2, #16
 8007eba:	490c      	ldr	r1, [pc, #48]	@ (8007eec <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a09      	ldr	r2, [pc, #36]	@ (8007ef0 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8007ecc:	4907      	ldr	r1, [pc, #28]	@ (8007eec <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a05      	ldr	r2, [pc, #20]	@ (8007ef4 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 8007ede:	4904      	ldr	r1, [pc, #16]	@ (8007ef0 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd90      	pop	{r4, r7, pc}
 8007eec:	2000024c 	.word	0x2000024c
 8007ef0:	2000026c 	.word	0x2000026c
 8007ef4:	20000274 	.word	0x20000274

08007ef8 <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8007ef8:	b590      	push	{r4, r7, lr}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f08:	681c      	ldr	r4, [r3, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	2300      	movs	r3, #0
 8007f14:	2211      	movs	r2, #17
 8007f16:	490c      	ldr	r1, [pc, #48]	@ (8007f48 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a09      	ldr	r2, [pc, #36]	@ (8007f4c <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8007f28:	4907      	ldr	r1, [pc, #28]	@ (8007f48 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a05      	ldr	r2, [pc, #20]	@ (8007f50 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 8007f3a:	4904      	ldr	r1, [pc, #16]	@ (8007f4c <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd90      	pop	{r4, r7, pc}
 8007f48:	2000024c 	.word	0x2000024c
 8007f4c:	2000026c 	.word	0x2000026c
 8007f50:	20000274 	.word	0x20000274

08007f54 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8007f54:	b590      	push	{r4, r7, lr}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f64:	681c      	ldr	r4, [r3, #0]
 8007f66:	2300      	movs	r3, #0
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2212      	movs	r2, #18
 8007f72:	4912      	ldr	r1, [pc, #72]	@ (8007fbc <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a0f      	ldr	r2, [pc, #60]	@ (8007fc0 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8007f84:	490d      	ldr	r1, [pc, #52]	@ (8007fbc <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a0b      	ldr	r2, [pc, #44]	@ (8007fc4 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8007f96:	490a      	ldr	r1, [pc, #40]	@ (8007fc0 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	4906      	ldr	r1, [pc, #24]	@ (8007fc4 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8007fb2:	89fb      	ldrh	r3, [r7, #14]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd90      	pop	{r4, r7, pc}
 8007fbc:	2000024c 	.word	0x2000024c
 8007fc0:	2000026c 	.word	0x2000026c
 8007fc4:	20000274 	.word	0x20000274

08007fc8 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007fc8:	b590      	push	{r4, r7, lr}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007fde:	681c      	ldr	r4, [r3, #0]
 8007fe0:	7afa      	ldrb	r2, [r7, #11]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	4613      	mov	r3, r2
 8007fec:	2201      	movs	r2, #1
 8007fee:	4903      	ldr	r1, [pc, #12]	@ (8007ffc <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	47a0      	blx	r4
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd90      	pop	{r4, r7, pc}
 8007ffc:	2000024c 	.word	0x2000024c

08008000 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008000:	b590      	push	{r4, r7, lr}
 8008002:	b085      	sub	sp, #20
 8008004:	af02      	add	r7, sp, #8
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008014:	681c      	ldr	r4, [r3, #0]
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	2200      	movs	r2, #0
 800801a:	9201      	str	r2, [sp, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	9200      	str	r2, [sp, #0]
 8008020:	2202      	movs	r2, #2
 8008022:	4903      	ldr	r1, [pc, #12]	@ (8008030 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	47a0      	blx	r4
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	bd90      	pop	{r4, r7, pc}
 8008030:	2000024c 	.word	0x2000024c

08008034 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008034:	b590      	push	{r4, r7, lr}
 8008036:	b087      	sub	sp, #28
 8008038:	af02      	add	r7, sp, #8
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	460b      	mov	r3, r1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800804a:	681c      	ldr	r4, [r3, #0]
 800804c:	7afa      	ldrb	r2, [r7, #11]
 800804e:	2300      	movs	r3, #0
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	4613      	mov	r3, r2
 8008058:	2203      	movs	r2, #3
 800805a:	4903      	ldr	r1, [pc, #12]	@ (8008068 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	47a0      	blx	r4
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	bd90      	pop	{r4, r7, pc}
 8008068:	2000024c 	.word	0x2000024c

0800806c <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800806c:	b590      	push	{r4, r7, lr}
 800806e:	b085      	sub	sp, #20
 8008070:	af02      	add	r7, sp, #8
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008080:	681c      	ldr	r4, [r3, #0]
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	2200      	movs	r2, #0
 8008086:	9201      	str	r2, [sp, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	9200      	str	r2, [sp, #0]
 800808c:	2204      	movs	r2, #4
 800808e:	4903      	ldr	r1, [pc, #12]	@ (800809c <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	47a0      	blx	r4
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	bd90      	pop	{r4, r7, pc}
 800809c:	2000024c 	.word	0x2000024c

080080a0 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 80080a0:	b590      	push	{r4, r7, lr}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	460b      	mov	r3, r1
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080b6:	681c      	ldr	r4, [r3, #0]
 80080b8:	7afa      	ldrb	r2, [r7, #11]
 80080ba:	2300      	movs	r3, #0
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	4613      	mov	r3, r2
 80080c4:	2205      	movs	r2, #5
 80080c6:	4903      	ldr	r1, [pc, #12]	@ (80080d4 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	47a0      	blx	r4
}
 80080cc:	bf00      	nop
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd90      	pop	{r4, r7, pc}
 80080d4:	2000024c 	.word	0x2000024c

080080d8 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 80080d8:	b590      	push	{r4, r7, lr}
 80080da:	b085      	sub	sp, #20
 80080dc:	af02      	add	r7, sp, #8
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080ea:	681c      	ldr	r4, [r3, #0]
 80080ec:	2300      	movs	r3, #0
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	2300      	movs	r3, #0
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2206      	movs	r2, #6
 80080f8:	4903      	ldr	r1, [pc, #12]	@ (8008108 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	47a0      	blx	r4
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	bd90      	pop	{r4, r7, pc}
 8008106:	bf00      	nop
 8008108:	2000024c 	.word	0x2000024c

0800810c <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b087      	sub	sp, #28
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	460b      	mov	r3, r1
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008122:	681c      	ldr	r4, [r3, #0]
 8008124:	7afa      	ldrb	r2, [r7, #11]
 8008126:	2300      	movs	r3, #0
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4613      	mov	r3, r2
 8008130:	2207      	movs	r2, #7
 8008132:	4903      	ldr	r1, [pc, #12]	@ (8008140 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	47a0      	blx	r4
}
 8008138:	bf00      	nop
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	bd90      	pop	{r4, r7, pc}
 8008140:	2000024c 	.word	0x2000024c

08008144 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008144:	b590      	push	{r4, r7, lr}
 8008146:	b087      	sub	sp, #28
 8008148:	af02      	add	r7, sp, #8
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	72fb      	strb	r3, [r7, #11]
 8008152:	4613      	mov	r3, r2
 8008154:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800815e:	681c      	ldr	r4, [r3, #0]
 8008160:	7af9      	ldrb	r1, [r7, #11]
 8008162:	7abb      	ldrb	r3, [r7, #10]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	9201      	str	r2, [sp, #4]
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	460b      	mov	r3, r1
 800816c:	2208      	movs	r2, #8
 800816e:	4903      	ldr	r1, [pc, #12]	@ (800817c <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	47a0      	blx	r4
}
 8008174:	bf00      	nop
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	bd90      	pop	{r4, r7, pc}
 800817c:	2000024c 	.word	0x2000024c

08008180 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8008180:	b590      	push	{r4, r7, lr}
 8008182:	b085      	sub	sp, #20
 8008184:	af02      	add	r7, sp, #8
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
 800818c:	4613      	mov	r3, r2
 800818e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008198:	681c      	ldr	r4, [r3, #0]
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	78bb      	ldrb	r3, [r7, #2]
 800819e:	2100      	movs	r1, #0
 80081a0:	9101      	str	r1, [sp, #4]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	4613      	mov	r3, r2
 80081a6:	2209      	movs	r2, #9
 80081a8:	4903      	ldr	r1, [pc, #12]	@ (80081b8 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	47a0      	blx	r4
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd90      	pop	{r4, r7, pc}
 80081b6:	bf00      	nop
 80081b8:	2000024c 	.word	0x2000024c

080081bc <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 80081bc:	b590      	push	{r4, r7, lr}
 80081be:	b085      	sub	sp, #20
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081cc:	681c      	ldr	r4, [r3, #0]
 80081ce:	2300      	movs	r3, #0
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2300      	movs	r3, #0
 80081d8:	220a      	movs	r2, #10
 80081da:	4903      	ldr	r1, [pc, #12]	@ (80081e8 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	47a0      	blx	r4
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd90      	pop	{r4, r7, pc}
 80081e8:	2000024c 	.word	0x2000024c

080081ec <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 80081ec:	b590      	push	{r4, r7, lr}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081fc:	681c      	ldr	r4, [r3, #0]
 80081fe:	2300      	movs	r3, #0
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	2300      	movs	r3, #0
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	220b      	movs	r2, #11
 800820a:	4903      	ldr	r1, [pc, #12]	@ (8008218 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	47a0      	blx	r4
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	bd90      	pop	{r4, r7, pc}
 8008218:	2000024c 	.word	0x2000024c

0800821c <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800821c:	b590      	push	{r4, r7, lr}
 800821e:	b085      	sub	sp, #20
 8008220:	af02      	add	r7, sp, #8
 8008222:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800822c:	681c      	ldr	r4, [r3, #0]
 800822e:	2300      	movs	r3, #0
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	2300      	movs	r3, #0
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	2300      	movs	r3, #0
 8008238:	220c      	movs	r2, #12
 800823a:	4903      	ldr	r1, [pc, #12]	@ (8008248 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	47a0      	blx	r4
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bd90      	pop	{r4, r7, pc}
 8008248:	2000024c 	.word	0x2000024c

0800824c <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800824c:	b590      	push	{r4, r7, lr}
 800824e:	b085      	sub	sp, #20
 8008250:	af02      	add	r7, sp, #8
 8008252:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800825c:	681c      	ldr	r4, [r3, #0]
 800825e:	2300      	movs	r3, #0
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	2300      	movs	r3, #0
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	2300      	movs	r3, #0
 8008268:	220d      	movs	r2, #13
 800826a:	4903      	ldr	r1, [pc, #12]	@ (8008278 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	47a0      	blx	r4
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}
 8008278:	2000024c 	.word	0x2000024c

0800827c <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b085      	sub	sp, #20
 8008280:	af02      	add	r7, sp, #8
 8008282:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800828c:	681c      	ldr	r4, [r3, #0]
 800828e:	2300      	movs	r3, #0
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	2300      	movs	r3, #0
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	2300      	movs	r3, #0
 8008298:	220e      	movs	r2, #14
 800829a:	4903      	ldr	r1, [pc, #12]	@ (80082a8 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	47a0      	blx	r4
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}
 80082a8:	2000024c 	.word	0x2000024c

080082ac <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082bc:	681c      	ldr	r4, [r3, #0]
 80082be:	2300      	movs	r3, #0
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	2300      	movs	r3, #0
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	2300      	movs	r3, #0
 80082c8:	220f      	movs	r2, #15
 80082ca:	4903      	ldr	r1, [pc, #12]	@ (80082d8 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	47a0      	blx	r4
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd90      	pop	{r4, r7, pc}
 80082d8:	2000024c 	.word	0x2000024c

080082dc <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b085      	sub	sp, #20
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082ec:	681c      	ldr	r4, [r3, #0]
 80082ee:	2300      	movs	r3, #0
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	2300      	movs	r3, #0
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	2300      	movs	r3, #0
 80082f8:	2210      	movs	r2, #16
 80082fa:	4903      	ldr	r1, [pc, #12]	@ (8008308 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	47a0      	blx	r4
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	bd90      	pop	{r4, r7, pc}
 8008308:	2000024c 	.word	0x2000024c

0800830c <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800830c:	b590      	push	{r4, r7, lr}
 800830e:	b085      	sub	sp, #20
 8008310:	af02      	add	r7, sp, #8
 8008312:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800831c:	681c      	ldr	r4, [r3, #0]
 800831e:	2300      	movs	r3, #0
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	2300      	movs	r3, #0
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	2300      	movs	r3, #0
 8008328:	2211      	movs	r2, #17
 800832a:	4903      	ldr	r1, [pc, #12]	@ (8008338 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	47a0      	blx	r4
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	bd90      	pop	{r4, r7, pc}
 8008338:	2000024c 	.word	0x2000024c

0800833c <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800833c:	b590      	push	{r4, r7, lr}
 800833e:	b085      	sub	sp, #20
 8008340:	af02      	add	r7, sp, #8
 8008342:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800834c:	681c      	ldr	r4, [r3, #0]
 800834e:	2300      	movs	r3, #0
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	2300      	movs	r3, #0
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	2300      	movs	r3, #0
 8008358:	2212      	movs	r2, #18
 800835a:	4903      	ldr	r1, [pc, #12]	@ (8008368 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	47a0      	blx	r4
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	bd90      	pop	{r4, r7, pc}
 8008368:	2000024c 	.word	0x2000024c

0800836c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a09      	ldr	r2, [pc, #36]	@ (80083a4 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008380:	4909      	ldr	r1, [pc, #36]	@ (80083a8 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a06      	ldr	r2, [pc, #24]	@ (80083ac <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8008392:	4904      	ldr	r1, [pc, #16]	@ (80083a4 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8008398:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	2000026c 	.word	0x2000026c
 80083a8:	2000024c 	.word	0x2000024c
 80083ac:	20000274 	.word	0x20000274

080083b0 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 80083b0:	b590      	push	{r4, r7, lr}
 80083b2:	b089      	sub	sp, #36	@ 0x24
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80083bc:	4b17      	ldr	r3, [pc, #92]	@ (800841c <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 80083be:	2200      	movs	r2, #0
 80083c0:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]
 80083c6:	e020      	b.n	800840a <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80083d0:	681c      	ldr	r4, [r3, #0]
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	461a      	mov	r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	1899      	adds	r1, r3, r2
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	461a      	mov	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	441a      	add	r2, r3
 80083e6:	230a      	movs	r3, #10
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	2302      	movs	r3, #2
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80083f0:	2300      	movs	r3, #0
 80083f2:	75bb      	strb	r3, [r7, #22]
 80083f4:	e003      	b.n	80083fe <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 80083f6:	bf00      	nop
 80083f8:	7dbb      	ldrb	r3, [r7, #22]
 80083fa:	3301      	adds	r3, #1
 80083fc:	75bb      	strb	r3, [r7, #22]
 80083fe:	7dbb      	ldrb	r3, [r7, #22]
 8008400:	2b7c      	cmp	r3, #124	@ 0x7c
 8008402:	d9f8      	bls.n	80083f6 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	3301      	adds	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	2b03      	cmp	r3, #3
 800840e:	d9db      	bls.n	80083c8 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8008410:	bf00      	nop
}
 8008412:	bf00      	nop
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	bf00      	nop
 800841c:	20000249 	.word	0x20000249

08008420 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4613      	mov	r3, r2
 800842c:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008432:	2301      	movs	r3, #1
 8008434:	74fb      	strb	r3, [r7, #19]
 8008436:	e016      	b.n	8008466 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8008438:	7cfb      	ldrb	r3, [r7, #19]
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	461a      	mov	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	7f1b      	ldrb	r3, [r3, #28]
 8008442:	4413      	add	r3, r2
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	4413      	add	r3, r2
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	4619      	mov	r1, r3
 800844c:	79fa      	ldrb	r2, [r7, #7]
 800844e:	7cfb      	ldrb	r3, [r7, #19]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	fa01 f303 	lsl.w	r3, r1, r3
 8008458:	461a      	mov	r2, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4313      	orrs	r3, r2
 800845e:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008460:	7cfb      	ldrb	r3, [r7, #19]
 8008462:	3301      	adds	r3, #1
 8008464:	74fb      	strb	r3, [r7, #19]
 8008466:	7cfb      	ldrb	r3, [r7, #19]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d9e5      	bls.n	8008438 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800846c:	697b      	ldr	r3, [r7, #20]
}
 800846e:	4618      	mov	r0, r3
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2118      	movs	r1, #24
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
 800849c:	4602      	mov	r2, r0
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a2:	b292      	uxth	r2, r2
 80084a4:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	2b0e      	cmp	r3, #14
 80084aa:	f200 8099 	bhi.w	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 80084ae:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084f1 	.word	0x080084f1
 80084b8:	08008501 	.word	0x08008501
 80084bc:	08008511 	.word	0x08008511
 80084c0:	08008521 	.word	0x08008521
 80084c4:	08008531 	.word	0x08008531
 80084c8:	08008541 	.word	0x08008541
 80084cc:	08008551 	.word	0x08008551
 80084d0:	08008561 	.word	0x08008561
 80084d4:	08008571 	.word	0x08008571
 80084d8:	08008581 	.word	0x08008581
 80084dc:	08008591 	.word	0x08008591
 80084e0:	080085a1 	.word	0x080085a1
 80084e4:	080085b1 	.word	0x080085b1
 80084e8:	080085c1 	.word	0x080085c1
 80084ec:	080085d1 	.word	0x080085d1
      state = pL6470_StatusRegister->HiZ;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	73fb      	strb	r3, [r7, #15]
      break;
 80084fe:	e06f      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	73fb      	strb	r3, [r7, #15]
      break;
 800850e:	e067      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800851a:	b2db      	uxtb	r3, r3
 800851c:	73fb      	strb	r3, [r7, #15]
      break;
 800851e:	e05f      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800852a:	b2db      	uxtb	r3, r3
 800852c:	73fb      	strb	r3, [r7, #15]
      break;
 800852e:	e057      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800853a:	b2db      	uxtb	r3, r3
 800853c:	73fb      	strb	r3, [r7, #15]
      break;
 800853e:	e04f      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800854a:	b2db      	uxtb	r3, r3
 800854c:	73fb      	strb	r3, [r7, #15]
      break;
 800854e:	e047      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800855a:	b2db      	uxtb	r3, r3
 800855c:	73fb      	strb	r3, [r7, #15]
      break;
 800855e:	e03f      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008564:	785b      	ldrb	r3, [r3, #1]
 8008566:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800856a:	b2db      	uxtb	r3, r3
 800856c:	73fb      	strb	r3, [r7, #15]
      break;
 800856e:	e037      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008574:	785b      	ldrb	r3, [r3, #1]
 8008576:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800857a:	b2db      	uxtb	r3, r3
 800857c:	73fb      	strb	r3, [r7, #15]
      break;
 800857e:	e02f      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800858a:	b2db      	uxtb	r3, r3
 800858c:	73fb      	strb	r3, [r7, #15]
      break;
 800858e:	e027      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800859a:	b2db      	uxtb	r3, r3
 800859c:	73fb      	strb	r3, [r7, #15]
      break;
 800859e:	e01f      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a4:	785b      	ldrb	r3, [r3, #1]
 80085a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	73fb      	strb	r3, [r7, #15]
      break;
 80085ae:	e017      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	73fb      	strb	r3, [r7, #15]
      break;
 80085be:	e00f      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	73fb      	strb	r3, [r7, #15]
      break;
 80085ce:	e007      	b.n	80085e0 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	73fb      	strb	r3, [r7, #15]
      break;
 80085de:	bf00      	nop
  return state;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop

080085ec <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	2b18      	cmp	r3, #24
 80085fc:	d809      	bhi.n	8008612 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a19      	ldr	r1, [r3, #32]
 8008602:	78fa      	ldrb	r2, [r7, #3]
 8008604:	4613      	mov	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	440b      	add	r3, r1
 800860e:	3301      	adds	r3, #1
 8008610:	e000      	b.n	8008614 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
 800862e:	e01a      	b.n	8008666 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	4413      	add	r3, r2
 8008638:	2200      	movs	r2, #0
 800863a:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	4413      	add	r3, r2
 8008644:	2200      	movs	r2, #0
 8008646:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	011b      	lsls	r3, r3, #4
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	4413      	add	r3, r2
 8008650:	2200      	movs	r2, #0
 8008652:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	4413      	add	r3, r2
 800865c:	2200      	movs	r2, #0
 800865e:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	3301      	adds	r3, #1
 8008664:	73fb      	strb	r3, [r7, #15]
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d9e1      	bls.n	8008630 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	603b      	str	r3, [r7, #0]
 8008686:	4613      	mov	r3, r2
 8008688:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	7f1b      	ldrb	r3, [r3, #28]
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	4413      	add	r3, r2
 8008694:	79fa      	ldrb	r2, [r7, #7]
 8008696:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	7f1b      	ldrb	r3, [r3, #28]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4413      	add	r3, r2
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	7f1b      	ldrb	r3, [r3, #28]
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	4413      	add	r3, r2
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	7f1b      	ldrb	r3, [r3, #28]
 80086b8:	011b      	lsls	r3, r3, #4
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	4413      	add	r3, r2
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	60da      	str	r2, [r3, #12]
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80086d0:	b590      	push	{r4, r7, lr}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	4613      	mov	r3, r2
 80086de:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80086e0:	4b10      	ldr	r3, [pc, #64]	@ (8008724 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10a      	bne.n	80086fe <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80086e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008724 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68b9      	ldr	r1, [r7, #8]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8008706:	681c      	ldr	r4, [r3, #0]
 8008708:	79fa      	ldrb	r2, [r7, #7]
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	47a0      	blx	r4
}
 800871a:	bf00      	nop
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	bd90      	pop	{r4, r7, pc}
 8008722:	bf00      	nop
 8008724:	20000249 	.word	0x20000249

08008728 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8008734:	2300      	movs	r3, #0
 8008736:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008738:	2300      	movs	r3, #0
 800873a:	75bb      	strb	r3, [r7, #22]
 800873c:	e013      	b.n	8008766 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800873e:	2300      	movs	r3, #0
 8008740:	75fb      	strb	r3, [r7, #23]
 8008742:	e00a      	b.n	800875a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8008744:	7d7b      	ldrb	r3, [r7, #21]
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	757a      	strb	r2, [r7, #21]
 800874a:	461a      	mov	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4413      	add	r3, r2
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	3301      	adds	r3, #1
 8008758:	75fb      	strb	r3, [r7, #23]
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d9f1      	bls.n	8008744 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008760:	7dbb      	ldrb	r3, [r7, #22]
 8008762:	3301      	adds	r3, #1
 8008764:	75bb      	strb	r3, [r7, #22]
 8008766:	7dbb      	ldrb	r3, [r7, #22]
 8008768:	2b03      	cmp	r3, #3
 800876a:	d9e8      	bls.n	800873e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800876c:	2300      	movs	r3, #0
 800876e:	75fb      	strb	r3, [r7, #23]
 8008770:	e1f1      	b.n	8008b56 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	440b      	add	r3, r1
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	4619      	mov	r1, r3
 8008782:	460b      	mov	r3, r1
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	1a5b      	subs	r3, r3, r1
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	441a      	add	r2, r3
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	440b      	add	r3, r1
 8008792:	7b12      	ldrb	r2, [r2, #12]
 8008794:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	4413      	add	r3, r2
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b12      	cmp	r3, #18
 80087a2:	f200 81d5 	bhi.w	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 80087a6:	a201      	add	r2, pc, #4	@ (adr r2, 80087ac <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	08008b51 	.word	0x08008b51
 80087b0:	080087f9 	.word	0x080087f9
 80087b4:	08008881 	.word	0x08008881
 80087b8:	080088b1 	.word	0x080088b1
 80087bc:	08008919 	.word	0x08008919
 80087c0:	08008947 	.word	0x08008947
 80087c4:	080089af 	.word	0x080089af
 80087c8:	080089eb 	.word	0x080089eb
 80087cc:	08008a53 	.word	0x08008a53
 80087d0:	08008aef 	.word	0x08008aef
 80087d4:	08008b51 	.word	0x08008b51
 80087d8:	08008b51 	.word	0x08008b51
 80087dc:	08008b51 	.word	0x08008b51
 80087e0:	08008b51 	.word	0x08008b51
 80087e4:	08008b51 	.word	0x08008b51
 80087e8:	08008b51 	.word	0x08008b51
 80087ec:	08008b51 	.word	0x08008b51
 80087f0:	08008b51 	.word	0x08008b51
 80087f4:	08008b51 	.word	0x08008b51
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	7819      	ldrb	r1, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6a18      	ldr	r0, [r3, #32]
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	4413      	add	r3, r2
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4403      	add	r3, r0
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	4403      	add	r3, r0
 8008820:	430a      	orrs	r2, r1
 8008822:	b2d2      	uxtb	r2, r2
 8008824:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a19      	ldr	r1, [r3, #32]
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	4413      	add	r3, r2
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	7b9b      	ldrb	r3, [r3, #14]
 8008840:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008842:	2301      	movs	r3, #1
 8008844:	75bb      	strb	r3, [r7, #22]
 8008846:	e016      	b.n	8008876 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	011b      	lsls	r3, r3, #4
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	4413      	add	r3, r2
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	7d39      	ldrb	r1, [r7, #20]
 8008854:	7dbb      	ldrb	r3, [r7, #22]
 8008856:	1acb      	subs	r3, r1, r3
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	fa22 f103 	lsr.w	r1, r2, r3
 800885e:	7dbb      	ldrb	r3, [r7, #22]
 8008860:	005a      	lsls	r2, r3, #1
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	4413      	add	r3, r2
 8008866:	461a      	mov	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4413      	add	r3, r2
 800886c:	b2ca      	uxtb	r2, r1
 800886e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008870:	7dbb      	ldrb	r3, [r7, #22]
 8008872:	3301      	adds	r3, #1
 8008874:	75bb      	strb	r3, [r7, #22]
 8008876:	7d3a      	ldrb	r2, [r7, #20]
 8008878:	7dbb      	ldrb	r3, [r7, #22]
 800887a:	429a      	cmp	r2, r3
 800887c:	d2e4      	bcs.n	8008848 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800887e:	e167      	b.n	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	4413      	add	r3, r2
 8008886:	7819      	ldrb	r1, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a18      	ldr	r0, [r3, #32]
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	4413      	add	r3, r2
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4403      	add	r3, r0
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4403      	add	r3, r0
 80088a8:	430a      	orrs	r2, r1
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
      break;
 80088ae:	e14f      	b.n	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	4413      	add	r3, r2
 80088b6:	7819      	ldrb	r1, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	4413      	add	r3, r2
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	4613      	mov	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	4413      	add	r3, r2
 80088cc:	4403      	add	r3, r0
 80088ce:	7a1a      	ldrb	r2, [r3, #8]
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4403      	add	r3, r0
 80088d6:	430a      	orrs	r2, r1
 80088d8:	b2d2      	uxtb	r2, r2
 80088da:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80088dc:	2301      	movs	r3, #1
 80088de:	75bb      	strb	r3, [r7, #22]
 80088e0:	e016      	b.n	8008910 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	7dbb      	ldrb	r3, [r7, #22]
 80088ee:	f1c3 0303 	rsb	r3, r3, #3
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	fa22 f103 	lsr.w	r1, r2, r3
 80088f8:	7dbb      	ldrb	r3, [r7, #22]
 80088fa:	005a      	lsls	r2, r3, #1
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	4413      	add	r3, r2
 8008900:	461a      	mov	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	b2ca      	uxtb	r2, r1
 8008908:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800890a:	7dbb      	ldrb	r3, [r7, #22]
 800890c:	3301      	adds	r3, #1
 800890e:	75bb      	strb	r3, [r7, #22]
 8008910:	7dbb      	ldrb	r3, [r7, #22]
 8008912:	2b03      	cmp	r3, #3
 8008914:	d9e5      	bls.n	80088e2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008916:	e11b      	b.n	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	7819      	ldrb	r1, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	4413      	add	r3, r2
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	4413      	add	r3, r2
 8008934:	4403      	add	r3, r0
 8008936:	7a1a      	ldrb	r2, [r3, #8]
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4403      	add	r3, r0
 800893e:	430a      	orrs	r2, r1
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	701a      	strb	r2, [r3, #0]
      break;
 8008944:	e104      	b.n	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	4413      	add	r3, r2
 800894c:	7819      	ldrb	r1, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	4413      	add	r3, r2
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	4413      	add	r3, r2
 8008962:	4403      	add	r3, r0
 8008964:	7a1a      	ldrb	r2, [r3, #8]
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4403      	add	r3, r0
 800896c:	430a      	orrs	r2, r1
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008972:	2301      	movs	r3, #1
 8008974:	75bb      	strb	r3, [r7, #22]
 8008976:	e016      	b.n	80089a6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	4413      	add	r3, r2
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	7dbb      	ldrb	r3, [r7, #22]
 8008984:	f1c3 0303 	rsb	r3, r3, #3
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	fa22 f103 	lsr.w	r1, r2, r3
 800898e:	7dbb      	ldrb	r3, [r7, #22]
 8008990:	005a      	lsls	r2, r3, #1
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	4413      	add	r3, r2
 8008996:	461a      	mov	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4413      	add	r3, r2
 800899c:	b2ca      	uxtb	r2, r1
 800899e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80089a0:	7dbb      	ldrb	r3, [r7, #22]
 80089a2:	3301      	adds	r3, #1
 80089a4:	75bb      	strb	r3, [r7, #22]
 80089a6:	7dbb      	ldrb	r3, [r7, #22]
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d9e5      	bls.n	8008978 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 80089ac:	e0d0      	b.n	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80089ae:	2301      	movs	r3, #1
 80089b0:	75bb      	strb	r3, [r7, #22]
 80089b2:	e016      	b.n	80089e2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 80089b4:	7dfb      	ldrb	r3, [r7, #23]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	4413      	add	r3, r2
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	7dbb      	ldrb	r3, [r7, #22]
 80089c0:	f1c3 0303 	rsb	r3, r3, #3
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	fa22 f103 	lsr.w	r1, r2, r3
 80089ca:	7dbb      	ldrb	r3, [r7, #22]
 80089cc:	005a      	lsls	r2, r3, #1
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	4413      	add	r3, r2
 80089d2:	461a      	mov	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4413      	add	r3, r2
 80089d8:	b2ca      	uxtb	r2, r1
 80089da:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80089dc:	7dbb      	ldrb	r3, [r7, #22]
 80089de:	3301      	adds	r3, #1
 80089e0:	75bb      	strb	r3, [r7, #22]
 80089e2:	7dbb      	ldrb	r3, [r7, #22]
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d9e5      	bls.n	80089b4 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 80089e8:	e0b2      	b.n	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	4413      	add	r3, r2
 80089f0:	7819      	ldrb	r1, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	4413      	add	r3, r2
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	4613      	mov	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	4413      	add	r3, r2
 8008a06:	4403      	add	r3, r0
 8008a08:	7a1a      	ldrb	r2, [r3, #8]
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4403      	add	r3, r0
 8008a10:	430a      	orrs	r2, r1
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008a16:	2301      	movs	r3, #1
 8008a18:	75bb      	strb	r3, [r7, #22]
 8008a1a:	e016      	b.n	8008a4a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	011b      	lsls	r3, r3, #4
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	4413      	add	r3, r2
 8008a24:	689a      	ldr	r2, [r3, #8]
 8008a26:	7dbb      	ldrb	r3, [r7, #22]
 8008a28:	f1c3 0303 	rsb	r3, r3, #3
 8008a2c:	00db      	lsls	r3, r3, #3
 8008a2e:	fa22 f103 	lsr.w	r1, r2, r3
 8008a32:	7dbb      	ldrb	r3, [r7, #22]
 8008a34:	005a      	lsls	r2, r3, #1
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	4413      	add	r3, r2
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4413      	add	r3, r2
 8008a40:	b2ca      	uxtb	r2, r1
 8008a42:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008a44:	7dbb      	ldrb	r3, [r7, #22]
 8008a46:	3301      	adds	r3, #1
 8008a48:	75bb      	strb	r3, [r7, #22]
 8008a4a:	7dbb      	ldrb	r3, [r7, #22]
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d9e5      	bls.n	8008a1c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008a50:	e07e      	b.n	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	4413      	add	r3, r2
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	b259      	sxtb	r1, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	4413      	add	r3, r2
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	4403      	add	r3, r0
 8008a72:	791b      	ldrb	r3, [r3, #4]
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	b25b      	sxtb	r3, r3
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	b259      	sxtb	r1, r3
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	b2ca      	uxtb	r2, r1
 8008a84:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	7819      	ldrb	r1, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	4413      	add	r3, r2
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	4403      	add	r3, r0
 8008aa4:	7a1a      	ldrb	r2, [r3, #8]
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	4403      	add	r3, r0
 8008aac:	430a      	orrs	r2, r1
 8008aae:	b2d2      	uxtb	r2, r2
 8008ab0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	75bb      	strb	r3, [r7, #22]
 8008ab6:	e016      	b.n	8008ae6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	4413      	add	r3, r2
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	7dbb      	ldrb	r3, [r7, #22]
 8008ac4:	f1c3 0303 	rsb	r3, r3, #3
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	fa22 f103 	lsr.w	r1, r2, r3
 8008ace:	7dbb      	ldrb	r3, [r7, #22]
 8008ad0:	005a      	lsls	r2, r3, #1
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4413      	add	r3, r2
 8008adc:	b2ca      	uxtb	r2, r1
 8008ade:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008ae0:	7dbb      	ldrb	r3, [r7, #22]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	75bb      	strb	r3, [r7, #22]
 8008ae6:	7dbb      	ldrb	r3, [r7, #22]
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d9e5      	bls.n	8008ab8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008aec:	e030      	b.n	8008b50 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	4413      	add	r3, r2
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	b259      	sxtb	r1, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	011b      	lsls	r3, r3, #4
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	4413      	add	r3, r2
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4403      	add	r3, r0
 8008b0e:	791b      	ldrb	r3, [r3, #4]
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	b25b      	sxtb	r3, r3
 8008b14:	430b      	orrs	r3, r1
 8008b16:	b259      	sxtb	r1, r3
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	b2ca      	uxtb	r2, r1
 8008b20:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4413      	add	r3, r2
 8008b28:	7819      	ldrb	r1, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4413      	add	r3, r2
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	4403      	add	r3, r0
 8008b40:	7a1a      	ldrb	r2, [r3, #8]
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	4403      	add	r3, r0
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	701a      	strb	r2, [r3, #0]
      break;
 8008b4e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	3301      	adds	r3, #1
 8008b54:	75fb      	strb	r3, [r7, #23]
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	f67f ae0a 	bls.w	8008772 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008b78:	edd7 7a00 	vldr	s15, [r7]
 8008b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b84:	db1e      	blt.n	8008bc4 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008b86:	edd7 7a00 	vldr	s15, [r7]
 8008b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b8e:	ee17 2a90 	vmov	r2, s15
 8008b92:	edd7 7a00 	vldr	s15, [r7]
 8008b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b9e:	ed97 7a00 	vldr	s14, [r7]
 8008ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ba6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb2:	bf4c      	ite	mi
 8008bb4:	2301      	movmi	r3, #1
 8008bb6:	2300      	movpl	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	f083 0301 	eor.w	r3, r3, #1
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	e01a      	b.n	8008bfa <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008bc4:	edd7 7a00 	vldr	s15, [r7]
 8008bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bcc:	ee17 2a90 	vmov	r2, s15
 8008bd0:	edd7 7a00 	vldr	s15, [r7]
 8008bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bdc:	ed97 7a00 	vldr	s14, [r7]
 8008be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008be4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8008be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf0:	d501      	bpl.n	8008bf6 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e000      	b.n	8008bf8 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	1ad3      	subs	r3, r2, r3
    }
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	4613      	mov	r3, r2
 8008c12:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6918      	ldr	r0, [r3, #16]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8a9b      	ldrh	r3, [r3, #20]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f005 fec4 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6998      	ldr	r0, [r3, #24]
 8008c28:	88fa      	ldrh	r2, [r7, #6]
 8008c2a:	2364      	movs	r3, #100	@ 0x64
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	f006 feec 	bl	800fa0a <HAL_SPI_Receive>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6918      	ldr	r0, [r3, #16]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	8a9b      	ldrh	r3, [r3, #20]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	4619      	mov	r1, r3
 8008c42:	f005 feb3 	bl	800e9ac <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e000      	b.n	8008c52 <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008c50:	2300      	movs	r3, #0
    }
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	4613      	mov	r3, r2
 8008c66:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6918      	ldr	r0, [r3, #16]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8a9b      	ldrh	r3, [r3, #20]
 8008c70:	2200      	movs	r2, #0
 8008c72:	4619      	mov	r1, r3
 8008c74:	f005 fe9a 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6998      	ldr	r0, [r3, #24]
 8008c7c:	88fa      	ldrh	r2, [r7, #6]
 8008c7e:	2364      	movs	r3, #100	@ 0x64
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	f006 fd86 	bl	800f792 <HAL_SPI_Transmit>
 8008c86:	4603      	mov	r3, r0
 8008c88:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6918      	ldr	r0, [r3, #16]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8a9b      	ldrh	r3, [r3, #20]
 8008c92:	2201      	movs	r2, #1
 8008c94:	4619      	mov	r1, r3
 8008c96:	f005 fe89 	bl	800e9ac <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e000      	b.n	8008ca6 <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8008ca4:	2300      	movs	r3, #0
    }
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b088      	sub	sp, #32
 8008cb2:	af02      	add	r7, sp, #8
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6918      	ldr	r0, [r3, #16]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8a9b      	ldrh	r3, [r3, #20]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f005 fe70 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6998      	ldr	r0, [r3, #24]
 8008cd0:	887b      	ldrh	r3, [r7, #2]
 8008cd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008cd6:	9200      	str	r2, [sp, #0]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	f006 ffa6 	bl	800fc2c <HAL_SPI_TransmitReceive>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d009      	beq.n	8008cfe <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6918      	ldr	r0, [r3, #16]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8a9b      	ldrh	r3, [r3, #20]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	f005 fe59 	bl	800e9ac <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e008      	b.n	8008d10 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6918      	ldr	r0, [r3, #16]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8a9b      	ldrh	r3, [r3, #20]
 8008d06:	2201      	movs	r2, #1
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f005 fe4f 	bl	800e9ac <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8008d0e:	2300      	movs	r3, #0
    }
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8008d18:	b590      	push	{r4, r7, lr}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008d2e:	681c      	ldr	r4, [r3, #0]
 8008d30:	887b      	ldrh	r3, [r7, #2]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	47a0      	blx	r4
    }
 8008d3a:	bf00      	nop
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd90      	pop	{r4, r7, pc}

08008d42 <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	4798      	blx	r3
 8008d5c:	4603      	mov	r3, r0
    }
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b082      	sub	sp, #8
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	4798      	blx	r3
 8008d7c:	4603      	mov	r3, r0
    }
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	b2d2      	uxtb	r2, r2
 8008d9e:	4611      	mov	r1, r2
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
 8008da4:	4603      	mov	r3, r0
    }
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 8008dae:	b590      	push	{r4, r7, lr}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8008dbe:	681c      	ldr	r4, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	4798      	blx	r3
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	47a0      	blx	r4
 8008dd8:	4603      	mov	r3, r0
    }
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd90      	pop	{r4, r7, pc}

08008de2 <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 8008de2:	b590      	push	{r4, r7, lr}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8008df2:	681c      	ldr	r4, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2102      	movs	r1, #2
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	4798      	blx	r3
 8008e04:	4603      	mov	r3, r0
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	47a0      	blx	r4
 8008e0c:	4603      	mov	r3, r0
    }
 8008e0e:	4618      	mov	r0, r3
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd90      	pop	{r4, r7, pc}

08008e16 <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8008e16:	b5b0      	push	{r4, r5, r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e26:	681c      	ldr	r4, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008e30:	681d      	ldr	r5, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2103      	movs	r1, #3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	4798      	blx	r3
 8008e42:	4603      	mov	r3, r0
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	47a8      	blx	r5
 8008e4a:	eef0 7a40 	vmov.f32	s15, s0
 8008e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	47a0      	blx	r4
 8008e56:	4603      	mov	r3, r0
    }
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bdb0      	pop	{r4, r5, r7, pc}

08008e60 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8008e60:	b5b0      	push	{r4, r5, r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e70:	681c      	ldr	r4, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e7a:	681d      	ldr	r5, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2106      	movs	r1, #6
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	47a8      	blx	r5
 8008e96:	eef0 7a40 	vmov.f32	s15, s0
 8008e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	47a0      	blx	r4
 8008ea2:	4603      	mov	r3, r0
    }
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bdb0      	pop	{r4, r5, r7, pc}

08008eac <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8008eac:	b5b0      	push	{r4, r5, r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ebc:	681c      	ldr	r4, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008ec6:	681d      	ldr	r5, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2107      	movs	r1, #7
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	4798      	blx	r3
 8008ed8:	4603      	mov	r3, r0
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	47a8      	blx	r5
 8008ee2:	eef0 7a40 	vmov.f32	s15, s0
 8008ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	47a0      	blx	r4
 8008eee:	4603      	mov	r3, r0
    }
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bdb0      	pop	{r4, r5, r7, pc}

08008ef8 <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8008ef8:	b5b0      	push	{r4, r5, r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f08:	681c      	ldr	r4, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8008f12:	681d      	ldr	r5, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2104      	movs	r1, #4
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	4798      	blx	r3
 8008f24:	4603      	mov	r3, r0
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	47a8      	blx	r5
 8008f2e:	eef0 7a40 	vmov.f32	s15, s0
 8008f32:	eeb0 0a67 	vmov.f32	s0, s15
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	47a0      	blx	r4
 8008f3a:	4603      	mov	r3, r0
    }
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bdb0      	pop	{r4, r5, r7, pc}

08008f44 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8008f44:	b5b0      	push	{r4, r5, r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f54:	681c      	ldr	r4, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8008f5e:	681d      	ldr	r5, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2105      	movs	r1, #5
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4798      	blx	r3
 8008f70:	4603      	mov	r3, r0
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	47a8      	blx	r5
 8008f7a:	eef0 7a40 	vmov.f32	s15, s0
 8008f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	47a0      	blx	r4
 8008f86:	4603      	mov	r3, r0
    }
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bdb0      	pop	{r4, r5, r7, pc}

08008f90 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2104      	movs	r1, #4
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	4798      	blx	r3
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 8008fb2:	2300      	movs	r3, #0
    }
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	b2d1      	uxtb	r1, r2
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	4798      	blx	r3
    }
 8008fdc:	bf00      	nop
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	4798      	blx	r3
    }
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 8009002:	b590      	push	{r4, r7, lr}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009012:	681c      	ldr	r4, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2100      	movs	r1, #0
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
 8009024:	4603      	mov	r3, r0
 8009026:	461a      	mov	r2, r3
 8009028:	2102      	movs	r1, #2
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	47a0      	blx	r4
    }
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	bd90      	pop	{r4, r7, pc}

08009036 <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 8009036:	b590      	push	{r4, r7, lr}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009048:	681c      	ldr	r4, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	2102      	movs	r1, #2
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	47a0      	blx	r4
    }
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	bd90      	pop	{r4, r7, pc}

0800906c <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800907e:	681c      	ldr	r4, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	ee07 2a90 	vmov	s15, r2
 8009090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009094:	eeb0 0a67 	vmov.f32	s0, s15
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	4798      	blx	r3
 800909c:	4603      	mov	r3, r0
 800909e:	461a      	mov	r2, r3
 80090a0:	2106      	movs	r1, #6
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	47a0      	blx	r4
        return true;
 80090a6:	2301      	movs	r3, #1
    }
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd90      	pop	{r4, r7, pc}

080090b0 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80090c2:	681c      	ldr	r4, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	ee07 2a90 	vmov	s15, r2
 80090d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d8:	eeb0 0a67 	vmov.f32	s0, s15
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
 80090e0:	4603      	mov	r3, r0
 80090e2:	461a      	mov	r2, r3
 80090e4:	2107      	movs	r1, #7
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	47a0      	blx	r4
        return true;
 80090ea:	2301      	movs	r3, #1
    }
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd90      	pop	{r4, r7, pc}

080090f4 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 80090f4:	b590      	push	{r4, r7, lr}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009106:	681c      	ldr	r4, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	ee07 2a90 	vmov	s15, r2
 8009118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911c:	eeb0 0a67 	vmov.f32	s0, s15
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	4798      	blx	r3
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	2104      	movs	r1, #4
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	47a0      	blx	r4
        return true;
 800912e:	2301      	movs	r3, #1
    }
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bd90      	pop	{r4, r7, pc}

08009138 <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8009138:	b590      	push	{r4, r7, lr}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800914a:	681c      	ldr	r4, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	ee07 2a90 	vmov	s15, r2
 800915c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009160:	eeb0 0a67 	vmov.f32	s0, s15
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	4798      	blx	r3
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	2105      	movs	r1, #5
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	47a0      	blx	r4
        return true;
 8009172:	2301      	movs	r3, #1
    }
 8009174:	4618      	mov	r0, r3
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	bd90      	pop	{r4, r7, pc}

0800917c <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	2b07      	cmp	r3, #7
 800918c:	d901      	bls.n	8009192 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 800918e:	2300      	movs	r3, #0
 8009190:	e00f      	b.n	80091b2 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3380      	adds	r3, #128	@ 0x80
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	2115      	movs	r1, #21
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
        return true;
 80091b0:	2301      	movs	r3, #1
    }
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 80091ba:	b590      	push	{r4, r7, lr}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80091cc:	681c      	ldr	r4, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	4798      	blx	r3
 80091de:	4603      	mov	r3, r0
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	47a0      	blx	r4
    }
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd90      	pop	{r4, r7, pc}

080091ee <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80091ee:	b5b0      	push	{r4, r5, r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	4613      	mov	r3, r2
 80091fa:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8009204:	681c      	ldr	r4, [r3, #0]
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 800920c:	2501      	movs	r5, #1
 800920e:	e000      	b.n	8009212 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8009210:	2500      	movs	r5, #0
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	4798      	blx	r3
 8009222:	4603      	mov	r3, r0
 8009224:	461a      	mov	r2, r3
 8009226:	4629      	mov	r1, r5
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	47a0      	blx	r4
    }
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bdb0      	pop	{r4, r5, r7, pc}

08009234 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4798      	blx	r3
    }
 800924a:	bf00      	nop
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	4798      	blx	r3
    }
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8009270:	b5b0      	push	{r4, r5, r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	607b      	str	r3, [r7, #4]
 800927a:	460b      	mov	r3, r1
 800927c:	72fb      	strb	r3, [r7, #11]
 800927e:	4613      	mov	r3, r2
 8009280:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800928a:	681c      	ldr	r4, [r3, #0]
 800928c:	7abb      	ldrb	r3, [r7, #10]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009292:	2501      	movs	r5, #1
 8009294:	e000      	b.n	8009298 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009296:	2500      	movs	r5, #0
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	ee07 2a90 	vmov	s15, r2
 80092a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ac:	eeb0 0a67 	vmov.f32	s0, s15
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	4798      	blx	r3
 80092b4:	4603      	mov	r3, r0
 80092b6:	7af9      	ldrb	r1, [r7, #11]
 80092b8:	462a      	mov	r2, r5
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	47a0      	blx	r4
    }
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bdb0      	pop	{r4, r5, r7, pc}

080092c6 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 80092c6:	b5b0      	push	{r4, r5, r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80092da:	681c      	ldr	r4, [r3, #0]
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 80092e2:	2501      	movs	r5, #1
 80092e4:	e000      	b.n	80092e8 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 80092e6:	2500      	movs	r5, #0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2106      	movs	r1, #6
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	4798      	blx	r3
 80092f8:	4603      	mov	r3, r0
 80092fa:	461a      	mov	r2, r3
 80092fc:	4629      	mov	r1, r5
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	47a0      	blx	r4
    }
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bdb0      	pop	{r4, r5, r7, pc}

0800930a <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800930a:	b5b0      	push	{r4, r5, r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	460b      	mov	r3, r1
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009320:	681c      	ldr	r4, [r3, #0]
 8009322:	7afb      	ldrb	r3, [r7, #11]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d101      	bne.n	800932c <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 8009328:	2501      	movs	r5, #1
 800932a:	e000      	b.n	800932e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 800932c:	2500      	movs	r5, #0
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	ee07 2a90 	vmov	s15, r2
 800933e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009342:	eeb0 0a67 	vmov.f32	s0, s15
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	4798      	blx	r3
 800934a:	4603      	mov	r3, r0
 800934c:	461a      	mov	r2, r3
 800934e:	4629      	mov	r1, r5
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	47a0      	blx	r4
    }
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bdb0      	pop	{r4, r5, r7, pc}

0800935c <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	460b      	mov	r3, r1
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	7afa      	ldrb	r2, [r7, #11]
 8009376:	2a01      	cmp	r2, #1
 8009378:	d101      	bne.n	800937e <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 800937a:	2101      	movs	r1, #1
 800937c:	e000      	b.n	8009380 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 800937e:	2100      	movs	r1, #0
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	4798      	blx	r3
    }
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4798      	blx	r3
    }
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
    }
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b082      	sub	sp, #8
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	4798      	blx	r3
    }
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	4798      	blx	r3
    }
 80093fe:	bf00      	nop
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 800940e:	bf00      	nop
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2101      	movs	r1, #1
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	4798      	blx	r3
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	bf0c      	ite	eq
 8009426:	2301      	moveq	r3, #1
 8009428:	2300      	movne	r3, #0
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1ef      	bne.n	8009410 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3380      	adds	r3, #128	@ 0x80
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	2a01      	cmp	r2, #1
 8009460:	d101      	bne.n	8009466 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8009462:	2201      	movs	r2, #1
 8009464:	e000      	b.n	8009468 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8009466:	2200      	movs	r2, #0
 8009468:	4611      	mov	r1, r2
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
    }
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	70fb      	strb	r3, [r7, #3]
 8009482:	4613      	mov	r3, r2
 8009484:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	78ba      	ldrb	r2, [r7, #2]
 8009492:	2a01      	cmp	r2, #1
 8009494:	d101      	bne.n	800949a <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009496:	2201      	movs	r2, #1
 8009498:	e000      	b.n	800949c <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800949a:	2200      	movs	r2, #0
 800949c:	78f9      	ldrb	r1, [r7, #3]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
    }
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
    }
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80094e6:	bf00      	nop
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	4611      	mov	r1, r2
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2100      	movs	r1, #0
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2102      	movs	r1, #2
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2103      	movs	r1, #3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2203      	movs	r2, #3
 8009588:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2106      	movs	r1, #6
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2204      	movs	r2, #4
 80095b0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2107      	movs	r1, #7
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2205      	movs	r2, #5
 80095d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2104      	movs	r1, #4
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2206      	movs	r2, #6
 8009600:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2105      	movs	r1, #5
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2207      	movs	r2, #7
 8009628:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 800963c:	4b0b      	ldr	r3, [pc, #44]	@ (800966c <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8009644:	4b09      	ldr	r3, [pc, #36]	@ (800966c <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 8009646:	2201      	movs	r2, #1
 8009648:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4906      	ldr	r1, [pc, #24]	@ (8009670 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2208      	movs	r2, #8
 800965e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20000215 	.word	0x20000215
 8009670:	20000218 	.word	0x20000218

08009674 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	b2d1      	uxtb	r1, r2
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2200      	movs	r2, #0
 80096de:	2102      	movs	r1, #2
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2209      	movs	r2, #9
 80096e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009706:	681c      	ldr	r4, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	2102      	movs	r1, #2
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800972a:	bf00      	nop
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	bd90      	pop	{r4, r7, pc}

08009732 <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8009732:	b590      	push	{r4, r7, lr}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009744:	681c      	ldr	r4, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	ee07 2a90 	vmov	s15, r2
 8009756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975a:	eeb0 0a67 	vmov.f32	s0, s15
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	2103      	movs	r1, #3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bd90      	pop	{r4, r7, pc}

0800977c <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 800977c:	b590      	push	{r4, r7, lr}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800978e:	681c      	ldr	r4, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	ee07 2a90 	vmov	s15, r2
 80097a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a4:	eeb0 0a67 	vmov.f32	s0, s15
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4798      	blx	r3
 80097ac:	4603      	mov	r3, r0
 80097ae:	461a      	mov	r2, r3
 80097b0:	2106      	movs	r1, #6
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80097be:	bf00      	nop
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd90      	pop	{r4, r7, pc}

080097c6 <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 80097c6:	b590      	push	{r4, r7, lr}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80097d8:	681c      	ldr	r4, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	ee07 2a90 	vmov	s15, r2
 80097ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ee:	eeb0 0a67 	vmov.f32	s0, s15
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
 80097f6:	4603      	mov	r3, r0
 80097f8:	461a      	mov	r2, r3
 80097fa:	2107      	movs	r1, #7
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	bd90      	pop	{r4, r7, pc}

08009810 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009810:	b590      	push	{r4, r7, lr}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009822:	681c      	ldr	r4, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	ee07 2a90 	vmov	s15, r2
 8009834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009838:	eeb0 0a67 	vmov.f32	s0, s15
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	4798      	blx	r3
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	2104      	movs	r1, #4
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009852:	bf00      	nop
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	bd90      	pop	{r4, r7, pc}

0800985a <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800985a:	b590      	push	{r4, r7, lr}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800986c:	681c      	ldr	r4, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	ee07 2a90 	vmov	s15, r2
 800987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009882:	eeb0 0a67 	vmov.f32	s0, s15
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
 800988a:	4603      	mov	r3, r0
 800988c:	461a      	mov	r2, r3
 800988e:	2105      	movs	r1, #5
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd90      	pop	{r4, r7, pc}

080098a4 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 80098a4:	b590      	push	{r4, r7, lr}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80098b6:	681c      	ldr	r4, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	4798      	blx	r3
 80098c8:	4603      	mov	r3, r0
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd90      	pop	{r4, r7, pc}

080098e0 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 80098e0:	b5b0      	push	{r4, r5, r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80098f6:	681c      	ldr	r4, [r3, #0]
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d101      	bne.n	8009902 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 80098fe:	2501      	movs	r5, #1
 8009900:	e000      	b.n	8009904 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009902:	2500      	movs	r5, #0
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68b9      	ldr	r1, [r7, #8]
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	4798      	blx	r3
 8009914:	4603      	mov	r3, r0
 8009916:	461a      	mov	r2, r3
 8009918:	4629      	mov	r1, r5
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009926:	bf00      	nop
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bdb0      	pop	{r4, r5, r7, pc}

0800992e <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 800997a:	b5b0      	push	{r4, r5, r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	72fb      	strb	r3, [r7, #11]
 8009988:	4613      	mov	r3, r2
 800998a:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009994:	681c      	ldr	r4, [r3, #0]
 8009996:	7abb      	ldrb	r3, [r7, #10]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d101      	bne.n	80099a0 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800999c:	2501      	movs	r5, #1
 800999e:	e000      	b.n	80099a2 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80099a0:	2500      	movs	r5, #0
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	ee07 2a90 	vmov	s15, r2
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	eeb0 0a67 	vmov.f32	s0, s15
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	4798      	blx	r3
 80099be:	4603      	mov	r3, r0
 80099c0:	7af9      	ldrb	r1, [r7, #11]
 80099c2:	462a      	mov	r2, r5
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099d0:	bf00      	nop
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bdb0      	pop	{r4, r5, r7, pc}

080099d8 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 80099d8:	b5b0      	push	{r4, r5, r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80099ec:	681c      	ldr	r4, [r3, #0]
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d101      	bne.n	80099f8 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 80099f4:	2501      	movs	r5, #1
 80099f6:	e000      	b.n	80099fa <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 80099f8:	2500      	movs	r5, #0
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2106      	movs	r1, #6
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	4798      	blx	r3
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4629      	mov	r1, r5
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bdb0      	pop	{r4, r5, r7, pc}

08009a24 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009a24:	b5b0      	push	{r4, r5, r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	607a      	str	r2, [r7, #4]
 8009a30:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009a3a:	681c      	ldr	r4, [r3, #0]
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d101      	bne.n	8009a46 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009a42:	2501      	movs	r5, #1
 8009a44:	e000      	b.n	8009a48 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009a46:	2500      	movs	r5, #0
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	ee07 2a90 	vmov	s15, r2
 8009a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	4798      	blx	r3
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	4629      	mov	r1, r5
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a76:	bf00      	nop
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bdb0      	pop	{r4, r5, r7, pc}

08009a7e <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	460b      	mov	r3, r1
 8009a88:	607a      	str	r2, [r7, #4]
 8009a8a:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	7afa      	ldrb	r2, [r7, #11]
 8009a98:	2a01      	cmp	r2, #1
 8009a9a:	d101      	bne.n	8009aa0 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	e000      	b.n	8009aa2 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ab0:	bf00      	nop
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ad6:	bf00      	nop
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	2a01      	cmp	r2, #1
 8009b6a:	d101      	bne.n	8009b70 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	e000      	b.n	8009b72 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009b70:	2200      	movs	r2, #0
 8009b72:	4611      	mov	r1, r2
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
 8009b94:	4613      	mov	r3, r2
 8009b96:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	78ba      	ldrb	r2, [r7, #2]
 8009ba4:	2a01      	cmp	r2, #1
 8009ba6:	d101      	bne.n	8009bac <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009ba8:	2201      	movs	r2, #1
 8009baa:	e000      	b.n	8009bae <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009bac:	2200      	movs	r2, #0
 8009bae:	78f9      	ldrb	r1, [r7, #3]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009be2:	bf00      	nop
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b082      	sub	sp, #8
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	4798      	blx	r3
 8009c00:	4603      	mov	r3, r0
    }
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009c0a:	b480      	push	{r7}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8009c18:	4618      	mov	r0, r3
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8009c24:	b5b0      	push	{r4, r5, r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8009c34:	3b01      	subs	r3, #1
 8009c36:	2b07      	cmp	r3, #7
 8009c38:	f200 80fe 	bhi.w	8009e38 <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 8009c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c44 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c65 	.word	0x08009c65
 8009c48:	08009c91 	.word	0x08009c91
 8009c4c:	08009cbf 	.word	0x08009cbf
 8009c50:	08009d03 	.word	0x08009d03
 8009c54:	08009d49 	.word	0x08009d49
 8009c58:	08009d8f 	.word	0x08009d8f
 8009c5c:	08009dd5 	.word	0x08009dd5
 8009c60:	08009e1b 	.word	0x08009e1b
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009c6c:	681c      	ldr	r4, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	6a12      	ldr	r2, [r2, #32]
 8009c7c:	7b92      	ldrb	r2, [r2, #14]
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	4798      	blx	r3
 8009c84:	4603      	mov	r3, r0
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	47a0      	blx	r4
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	e0d4      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009c98:	681c      	ldr	r4, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	6a12      	ldr	r2, [r2, #32]
 8009ca8:	3228      	adds	r2, #40	@ 0x28
 8009caa:	7b92      	ldrb	r2, [r2, #14]
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	4798      	blx	r3
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	47a0      	blx	r4
 8009cba:	4603      	mov	r3, r0
 8009cbc:	e0bd      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009cc6:	681c      	ldr	r4, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009cd0:	681d      	ldr	r5, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	6a12      	ldr	r2, [r2, #32]
 8009ce0:	323c      	adds	r2, #60	@ 0x3c
 8009ce2:	7b92      	ldrb	r2, [r2, #14]
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	4798      	blx	r3
 8009cea:	4603      	mov	r3, r0
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	47a8      	blx	r5
 8009cf2:	eef0 7a40 	vmov.f32	s15, s0
 8009cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	47a0      	blx	r4
 8009cfe:	4603      	mov	r3, r0
 8009d00:	e09b      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009d0a:	681c      	ldr	r4, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d14:	681d      	ldr	r5, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	6a12      	ldr	r2, [r2, #32]
 8009d24:	3278      	adds	r2, #120	@ 0x78
 8009d26:	7b92      	ldrb	r2, [r2, #14]
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
 8009d2e:	4603      	mov	r3, r0
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	47a8      	blx	r5
 8009d38:	eef0 7a40 	vmov.f32	s15, s0
 8009d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	47a0      	blx	r4
 8009d44:	4603      	mov	r3, r0
 8009d46:	e078      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009d50:	681c      	ldr	r4, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009d5a:	681d      	ldr	r5, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	6a12      	ldr	r2, [r2, #32]
 8009d6a:	328c      	adds	r2, #140	@ 0x8c
 8009d6c:	7b92      	ldrb	r2, [r2, #14]
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	4798      	blx	r3
 8009d74:	4603      	mov	r3, r0
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	47a8      	blx	r5
 8009d7e:	eef0 7a40 	vmov.f32	s15, s0
 8009d82:	eeb0 0a67 	vmov.f32	s0, s15
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	47a0      	blx	r4
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	e055      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009d96:	681c      	ldr	r4, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8009da0:	681d      	ldr	r5, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6a12      	ldr	r2, [r2, #32]
 8009db0:	3250      	adds	r2, #80	@ 0x50
 8009db2:	7b92      	ldrb	r2, [r2, #14]
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	4798      	blx	r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	47a8      	blx	r5
 8009dc4:	eef0 7a40 	vmov.f32	s15, s0
 8009dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	47a0      	blx	r4
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	e032      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ddc:	681c      	ldr	r4, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8009de6:	681d      	ldr	r5, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6a12      	ldr	r2, [r2, #32]
 8009df6:	3264      	adds	r2, #100	@ 0x64
 8009df8:	7b92      	ldrb	r2, [r2, #14]
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	4798      	blx	r3
 8009e00:	4603      	mov	r3, r0
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	47a8      	blx	r5
 8009e0a:	eef0 7a40 	vmov.f32	s15, s0
 8009e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	47a0      	blx	r4
 8009e16:	4603      	mov	r3, r0
 8009e18:	e00f      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2104      	movs	r1, #4
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 8009e30:	2301      	movs	r3, #1
 8009e32:	e002      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 8009e34:	2300      	movs	r3, #0
 8009e36:	e000      	b.n	8009e3a <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 8009e38:	2300      	movs	r3, #0
    }
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bdb0      	pop	{r4, r5, r7, pc}
 8009e42:	bf00      	nop

08009e44 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6898      	ldr	r0, [r3, #8]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	899b      	ldrh	r3, [r3, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	4619      	mov	r1, r3
 8009e58:	f004 fda8 	bl	800e9ac <HAL_GPIO_WritePin>
    }
 8009e5c:	bf00      	nop
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e74:	d303      	bcc.n	8009e7e <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8009e7c:	e000      	b.n	8009e80 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8009e7e:	683b      	ldr	r3, [r7, #0]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	db05      	blt.n	8009ea8 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ea2:	da01      	bge.n	8009ea8 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	e00c      	b.n	8009ec2 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8009eae:	db06      	blt.n	8009ebe <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	da03      	bge.n	8009ebe <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8009ebc:	e001      	b.n	8009ec2 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 8009ebe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
	...

08009ed0 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8009efc <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 8009ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009eec:	eeb0 0a67 	vmov.f32	s0, s15
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	3c74242a 	.word	0x3c74242a

08009f00 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8009f0c:	edd7 7a00 	vldr	s15, [r7]
 8009f10:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8009f44 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 8009f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1c:	d80a      	bhi.n	8009f34 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8009f1e:	ed97 7a00 	vldr	s14, [r7]
 8009f22:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8009f48 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 8009f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f2e:	ee17 3a90 	vmov	r3, s15
 8009f32:	e000      	b.n	8009f36 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	4674241b 	.word	0x4674241b
 8009f48:	3c74242a 	.word	0x3c74242a

08009f4c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 8009f58:	887b      	ldrh	r3, [r7, #2]
 8009f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f5e:	d209      	bcs.n	8009f74 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8009f60:	887b      	ldrh	r3, [r7, #2]
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f6a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8009f88 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 8009f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f72:	e001      	b.n	8009f78 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8009f74:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8009f8c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 8009f78:	eeb0 0a67 	vmov.f32	s0, s15
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	4168d4fe 	.word	0x4168d4fe
 8009f8c:	00000000 	.word	0x00000000

08009f90 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8009f9c:	edd7 7a00 	vldr	s15, [r7]
 8009fa0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8009fd4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 8009fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fac:	d80b      	bhi.n	8009fc6 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8009fae:	ed97 7a00 	vldr	s14, [r7]
 8009fb2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8009fd8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 8009fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fbe:	ee17 3a90 	vmov	r3, s15
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	e000      	b.n	8009fc8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	4768c671 	.word	0x4768c671
 8009fd8:	4168d4fe 	.word	0x4168d4fe

08009fdc <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 8009fe8:	887b      	ldrh	r3, [r7, #2]
 8009fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fee:	d209      	bcs.n	800a004 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8009ff0:	887b      	ldrh	r3, [r7, #2]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ffa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a018 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 8009ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a002:	e001      	b.n	800a008 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a004:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a01c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a008:	eeb0 0a67 	vmov.f32	s0, s15
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	4168d4fe 	.word	0x4168d4fe
 800a01c:	00000000 	.word	0x00000000

0800a020 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a02c:	edd7 7a00 	vldr	s15, [r7]
 800a030:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a064 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a034:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03c:	d80b      	bhi.n	800a056 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a03e:	ed97 7a00 	vldr	s14, [r7]
 800a042:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a068 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a04a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a04e:	ee17 3a90 	vmov	r3, s15
 800a052:	b29b      	uxth	r3, r3
 800a054:	e000      	b.n	800a058 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	4768c671 	.word	0x4768c671
 800a068:	4168d4fe 	.word	0x4168d4fe

0800a06c <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a078:	887b      	ldrh	r3, [r7, #2]
 800a07a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a07e:	d209      	bcs.n	800a094 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a080:	887b      	ldrh	r3, [r7, #2]
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a08a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a0a8 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a08e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a092:	e001      	b.n	800a098 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a094:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a0ac <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a098:	eeb0 0a67 	vmov.f32	s0, s15
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	4174240b 	.word	0x4174240b
 800a0ac:	00000000 	.word	0x00000000

0800a0b0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a0bc:	edd7 7a00 	vldr	s15, [r7]
 800a0c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a0f4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a0c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0cc:	d80b      	bhi.n	800a0e6 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a0ce:	ed97 7a00 	vldr	s14, [r7]
 800a0d2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a0f8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a0d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a0da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0de:	ee17 3a90 	vmov	r3, s15
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	e000      	b.n	800a0e8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	4673e702 	.word	0x4673e702
 800a0f8:	4174240b 	.word	0x4174240b

0800a0fc <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a108:	887b      	ldrh	r3, [r7, #2]
 800a10a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a10e:	d209      	bcs.n	800a124 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a110:	887b      	ldrh	r3, [r7, #2]
 800a112:	ee07 3a90 	vmov	s15, r3
 800a116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a11a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a138 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a11e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a122:	e001      	b.n	800a128 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a124:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a13c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a128:	eeb0 0a67 	vmov.f32	s0, s15
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	3e742401 	.word	0x3e742401
 800a13c:	00000000 	.word	0x00000000

0800a140 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a14c:	edd7 7a00 	vldr	s15, [r7]
 800a150:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a184 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a154:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a15c:	d80b      	bhi.n	800a176 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a15e:	ed97 7a00 	vldr	s14, [r7]
 800a162:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a188 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a16a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a16e:	ee17 3a90 	vmov	r3, s15
 800a172:	b29b      	uxth	r3, r3
 800a174:	e000      	b.n	800a178 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	447414bf 	.word	0x447414bf
 800a188:	3e742401 	.word	0x3e742401

0800a18c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a198:	887b      	ldrh	r3, [r7, #2]
 800a19a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a19e:	d219      	bcs.n	800a1d4 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a1a0:	887b      	ldrh	r3, [r7, #2]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7f6 f9ee 	bl	8000584 <__aeabi_i2d>
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a1e8 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a1ae:	f7f6 f89d 	bl	80002ec <__adddf3>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	f04f 0200 	mov.w	r2, #0
 800a1be:	4b0b      	ldr	r3, [pc, #44]	@ (800a1ec <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a1c0:	f7f6 fa4a 	bl	8000658 <__aeabi_dmul>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	f7f6 fd3c 	bl	8000c48 <__aeabi_d2f>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	e001      	b.n	800a1d8 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a1d4:	f04f 0300 	mov.w	r3, #0
}
 800a1d8:	ee07 3a90 	vmov	s15, r3
 800a1dc:	eeb0 0a67 	vmov.f32	s0, s15
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	3fe00000 	.word	0x3fe00000
 800a1ec:	402e8000 	.word	0x402e8000

0800a1f0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a1fc:	edd7 7a00 	vldr	s15, [r7]
 800a200:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a23c <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a204:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20c:	d80f      	bhi.n	800a22e <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a20e:	ed97 7a00 	vldr	s14, [r7]
 800a212:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800a240 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a21a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a21e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a226:	ee17 3a90 	vmov	r3, s15
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	e000      	b.n	800a230 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	4673e180 	.word	0x4673e180
 800a240:	41740000 	.word	0x41740000

0800a244 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a250:	887b      	ldrh	r3, [r7, #2]
 800a252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a256:	d209      	bcs.n	800a26c <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a258:	887b      	ldrh	r3, [r7, #2]
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a262:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a280 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a26a:	e001      	b.n	800a270 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a26c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a284 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a270:	eeb0 0a67 	vmov.f32	s0, s15
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	3d7423f4 	.word	0x3d7423f4
 800a284:	00000000 	.word	0x00000000

0800a288 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a294:	edd7 7a00 	vldr	s15, [r7]
 800a298:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a2cc <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a29c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a4:	d80b      	bhi.n	800a2be <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a2a6:	ed97 7a00 	vldr	s14, [r7]
 800a2aa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a2d0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a2ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b6:	ee17 3a90 	vmov	r3, s15
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	e000      	b.n	800a2c0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	44742023 	.word	0x44742023
 800a2d0:	3d7423f4 	.word	0x3d7423f4

0800a2d4 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a2e0:	78fb      	ldrb	r3, [r7, #3]
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ea:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a300 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a2ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a2f2:	eeb0 0a67 	vmov.f32	s0, s15
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	3783956e 	.word	0x3783956e

0800a304 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a310:	edd7 7a02 	vldr	s15, [r7, #8]
 800a314:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a34c <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a320:	d80c      	bhi.n	800a33c <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a322:	ed97 7a02 	vldr	s14, [r7, #8]
 800a326:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a350 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a32a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a332:	edc7 7a01 	vstr	s15, [r7, #4]
 800a336:	793b      	ldrb	r3, [r7, #4]
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	e000      	b.n	800a33e <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	3b8311d9 	.word	0x3b8311d9
 800a350:	3783956e 	.word	0x3783956e

0800a354 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a36a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a380 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a36e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a372:	eeb0 0a67 	vmov.f32	s0, s15
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	3783956e 	.word	0x3783956e

0800a384 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a390:	edd7 7a02 	vldr	s15, [r7, #8]
 800a394:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a3cc <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a0:	d80c      	bhi.n	800a3bc <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a3a2:	ed97 7a02 	vldr	s14, [r7, #8]
 800a3a6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a3d0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a3aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3b2:	edc7 7a01 	vstr	s15, [r7, #4]
 800a3b6:	793b      	ldrb	r3, [r7, #4]
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	e000      	b.n	800a3be <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	3b8311d9 	.word	0x3b8311d9
 800a3d0:	3783956e 	.word	0x3783956e

0800a3d4 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3ea:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a400 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a3ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a3f2:	eeb0 0a67 	vmov.f32	s0, s15
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	3783956e 	.word	0x3783956e

0800a404 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a410:	edd7 7a02 	vldr	s15, [r7, #8]
 800a414:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a44c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a420:	d80c      	bhi.n	800a43c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a422:	ed97 7a02 	vldr	s14, [r7, #8]
 800a426:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a450 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a42a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a42e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a432:	edc7 7a01 	vstr	s15, [r7, #4]
 800a436:	793b      	ldrb	r3, [r7, #4]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	e000      	b.n	800a43e <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	3b8311d9 	.word	0x3b8311d9
 800a450:	3783956e 	.word	0x3783956e

0800a454 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	2b0f      	cmp	r3, #15
 800a464:	d80a      	bhi.n	800a47c <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	3301      	adds	r3, #1
 800a46a:	ee07 3a90 	vmov	s15, r3
 800a46e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a472:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a490 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a47a:	e001      	b.n	800a480 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a47c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a494 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a480:	eeb0 0a67 	vmov.f32	s0, s15
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	43bb8000 	.word	0x43bb8000
 800a494:	00000000 	.word	0x00000000

0800a498 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a4a4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a4a8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a534 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a4ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b4:	d836      	bhi.n	800a524 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a4b6:	ed97 7a02 	vldr	s14, [r7, #8]
 800a4ba:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a538 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a4be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4c2:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a4c6:	edd7 7a05 	vldr	s15, [r7, #20]
 800a4ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ce:	edc7 7a01 	vstr	s15, [r7, #4]
 800a4d2:	793b      	ldrb	r3, [r7, #4]
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4de:	ed97 7a05 	vldr	s14, [r7, #20]
 800a4e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4e6:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a4ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800a4ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a4f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fa:	d50a      	bpl.n	800a512 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a4fc:	edd7 7a05 	vldr	s15, [r7, #20]
 800a500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a504:	edc7 7a01 	vstr	s15, [r7, #4]
 800a508:	793b      	ldrb	r3, [r7, #4]
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	3b01      	subs	r3, #1
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	e009      	b.n	800a526 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a512:	edd7 7a05 	vldr	s15, [r7, #20]
 800a516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a51a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a51e:	793b      	ldrb	r3, [r7, #4]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	e000      	b.n	800a526 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	371c      	adds	r7, #28
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	45bb8000 	.word	0x45bb8000
 800a538:	43bb8000 	.word	0x43bb8000

0800a53c <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	db0a      	blt.n	800a566 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	3301      	adds	r3, #1
 800a554:	ee07 3a90 	vmov	s15, r3
 800a558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a55c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a578 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a560:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a564:	e001      	b.n	800a56a <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a566:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a57c <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a56a:	eeb0 0a67 	vmov.f32	s0, s15
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	41fa0000 	.word	0x41fa0000
 800a57c:	00000000 	.word	0x00000000

0800a580 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a58c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a590:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a61c <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a594:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59c:	d836      	bhi.n	800a60c <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a59e:	ed97 7a02 	vldr	s14, [r7, #8]
 800a5a2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a620 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a5a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5aa:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a5ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800a5b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5b6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a5ba:	793b      	ldrb	r3, [r7, #4]
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800a5ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ce:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a5d2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a5da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e2:	d50a      	bpl.n	800a5fa <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a5e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800a5e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ec:	edc7 7a01 	vstr	s15, [r7, #4]
 800a5f0:	793b      	ldrb	r3, [r7, #4]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	e009      	b.n	800a60e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a5fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800a5fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a602:	edc7 7a01 	vstr	s15, [r7, #4]
 800a606:	793b      	ldrb	r3, [r7, #4]
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	e000      	b.n	800a60e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	457a0000 	.word	0x457a0000
 800a620:	41fa0000 	.word	0x41fa0000

0800a624 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3394      	adds	r3, #148	@ 0x94
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	4798      	blx	r3
  get_status();
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	330c      	adds	r3, #12
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	edd2 7a05 	vldr	s15, [r2, #20]
 800a65a:	eeb0 0a67 	vmov.f32	s0, s15
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	4798      	blx	r3
 800a662:	4603      	mov	r3, r0
 800a664:	461a      	mov	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	edd2 7a06 	vldr	s15, [r2, #24]
 800a67c:	eeb0 0a67 	vmov.f32	s0, s15
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	4798      	blx	r3
 800a684:	4603      	mov	r3, r0
 800a686:	461a      	mov	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	edd2 7a07 	vldr	s15, [r2, #28]
 800a69e:	eeb0 0a67 	vmov.f32	s0, s15
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	4798      	blx	r3
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	edd2 7a08 	vldr	s15, [r2, #32]
 800a6c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	4798      	blx	r3
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800a6e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	4798      	blx	r3
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800a6fa:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800a9cc <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a6fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	ed93 7a00 	vldr	s14, [r3]
 800a708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a70c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a710:	edc7 7a01 	vstr	s15, [r7, #4]
 800a714:	793b      	ldrb	r3, [r7, #4]
 800a716:	b2da      	uxtb	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800a724:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800a9cc <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a728:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	ed93 7a00 	vldr	s14, [r3]
 800a732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a73a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a73e:	793b      	ldrb	r3, [r7, #4]
 800a740:	b2da      	uxtb	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800a74e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800a9cc <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a752:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	ed93 7a00 	vldr	s14, [r3]
 800a75c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a764:	edc7 7a01 	vstr	s15, [r7, #4]
 800a768:	793b      	ldrb	r3, [r7, #4]
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a778:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800a9cc <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a77c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	ed93 7a00 	vldr	s14, [r3]
 800a786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a78a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a78e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a792:	793b      	ldrb	r3, [r7, #4]
 800a794:	b2da      	uxtb	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800a7ac:	eeb0 0a67 	vmov.f32	s0, s15
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	4798      	blx	r3
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800a7ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	4798      	blx	r3
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	461a      	mov	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800a7f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	4798      	blx	r3
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800a812:	eeb0 0a67 	vmov.f32	s0, s15
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	4798      	blx	r3
 800a81a:	4603      	mov	r3, r0
 800a81c:	461a      	mov	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800a840:	eeb0 0a67 	vmov.f32	s0, s15
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	4798      	blx	r3
 800a848:	4603      	mov	r3, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800a862:	eeb0 0a67 	vmov.f32	s0, s15
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	4798      	blx	r3
 800a86a:	4603      	mov	r3, r0
 800a86c:	461a      	mov	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800a8a8:	2104      	movs	r1, #4
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800a8be:	2105      	movs	r1, #5
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800a8d4:	2106      	movs	r1, #6
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800a8ea:	2107      	movs	r1, #7
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800a900:	2108      	movs	r1, #8
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800a916:	2109      	movs	r1, #9
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800a92c:	210a      	movs	r1, #10
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800a942:	210b      	movs	r1, #11
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800a958:	210c      	movs	r1, #12
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800a96e:	210d      	movs	r1, #13
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800a984:	210e      	movs	r1, #14
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800a99a:	210f      	movs	r1, #15
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800a9b0:	2110      	movs	r1, #16
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800a9c6:	2111      	movs	r1, #17
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	e001      	b.n	800a9d0 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800a9cc:	43800000 	.word	0x43800000
 800a9d0:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800a9e2:	2113      	movs	r1, #19
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800a9f8:	2114      	movs	r1, #20
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800aa0e:	2116      	movs	r1, #22
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800aa24:	2117      	movs	r1, #23
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3354      	adds	r3, #84	@ 0x54
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800aa38:	4611      	mov	r1, r2
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	4798      	blx	r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	f083 0301 	eor.w	r3, r3, #1
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e000      	b.n	800aa50 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800aa58:	b590      	push	{r4, r7, lr}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	460b      	mov	r3, r1
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aa6e:	681c      	ldr	r4, [r3, #0]
 800aa70:	7afa      	ldrb	r2, [r7, #11]
 800aa72:	2300      	movs	r3, #0
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	490c      	ldr	r1, [pc, #48]	@ (800aab0 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a09      	ldr	r2, [pc, #36]	@ (800aab4 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800aa90:	4907      	ldr	r1, [pc, #28]	@ (800aab0 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a05      	ldr	r2, [pc, #20]	@ (800aab8 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800aaa2:	4904      	ldr	r1, [pc, #16]	@ (800aab4 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	4798      	blx	r3
}
 800aaa8:	bf00      	nop
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd90      	pop	{r4, r7, pc}
 800aab0:	20000218 	.word	0x20000218
 800aab4:	20000238 	.word	0x20000238
 800aab8:	20000240 	.word	0x20000240

0800aabc <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af02      	add	r7, sp, #8
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aad0:	681c      	ldr	r4, [r3, #0]
 800aad2:	78fb      	ldrb	r3, [r7, #3]
 800aad4:	2200      	movs	r2, #0
 800aad6:	9201      	str	r2, [sp, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	9200      	str	r2, [sp, #0]
 800aadc:	2202      	movs	r2, #2
 800aade:	4917      	ldr	r1, [pc, #92]	@ (800ab3c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a14      	ldr	r2, [pc, #80]	@ (800ab40 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800aaf0:	4912      	ldr	r1, [pc, #72]	@ (800ab3c <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a10      	ldr	r2, [pc, #64]	@ (800ab44 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ab02:	490f      	ldr	r1, [pc, #60]	@ (800ab40 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a19      	ldr	r1, [r3, #32]
 800ab0c:	78fa      	ldrb	r2, [r7, #3]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	440b      	add	r3, r1
 800ab18:	7b9b      	ldrb	r3, [r3, #14]
 800ab1a:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	7bfa      	ldrb	r2, [r7, #15]
 800ab28:	4906      	ldr	r1, [pc, #24]	@ (800ab44 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800ab32:	68bb      	ldr	r3, [r7, #8]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd90      	pop	{r4, r7, pc}
 800ab3c:	20000218 	.word	0x20000218
 800ab40:	20000238 	.word	0x20000238
 800ab44:	20000240 	.word	0x20000240

0800ab48 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800ab48:	b590      	push	{r4, r7, lr}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	460b      	mov	r3, r1
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ab5e:	681c      	ldr	r4, [r3, #0]
 800ab60:	7afa      	ldrb	r2, [r7, #11]
 800ab62:	2300      	movs	r3, #0
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	2203      	movs	r2, #3
 800ab6e:	490c      	ldr	r1, [pc, #48]	@ (800aba0 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a09      	ldr	r2, [pc, #36]	@ (800aba4 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800ab80:	4907      	ldr	r1, [pc, #28]	@ (800aba0 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a05      	ldr	r2, [pc, #20]	@ (800aba8 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800ab92:	4904      	ldr	r1, [pc, #16]	@ (800aba4 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	4798      	blx	r3
}
 800ab98:	bf00      	nop
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd90      	pop	{r4, r7, pc}
 800aba0:	20000218 	.word	0x20000218
 800aba4:	20000238 	.word	0x20000238
 800aba8:	20000240 	.word	0x20000240

0800abac <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b085      	sub	sp, #20
 800abb0:	af02      	add	r7, sp, #8
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800abc0:	681c      	ldr	r4, [r3, #0]
 800abc2:	78fb      	ldrb	r3, [r7, #3]
 800abc4:	2200      	movs	r2, #0
 800abc6:	9201      	str	r2, [sp, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	9200      	str	r2, [sp, #0]
 800abcc:	2204      	movs	r2, #4
 800abce:	490c      	ldr	r1, [pc, #48]	@ (800ac00 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a09      	ldr	r2, [pc, #36]	@ (800ac04 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800abe0:	4907      	ldr	r1, [pc, #28]	@ (800ac00 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a05      	ldr	r2, [pc, #20]	@ (800ac08 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800abf2:	4904      	ldr	r1, [pc, #16]	@ (800ac04 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	4798      	blx	r3
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd90      	pop	{r4, r7, pc}
 800ac00:	20000218 	.word	0x20000218
 800ac04:	20000238 	.word	0x20000238
 800ac08:	20000240 	.word	0x20000240

0800ac0c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800ac0c:	b590      	push	{r4, r7, lr}
 800ac0e:	b087      	sub	sp, #28
 800ac10:	af02      	add	r7, sp, #8
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	460b      	mov	r3, r1
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ac22:	681c      	ldr	r4, [r3, #0]
 800ac24:	7afa      	ldrb	r2, [r7, #11]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	2205      	movs	r2, #5
 800ac32:	490c      	ldr	r1, [pc, #48]	@ (800ac64 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a09      	ldr	r2, [pc, #36]	@ (800ac68 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800ac44:	4907      	ldr	r1, [pc, #28]	@ (800ac64 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a05      	ldr	r2, [pc, #20]	@ (800ac6c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800ac56:	4904      	ldr	r1, [pc, #16]	@ (800ac68 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	4798      	blx	r3
}
 800ac5c:	bf00      	nop
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd90      	pop	{r4, r7, pc}
 800ac64:	20000218 	.word	0x20000218
 800ac68:	20000238 	.word	0x20000238
 800ac6c:	20000240 	.word	0x20000240

0800ac70 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800ac70:	b590      	push	{r4, r7, lr}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af02      	add	r7, sp, #8
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac80:	d21f      	bcs.n	800acc2 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ac8a:	681c      	ldr	r4, [r3, #0]
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	2300      	movs	r3, #0
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2206      	movs	r2, #6
 800ac98:	490c      	ldr	r1, [pc, #48]	@ (800accc <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a09      	ldr	r2, [pc, #36]	@ (800acd0 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800acaa:	4908      	ldr	r1, [pc, #32]	@ (800accc <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a06      	ldr	r2, [pc, #24]	@ (800acd4 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800acbc:	4904      	ldr	r1, [pc, #16]	@ (800acd0 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	4798      	blx	r3
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd90      	pop	{r4, r7, pc}
 800acca:	bf00      	nop
 800accc:	20000218 	.word	0x20000218
 800acd0:	20000238 	.word	0x20000238
 800acd4:	20000240 	.word	0x20000240

0800acd8 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800acd8:	b590      	push	{r4, r7, lr}
 800acda:	b087      	sub	sp, #28
 800acdc:	af02      	add	r7, sp, #8
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	460b      	mov	r3, r1
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acec:	d220      	bcs.n	800ad30 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800acf6:	681c      	ldr	r4, [r3, #0]
 800acf8:	7afa      	ldrb	r2, [r7, #11]
 800acfa:	2300      	movs	r3, #0
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	4613      	mov	r3, r2
 800ad04:	2207      	movs	r2, #7
 800ad06:	490c      	ldr	r1, [pc, #48]	@ (800ad38 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a09      	ldr	r2, [pc, #36]	@ (800ad3c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800ad18:	4907      	ldr	r1, [pc, #28]	@ (800ad38 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a05      	ldr	r2, [pc, #20]	@ (800ad40 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800ad2a:	4904      	ldr	r1, [pc, #16]	@ (800ad3c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	4798      	blx	r3
}
 800ad30:	bf00      	nop
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd90      	pop	{r4, r7, pc}
 800ad38:	20000218 	.word	0x20000218
 800ad3c:	20000238 	.word	0x20000238
 800ad40:	20000240 	.word	0x20000240

0800ad44 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800ad44:	b590      	push	{r4, r7, lr}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af02      	add	r7, sp, #8
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	607b      	str	r3, [r7, #4]
 800ad4e:	460b      	mov	r3, r1
 800ad50:	72fb      	strb	r3, [r7, #11]
 800ad52:	4613      	mov	r3, r2
 800ad54:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ad5e:	681c      	ldr	r4, [r3, #0]
 800ad60:	7af9      	ldrb	r1, [r7, #11]
 800ad62:	7abb      	ldrb	r3, [r7, #10]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	9201      	str	r2, [sp, #4]
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	2208      	movs	r2, #8
 800ad6e:	490c      	ldr	r1, [pc, #48]	@ (800ada0 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a09      	ldr	r2, [pc, #36]	@ (800ada4 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800ad80:	4907      	ldr	r1, [pc, #28]	@ (800ada0 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a05      	ldr	r2, [pc, #20]	@ (800ada8 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800ad92:	4904      	ldr	r1, [pc, #16]	@ (800ada4 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	4798      	blx	r3
}
 800ad98:	bf00      	nop
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd90      	pop	{r4, r7, pc}
 800ada0:	20000218 	.word	0x20000218
 800ada4:	20000238 	.word	0x20000238
 800ada8:	20000240 	.word	0x20000240

0800adac <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800adac:	b590      	push	{r4, r7, lr}
 800adae:	b085      	sub	sp, #20
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
 800adb8:	4613      	mov	r3, r2
 800adba:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800adc4:	681c      	ldr	r4, [r3, #0]
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	78bb      	ldrb	r3, [r7, #2]
 800adca:	2100      	movs	r1, #0
 800adcc:	9101      	str	r1, [sp, #4]
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	4613      	mov	r3, r2
 800add2:	2209      	movs	r2, #9
 800add4:	490c      	ldr	r1, [pc, #48]	@ (800ae08 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a09      	ldr	r2, [pc, #36]	@ (800ae0c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800ade6:	4908      	ldr	r1, [pc, #32]	@ (800ae08 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a06      	ldr	r2, [pc, #24]	@ (800ae10 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800adf8:	4904      	ldr	r1, [pc, #16]	@ (800ae0c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	4798      	blx	r3
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd90      	pop	{r4, r7, pc}
 800ae06:	bf00      	nop
 800ae08:	20000218 	.word	0x20000218
 800ae0c:	20000238 	.word	0x20000238
 800ae10:	20000240 	.word	0x20000240

0800ae14 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800ae14:	b590      	push	{r4, r7, lr}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae24:	681c      	ldr	r4, [r3, #0]
 800ae26:	2300      	movs	r3, #0
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	220a      	movs	r2, #10
 800ae32:	490c      	ldr	r1, [pc, #48]	@ (800ae64 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a09      	ldr	r2, [pc, #36]	@ (800ae68 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800ae44:	4907      	ldr	r1, [pc, #28]	@ (800ae64 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a05      	ldr	r2, [pc, #20]	@ (800ae6c <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800ae56:	4904      	ldr	r1, [pc, #16]	@ (800ae68 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	4798      	blx	r3
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd90      	pop	{r4, r7, pc}
 800ae64:	20000218 	.word	0x20000218
 800ae68:	20000238 	.word	0x20000238
 800ae6c:	20000240 	.word	0x20000240

0800ae70 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800ae70:	b590      	push	{r4, r7, lr}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae80:	681c      	ldr	r4, [r3, #0]
 800ae82:	2300      	movs	r3, #0
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	2300      	movs	r3, #0
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	220b      	movs	r2, #11
 800ae8e:	490c      	ldr	r1, [pc, #48]	@ (800aec0 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a09      	ldr	r2, [pc, #36]	@ (800aec4 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800aea0:	4907      	ldr	r1, [pc, #28]	@ (800aec0 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a05      	ldr	r2, [pc, #20]	@ (800aec8 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800aeb2:	4904      	ldr	r1, [pc, #16]	@ (800aec4 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	4798      	blx	r3
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd90      	pop	{r4, r7, pc}
 800aec0:	20000218 	.word	0x20000218
 800aec4:	20000238 	.word	0x20000238
 800aec8:	20000240 	.word	0x20000240

0800aecc <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	b085      	sub	sp, #20
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aedc:	681c      	ldr	r4, [r3, #0]
 800aede:	2300      	movs	r3, #0
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	2300      	movs	r3, #0
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	2300      	movs	r3, #0
 800aee8:	220c      	movs	r2, #12
 800aeea:	490c      	ldr	r1, [pc, #48]	@ (800af1c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a09      	ldr	r2, [pc, #36]	@ (800af20 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800aefc:	4907      	ldr	r1, [pc, #28]	@ (800af1c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a05      	ldr	r2, [pc, #20]	@ (800af24 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800af0e:	4904      	ldr	r1, [pc, #16]	@ (800af20 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	4798      	blx	r3
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd90      	pop	{r4, r7, pc}
 800af1c:	20000218 	.word	0x20000218
 800af20:	20000238 	.word	0x20000238
 800af24:	20000240 	.word	0x20000240

0800af28 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800af28:	b590      	push	{r4, r7, lr}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af38:	681c      	ldr	r4, [r3, #0]
 800af3a:	2300      	movs	r3, #0
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	2300      	movs	r3, #0
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	2300      	movs	r3, #0
 800af44:	220d      	movs	r2, #13
 800af46:	490c      	ldr	r1, [pc, #48]	@ (800af78 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a09      	ldr	r2, [pc, #36]	@ (800af7c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800af58:	4907      	ldr	r1, [pc, #28]	@ (800af78 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a05      	ldr	r2, [pc, #20]	@ (800af80 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800af6a:	4904      	ldr	r1, [pc, #16]	@ (800af7c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	4798      	blx	r3
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	bd90      	pop	{r4, r7, pc}
 800af78:	20000218 	.word	0x20000218
 800af7c:	20000238 	.word	0x20000238
 800af80:	20000240 	.word	0x20000240

0800af84 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800af84:	b590      	push	{r4, r7, lr}
 800af86:	b085      	sub	sp, #20
 800af88:	af02      	add	r7, sp, #8
 800af8a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af94:	681c      	ldr	r4, [r3, #0]
 800af96:	2300      	movs	r3, #0
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	2300      	movs	r3, #0
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	2300      	movs	r3, #0
 800afa0:	220e      	movs	r2, #14
 800afa2:	490c      	ldr	r1, [pc, #48]	@ (800afd4 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a09      	ldr	r2, [pc, #36]	@ (800afd8 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800afb4:	4907      	ldr	r1, [pc, #28]	@ (800afd4 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a05      	ldr	r2, [pc, #20]	@ (800afdc <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800afc6:	4904      	ldr	r1, [pc, #16]	@ (800afd8 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	4798      	blx	r3
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd90      	pop	{r4, r7, pc}
 800afd4:	20000218 	.word	0x20000218
 800afd8:	20000238 	.word	0x20000238
 800afdc:	20000240 	.word	0x20000240

0800afe0 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800afe0:	b590      	push	{r4, r7, lr}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af02      	add	r7, sp, #8
 800afe6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aff0:	681c      	ldr	r4, [r3, #0]
 800aff2:	2300      	movs	r3, #0
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	2300      	movs	r3, #0
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	2300      	movs	r3, #0
 800affc:	220f      	movs	r2, #15
 800affe:	490c      	ldr	r1, [pc, #48]	@ (800b030 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a09      	ldr	r2, [pc, #36]	@ (800b034 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b010:	4907      	ldr	r1, [pc, #28]	@ (800b030 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a05      	ldr	r2, [pc, #20]	@ (800b038 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b022:	4904      	ldr	r1, [pc, #16]	@ (800b034 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	4798      	blx	r3
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd90      	pop	{r4, r7, pc}
 800b030:	20000218 	.word	0x20000218
 800b034:	20000238 	.word	0x20000238
 800b038:	20000240 	.word	0x20000240

0800b03c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b03c:	b590      	push	{r4, r7, lr}
 800b03e:	b085      	sub	sp, #20
 800b040:	af02      	add	r7, sp, #8
 800b042:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b04c:	681c      	ldr	r4, [r3, #0]
 800b04e:	2300      	movs	r3, #0
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	2300      	movs	r3, #0
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	2300      	movs	r3, #0
 800b058:	2210      	movs	r2, #16
 800b05a:	490c      	ldr	r1, [pc, #48]	@ (800b08c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a09      	ldr	r2, [pc, #36]	@ (800b090 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b06c:	4907      	ldr	r1, [pc, #28]	@ (800b08c <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a05      	ldr	r2, [pc, #20]	@ (800b094 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b07e:	4904      	ldr	r1, [pc, #16]	@ (800b090 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	4798      	blx	r3
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd90      	pop	{r4, r7, pc}
 800b08c:	20000218 	.word	0x20000218
 800b090:	20000238 	.word	0x20000238
 800b094:	20000240 	.word	0x20000240

0800b098 <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b098:	b590      	push	{r4, r7, lr}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b0a8:	681c      	ldr	r4, [r3, #0]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	2211      	movs	r2, #17
 800b0b6:	490c      	ldr	r1, [pc, #48]	@ (800b0e8 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a09      	ldr	r2, [pc, #36]	@ (800b0ec <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b0c8:	4907      	ldr	r1, [pc, #28]	@ (800b0e8 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a05      	ldr	r2, [pc, #20]	@ (800b0f0 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b0da:	4904      	ldr	r1, [pc, #16]	@ (800b0ec <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	4798      	blx	r3
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd90      	pop	{r4, r7, pc}
 800b0e8:	20000218 	.word	0x20000218
 800b0ec:	20000238 	.word	0x20000238
 800b0f0:	20000240 	.word	0x20000240

0800b0f4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b104:	681c      	ldr	r4, [r3, #0]
 800b106:	2300      	movs	r3, #0
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	2300      	movs	r3, #0
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	2300      	movs	r3, #0
 800b110:	2212      	movs	r2, #18
 800b112:	4912      	ldr	r1, [pc, #72]	@ (800b15c <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a0f      	ldr	r2, [pc, #60]	@ (800b160 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b124:	490d      	ldr	r1, [pc, #52]	@ (800b15c <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a0b      	ldr	r2, [pc, #44]	@ (800b164 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b136:	490a      	ldr	r1, [pc, #40]	@ (800b160 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2202      	movs	r2, #2
 800b148:	4906      	ldr	r1, [pc, #24]	@ (800b164 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	4798      	blx	r3
 800b14e:	4603      	mov	r3, r0
 800b150:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b152:	89fb      	ldrh	r3, [r7, #14]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd90      	pop	{r4, r7, pc}
 800b15c:	20000218 	.word	0x20000218
 800b160:	20000238 	.word	0x20000238
 800b164:	20000240 	.word	0x20000240

0800b168 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b168:	b590      	push	{r4, r7, lr}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af02      	add	r7, sp, #8
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	460b      	mov	r3, r1
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b17e:	681c      	ldr	r4, [r3, #0]
 800b180:	7afa      	ldrb	r2, [r7, #11]
 800b182:	2300      	movs	r3, #0
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	4613      	mov	r3, r2
 800b18c:	2201      	movs	r2, #1
 800b18e:	4903      	ldr	r1, [pc, #12]	@ (800b19c <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	47a0      	blx	r4
}
 800b194:	bf00      	nop
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	20000218 	.word	0x20000218

0800b1a0 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b1a0:	b590      	push	{r4, r7, lr}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1b4:	681c      	ldr	r4, [r3, #0]
 800b1b6:	78fb      	ldrb	r3, [r7, #3]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	9201      	str	r2, [sp, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	9200      	str	r2, [sp, #0]
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	4903      	ldr	r1, [pc, #12]	@ (800b1d0 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	47a0      	blx	r4
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd90      	pop	{r4, r7, pc}
 800b1d0:	20000218 	.word	0x20000218

0800b1d4 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b1d4:	b590      	push	{r4, r7, lr}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af02      	add	r7, sp, #8
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1ea:	681c      	ldr	r4, [r3, #0]
 800b1ec:	7afa      	ldrb	r2, [r7, #11]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	2203      	movs	r2, #3
 800b1fa:	4903      	ldr	r1, [pc, #12]	@ (800b208 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	47a0      	blx	r4
}
 800b200:	bf00      	nop
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	bd90      	pop	{r4, r7, pc}
 800b208:	20000218 	.word	0x20000218

0800b20c <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b20c:	b590      	push	{r4, r7, lr}
 800b20e:	b085      	sub	sp, #20
 800b210:	af02      	add	r7, sp, #8
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b220:	681c      	ldr	r4, [r3, #0]
 800b222:	78fb      	ldrb	r3, [r7, #3]
 800b224:	2200      	movs	r2, #0
 800b226:	9201      	str	r2, [sp, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	9200      	str	r2, [sp, #0]
 800b22c:	2204      	movs	r2, #4
 800b22e:	4903      	ldr	r1, [pc, #12]	@ (800b23c <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	47a0      	blx	r4
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd90      	pop	{r4, r7, pc}
 800b23c:	20000218 	.word	0x20000218

0800b240 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b087      	sub	sp, #28
 800b244:	af02      	add	r7, sp, #8
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	460b      	mov	r3, r1
 800b24a:	607a      	str	r2, [r7, #4]
 800b24c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b256:	681c      	ldr	r4, [r3, #0]
 800b258:	7afa      	ldrb	r2, [r7, #11]
 800b25a:	2300      	movs	r3, #0
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	4613      	mov	r3, r2
 800b264:	2205      	movs	r2, #5
 800b266:	4903      	ldr	r1, [pc, #12]	@ (800b274 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	47a0      	blx	r4
}
 800b26c:	bf00      	nop
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	bd90      	pop	{r4, r7, pc}
 800b274:	20000218 	.word	0x20000218

0800b278 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b28a:	681c      	ldr	r4, [r3, #0]
 800b28c:	2300      	movs	r3, #0
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	2300      	movs	r3, #0
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2206      	movs	r2, #6
 800b298:	4903      	ldr	r1, [pc, #12]	@ (800b2a8 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	47a0      	blx	r4
}
 800b29e:	bf00      	nop
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd90      	pop	{r4, r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000218 	.word	0x20000218

0800b2ac <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b2ac:	b590      	push	{r4, r7, lr}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af02      	add	r7, sp, #8
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2c2:	681c      	ldr	r4, [r3, #0]
 800b2c4:	7afa      	ldrb	r2, [r7, #11]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	2207      	movs	r2, #7
 800b2d2:	4903      	ldr	r1, [pc, #12]	@ (800b2e0 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	47a0      	blx	r4
}
 800b2d8:	bf00      	nop
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd90      	pop	{r4, r7, pc}
 800b2e0:	20000218 	.word	0x20000218

0800b2e4 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b2e4:	b590      	push	{r4, r7, lr}
 800b2e6:	b087      	sub	sp, #28
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	607b      	str	r3, [r7, #4]
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	72fb      	strb	r3, [r7, #11]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2fe:	681c      	ldr	r4, [r3, #0]
 800b300:	7af9      	ldrb	r1, [r7, #11]
 800b302:	7abb      	ldrb	r3, [r7, #10]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	9201      	str	r2, [sp, #4]
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	460b      	mov	r3, r1
 800b30c:	2208      	movs	r2, #8
 800b30e:	4903      	ldr	r1, [pc, #12]	@ (800b31c <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	47a0      	blx	r4
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd90      	pop	{r4, r7, pc}
 800b31c:	20000218 	.word	0x20000218

0800b320 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b320:	b590      	push	{r4, r7, lr}
 800b322:	b085      	sub	sp, #20
 800b324:	af02      	add	r7, sp, #8
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	460b      	mov	r3, r1
 800b32a:	70fb      	strb	r3, [r7, #3]
 800b32c:	4613      	mov	r3, r2
 800b32e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b338:	681c      	ldr	r4, [r3, #0]
 800b33a:	78fa      	ldrb	r2, [r7, #3]
 800b33c:	78bb      	ldrb	r3, [r7, #2]
 800b33e:	2100      	movs	r1, #0
 800b340:	9101      	str	r1, [sp, #4]
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	4613      	mov	r3, r2
 800b346:	2209      	movs	r2, #9
 800b348:	4903      	ldr	r1, [pc, #12]	@ (800b358 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	47a0      	blx	r4
}
 800b34e:	bf00      	nop
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	bd90      	pop	{r4, r7, pc}
 800b356:	bf00      	nop
 800b358:	20000218 	.word	0x20000218

0800b35c <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b35c:	b590      	push	{r4, r7, lr}
 800b35e:	b085      	sub	sp, #20
 800b360:	af02      	add	r7, sp, #8
 800b362:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b36c:	681c      	ldr	r4, [r3, #0]
 800b36e:	2300      	movs	r3, #0
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	2300      	movs	r3, #0
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	2300      	movs	r3, #0
 800b378:	220a      	movs	r2, #10
 800b37a:	4903      	ldr	r1, [pc, #12]	@ (800b388 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	47a0      	blx	r4
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	bd90      	pop	{r4, r7, pc}
 800b388:	20000218 	.word	0x20000218

0800b38c <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b38c:	b590      	push	{r4, r7, lr}
 800b38e:	b085      	sub	sp, #20
 800b390:	af02      	add	r7, sp, #8
 800b392:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b39c:	681c      	ldr	r4, [r3, #0]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9301      	str	r3, [sp, #4]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9300      	str	r3, [sp, #0]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	220b      	movs	r2, #11
 800b3aa:	4903      	ldr	r1, [pc, #12]	@ (800b3b8 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	47a0      	blx	r4
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd90      	pop	{r4, r7, pc}
 800b3b8:	20000218 	.word	0x20000218

0800b3bc <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b3bc:	b590      	push	{r4, r7, lr}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3cc:	681c      	ldr	r4, [r3, #0]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	220c      	movs	r2, #12
 800b3da:	4903      	ldr	r1, [pc, #12]	@ (800b3e8 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	47a0      	blx	r4
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd90      	pop	{r4, r7, pc}
 800b3e8:	20000218 	.word	0x20000218

0800b3ec <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b3ec:	b590      	push	{r4, r7, lr}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af02      	add	r7, sp, #8
 800b3f2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3fc:	681c      	ldr	r4, [r3, #0]
 800b3fe:	2300      	movs	r3, #0
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	2300      	movs	r3, #0
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	2300      	movs	r3, #0
 800b408:	220d      	movs	r2, #13
 800b40a:	4903      	ldr	r1, [pc, #12]	@ (800b418 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	47a0      	blx	r4
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	bd90      	pop	{r4, r7, pc}
 800b418:	20000218 	.word	0x20000218

0800b41c <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b41c:	b590      	push	{r4, r7, lr}
 800b41e:	b085      	sub	sp, #20
 800b420:	af02      	add	r7, sp, #8
 800b422:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b42c:	681c      	ldr	r4, [r3, #0]
 800b42e:	2300      	movs	r3, #0
 800b430:	9301      	str	r3, [sp, #4]
 800b432:	2300      	movs	r3, #0
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	2300      	movs	r3, #0
 800b438:	220e      	movs	r2, #14
 800b43a:	4903      	ldr	r1, [pc, #12]	@ (800b448 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	47a0      	blx	r4
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	bd90      	pop	{r4, r7, pc}
 800b448:	20000218 	.word	0x20000218

0800b44c <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b085      	sub	sp, #20
 800b450:	af02      	add	r7, sp, #8
 800b452:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b45c:	681c      	ldr	r4, [r3, #0]
 800b45e:	2300      	movs	r3, #0
 800b460:	9301      	str	r3, [sp, #4]
 800b462:	2300      	movs	r3, #0
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	2300      	movs	r3, #0
 800b468:	220f      	movs	r2, #15
 800b46a:	4903      	ldr	r1, [pc, #12]	@ (800b478 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	47a0      	blx	r4
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	bd90      	pop	{r4, r7, pc}
 800b478:	20000218 	.word	0x20000218

0800b47c <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b085      	sub	sp, #20
 800b480:	af02      	add	r7, sp, #8
 800b482:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b48c:	681c      	ldr	r4, [r3, #0]
 800b48e:	2300      	movs	r3, #0
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	2300      	movs	r3, #0
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	2300      	movs	r3, #0
 800b498:	2210      	movs	r2, #16
 800b49a:	4903      	ldr	r1, [pc, #12]	@ (800b4a8 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	47a0      	blx	r4
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd90      	pop	{r4, r7, pc}
 800b4a8:	20000218 	.word	0x20000218

0800b4ac <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b4ac:	b590      	push	{r4, r7, lr}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af02      	add	r7, sp, #8
 800b4b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4bc:	681c      	ldr	r4, [r3, #0]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	2211      	movs	r2, #17
 800b4ca:	4903      	ldr	r1, [pc, #12]	@ (800b4d8 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	47a0      	blx	r4
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd90      	pop	{r4, r7, pc}
 800b4d8:	20000218 	.word	0x20000218

0800b4dc <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b4dc:	b590      	push	{r4, r7, lr}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4ec:	681c      	ldr	r4, [r3, #0]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2212      	movs	r2, #18
 800b4fa:	4903      	ldr	r1, [pc, #12]	@ (800b508 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	47a0      	blx	r4
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	bd90      	pop	{r4, r7, pc}
 800b508:	20000218 	.word	0x20000218

0800b50c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a09      	ldr	r2, [pc, #36]	@ (800b544 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b520:	4909      	ldr	r1, [pc, #36]	@ (800b548 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a06      	ldr	r2, [pc, #24]	@ (800b54c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b532:	4904      	ldr	r1, [pc, #16]	@ (800b544 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b538:	4b04      	ldr	r3, [pc, #16]	@ (800b54c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20000238 	.word	0x20000238
 800b548:	20000218 	.word	0x20000218
 800b54c:	20000240 	.word	0x20000240

0800b550 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b550:	b590      	push	{r4, r7, lr}
 800b552:	b089      	sub	sp, #36	@ 0x24
 800b554:	af02      	add	r7, sp, #8
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b55c:	4b17      	ldr	r3, [pc, #92]	@ (800b5bc <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b55e:	2200      	movs	r2, #0
 800b560:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b562:	2300      	movs	r3, #0
 800b564:	75fb      	strb	r3, [r7, #23]
 800b566:	e020      	b.n	800b5aa <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b570:	681c      	ldr	r4, [r3, #0]
 800b572:	7dfb      	ldrb	r3, [r7, #23]
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	461a      	mov	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	1899      	adds	r1, r3, r2
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	461a      	mov	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	441a      	add	r2, r3
 800b586:	230a      	movs	r3, #10
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	2302      	movs	r3, #2
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b590:	2300      	movs	r3, #0
 800b592:	75bb      	strb	r3, [r7, #22]
 800b594:	e003      	b.n	800b59e <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b596:	bf00      	nop
 800b598:	7dbb      	ldrb	r3, [r7, #22]
 800b59a:	3301      	adds	r3, #1
 800b59c:	75bb      	strb	r3, [r7, #22]
 800b59e:	7dbb      	ldrb	r3, [r7, #22]
 800b5a0:	2b7c      	cmp	r3, #124	@ 0x7c
 800b5a2:	d9f8      	bls.n	800b596 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	75fb      	strb	r3, [r7, #23]
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d9db      	bls.n	800b568 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b5b0:	bf00      	nop
}
 800b5b2:	bf00      	nop
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd90      	pop	{r4, r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20000215 	.word	0x20000215

0800b5c0 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	74fb      	strb	r3, [r7, #19]
 800b5d6:	e016      	b.n	800b606 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b5d8:	7cfb      	ldrb	r3, [r7, #19]
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	461a      	mov	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	7f1b      	ldrb	r3, [r3, #28]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	79fa      	ldrb	r2, [r7, #7]
 800b5ee:	7cfb      	ldrb	r3, [r7, #19]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	00db      	lsls	r3, r3, #3
 800b5f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b600:	7cfb      	ldrb	r3, [r7, #19]
 800b602:	3301      	adds	r3, #1
 800b604:	74fb      	strb	r3, [r7, #19]
 800b606:	7cfb      	ldrb	r3, [r7, #19]
 800b608:	2b03      	cmp	r3, #3
 800b60a:	d9e5      	bls.n	800b5d8 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b60c:	697b      	ldr	r3, [r7, #20]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	371c      	adds	r7, #28
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
	...

0800b61c <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	460b      	mov	r3, r1
 800b626:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2118      	movs	r1, #24
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	4798      	blx	r3
 800b63c:	4602      	mov	r2, r0
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b642:	b292      	uxth	r2, r2
 800b644:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b646:	78fb      	ldrb	r3, [r7, #3]
 800b648:	2b0e      	cmp	r3, #14
 800b64a:	f200 8099 	bhi.w	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b64e:	a201      	add	r2, pc, #4	@ (adr r2, 800b654 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b691 	.word	0x0800b691
 800b658:	0800b6a1 	.word	0x0800b6a1
 800b65c:	0800b6b1 	.word	0x0800b6b1
 800b660:	0800b6c1 	.word	0x0800b6c1
 800b664:	0800b6d1 	.word	0x0800b6d1
 800b668:	0800b6e1 	.word	0x0800b6e1
 800b66c:	0800b6f1 	.word	0x0800b6f1
 800b670:	0800b701 	.word	0x0800b701
 800b674:	0800b711 	.word	0x0800b711
 800b678:	0800b721 	.word	0x0800b721
 800b67c:	0800b731 	.word	0x0800b731
 800b680:	0800b741 	.word	0x0800b741
 800b684:	0800b751 	.word	0x0800b751
 800b688:	0800b761 	.word	0x0800b761
 800b68c:	0800b771 	.word	0x0800b771
      state = pL6470_StatusRegister->HiZ;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	73fb      	strb	r3, [r7, #15]
      break;
 800b69e:	e06f      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ae:	e067      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6be:	e05f      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ce:	e057      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6de:	e04f      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ee:	e047      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6fe:	e03f      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	73fb      	strb	r3, [r7, #15]
      break;
 800b70e:	e037      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	73fb      	strb	r3, [r7, #15]
      break;
 800b71e:	e02f      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b724:	785b      	ldrb	r3, [r3, #1]
 800b726:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	73fb      	strb	r3, [r7, #15]
      break;
 800b72e:	e027      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b734:	785b      	ldrb	r3, [r3, #1]
 800b736:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	73fb      	strb	r3, [r7, #15]
      break;
 800b73e:	e01f      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b744:	785b      	ldrb	r3, [r3, #1]
 800b746:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	73fb      	strb	r3, [r7, #15]
      break;
 800b74e:	e017      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b754:	785b      	ldrb	r3, [r3, #1]
 800b756:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	73fb      	strb	r3, [r7, #15]
      break;
 800b75e:	e00f      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b764:	785b      	ldrb	r3, [r3, #1]
 800b766:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	73fb      	strb	r3, [r7, #15]
      break;
 800b76e:	e007      	b.n	800b780 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b774:	785b      	ldrb	r3, [r3, #1]
 800b776:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	73fb      	strb	r3, [r7, #15]
      break;
 800b77e:	bf00      	nop
  return state;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop

0800b78c <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800b798:	78fb      	ldrb	r3, [r7, #3]
 800b79a:	2b18      	cmp	r3, #24
 800b79c:	d809      	bhi.n	800b7b2 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a19      	ldr	r1, [r3, #32]
 800b7a2:	78fa      	ldrb	r2, [r7, #3]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	440b      	add	r3, r1
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]
 800b7ce:	e01a      	b.n	800b806 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
 800b7d2:	011b      	lsls	r3, r3, #4
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	2200      	movs	r2, #0
 800b7da:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ea:	011b      	lsls	r3, r3, #4
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	011b      	lsls	r3, r3, #4
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800b800:	7bfb      	ldrb	r3, [r7, #15]
 800b802:	3301      	adds	r3, #1
 800b804:	73fb      	strb	r3, [r7, #15]
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d9e1      	bls.n	800b7d0 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800b80c:	bf00      	nop
 800b80e:	bf00      	nop
 800b810:	3714      	adds	r7, #20
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800b81a:	b480      	push	{r7}
 800b81c:	b085      	sub	sp, #20
 800b81e:	af00      	add	r7, sp, #0
 800b820:	60f8      	str	r0, [r7, #12]
 800b822:	60b9      	str	r1, [r7, #8]
 800b824:	603b      	str	r3, [r7, #0]
 800b826:	4613      	mov	r3, r2
 800b828:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	7f1b      	ldrb	r3, [r3, #28]
 800b82e:	011b      	lsls	r3, r3, #4
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	4413      	add	r3, r2
 800b834:	79fa      	ldrb	r2, [r7, #7]
 800b836:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	7f1b      	ldrb	r3, [r3, #28]
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	4413      	add	r3, r2
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	7f1b      	ldrb	r3, [r3, #28]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	4413      	add	r3, r2
 800b850:	69ba      	ldr	r2, [r7, #24]
 800b852:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	7f1b      	ldrb	r3, [r3, #28]
 800b858:	011b      	lsls	r3, r3, #4
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	4413      	add	r3, r2
 800b85e:	69fa      	ldr	r2, [r7, #28]
 800b860:	60da      	str	r2, [r3, #12]
}
 800b862:	bf00      	nop
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
	...

0800b870 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800b870:	b590      	push	{r4, r7, lr}
 800b872:	b087      	sub	sp, #28
 800b874:	af02      	add	r7, sp, #8
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	603b      	str	r3, [r7, #0]
 800b87c:	4613      	mov	r3, r2
 800b87e:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800b880:	4b10      	ldr	r3, [pc, #64]	@ (800b8c4 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10a      	bne.n	800b89e <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800b888:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c4 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800b88a:	2201      	movs	r2, #1
 800b88c:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68b9      	ldr	r1, [r7, #8]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800b8a6:	681c      	ldr	r4, [r3, #0]
 800b8a8:	79fa      	ldrb	r2, [r7, #7]
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	6a3b      	ldr	r3, [r7, #32]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	68b9      	ldr	r1, [r7, #8]
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	47a0      	blx	r4
}
 800b8ba:	bf00      	nop
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd90      	pop	{r4, r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20000215 	.word	0x20000215

0800b8c8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800b8c8:	b480      	push	{r7}
 800b8ca:	b087      	sub	sp, #28
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	75bb      	strb	r3, [r7, #22]
 800b8dc:	e013      	b.n	800b906 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800b8de:	2300      	movs	r3, #0
 800b8e0:	75fb      	strb	r3, [r7, #23]
 800b8e2:	e00a      	b.n	800b8fa <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800b8e4:	7d7b      	ldrb	r3, [r7, #21]
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	757a      	strb	r2, [r7, #21]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	75fb      	strb	r3, [r7, #23]
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d9f1      	bls.n	800b8e4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800b900:	7dbb      	ldrb	r3, [r7, #22]
 800b902:	3301      	adds	r3, #1
 800b904:	75bb      	strb	r3, [r7, #22]
 800b906:	7dbb      	ldrb	r3, [r7, #22]
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d9e8      	bls.n	800b8de <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800b90c:	2300      	movs	r3, #0
 800b90e:	75fb      	strb	r3, [r7, #23]
 800b910:	e1f1      	b.n	800bcf6 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	011b      	lsls	r3, r3, #4
 800b91a:	68b9      	ldr	r1, [r7, #8]
 800b91c:	440b      	add	r3, r1
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	4619      	mov	r1, r3
 800b922:	460b      	mov	r3, r1
 800b924:	00db      	lsls	r3, r3, #3
 800b926:	1a5b      	subs	r3, r3, r1
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	441a      	add	r2, r3
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	440b      	add	r3, r1
 800b932:	7b12      	ldrb	r2, [r2, #12]
 800b934:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800b936:	7dfb      	ldrb	r3, [r7, #23]
 800b938:	011b      	lsls	r3, r3, #4
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	4413      	add	r3, r2
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	2b12      	cmp	r3, #18
 800b942:	f200 81d5 	bhi.w	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800b946:	a201      	add	r2, pc, #4	@ (adr r2, 800b94c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800b948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94c:	0800bcf1 	.word	0x0800bcf1
 800b950:	0800b999 	.word	0x0800b999
 800b954:	0800ba21 	.word	0x0800ba21
 800b958:	0800ba51 	.word	0x0800ba51
 800b95c:	0800bab9 	.word	0x0800bab9
 800b960:	0800bae7 	.word	0x0800bae7
 800b964:	0800bb4f 	.word	0x0800bb4f
 800b968:	0800bb8b 	.word	0x0800bb8b
 800b96c:	0800bbf3 	.word	0x0800bbf3
 800b970:	0800bc8f 	.word	0x0800bc8f
 800b974:	0800bcf1 	.word	0x0800bcf1
 800b978:	0800bcf1 	.word	0x0800bcf1
 800b97c:	0800bcf1 	.word	0x0800bcf1
 800b980:	0800bcf1 	.word	0x0800bcf1
 800b984:	0800bcf1 	.word	0x0800bcf1
 800b988:	0800bcf1 	.word	0x0800bcf1
 800b98c:	0800bcf1 	.word	0x0800bcf1
 800b990:	0800bcf1 	.word	0x0800bcf1
 800b994:	0800bcf1 	.word	0x0800bcf1
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800b998:	7dfb      	ldrb	r3, [r7, #23]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	4413      	add	r3, r2
 800b99e:	7819      	ldrb	r1, [r3, #0]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6a18      	ldr	r0, [r3, #32]
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	011b      	lsls	r3, r3, #4
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4403      	add	r3, r0
 800b9b8:	781a      	ldrb	r2, [r3, #0]
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	4403      	add	r3, r0
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	b2d2      	uxtb	r2, r2
 800b9c4:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6a19      	ldr	r1, [r3, #32]
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	011b      	lsls	r3, r3, #4
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4413      	add	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	440b      	add	r3, r1
 800b9de:	7b9b      	ldrb	r3, [r3, #14]
 800b9e0:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	75bb      	strb	r3, [r7, #22]
 800b9e6:	e016      	b.n	800ba16 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800b9e8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	689a      	ldr	r2, [r3, #8]
 800b9f2:	7d39      	ldrb	r1, [r7, #20]
 800b9f4:	7dbb      	ldrb	r3, [r7, #22]
 800b9f6:	1acb      	subs	r3, r1, r3
 800b9f8:	00db      	lsls	r3, r3, #3
 800b9fa:	fa22 f103 	lsr.w	r1, r2, r3
 800b9fe:	7dbb      	ldrb	r3, [r7, #22]
 800ba00:	005a      	lsls	r2, r3, #1
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
 800ba04:	4413      	add	r3, r2
 800ba06:	461a      	mov	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	b2ca      	uxtb	r2, r1
 800ba0e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800ba10:	7dbb      	ldrb	r3, [r7, #22]
 800ba12:	3301      	adds	r3, #1
 800ba14:	75bb      	strb	r3, [r7, #22]
 800ba16:	7d3a      	ldrb	r2, [r7, #20]
 800ba18:	7dbb      	ldrb	r3, [r7, #22]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d2e4      	bcs.n	800b9e8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800ba1e:	e167      	b.n	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	4413      	add	r3, r2
 800ba26:	7819      	ldrb	r1, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6a18      	ldr	r0, [r3, #32]
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	011b      	lsls	r3, r3, #4
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	4413      	add	r3, r2
 800ba34:	685a      	ldr	r2, [r3, #4]
 800ba36:	4613      	mov	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4403      	add	r3, r0
 800ba40:	781a      	ldrb	r2, [r3, #0]
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	4403      	add	r3, r0
 800ba48:	430a      	orrs	r2, r1
 800ba4a:	b2d2      	uxtb	r2, r2
 800ba4c:	701a      	strb	r2, [r3, #0]
      break;
 800ba4e:	e14f      	b.n	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	4413      	add	r3, r2
 800ba56:	7819      	ldrb	r1, [r3, #0]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	011b      	lsls	r3, r3, #4
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	4413      	add	r3, r2
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	4613      	mov	r3, r2
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	4413      	add	r3, r2
 800ba6c:	4403      	add	r3, r0
 800ba6e:	7a1a      	ldrb	r2, [r3, #8]
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4403      	add	r3, r0
 800ba76:	430a      	orrs	r2, r1
 800ba78:	b2d2      	uxtb	r2, r2
 800ba7a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	75bb      	strb	r3, [r7, #22]
 800ba80:	e016      	b.n	800bab0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
 800ba84:	011b      	lsls	r3, r3, #4
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	4413      	add	r3, r2
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	7dbb      	ldrb	r3, [r7, #22]
 800ba8e:	f1c3 0303 	rsb	r3, r3, #3
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	fa22 f103 	lsr.w	r1, r2, r3
 800ba98:	7dbb      	ldrb	r3, [r7, #22]
 800ba9a:	005a      	lsls	r2, r3, #1
 800ba9c:	7dfb      	ldrb	r3, [r7, #23]
 800ba9e:	4413      	add	r3, r2
 800baa0:	461a      	mov	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4413      	add	r3, r2
 800baa6:	b2ca      	uxtb	r2, r1
 800baa8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800baaa:	7dbb      	ldrb	r3, [r7, #22]
 800baac:	3301      	adds	r3, #1
 800baae:	75bb      	strb	r3, [r7, #22]
 800bab0:	7dbb      	ldrb	r3, [r7, #22]
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	d9e5      	bls.n	800ba82 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800bab6:	e11b      	b.n	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	4413      	add	r3, r2
 800babe:	7819      	ldrb	r1, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bac4:	7dfb      	ldrb	r3, [r7, #23]
 800bac6:	011b      	lsls	r3, r3, #4
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	4413      	add	r3, r2
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	4613      	mov	r3, r2
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	4413      	add	r3, r2
 800bad4:	4403      	add	r3, r0
 800bad6:	7a1a      	ldrb	r2, [r3, #8]
 800bad8:	7dfb      	ldrb	r3, [r7, #23]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	4403      	add	r3, r0
 800bade:	430a      	orrs	r2, r1
 800bae0:	b2d2      	uxtb	r2, r2
 800bae2:	701a      	strb	r2, [r3, #0]
      break;
 800bae4:	e104      	b.n	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	4413      	add	r3, r2
 800baec:	7819      	ldrb	r1, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800baf2:	7dfb      	ldrb	r3, [r7, #23]
 800baf4:	011b      	lsls	r3, r3, #4
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	4413      	add	r3, r2
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	4613      	mov	r3, r2
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	4413      	add	r3, r2
 800bb02:	4403      	add	r3, r0
 800bb04:	7a1a      	ldrb	r2, [r3, #8]
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	4403      	add	r3, r0
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	b2d2      	uxtb	r2, r2
 800bb10:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bb12:	2301      	movs	r3, #1
 800bb14:	75bb      	strb	r3, [r7, #22]
 800bb16:	e016      	b.n	800bb46 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	011b      	lsls	r3, r3, #4
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	4413      	add	r3, r2
 800bb20:	689a      	ldr	r2, [r3, #8]
 800bb22:	7dbb      	ldrb	r3, [r7, #22]
 800bb24:	f1c3 0303 	rsb	r3, r3, #3
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	fa22 f103 	lsr.w	r1, r2, r3
 800bb2e:	7dbb      	ldrb	r3, [r7, #22]
 800bb30:	005a      	lsls	r2, r3, #1
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	4413      	add	r3, r2
 800bb36:	461a      	mov	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	b2ca      	uxtb	r2, r1
 800bb3e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bb40:	7dbb      	ldrb	r3, [r7, #22]
 800bb42:	3301      	adds	r3, #1
 800bb44:	75bb      	strb	r3, [r7, #22]
 800bb46:	7dbb      	ldrb	r3, [r7, #22]
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d9e5      	bls.n	800bb18 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800bb4c:	e0d0      	b.n	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bb4e:	2301      	movs	r3, #1
 800bb50:	75bb      	strb	r3, [r7, #22]
 800bb52:	e016      	b.n	800bb82 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	7dbb      	ldrb	r3, [r7, #22]
 800bb60:	f1c3 0303 	rsb	r3, r3, #3
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	fa22 f103 	lsr.w	r1, r2, r3
 800bb6a:	7dbb      	ldrb	r3, [r7, #22]
 800bb6c:	005a      	lsls	r2, r3, #1
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	4413      	add	r3, r2
 800bb72:	461a      	mov	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4413      	add	r3, r2
 800bb78:	b2ca      	uxtb	r2, r1
 800bb7a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bb7c:	7dbb      	ldrb	r3, [r7, #22]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	75bb      	strb	r3, [r7, #22]
 800bb82:	7dbb      	ldrb	r3, [r7, #22]
 800bb84:	2b03      	cmp	r3, #3
 800bb86:	d9e5      	bls.n	800bb54 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800bb88:	e0b2      	b.n	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	4413      	add	r3, r2
 800bb90:	7819      	ldrb	r1, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
 800bb98:	011b      	lsls	r3, r3, #4
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	685a      	ldr	r2, [r3, #4]
 800bba0:	4613      	mov	r3, r2
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	4413      	add	r3, r2
 800bba6:	4403      	add	r3, r0
 800bba8:	7a1a      	ldrb	r2, [r3, #8]
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	4403      	add	r3, r0
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	b2d2      	uxtb	r2, r2
 800bbb4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	75bb      	strb	r3, [r7, #22]
 800bbba:	e016      	b.n	800bbea <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	7dbb      	ldrb	r3, [r7, #22]
 800bbc8:	f1c3 0303 	rsb	r3, r3, #3
 800bbcc:	00db      	lsls	r3, r3, #3
 800bbce:	fa22 f103 	lsr.w	r1, r2, r3
 800bbd2:	7dbb      	ldrb	r3, [r7, #22]
 800bbd4:	005a      	lsls	r2, r3, #1
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	4413      	add	r3, r2
 800bbda:	461a      	mov	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4413      	add	r3, r2
 800bbe0:	b2ca      	uxtb	r2, r1
 800bbe2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bbe4:	7dbb      	ldrb	r3, [r7, #22]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	75bb      	strb	r3, [r7, #22]
 800bbea:	7dbb      	ldrb	r3, [r7, #22]
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d9e5      	bls.n	800bbbc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800bbf0:	e07e      	b.n	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	b259      	sxtb	r1, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	4413      	add	r3, r2
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4413      	add	r3, r2
 800bc10:	4403      	add	r3, r0
 800bc12:	791b      	ldrb	r3, [r3, #4]
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	b25b      	sxtb	r3, r3
 800bc18:	430b      	orrs	r3, r1
 800bc1a:	b259      	sxtb	r1, r3
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	4413      	add	r3, r2
 800bc22:	b2ca      	uxtb	r2, r1
 800bc24:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	7819      	ldrb	r1, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bc32:	7dfb      	ldrb	r3, [r7, #23]
 800bc34:	011b      	lsls	r3, r3, #4
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	4413      	add	r3, r2
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	00db      	lsls	r3, r3, #3
 800bc40:	4413      	add	r3, r2
 800bc42:	4403      	add	r3, r0
 800bc44:	7a1a      	ldrb	r2, [r3, #8]
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	4403      	add	r3, r0
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	b2d2      	uxtb	r2, r2
 800bc50:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bc52:	2301      	movs	r3, #1
 800bc54:	75bb      	strb	r3, [r7, #22]
 800bc56:	e016      	b.n	800bc86 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
 800bc5a:	011b      	lsls	r3, r3, #4
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	4413      	add	r3, r2
 800bc60:	68da      	ldr	r2, [r3, #12]
 800bc62:	7dbb      	ldrb	r3, [r7, #22]
 800bc64:	f1c3 0303 	rsb	r3, r3, #3
 800bc68:	00db      	lsls	r3, r3, #3
 800bc6a:	fa22 f103 	lsr.w	r1, r2, r3
 800bc6e:	7dbb      	ldrb	r3, [r7, #22]
 800bc70:	005a      	lsls	r2, r3, #1
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
 800bc74:	4413      	add	r3, r2
 800bc76:	461a      	mov	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	b2ca      	uxtb	r2, r1
 800bc7e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bc80:	7dbb      	ldrb	r3, [r7, #22]
 800bc82:	3301      	adds	r3, #1
 800bc84:	75bb      	strb	r3, [r7, #22]
 800bc86:	7dbb      	ldrb	r3, [r7, #22]
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d9e5      	bls.n	800bc58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800bc8c:	e030      	b.n	800bcf0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	4413      	add	r3, r2
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	b259      	sxtb	r1, r3
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	011b      	lsls	r3, r3, #4
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	4413      	add	r3, r2
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	4613      	mov	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4413      	add	r3, r2
 800bcac:	4403      	add	r3, r0
 800bcae:	791b      	ldrb	r3, [r3, #4]
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	b25b      	sxtb	r3, r3
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	b259      	sxtb	r1, r3
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	b2ca      	uxtb	r2, r1
 800bcc0:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	7819      	ldrb	r1, [r3, #0]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
 800bcd0:	011b      	lsls	r3, r3, #4
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	689a      	ldr	r2, [r3, #8]
 800bcd8:	4613      	mov	r3, r2
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	4413      	add	r3, r2
 800bcde:	4403      	add	r3, r0
 800bce0:	7a1a      	ldrb	r2, [r3, #8]
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	4403      	add	r3, r0
 800bce8:	430a      	orrs	r2, r1
 800bcea:	b2d2      	uxtb	r2, r2
 800bcec:	701a      	strb	r2, [r3, #0]
      break;
 800bcee:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	75fb      	strb	r3, [r7, #23]
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	f67f ae0a 	bls.w	800b912 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800bcfe:	bf00      	nop
 800bd00:	bf00      	nop
 800bd02:	371c      	adds	r7, #28
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800bd18:	edd7 7a00 	vldr	s15, [r7]
 800bd1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd24:	db1e      	blt.n	800bd64 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800bd26:	edd7 7a00 	vldr	s15, [r7]
 800bd2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd2e:	ee17 2a90 	vmov	r2, s15
 800bd32:	edd7 7a00 	vldr	s15, [r7]
 800bd36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd3e:	ed97 7a00 	vldr	s14, [r7]
 800bd42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bd4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd52:	bf4c      	ite	mi
 800bd54:	2301      	movmi	r3, #1
 800bd56:	2300      	movpl	r3, #0
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	f083 0301 	eor.w	r3, r3, #1
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	4413      	add	r3, r2
 800bd62:	e01a      	b.n	800bd9a <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800bd64:	edd7 7a00 	vldr	s15, [r7]
 800bd68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd6c:	ee17 2a90 	vmov	r2, s15
 800bd70:	edd7 7a00 	vldr	s15, [r7]
 800bd74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd7c:	ed97 7a00 	vldr	s14, [r7]
 800bd80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd84:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800bd88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd90:	d501      	bpl.n	800bd96 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800bd92:	2301      	movs	r3, #1
 800bd94:	e000      	b.n	800bd98 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800bd96:	2300      	movs	r3, #0
 800bd98:	1ad3      	subs	r3, r2, r3
    }
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	370c      	adds	r7, #12
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b086      	sub	sp, #24
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	60f8      	str	r0, [r7, #12]
 800bdae:	60b9      	str	r1, [r7, #8]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6918      	ldr	r0, [r3, #16]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	8a9b      	ldrh	r3, [r3, #20]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	f002 fdf4 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6998      	ldr	r0, [r3, #24]
 800bdc8:	88fa      	ldrh	r2, [r7, #6]
 800bdca:	2364      	movs	r3, #100	@ 0x64
 800bdcc:	68b9      	ldr	r1, [r7, #8]
 800bdce:	f003 fe1c 	bl	800fa0a <HAL_SPI_Receive>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6918      	ldr	r0, [r3, #16]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	8a9b      	ldrh	r3, [r3, #20]
 800bdde:	2201      	movs	r2, #1
 800bde0:	4619      	mov	r1, r3
 800bde2:	f002 fde3 	bl	800e9ac <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800bde6:	7dfb      	ldrb	r3, [r7, #23]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800bdf0:	2300      	movs	r3, #0
    }
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b086      	sub	sp, #24
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	60b9      	str	r1, [r7, #8]
 800be04:	4613      	mov	r3, r2
 800be06:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6918      	ldr	r0, [r3, #16]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	8a9b      	ldrh	r3, [r3, #20]
 800be10:	2200      	movs	r2, #0
 800be12:	4619      	mov	r1, r3
 800be14:	f002 fdca 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6998      	ldr	r0, [r3, #24]
 800be1c:	88fa      	ldrh	r2, [r7, #6]
 800be1e:	2364      	movs	r3, #100	@ 0x64
 800be20:	68b9      	ldr	r1, [r7, #8]
 800be22:	f003 fcb6 	bl	800f792 <HAL_SPI_Transmit>
 800be26:	4603      	mov	r3, r0
 800be28:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6918      	ldr	r0, [r3, #16]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	8a9b      	ldrh	r3, [r3, #20]
 800be32:	2201      	movs	r2, #1
 800be34:	4619      	mov	r1, r3
 800be36:	f002 fdb9 	bl	800e9ac <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e000      	b.n	800be46 <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800be44:	2300      	movs	r3, #0
    }
 800be46:	4618      	mov	r0, r3
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800be4e:	b580      	push	{r7, lr}
 800be50:	b088      	sub	sp, #32
 800be52:	af02      	add	r7, sp, #8
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	607a      	str	r2, [r7, #4]
 800be5a:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6918      	ldr	r0, [r3, #16]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8a9b      	ldrh	r3, [r3, #20]
 800be64:	2200      	movs	r2, #0
 800be66:	4619      	mov	r1, r3
 800be68:	f002 fda0 	bl	800e9ac <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6998      	ldr	r0, [r3, #24]
 800be70:	887b      	ldrh	r3, [r7, #2]
 800be72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800be76:	9200      	str	r2, [sp, #0]
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	f003 fed6 	bl	800fc2c <HAL_SPI_TransmitReceive>
 800be80:	4603      	mov	r3, r0
 800be82:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d009      	beq.n	800be9e <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6918      	ldr	r0, [r3, #16]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	8a9b      	ldrh	r3, [r3, #20]
 800be92:	2201      	movs	r2, #1
 800be94:	4619      	mov	r1, r3
 800be96:	f002 fd89 	bl	800e9ac <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e008      	b.n	800beb0 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6918      	ldr	r0, [r3, #16]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	8a9b      	ldrh	r3, [r3, #20]
 800bea6:	2201      	movs	r2, #1
 800bea8:	4619      	mov	r1, r3
 800beaa:	f002 fd7f 	bl	800e9ac <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800beae:	2300      	movs	r3, #0
    }
 800beb0:	4618      	mov	r0, r3
 800beb2:	3718      	adds	r7, #24
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800beb8:	b590      	push	{r4, r7, lr}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bece:	681c      	ldr	r4, [r3, #0]
 800bed0:	887b      	ldrh	r3, [r7, #2]
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	6879      	ldr	r1, [r7, #4]
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	47a0      	blx	r4
    }
 800beda:	bf00      	nop
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd90      	pop	{r4, r7, pc}

0800bee2 <_ZN12Embase3Roues4initEv>:

/**
 * @brief Initialize all tasks at NONE, and reset task counts...
 * 
 */
void Embase3Roues::init() {
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
	for (int32_t i = 0; i < MAX_TASK_COUNT; ++i) {
 800beea:	2300      	movs	r3, #0
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	e00e      	b.n	800bf0e <_ZN12Embase3Roues4initEv+0x2c>
		initTask(_task_buffer[i]);
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	00db      	lsls	r3, r3, #3
 800befa:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	4413      	add	r3, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 f937 	bl	800c176 <_Z8initTaskR6Task_t>
	for (int32_t i = 0; i < MAX_TASK_COUNT; ++i) {
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800bf14:	dbec      	blt.n	800bef0 <_ZN12Embase3Roues4initEv+0xe>
	}

	_last_index = 0;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	2300      	movs	r3, #0
 800bf20:	6593      	str	r3, [r2, #88]	@ 0x58
	_current_index = 0;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800bf28:	461a      	mov	r2, r3
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800bf2e:	bf00      	nop
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>:
 * @param x 
 * @param y 
 * @param theta 
 * @return int32_t : the index of the added task, or -1 in case of failure (queue full)
 */
int32_t Embase3Roues::appendRelativeMove(double x, double y, double theta) {
 800bf36:	b5b0      	push	{r4, r5, r7, lr}
 800bf38:	b09c      	sub	sp, #112	@ 0x70
 800bf3a:	af08      	add	r7, sp, #32
 800bf3c:	61f8      	str	r0, [r7, #28]
 800bf3e:	ed87 0b04 	vstr	d0, [r7, #16]
 800bf42:	ed87 1b02 	vstr	d1, [r7, #8]
 800bf46:	ed87 2b00 	vstr	d2, [r7]
	Task_t task;
	initTask(task);
 800bf4a:	f107 0320 	add.w	r3, r7, #32
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 f911 	bl	800c176 <_Z8initTaskR6Task_t>

	task.type = MOVE_RELATIVE;
 800bf54:	2302      	movs	r3, #2
 800bf56:	f887 3020 	strb.w	r3, [r7, #32]

	task.x = x;
 800bf5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	task.y = y;
 800bf62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf66:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	task.theta = theta;
 800bf6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf6e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	int32_t res = appendInstruction(task);
 800bf72:	466d      	mov	r5, sp
 800bf74:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800bf78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bf80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800bf84:	f107 0320 	add.w	r3, r7, #32
 800bf88:	cb0c      	ldmia	r3, {r2, r3}
 800bf8a:	69f8      	ldr	r0, [r7, #28]
 800bf8c:	f000 f91c 	bl	800c1c8 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800bf90:	64f8      	str	r0, [r7, #76]	@ 0x4c
	return res;
 800bf92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3750      	adds	r7, #80	@ 0x50
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bdb0      	pop	{r4, r5, r7, pc}

0800bf9c <_ZN12Embase3Roues10appendWaitEm>:
 * @brief Append a wait task at the end of the queue
 * 
 * @param delay_ms 
 * @return int32_t : the index of the added task, or -1 in case of failure (queue full)
 */
int32_t Embase3Roues::appendWait(uint32_t delay_ms) {
 800bf9c:	b5b0      	push	{r4, r5, r7, lr}
 800bf9e:	b096      	sub	sp, #88	@ 0x58
 800bfa0:	af08      	add	r7, sp, #32
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
	Task_t task;
	initTask(task);
 800bfa6:	f107 0308 	add.w	r3, r7, #8
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f000 f8e3 	bl	800c176 <_Z8initTaskR6Task_t>

	task.type = WAIT;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	723b      	strb	r3, [r7, #8]

	task.delay_ms = delay_ms;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	int32_t res = appendInstruction(task);
 800bfb8:	466d      	mov	r5, sp
 800bfba:	f107 0410 	add.w	r4, r7, #16
 800bfbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bfc6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800bfca:	f107 0308 	add.w	r3, r7, #8
 800bfce:	cb0c      	ldmia	r3, {r2, r3}
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f8f9 	bl	800c1c8 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800bfd6:	6378      	str	r0, [r7, #52]	@ 0x34
	return res;
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3738      	adds	r7, #56	@ 0x38
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bdb0      	pop	{r4, r5, r7, pc}

0800bfe2 <_ZN12Embase3Roues10appendUartEh>:

int32_t Embase3Roues::appendUart(uint8_t c){
 800bfe2:	b5b0      	push	{r4, r5, r7, lr}
 800bfe4:	b096      	sub	sp, #88	@ 0x58
 800bfe6:	af08      	add	r7, sp, #32
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	70fb      	strb	r3, [r7, #3]
	Task_t task;
	initTask(task);
 800bfee:	f107 0308 	add.w	r3, r7, #8
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 f8bf 	bl	800c176 <_Z8initTaskR6Task_t>

	task.type = UART_SEND;
 800bff8:	2303      	movs	r3, #3
 800bffa:	723b      	strb	r3, [r7, #8]

	task.c = c;
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	int32_t res = appendInstruction(task);
 800c002:	466d      	mov	r5, sp
 800c004:	f107 0410 	add.w	r4, r7, #16
 800c008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c00a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c00c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c010:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c014:	f107 0308 	add.w	r3, r7, #8
 800c018:	cb0c      	ldmia	r3, {r2, r3}
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f8d4 	bl	800c1c8 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800c020:	6378      	str	r0, [r7, #52]	@ 0x34
	return res;
 800c022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c024:	4618      	mov	r0, r3
 800c026:	3738      	adds	r7, #56	@ 0x38
 800c028:	46bd      	mov	sp, r7
 800c02a:	bdb0      	pop	{r4, r5, r7, pc}

0800c02c <_ZN12Embase3Roues18executeInstructionEv>:
/**
 * @brief Execute an instruction from the queue
 * 
 * @return int32_t : the index of the executed instruction
 */
TaskType_t Embase3Roues::executeInstruction() {
 800c02c:	b5b0      	push	{r4, r5, r7, lr}
 800c02e:	b08e      	sub	sp, #56	@ 0x38
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
	Task_t current_task = _task_buffer[_current_index];
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c03a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c03c:	6879      	ldr	r1, [r7, #4]
 800c03e:	4613      	mov	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	440b      	add	r3, r1
 800c048:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c04c:	f107 0408 	add.w	r4, r7, #8
 800c050:	461d      	mov	r5, r3
 800c052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c05a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c05e:	e884 0003 	stmia.w	r4, {r0, r1}
	TaskType_t type = current_task.type;
 800c062:	7a3b      	ldrb	r3, [r7, #8]
 800c064:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	// "delete" current task
	initTask(_task_buffer[_current_index]);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c06e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c070:	4613      	mov	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	4413      	add	r3, r2
 800c076:	00db      	lsls	r3, r3, #3
 800c078:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	4413      	add	r3, r2
 800c080:	4618      	mov	r0, r3
 800c082:	f000 f878 	bl	800c176 <_Z8initTaskR6Task_t>

	// Only go forward in the buffer if the task was not NONE.
	if (type != NONE)
 800c086:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d008      	beq.n	800c0a0 <_ZN12Embase3Roues18executeInstructionEv+0x74>
	{
		_current_index++;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c096:	3301      	adds	r3, #1
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800c09e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	}

	switch (type) {
 800c0a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0a4:	2b03      	cmp	r3, #3
 800c0a6:	d831      	bhi.n	800c10c <_ZN12Embase3Roues18executeInstructionEv+0xe0>
 800c0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c0b0 <_ZN12Embase3Roues18executeInstructionEv+0x84>)
 800c0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ae:	bf00      	nop
 800c0b0:	0800c10d 	.word	0x0800c10d
 800c0b4:	0800c0ed 	.word	0x0800c0ed
 800c0b8:	0800c0c1 	.word	0x0800c0c1
 800c0bc:	0800c0f9 	.word	0x0800c0f9
	case NONE:
		// Do nothing...
		break;

	case MOVE_RELATIVE:
		moveRelative(current_task.x, current_task.y, current_task.theta);
 800c0c0:	ed97 7b04 	vldr	d7, [r7, #16]
 800c0c4:	ed97 6b06 	vldr	d6, [r7, #24]
 800c0c8:	ed97 5b08 	vldr	d5, [r7, #32]
 800c0cc:	eeb0 2a45 	vmov.f32	s4, s10
 800c0d0:	eef0 2a65 	vmov.f32	s5, s11
 800c0d4:	eeb0 1a46 	vmov.f32	s2, s12
 800c0d8:	eef0 1a66 	vmov.f32	s3, s13
 800c0dc:	eeb0 0a47 	vmov.f32	s0, s14
 800c0e0:	eef0 0a67 	vmov.f32	s1, s15
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fc13 	bl	800c910 <_ZN12Embase3Roues12moveRelativeEddd>
		break;
 800c0ea:	e010      	b.n	800c10e <_ZN12Embase3Roues18executeInstructionEv+0xe2>

	case WAIT:
		wait(current_task.delay_ms);
 800c0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fc35 	bl	800c960 <_ZN12Embase3Roues4waitEm>
		break;
 800c0f6:	e00a      	b.n	800c10e <_ZN12Embase3Roues18executeInstructionEv+0xe2>

	case UART_SEND:
		HAL_UART_Transmit(&huart2, (uint8_t *) &current_task.c, 1*sizeof(char), 100);
 800c0f8:	f107 0308 	add.w	r3, r7, #8
 800c0fc:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800c100:	2364      	movs	r3, #100	@ 0x64
 800c102:	2201      	movs	r2, #1
 800c104:	4805      	ldr	r0, [pc, #20]	@ (800c11c <_ZN12Embase3Roues18executeInstructionEv+0xf0>)
 800c106:	f005 f958 	bl	80113ba <HAL_UART_Transmit>
		break;
 800c10a:	e000      	b.n	800c10e <_ZN12Embase3Roues18executeInstructionEv+0xe2>

	default:
		break;
 800c10c:	bf00      	nop
	}

	return type;
 800c10e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c112:	4618      	mov	r0, r3
 800c114:	3738      	adds	r7, #56	@ 0x38
 800c116:	46bd      	mov	sp, r7
 800c118:	bdb0      	pop	{r4, r5, r7, pc}
 800c11a:	bf00      	nop
 800c11c:	200004cc 	.word	0x200004cc

0800c120 <_Z8copyTaskR6Task_tS0_>:
/*******************************
 * Private functions
 ******************************/

void copyTask(Task_t &dest, Task_t &src)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
	dest.type = src.type;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781a      	ldrb	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	701a      	strb	r2, [r3, #0]
	dest.x = src.x;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dest.y = src.y;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dest.theta = src.theta;
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c150:	6879      	ldr	r1, [r7, #4]
 800c152:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dest.delay_ms = src.delay_ms;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	6a1a      	ldr	r2, [r3, #32]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	621a      	str	r2, [r3, #32]
	dest.c = src.c;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800c16a:	bf00      	nop
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <_Z8initTaskR6Task_t>:

void initTask(Task_t &task)
{
 800c176:	b480      	push	{r7}
 800c178:	b083      	sub	sp, #12
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
	task.type = TaskType_t::NONE;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	701a      	strb	r2, [r3, #0]
	task.x = 0;
 800c184:	6879      	ldr	r1, [r7, #4]
 800c186:	f04f 0200 	mov.w	r2, #0
 800c18a:	f04f 0300 	mov.w	r3, #0
 800c18e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	task.y = 0;
 800c192:	6879      	ldr	r1, [r7, #4]
 800c194:	f04f 0200 	mov.w	r2, #0
 800c198:	f04f 0300 	mov.w	r3, #0
 800c19c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	task.theta = 0;
 800c1a0:	6879      	ldr	r1, [r7, #4]
 800c1a2:	f04f 0200 	mov.w	r2, #0
 800c1a6:	f04f 0300 	mov.w	r3, #0
 800c1aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	task.delay_ms = 0;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	621a      	str	r2, [r3, #32]
	task.c = '\0';
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <_ZN12Embase3Roues17appendInstructionE6Task_t>:

int32_t Embase3Roues::appendInstruction(Task_t task) {
 800c1c8:	b082      	sub	sp, #8
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	f107 0110 	add.w	r1, r7, #16
 800c1d6:	e881 000c 	stmia.w	r1, {r2, r3}
	if (_task_buffer[_last_index].type != NONE) {
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c1e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	4413      	add	r3, r2
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	440b      	add	r3, r1
 800c1ee:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <_ZN12Embase3Roues17appendInstructionE6Task_t+0x36>
		// The task queue is full - error
	 	return -1;
 800c1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fc:	e030      	b.n	800c260 <_ZN12Embase3Roues17appendInstructionE6Task_t+0x98>
	}
	if(task.type == NONE)
 800c1fe:	7c3b      	ldrb	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d104      	bne.n	800c20e <_ZN12Embase3Roues17appendInstructionE6Task_t+0x46>
	{
		// Nothing happened
		return _last_index;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c20a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c20c:	e028      	b.n	800c260 <_ZN12Embase3Roues17appendInstructionE6Task_t+0x98>
	}

	copyTask(_task_buffer[_last_index], task);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c214:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c216:	4613      	mov	r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	4413      	add	r3, r2
 800c226:	f107 0110 	add.w	r1, r7, #16
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7ff ff78 	bl	800c120 <_Z8copyTaskR6Task_tS0_>

	_last_index = (_last_index + 1) % MAX_TASK_COUNT;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	4b0d      	ldr	r3, [pc, #52]	@ (800c270 <_ZN12Embase3Roues17appendInstructionE6Task_t+0xa8>)
 800c23c:	fb83 1302 	smull	r1, r3, r3, r2
 800c240:	1159      	asrs	r1, r3, #5
 800c242:	17d3      	asrs	r3, r2, #31
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800c24a:	fb01 f303 	mul.w	r3, r1, r3
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800c256:	6593      	str	r3, [r2, #88]	@ 0x58

	return _last_index;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c25e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c26a:	b002      	add	sp, #8
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	1b4e81b5 	.word	0x1b4e81b5
 800c274:	00000000 	.word	0x00000000

0800c278 <_ZN12Embase3Roues7setStepEddd>:


	return _current_index;
}

void Embase3Roues::setStep(double x, double y, double theta) {
 800c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c27a:	b09d      	sub	sp, #116	@ 0x74
 800c27c:	af06      	add	r7, sp, #24
 800c27e:	61f8      	str	r0, [r7, #28]
 800c280:	ed87 0b04 	vstr	d0, [r7, #16]
 800c284:	ed87 1b02 	vstr	d1, [r7, #8]
 800c288:	ed87 2b00 	vstr	d2, [r7]
	//Conversion en m
	x *= 4; //Conversion pour que Set-position(1,0,0) donne une translation de 1m suivant X
 800c28c:	f04f 0200 	mov.w	r2, #0
 800c290:	4bb5      	ldr	r3, [pc, #724]	@ (800c568 <_ZN12Embase3Roues7setStepEddd+0x2f0>)
 800c292:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c296:	f7f4 f9df 	bl	8000658 <__aeabi_dmul>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y *= 4; //Conversion pour que Set-position(0,1,0) donne une translation de 1m suivant Y
 800c2a2:	f04f 0200 	mov.w	r2, #0
 800c2a6:	4bb0      	ldr	r3, [pc, #704]	@ (800c568 <_ZN12Embase3Roues7setStepEddd+0x2f0>)
 800c2a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2ac:	f7f4 f9d4 	bl	8000658 <__aeabi_dmul>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	theta *= 0.070777; //Conversion pour que Set_Position(0,0,360) donne une rotation de 360° autour de Z
 800c2b8:	a3a3      	add	r3, pc, #652	@ (adr r3, 800c548 <_ZN12Embase3Roues7setStepEddd+0x2d0>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2c2:	f7f4 f9c9 	bl	8000658 <__aeabi_dmul>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	e9c7 2300 	strd	r2, r3, [r7]

	//Angles en radians
	double theta_a = 1 / Rayon_Roue * (coeff_1x * x * 0.5 - coeff_1y * y * coeff_Y - diametre_embase * theta * coeff_1z);
 800c2ce:	f04f 0200 	mov.w	r2, #0
 800c2d2:	4ba6      	ldr	r3, [pc, #664]	@ (800c56c <_ZN12Embase3Roues7setStepEddd+0x2f4>)
 800c2d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c2d8:	f7f4 f9be 	bl	8000658 <__aeabi_dmul>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	461d      	mov	r5, r3
 800c2e4:	a39a      	add	r3, pc, #616	@ (adr r3, 800c550 <_ZN12Embase3Roues7setStepEddd+0x2d8>)
 800c2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2ee:	f7f4 f9b3 	bl	8000658 <__aeabi_dmul>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f7f3 fff5 	bl	80002e8 <__aeabi_dsub>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4614      	mov	r4, r2
 800c304:	461d      	mov	r5, r3
 800c306:	a394      	add	r3, pc, #592	@ (adr r3, 800c558 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c310:	f7f4 f9a2 	bl	8000658 <__aeabi_dmul>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	4620      	mov	r0, r4
 800c31a:	4629      	mov	r1, r5
 800c31c:	f7f3 ffe4 	bl	80002e8 <__aeabi_dsub>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4610      	mov	r0, r2
 800c326:	4619      	mov	r1, r3
 800c328:	a38d      	add	r3, pc, #564	@ (adr r3, 800c560 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	f7f4 f993 	bl	8000658 <__aeabi_dmul>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double theta_c = 1 / Rayon_Roue * (coeff_3x * x * 0.5 + y * coeff_Y * coeff_3y - diametre_embase * theta * coeff_3z);
 800c33a:	f04f 0200 	mov.w	r2, #0
 800c33e:	4b8b      	ldr	r3, [pc, #556]	@ (800c56c <_ZN12Embase3Roues7setStepEddd+0x2f4>)
 800c340:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c344:	f7f4 f988 	bl	8000658 <__aeabi_dmul>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	4614      	mov	r4, r2
 800c34e:	461d      	mov	r5, r3
 800c350:	a37f      	add	r3, pc, #508	@ (adr r3, 800c550 <_ZN12Embase3Roues7setStepEddd+0x2d8>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c35a:	f7f4 f97d 	bl	8000658 <__aeabi_dmul>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f3 ffc1 	bl	80002ec <__adddf3>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	4614      	mov	r4, r2
 800c370:	461d      	mov	r5, r3
 800c372:	a379      	add	r3, pc, #484	@ (adr r3, 800c558 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c37c:	f7f4 f96c 	bl	8000658 <__aeabi_dmul>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f3 ffae 	bl	80002e8 <__aeabi_dsub>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	4610      	mov	r0, r2
 800c392:	4619      	mov	r1, r3
 800c394:	a372      	add	r3, pc, #456	@ (adr r3, 800c560 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	f7f4 f95d 	bl	8000658 <__aeabi_dmul>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double theta_b = 1 / Rayon_Roue * (coeff_2x * 1 * x - diametre_embase * theta * coeff_2z);
 800c3a6:	a36c      	add	r3, pc, #432	@ (adr r3, 800c558 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3b0:	f7f4 f952 	bl	8000658 <__aeabi_dmul>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c3bc:	f7f3 ff94 	bl	80002e8 <__aeabi_dsub>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	a365      	add	r3, pc, #404	@ (adr r3, 800c560 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f7f4 f943 	bl	8000658 <__aeabi_dmul>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double step_a = rad_to_step(theta_a);
 800c3da:	69fc      	ldr	r4, [r7, #28]
 800c3dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c3e0:	f7f4 fc32 	bl	8000c48 <__aeabi_d2f>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	ee00 3a10 	vmov	s0, r3
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7f5 ffee 	bl	80023cc <_ZN11BlocMoteurs11rad_to_stepEf>
 800c3f0:	ee10 3a10 	vmov	r3, s0
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7f4 f8d7 	bl	80005a8 <__aeabi_f2d>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double step_b = rad_to_step(theta_b);
 800c402:	69fc      	ldr	r4, [r7, #28]
 800c404:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c408:	f7f4 fc1e 	bl	8000c48 <__aeabi_d2f>
 800c40c:	4603      	mov	r3, r0
 800c40e:	ee00 3a10 	vmov	s0, r3
 800c412:	4620      	mov	r0, r4
 800c414:	f7f5 ffda 	bl	80023cc <_ZN11BlocMoteurs11rad_to_stepEf>
 800c418:	ee10 3a10 	vmov	r3, s0
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7f4 f8c3 	bl	80005a8 <__aeabi_f2d>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double step_c = rad_to_step(theta_c);
 800c42a:	69fc      	ldr	r4, [r7, #28]
 800c42c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c430:	f7f4 fc0a 	bl	8000c48 <__aeabi_d2f>
 800c434:	4603      	mov	r3, r0
 800c436:	ee00 3a10 	vmov	s0, r3
 800c43a:	4620      	mov	r0, r4
 800c43c:	f7f5 ffc6 	bl	80023cc <_ZN11BlocMoteurs11rad_to_stepEf>
 800c440:	ee10 3a10 	vmov	r3, s0
 800c444:	4618      	mov	r0, r3
 800c446:	f7f4 f8af 	bl	80005a8 <__aeabi_f2d>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	StepperMotor::direction_t dir_a = FWD;
 800c452:	2301      	movs	r3, #1
 800c454:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	StepperMotor::direction_t dir_b = FWD;
 800c458:	2301      	movs	r3, #1
 800c45a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	StepperMotor::direction_t dir_c = FWD;
 800c45e:	2301      	movs	r3, #1
 800c460:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	//Gestion des directions par défaut: avancer sinon, si nb de step negatif, inversion du nb de steps et direction arriere
	if (step_a < 0) {
 800c464:	f04f 0200 	mov.w	r2, #0
 800c468:	f04f 0300 	mov.w	r3, #0
 800c46c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c470:	f7f4 fb64 	bl	8000b3c <__aeabi_dcmplt>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00e      	beq.n	800c498 <_ZN12Embase3Roues7setStepEddd+0x220>
		step_a = 0 - step_a;
 800c47a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c47e:	f04f 0000 	mov.w	r0, #0
 800c482:	f04f 0100 	mov.w	r1, #0
 800c486:	f7f3 ff2f 	bl	80002e8 <__aeabi_dsub>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		dir_a = BWD;
 800c492:	2300      	movs	r3, #0
 800c494:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
	if (step_b < 0) {
 800c498:	f04f 0200 	mov.w	r2, #0
 800c49c:	f04f 0300 	mov.w	r3, #0
 800c4a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c4a4:	f7f4 fb4a 	bl	8000b3c <__aeabi_dcmplt>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00e      	beq.n	800c4cc <_ZN12Embase3Roues7setStepEddd+0x254>
		step_b = 0 - step_b;
 800c4ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c4b2:	f04f 0000 	mov.w	r0, #0
 800c4b6:	f04f 0100 	mov.w	r1, #0
 800c4ba:	f7f3 ff15 	bl	80002e8 <__aeabi_dsub>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		dir_b = BWD;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	}
	if (step_c < 0) {
 800c4cc:	f04f 0200 	mov.w	r2, #0
 800c4d0:	f04f 0300 	mov.w	r3, #0
 800c4d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c4d8:	f7f4 fb30 	bl	8000b3c <__aeabi_dcmplt>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00e      	beq.n	800c500 <_ZN12Embase3Roues7setStepEddd+0x288>
		step_c = 0 - step_c;
 800c4e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c4e6:	f04f 0000 	mov.w	r0, #0
 800c4ea:	f04f 0100 	mov.w	r1, #0
 800c4ee:	f7f3 fefb 	bl	80002e8 <__aeabi_dsub>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		dir_c = BWD;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	}

	if (step_a || step_b || step_c)
 800c500:	f04f 0200 	mov.w	r2, #0
 800c504:	f04f 0300 	mov.w	r3, #0
 800c508:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c50c:	f7f4 fb0c 	bl	8000b28 <__aeabi_dcmpeq>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d031      	beq.n	800c57a <_ZN12Embase3Roues7setStepEddd+0x302>
 800c516:	f04f 0200 	mov.w	r2, #0
 800c51a:	f04f 0300 	mov.w	r3, #0
 800c51e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c522:	f7f4 fb01 	bl	8000b28 <__aeabi_dcmpeq>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d026      	beq.n	800c57a <_ZN12Embase3Roues7setStepEddd+0x302>
 800c52c:	f04f 0200 	mov.w	r2, #0
 800c530:	f04f 0300 	mov.w	r3, #0
 800c534:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c538:	f7f4 faf6 	bl	8000b28 <__aeabi_dcmpeq>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d150      	bne.n	800c5e4 <_ZN12Embase3Roues7setStepEddd+0x36c>
	{
		while(!movement_allowed)
 800c542:	e01a      	b.n	800c57a <_ZN12Embase3Roues7setStepEddd+0x302>
 800c544:	f3af 8000 	nop.w
 800c548:	044f1a1a 	.word	0x044f1a1a
 800c54c:	3fb21e71 	.word	0x3fb21e71
 800c550:	e875ed0f 	.word	0xe875ed0f
 800c554:	3febb67a 	.word	0x3febb67a
 800c558:	0a3d70a4 	.word	0x0a3d70a4
 800c55c:	3fc0a3d7 	.word	0x3fc0a3d7
 800c560:	a2e8ba2f 	.word	0xa2e8ba2f
 800c564:	40322e8b 	.word	0x40322e8b
 800c568:	40100000 	.word	0x40100000
 800c56c:	3fe00000 	.word	0x3fe00000
		{
			if(get_out_step)
 800c570:	4b1e      	ldr	r3, [pc, #120]	@ (800c5ec <_ZN12Embase3Roues7setStepEddd+0x374>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	b2db      	uxtb	r3, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	d133      	bne.n	800c5e2 <_ZN12Embase3Roues7setStepEddd+0x36a>
		while(!movement_allowed)
 800c57a:	4b1d      	ldr	r3, [pc, #116]	@ (800c5f0 <_ZN12Embase3Roues7setStepEddd+0x378>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	f083 0301 	eor.w	r3, r3, #1
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1f2      	bne.n	800c570 <_ZN12Embase3Roues7setStepEddd+0x2f8>
			{
				return;
			}
		}
		motors_busy = true;
 800c58a:	4b1a      	ldr	r3, [pc, #104]	@ (800c5f4 <_ZN12Embase3Roues7setStepEddd+0x37c>)
 800c58c:	2201      	movs	r2, #1
 800c58e:	701a      	strb	r2, [r3, #0]
		commande_step_indiv(step_a, dir_a, step_b, dir_b, step_c, dir_c, 0, FWD);
 800c590:	69fc      	ldr	r4, [r7, #28]
 800c592:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c596:	f7f4 fb37 	bl	8000c08 <__aeabi_d2uiz>
 800c59a:	4605      	mov	r5, r0
 800c59c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c5a0:	f7f4 fb32 	bl	8000c08 <__aeabi_d2uiz>
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c5aa:	f7f4 fb2d 	bl	8000c08 <__aeabi_d2uiz>
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	9304      	str	r3, [sp, #16]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	9303      	str	r3, [sp, #12]
 800c5bc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c5c0:	9302      	str	r3, [sp, #8]
 800c5c2:	9101      	str	r1, [sp, #4]
 800c5c4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	4633      	mov	r3, r6
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f7f5 ff14 	bl	80023fc <_ZN11BlocMoteurs19commande_step_indivEjN12StepperMotor11direction_tEjS1_jS1_jS1_>
		while(motors_busy); // Wait for motors to be off.
 800c5d4:	bf00      	nop
 800c5d6:	4b07      	ldr	r3, [pc, #28]	@ (800c5f4 <_ZN12Embase3Roues7setStepEddd+0x37c>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1fa      	bne.n	800c5d6 <_ZN12Embase3Roues7setStepEddd+0x35e>
 800c5e0:	e000      	b.n	800c5e4 <_ZN12Embase3Roues7setStepEddd+0x36c>
				return;
 800c5e2:	bf00      	nop
	}

}
 800c5e4:	375c      	adds	r7, #92	@ 0x5c
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	2000055c 	.word	0x2000055c
 800c5f0:	20000559 	.word	0x20000559
 800c5f4:	20000558 	.word	0x20000558

0800c5f8 <_ZN12Embase3Roues9translateEdd>:

void Embase3Roues::translate(double x, double y) {
 800c5f8:	b5b0      	push	{r4, r5, r7, lr}
 800c5fa:	b08e      	sub	sp, #56	@ 0x38
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6278      	str	r0, [r7, #36]	@ 0x24
 800c600:	ed87 0b06 	vstr	d0, [r7, #24]
 800c604:	ed87 1b04 	vstr	d1, [r7, #16]

	// passage en coordonnées polaires.
	double distance = 0;
 800c608:	f04f 0200 	mov.w	r2, #0
 800c60c:	f04f 0300 	mov.w	r3, #0
 800c610:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double theta = 0;
 800c614:	f04f 0200 	mov.w	r2, #0
 800c618:	f04f 0300 	mov.w	r3, #0
 800c61c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if((y == 0)&&(x != 0))
 800c620:	f04f 0200 	mov.w	r2, #0
 800c624:	f04f 0300 	mov.w	r3, #0
 800c628:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c62c:	f7f4 fa7c 	bl	8000b28 <__aeabi_dcmpeq>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d02b      	beq.n	800c68e <_ZN12Embase3Roues9translateEdd+0x96>
 800c636:	f04f 0200 	mov.w	r2, #0
 800c63a:	f04f 0300 	mov.w	r3, #0
 800c63e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c642:	f7f4 fa71 	bl	8000b28 <__aeabi_dcmpeq>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d120      	bne.n	800c68e <_ZN12Embase3Roues9translateEdd+0x96>
	{
		if(x < 0)
 800c64c:	f04f 0200 	mov.w	r2, #0
 800c650:	f04f 0300 	mov.w	r3, #0
 800c654:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c658:	f7f4 fa70 	bl	8000b3c <__aeabi_dcmplt>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00b      	beq.n	800c67a <_ZN12Embase3Roues9translateEdd+0x82>
		{
			theta = 90;
 800c662:	f04f 0200 	mov.w	r2, #0
 800c666:	4b8c      	ldr	r3, [pc, #560]	@ (800c898 <_ZN12Embase3Roues9translateEdd+0x2a0>)
 800c668:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = -x;
 800c66c:	69bc      	ldr	r4, [r7, #24]
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800c674:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
		if(x < 0)
 800c678:	e07a      	b.n	800c770 <_ZN12Embase3Roues9translateEdd+0x178>

		}
		else
		{
			theta = 90;
 800c67a:	f04f 0200 	mov.w	r2, #0
 800c67e:	4b86      	ldr	r3, [pc, #536]	@ (800c898 <_ZN12Embase3Roues9translateEdd+0x2a0>)
 800c680:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = x;
 800c684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c688:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(x < 0)
 800c68c:	e070      	b.n	800c770 <_ZN12Embase3Roues9translateEdd+0x178>

		}

	}
	else if((y != 0) && (x == 0))
 800c68e:	f04f 0200 	mov.w	r2, #0
 800c692:	f04f 0300 	mov.w	r3, #0
 800c696:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c69a:	f7f4 fa45 	bl	8000b28 <__aeabi_dcmpeq>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d12b      	bne.n	800c6fc <_ZN12Embase3Roues9translateEdd+0x104>
 800c6a4:	f04f 0200 	mov.w	r2, #0
 800c6a8:	f04f 0300 	mov.w	r3, #0
 800c6ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c6b0:	f7f4 fa3a 	bl	8000b28 <__aeabi_dcmpeq>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d020      	beq.n	800c6fc <_ZN12Embase3Roues9translateEdd+0x104>
	{
		if(y < 0)
 800c6ba:	f04f 0200 	mov.w	r2, #0
 800c6be:	f04f 0300 	mov.w	r3, #0
 800c6c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c6c6:	f7f4 fa39 	bl	8000b3c <__aeabi_dcmplt>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00a      	beq.n	800c6e6 <_ZN12Embase3Roues9translateEdd+0xee>
		{
			theta = 0;
 800c6d0:	f04f 0200 	mov.w	r2, #0
 800c6d4:	f04f 0300 	mov.w	r3, #0
 800c6d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = y;
 800c6dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c6e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(y < 0)
 800c6e4:	e044      	b.n	800c770 <_ZN12Embase3Roues9translateEdd+0x178>

		}
		else
		{
			theta = 0;
 800c6e6:	f04f 0200 	mov.w	r2, #0
 800c6ea:	f04f 0300 	mov.w	r3, #0
 800c6ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = y;
 800c6f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c6f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(y < 0)
 800c6fa:	e039      	b.n	800c770 <_ZN12Embase3Roues9translateEdd+0x178>

		}
	}
	else
	{
		distance = sqrt(pow(x * Coeff_erreur_x, 2) + pow(y * Coeff_erreur_y, 2));//Distance à parcourir en m
 800c6fc:	ed9f 1b5c 	vldr	d1, [pc, #368]	@ 800c870 <_ZN12Embase3Roues9translateEdd+0x278>
 800c700:	ed97 0b06 	vldr	d0, [r7, #24]
 800c704:	f006 fd56 	bl	80131b4 <pow>
 800c708:	ec55 4b10 	vmov	r4, r5, d0
 800c70c:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 800c870 <_ZN12Embase3Roues9translateEdd+0x278>
 800c710:	ed97 0b04 	vldr	d0, [r7, #16]
 800c714:	f006 fd4e 	bl	80131b4 <pow>
 800c718:	ec53 2b10 	vmov	r2, r3, d0
 800c71c:	4620      	mov	r0, r4
 800c71e:	4629      	mov	r1, r5
 800c720:	f7f3 fde4 	bl	80002ec <__adddf3>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	ec43 2b17 	vmov	d7, r2, r3
 800c72c:	eeb0 0a47 	vmov.f32	s0, s14
 800c730:	eef0 0a67 	vmov.f32	s1, s15
 800c734:	f006 fdae 	bl	8013294 <sqrt>
 800c738:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
		theta = atan2(x, y) * 180.0 / M_PI;//Angle vers lequel s'orienté en °
 800c73c:	ed97 1b04 	vldr	d1, [r7, #16]
 800c740:	ed97 0b06 	vldr	d0, [r7, #24]
 800c744:	f006 fd34 	bl	80131b0 <atan2>
 800c748:	ec51 0b10 	vmov	r0, r1, d0
 800c74c:	f04f 0200 	mov.w	r2, #0
 800c750:	4b52      	ldr	r3, [pc, #328]	@ (800c89c <_ZN12Embase3Roues9translateEdd+0x2a4>)
 800c752:	f7f3 ff81 	bl	8000658 <__aeabi_dmul>
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4610      	mov	r0, r2
 800c75c:	4619      	mov	r1, r3
 800c75e:	a346      	add	r3, pc, #280	@ (adr r3, 800c878 <_ZN12Embase3Roues9translateEdd+0x280>)
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f7f4 f8a2 	bl	80008ac <__aeabi_ddiv>
 800c768:	4602      	mov	r2, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	}

	// Execution des mouvements
	rotate(theta); // Rotation initiale
 800c770:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800c774:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c776:	f000 f897 	bl	800c8a8 <_ZN12Embase3Roues6rotateEd>

	while(fabs(distance) > BASE_MOVEMENT_DIST_M)
 800c77a:	e047      	b.n	800c80c <_ZN12Embase3Roues9translateEdd+0x214>
	{
		while(!movement_allowed);
 800c77c:	bf00      	nop
 800c77e:	4b48      	ldr	r3, [pc, #288]	@ (800c8a0 <_ZN12Embase3Roues9translateEdd+0x2a8>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f083 0301 	eor.w	r3, r3, #1
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1f7      	bne.n	800c77e <_ZN12Embase3Roues9translateEdd+0x186>
		if(distance>0){
 800c78e:	f04f 0200 	mov.w	r2, #0
 800c792:	f04f 0300 	mov.w	r3, #0
 800c796:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c79a:	f7f4 f9ed 	bl	8000b78 <__aeabi_dcmpgt>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d014      	beq.n	800c7ce <_ZN12Embase3Roues9translateEdd+0x1d6>
			distance -= BASE_MOVEMENT_DIST_M;
 800c7a4:	a336      	add	r3, pc, #216	@ (adr r3, 800c880 <_ZN12Embase3Roues9translateEdd+0x288>)
 800c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c7ae:	f7f3 fd9b 	bl	80002e8 <__aeabi_dsub>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			setStep(0, BASE_MOVEMENT_DIST_M, 0); // Découpage des mouvements
 800c7ba:	ed9f 2b33 	vldr	d2, [pc, #204]	@ 800c888 <_ZN12Embase3Roues9translateEdd+0x290>
 800c7be:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 800c880 <_ZN12Embase3Roues9translateEdd+0x288>
 800c7c2:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 800c888 <_ZN12Embase3Roues9translateEdd+0x290>
 800c7c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7c8:	f7ff fd56 	bl	800c278 <_ZN12Embase3Roues7setStepEddd>
 800c7cc:	e01e      	b.n	800c80c <_ZN12Embase3Roues9translateEdd+0x214>

		}
		else if(distance<0){
 800c7ce:	f04f 0200 	mov.w	r2, #0
 800c7d2:	f04f 0300 	mov.w	r3, #0
 800c7d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c7da:	f7f4 f9af 	bl	8000b3c <__aeabi_dcmplt>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d013      	beq.n	800c80c <_ZN12Embase3Roues9translateEdd+0x214>
			distance += BASE_MOVEMENT_DIST_M;
 800c7e4:	a326      	add	r3, pc, #152	@ (adr r3, 800c880 <_ZN12Embase3Roues9translateEdd+0x288>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c7ee:	f7f3 fd7d 	bl	80002ec <__adddf3>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			setStep(0, -BASE_MOVEMENT_DIST_M, 0); // Découpage des mouvements
 800c7fa:	ed9f 2b23 	vldr	d2, [pc, #140]	@ 800c888 <_ZN12Embase3Roues9translateEdd+0x290>
 800c7fe:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 800c890 <_ZN12Embase3Roues9translateEdd+0x298>
 800c802:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 800c888 <_ZN12Embase3Roues9translateEdd+0x290>
 800c806:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c808:	f7ff fd36 	bl	800c278 <_ZN12Embase3Roues7setStepEddd>
	while(fabs(distance) > BASE_MOVEMENT_DIST_M)
 800c80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80e:	60bb      	str	r3, [r7, #8]
 800c810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c816:	60fb      	str	r3, [r7, #12]
 800c818:	a319      	add	r3, pc, #100	@ (adr r3, 800c880 <_ZN12Embase3Roues9translateEdd+0x288>)
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c822:	f7f4 f9a9 	bl	8000b78 <__aeabi_dcmpgt>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1a7      	bne.n	800c77c <_ZN12Embase3Roues9translateEdd+0x184>

		}
	}

	while(!movement_allowed);
 800c82c:	bf00      	nop
 800c82e:	4b1c      	ldr	r3, [pc, #112]	@ (800c8a0 <_ZN12Embase3Roues9translateEdd+0x2a8>)
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f083 0301 	eor.w	r3, r3, #1
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1f7      	bne.n	800c82e <_ZN12Embase3Roues9translateEdd+0x236>
	//printf("%f\r\n",distance);
	setStep(0, distance, 0); // Mouvement final
 800c83e:	ed9f 2b12 	vldr	d2, [pc, #72]	@ 800c888 <_ZN12Embase3Roues9translateEdd+0x290>
 800c842:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800c846:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 800c888 <_ZN12Embase3Roues9translateEdd+0x290>
 800c84a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c84c:	f7ff fd14 	bl	800c278 <_ZN12Embase3Roues7setStepEddd>

	rotate(-theta);
 800c850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c852:	603b      	str	r3, [r7, #0]
 800c854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c856:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800c85a:	607b      	str	r3, [r7, #4]
 800c85c:	ed97 0b00 	vldr	d0, [r7]
 800c860:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c862:	f000 f821 	bl	800c8a8 <_ZN12Embase3Roues6rotateEd>
}
 800c866:	bf00      	nop
 800c868:	3738      	adds	r7, #56	@ 0x38
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bdb0      	pop	{r4, r5, r7, pc}
 800c86e:	bf00      	nop
 800c870:	00000000 	.word	0x00000000
 800c874:	40000000 	.word	0x40000000
 800c878:	54442d18 	.word	0x54442d18
 800c87c:	400921fb 	.word	0x400921fb
 800c880:	9999999a 	.word	0x9999999a
 800c884:	3fa99999 	.word	0x3fa99999
	...
 800c890:	9999999a 	.word	0x9999999a
 800c894:	bfa99999 	.word	0xbfa99999
 800c898:	40568000 	.word	0x40568000
 800c89c:	40668000 	.word	0x40668000
 800c8a0:	20000559 	.word	0x20000559
 800c8a4:	00000000 	.word	0x00000000

0800c8a8 <_ZN12Embase3Roues6rotateEd>:

void Embase3Roues::rotate(double theta) {
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	ed87 0b00 	vstr	d0, [r7]
	setStep(0, 0, theta * Coeff_erreur_z);
 800c8b4:	f04f 0200 	mov.w	r2, #0
 800c8b8:	4b13      	ldr	r3, [pc, #76]	@ (800c908 <_ZN12Embase3Roues6rotateEd+0x60>)
 800c8ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8be:	f7f3 fecb 	bl	8000658 <__aeabi_dmul>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	f04f 0200 	mov.w	r2, #0
 800c8ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c90c <_ZN12Embase3Roues6rotateEd+0x64>)
 800c8d0:	f7f3 ffec 	bl	80008ac <__aeabi_ddiv>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	ec43 2b17 	vmov	d7, r2, r3
 800c8dc:	eeb0 2a47 	vmov.f32	s4, s14
 800c8e0:	eef0 2a67 	vmov.f32	s5, s15
 800c8e4:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 800c900 <_ZN12Embase3Roues6rotateEd+0x58>
 800c8e8:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800c900 <_ZN12Embase3Roues6rotateEd+0x58>
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f7ff fcc3 	bl	800c278 <_ZN12Embase3Roues7setStepEddd>
}
 800c8f2:	bf00      	nop
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	f3af 8000 	nop.w
	...
 800c908:	40468000 	.word	0x40468000
 800c90c:	40460000 	.word	0x40460000

0800c910 <_ZN12Embase3Roues12moveRelativeEddd>:

void Embase3Roues::moveRelative(double x, double y, double theta) {
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af00      	add	r7, sp, #0
 800c916:	61f8      	str	r0, [r7, #28]
 800c918:	ed87 0b04 	vstr	d0, [r7, #16]
 800c91c:	ed87 1b02 	vstr	d1, [r7, #8]
 800c920:	ed87 2b00 	vstr	d2, [r7]
	motors_on();
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	4618      	mov	r0, r3
 800c928:	f7f5 fe14 	bl	8002554 <_ZN11BlocMoteurs9motors_onEv>
	translate(x, y);
 800c92c:	ed97 1b02 	vldr	d1, [r7, #8]
 800c930:	ed97 0b04 	vldr	d0, [r7, #16]
 800c934:	69f8      	ldr	r0, [r7, #28]
 800c936:	f7ff fe5f 	bl	800c5f8 <_ZN12Embase3Roues9translateEdd>
	rotate(theta);
 800c93a:	ed97 0b00 	vldr	d0, [r7]
 800c93e:	69f8      	ldr	r0, [r7, #28]
 800c940:	f7ff ffb2 	bl	800c8a8 <_ZN12Embase3Roues6rotateEd>
	get_out_step = false;
 800c944:	4b05      	ldr	r3, [pc, #20]	@ (800c95c <_ZN12Embase3Roues12moveRelativeEddd+0x4c>)
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
	motors_stop_hard();
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7f5 fe0e 	bl	800256e <_ZN11BlocMoteurs16motors_stop_hardEv>
}
 800c952:	bf00      	nop
 800c954:	3720      	adds	r7, #32
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	2000055c 	.word	0x2000055c

0800c960 <_ZN12Embase3Roues4waitEm>:

void Embase3Roues::wait(uint32_t delay_ms) {
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
	motors_stop_hard();
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7f5 fdfe 	bl	800256e <_ZN11BlocMoteurs16motors_stop_hardEv>
	if (delay_ms == 0)
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10c      	bne.n	800c992 <_ZN12Embase3Roues4waitEm+0x32>
	{
		movement_allowed = false;
 800c978:	4b09      	ldr	r3, [pc, #36]	@ (800c9a0 <_ZN12Embase3Roues4waitEm+0x40>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	701a      	strb	r2, [r3, #0]
		while(!movement_allowed);
 800c97e:	bf00      	nop
 800c980:	4b07      	ldr	r3, [pc, #28]	@ (800c9a0 <_ZN12Embase3Roues4waitEm+0x40>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	b2db      	uxtb	r3, r3
 800c986:	f083 0301 	eor.w	r3, r3, #1
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1f7      	bne.n	800c980 <_ZN12Embase3Roues4waitEm+0x20>
	}
	else{
		HAL_Delay(delay_ms);
	}
}
 800c990:	e002      	b.n	800c998 <_ZN12Embase3Roues4waitEm+0x38>
		HAL_Delay(delay_ms);
 800c992:	6838      	ldr	r0, [r7, #0]
 800c994:	f001 fcae 	bl	800e2f4 <HAL_Delay>
}
 800c998:	bf00      	nop
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	20000559 	.word	0x20000559

0800c9a4 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	4a04      	ldr	r2, [pc, #16]	@ (800c9c0 <_ZN13abstractL6470C1Ev+0x1c>)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	601a      	str	r2, [r3, #0]
{

}
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	080180c4 	.word	0x080180c4

0800c9c4 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	4a04      	ldr	r2, [pc, #16]	@ (800c9e0 <_ZN13abstractL6470D1Ev+0x1c>)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	601a      	str	r2, [r3, #0]
{

}
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	080180c4 	.word	0x080180c4

0800c9e4 <_ZN12Embase3RouesCI111BlocMoteursEP19__SPI_HandleTypeDefP12GPIO_TypeDeftS4_tS4_tS4_t>:
};

class Embase3Roues : public BlocMoteurs
{
public:
	using BlocMoteurs::BlocMoteurs;
 800c9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9e6:	b08d      	sub	sp, #52	@ 0x34
 800c9e8:	af06      	add	r7, sp, #24
 800c9ea:	6178      	str	r0, [r7, #20]
 800c9ec:	6139      	str	r1, [r7, #16]
 800c9ee:	60fa      	str	r2, [r7, #12]
 800c9f0:	817b      	strh	r3, [r7, #10]
 800c9f2:	697e      	ldr	r6, [r7, #20]
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	607b      	str	r3, [r7, #4]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	603a      	str	r2, [r7, #0]
 800c9fc:	f8b7 c00a 	ldrh.w	ip, [r7, #10]
 800ca00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ca04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca06:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 800ca08:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ca0a:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 800ca0e:	9505      	str	r5, [sp, #20]
 800ca10:	9404      	str	r4, [sp, #16]
 800ca12:	9003      	str	r0, [sp, #12]
 800ca14:	9102      	str	r1, [sp, #8]
 800ca16:	9201      	str	r2, [sp, #4]
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	4663      	mov	r3, ip
 800ca1c:	683a      	ldr	r2, [r7, #0]
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7f5 fc3f 	bl	80022a4 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	2300      	movs	r3, #0
 800ca30:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800ca38:	461a      	mov	r2, r3
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	4618      	mov	r0, r3
 800ca42:	371c      	adds	r7, #28
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800ca48:	b5b0      	push	{r4, r5, r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800ca4e:	f001 fbdf 	bl	800e210 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800ca52:	f000 f889 	bl	800cb68 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800ca56:	f000 fc55 	bl	800d304 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800ca5a:	f000 fbf7 	bl	800d24c <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 800ca5e:	f000 fa25 	bl	800ceac <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 800ca62:	f000 f903 	bl	800cc6c <_ZL12MX_SPI1_Initv>
	MX_SPI2_Init();
 800ca66:	f000 f93d 	bl	800cce4 <_ZL12MX_SPI2_Initv>
	MX_TIM1_Init();
 800ca6a:	f000 f977 	bl	800cd5c <_ZL12MX_TIM1_Initv>
	MX_TIM4_Init();
 800ca6e:	f000 faad 	bl	800cfcc <_ZL12MX_TIM4_Initv>
	MX_TIM8_Init();
 800ca72:	f000 fb53 	bl	800d11c <_ZL12MX_TIM8_Initv>
	MX_USART3_UART_Init();
 800ca76:	f000 fc17 	bl	800d2a8 <_ZL19MX_USART3_UART_Initv>
	MX_TIM6_Init();
 800ca7a:	f000 fb0f 	bl	800d09c <_ZL12MX_TIM6_Initv>
	/* USER CODE BEGIN 2 */

	//Start Timer2 interrupt (every 20 ms here)
	HAL_TIM_Base_Start_IT(&htim2);
 800ca7e:	4830      	ldr	r0, [pc, #192]	@ (800cb40 <main+0xf8>)
 800ca80:	f003 fd08 	bl	8010494 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800ca84:	2201      	movs	r2, #1
 800ca86:	492f      	ldr	r1, [pc, #188]	@ (800cb44 <main+0xfc>)
 800ca88:	482f      	ldr	r0, [pc, #188]	@ (800cb48 <main+0x100>)
 800ca8a:	f004 fd28 	bl	80114de <HAL_UART_Receive_IT>
			ssel2_Pin); */

	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
			reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
			reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port,
			ssel2_Pin);
 800ca8e:	f243 0060 	movw	r0, #12384	@ 0x3060
 800ca92:	f006 f97f 	bl	8012d94 <_Znwj>
 800ca96:	4603      	mov	r3, r0
 800ca98:	461c      	mov	r4, r3
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800ca9a:	2501      	movs	r5, #1
			ssel2_Pin);
 800ca9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800caa0:	9305      	str	r3, [sp, #20]
 800caa2:	4b2a      	ldr	r3, [pc, #168]	@ (800cb4c <main+0x104>)
 800caa4:	9304      	str	r3, [sp, #16]
 800caa6:	2310      	movs	r3, #16
 800caa8:	9303      	str	r3, [sp, #12]
 800caaa:	4b29      	ldr	r3, [pc, #164]	@ (800cb50 <main+0x108>)
 800caac:	9302      	str	r3, [sp, #8]
 800caae:	2310      	movs	r3, #16
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	4b26      	ldr	r3, [pc, #152]	@ (800cb4c <main+0x104>)
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	2320      	movs	r3, #32
 800cab8:	4a25      	ldr	r2, [pc, #148]	@ (800cb50 <main+0x108>)
 800caba:	4926      	ldr	r1, [pc, #152]	@ (800cb54 <main+0x10c>)
 800cabc:	4620      	mov	r0, r4
 800cabe:	f7ff ff91 	bl	800c9e4 <_ZN12Embase3RouesCI111BlocMoteursEP19__SPI_HandleTypeDefP12GPIO_TypeDeftS4_tS4_tS4_t>
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800cac2:	4b25      	ldr	r3, [pc, #148]	@ (800cb58 <main+0x110>)
 800cac4:	601c      	str	r4, [r3, #0]

	//Set microstepping to 128 for smooth rotations
	// moteurs->set_microstepping_mode(step_mode_t::STEP_MODE_HALF);
	// moteurs->set_max_speed_moteurs(W_MAX); //Vitesse de rotation max des moteur pour eviter erreur en position

	embase->set_microstepping_mode(step_mode_t::STEP_MODE_HALF);
 800cac6:	4b24      	ldr	r3, [pc, #144]	@ (800cb58 <main+0x110>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2101      	movs	r1, #1
 800cacc:	4618      	mov	r0, r3
 800cace:	f7f5 fd01 	bl	80024d4 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
	embase->set_max_speed_moteurs(W_MAX);
 800cad2:	4b21      	ldr	r3, [pc, #132]	@ (800cb58 <main+0x110>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800cada:	4618      	mov	r0, r3
 800cadc:	f7f5 fd77 	bl	80025ce <_ZN11BlocMoteurs21set_max_speed_moteursEf>
	//Set max acc to 1 rad/s^2
	//moteurs->set_max_acc_moteurs(1);
	//embase->commande_step_indiv(100, FWD, 100, FWD, 100, FWD, 0, FWD);
	setDefaultInstructions(embase);
 800cae0:	4b1d      	ldr	r3, [pc, #116]	@ (800cb58 <main+0x110>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 fcab 	bl	800d440 <_Z22setDefaultInstructionsP12Embase3Roues>
	movement_allowed = false;// TODO: false not true !!!
 800caea:	4b1c      	ldr	r3, [pc, #112]	@ (800cb5c <main+0x114>)
 800caec:	2200      	movs	r2, #0
 800caee:	701a      	strb	r2, [r3, #0]
	robot_started = false; // TODO: false not true !!!
 800caf0:	4b1b      	ldr	r3, [pc, #108]	@ (800cb60 <main+0x118>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Pas touche
		if (init_requested)
 800caf6:	4b1b      	ldr	r3, [pc, #108]	@ (800cb64 <main+0x11c>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00a      	beq.n	800cb16 <main+0xce>
		{
			init_requested = false;
 800cb00:	4b18      	ldr	r3, [pc, #96]	@ (800cb64 <main+0x11c>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	701a      	strb	r2, [r3, #0]
			setDefaultInstructions(embase);
 800cb06:	4b14      	ldr	r3, [pc, #80]	@ (800cb58 <main+0x110>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 fc98 	bl	800d440 <_Z22setDefaultInstructionsP12Embase3Roues>
			robot_started = false;
 800cb10:	4b13      	ldr	r3, [pc, #76]	@ (800cb60 <main+0x118>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t *) "Init OK\n", 8*sizeof(char), 1000);
		}

		if(robot_started){
 800cb16:	4b12      	ldr	r3, [pc, #72]	@ (800cb60 <main+0x118>)
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d0ea      	beq.n	800caf6 <main+0xae>
			embase->executeInstruction();
 800cb20:	4b0d      	ldr	r3, [pc, #52]	@ (800cb58 <main+0x110>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7ff fa81 	bl	800c02c <_ZN12Embase3Roues18executeInstructionEv>
		if (init_requested)
 800cb2a:	e7e4      	b.n	800caf6 <main+0xae>
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800cb2c:	2d00      	cmp	r5, #0
 800cb2e:	d004      	beq.n	800cb3a <main+0xf2>
			ssel2_Pin);
 800cb30:	f243 0160 	movw	r1, #12384	@ 0x3060
 800cb34:	4620      	mov	r0, r4
 800cb36:	f005 fcd5 	bl	80124e4 <_ZdlPvj>
 800cb3a:	f005 fd69 	bl	8012610 <__cxa_end_cleanup>
 800cb3e:	bf00      	nop
 800cb40:	200003ac 	.word	0x200003ac
 800cb44:	2000055e 	.word	0x2000055e
 800cb48:	200004cc 	.word	0x200004cc
 800cb4c:	40020000 	.word	0x40020000
 800cb50:	40020400 	.word	0x40020400
 800cb54:	200002b4 	.word	0x200002b4
 800cb58:	20000554 	.word	0x20000554
 800cb5c:	20000559 	.word	0x20000559
 800cb60:	2000055a 	.word	0x2000055a
 800cb64:	2000055b 	.word	0x2000055b

0800cb68 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b094      	sub	sp, #80	@ 0x50
 800cb6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800cb6e:	f107 031c 	add.w	r3, r7, #28
 800cb72:	2234      	movs	r2, #52	@ 0x34
 800cb74:	2100      	movs	r1, #0
 800cb76:	4618      	mov	r0, r3
 800cb78:	f008 fb37 	bl	80151ea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800cb7c:	f107 0308 	add.w	r3, r7, #8
 800cb80:	2200      	movs	r2, #0
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	605a      	str	r2, [r3, #4]
 800cb86:	609a      	str	r2, [r3, #8]
 800cb88:	60da      	str	r2, [r3, #12]
 800cb8a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	607b      	str	r3, [r7, #4]
 800cb90:	4b34      	ldr	r3, [pc, #208]	@ (800cc64 <_Z18SystemClock_Configv+0xfc>)
 800cb92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb94:	4a33      	ldr	r2, [pc, #204]	@ (800cc64 <_Z18SystemClock_Configv+0xfc>)
 800cb96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb9a:	6413      	str	r3, [r2, #64]	@ 0x40
 800cb9c:	4b31      	ldr	r3, [pc, #196]	@ (800cc64 <_Z18SystemClock_Configv+0xfc>)
 800cb9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cba4:	607b      	str	r3, [r7, #4]
 800cba6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cba8:	2300      	movs	r3, #0
 800cbaa:	603b      	str	r3, [r7, #0]
 800cbac:	4b2e      	ldr	r3, [pc, #184]	@ (800cc68 <_Z18SystemClock_Configv+0x100>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a2d      	ldr	r2, [pc, #180]	@ (800cc68 <_Z18SystemClock_Configv+0x100>)
 800cbb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	4b2b      	ldr	r3, [pc, #172]	@ (800cc68 <_Z18SystemClock_Configv+0x100>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cbc0:	603b      	str	r3, [r7, #0]
 800cbc2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cbcc:	2310      	movs	r3, #16
 800cbce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800cbd8:	2308      	movs	r3, #8
 800cbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800cbdc:	23b4      	movs	r3, #180	@ 0xb4
 800cbde:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800cbe4:	2302      	movs	r3, #2
 800cbe6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800cbe8:	2302      	movs	r3, #2
 800cbea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800cbec:	f107 031c 	add.w	r3, r7, #28
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f002 faa7 	bl	800f144 <HAL_RCC_OscConfig>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	bf14      	ite	ne
 800cbfc:	2301      	movne	r3, #1
 800cbfe:	2300      	moveq	r3, #0
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d001      	beq.n	800cc0a <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 800cc06:	f000 fed7 	bl	800d9b8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800cc0a:	f001 ff01 	bl	800ea10 <HAL_PWREx_EnableOverDrive>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	bf14      	ite	ne
 800cc14:	2301      	movne	r3, #1
 800cc16:	2300      	moveq	r3, #0
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d001      	beq.n	800cc22 <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800cc1e:	f000 fecb 	bl	800d9b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800cc22:	230f      	movs	r3, #15
 800cc24:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cc26:	2302      	movs	r3, #2
 800cc28:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cc2e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800cc32:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800cc34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800cc38:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800cc3a:	f107 0308 	add.w	r3, r7, #8
 800cc3e:	2105      	movs	r1, #5
 800cc40:	4618      	mov	r0, r3
 800cc42:	f001 ff35 	bl	800eab0 <HAL_RCC_ClockConfig>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	bf14      	ite	ne
 800cc4c:	2301      	movne	r3, #1
 800cc4e:	2300      	moveq	r3, #0
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800cc56:	f000 feaf 	bl	800d9b8 <Error_Handler>
	}
}
 800cc5a:	bf00      	nop
 800cc5c:	3750      	adds	r7, #80	@ 0x50
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	40023800 	.word	0x40023800
 800cc68:	40007000 	.word	0x40007000

0800cc6c <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800cc70:	4b1a      	ldr	r3, [pc, #104]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cc72:	4a1b      	ldr	r2, [pc, #108]	@ (800cce0 <_ZL12MX_SPI1_Initv+0x74>)
 800cc74:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800cc76:	4b19      	ldr	r3, [pc, #100]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cc78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800cc7c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800cc7e:	4b17      	ldr	r3, [pc, #92]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800cc84:	4b15      	ldr	r3, [pc, #84]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cc86:	2200      	movs	r2, #0
 800cc88:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800cc8a:	4b14      	ldr	r3, [pc, #80]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800cc90:	4b12      	ldr	r3, [pc, #72]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cc92:	2201      	movs	r2, #1
 800cc94:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800cc96:	4b11      	ldr	r3, [pc, #68]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cc98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc9c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800cc9e:	4b0f      	ldr	r3, [pc, #60]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cca0:	2210      	movs	r2, #16
 800cca2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800cca4:	4b0d      	ldr	r3, [pc, #52]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ccaa:	4b0c      	ldr	r3, [pc, #48]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccb0:	4b0a      	ldr	r3, [pc, #40]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800ccb6:	4b09      	ldr	r3, [pc, #36]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800ccb8:	220a      	movs	r2, #10
 800ccba:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800ccbc:	4807      	ldr	r0, [pc, #28]	@ (800ccdc <_ZL12MX_SPI1_Initv+0x70>)
 800ccbe:	f002 fcdf 	bl	800f680 <HAL_SPI_Init>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	bf14      	ite	ne
 800ccc8:	2301      	movne	r3, #1
 800ccca:	2300      	moveq	r3, #0
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800ccd2:	f000 fe71 	bl	800d9b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800ccd6:	bf00      	nop
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	200002b4 	.word	0x200002b4
 800cce0:	40013000 	.word	0x40013000

0800cce4 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800cce4:	b580      	push	{r7, lr}
 800cce6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800cce8:	4b1a      	ldr	r3, [pc, #104]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800ccea:	4a1b      	ldr	r2, [pc, #108]	@ (800cd58 <_ZL12MX_SPI2_Initv+0x74>)
 800ccec:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800ccee:	4b19      	ldr	r3, [pc, #100]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800ccf0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ccf4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800ccf6:	4b17      	ldr	r3, [pc, #92]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800ccfc:	4b15      	ldr	r3, [pc, #84]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800cd02:	4b14      	ldr	r3, [pc, #80]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800cd08:	4b12      	ldr	r3, [pc, #72]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800cd0e:	4b11      	ldr	r3, [pc, #68]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd14:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cd16:	4b0f      	ldr	r3, [pc, #60]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800cd1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd1e:	2200      	movs	r2, #0
 800cd20:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800cd22:	4b0c      	ldr	r3, [pc, #48]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd28:	4b0a      	ldr	r3, [pc, #40]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 800cd2e:	4b09      	ldr	r3, [pc, #36]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd30:	220a      	movs	r2, #10
 800cd32:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800cd34:	4807      	ldr	r0, [pc, #28]	@ (800cd54 <_ZL12MX_SPI2_Initv+0x70>)
 800cd36:	f002 fca3 	bl	800f680 <HAL_SPI_Init>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bf14      	ite	ne
 800cd40:	2301      	movne	r3, #1
 800cd42:	2300      	moveq	r3, #0
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 800cd4a:	f000 fe35 	bl	800d9b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800cd4e:	bf00      	nop
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	2000030c 	.word	0x2000030c
 800cd58:	40003800 	.word	0x40003800

0800cd5c <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b092      	sub	sp, #72	@ 0x48
 800cd60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800cd62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cd66:	2200      	movs	r2, #0
 800cd68:	601a      	str	r2, [r3, #0]
 800cd6a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800cd6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd70:	2200      	movs	r2, #0
 800cd72:	601a      	str	r2, [r3, #0]
 800cd74:	605a      	str	r2, [r3, #4]
 800cd76:	609a      	str	r2, [r3, #8]
 800cd78:	60da      	str	r2, [r3, #12]
 800cd7a:	611a      	str	r2, [r3, #16]
 800cd7c:	615a      	str	r2, [r3, #20]
 800cd7e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800cd80:	1d3b      	adds	r3, r7, #4
 800cd82:	2220      	movs	r2, #32
 800cd84:	2100      	movs	r1, #0
 800cd86:	4618      	mov	r0, r3
 800cd88:	f008 fa2f 	bl	80151ea <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800cd8c:	4b45      	ldr	r3, [pc, #276]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cd8e:	4a46      	ldr	r2, [pc, #280]	@ (800cea8 <_ZL12MX_TIM1_Initv+0x14c>)
 800cd90:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800cd92:	4b44      	ldr	r3, [pc, #272]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cd98:	4b42      	ldr	r3, [pc, #264]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800cd9e:	4b41      	ldr	r3, [pc, #260]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cda0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cda4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cda6:	4b3f      	ldr	r3, [pc, #252]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800cdac:	4b3d      	ldr	r3, [pc, #244]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cdb2:	4b3c      	ldr	r3, [pc, #240]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800cdb8:	483a      	ldr	r0, [pc, #232]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cdba:	f003 fbdb 	bl	8010574 <HAL_TIM_PWM_Init>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	bf14      	ite	ne
 800cdc4:	2301      	movne	r3, #1
 800cdc6:	2300      	moveq	r3, #0
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800cdce:	f000 fdf3 	bl	800d9b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800cdda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cdde:	4619      	mov	r1, r3
 800cde0:	4830      	ldr	r0, [pc, #192]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800cde2:	f004 f9bb 	bl	801115c <HAL_TIMEx_MasterConfigSynchronization>
 800cde6:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	bf14      	ite	ne
 800cdec:	2301      	movne	r3, #1
 800cdee:	2300      	moveq	r3, #0
 800cdf0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 800cdf6:	f000 fddf 	bl	800d9b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cdfa:	2360      	movs	r3, #96	@ 0x60
 800cdfc:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ce02:	2300      	movs	r3, #0
 800ce04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ce06:	2300      	movs	r3, #0
 800ce08:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ce12:	2300      	movs	r3, #0
 800ce14:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800ce16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce1a:	2204      	movs	r2, #4
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4821      	ldr	r0, [pc, #132]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800ce20:	f003 fd00 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800ce24:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	bf14      	ite	ne
 800ce2a:	2301      	movne	r3, #1
 800ce2c:	2300      	moveq	r3, #0
 800ce2e:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d001      	beq.n	800ce38 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 800ce34:	f000 fdc0 	bl	800d9b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800ce38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce3c:	2208      	movs	r2, #8
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4818      	ldr	r0, [pc, #96]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800ce42:	f003 fcef 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800ce46:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	bf14      	ite	ne
 800ce4c:	2301      	movne	r3, #1
 800ce4e:	2300      	moveq	r3, #0
 800ce50:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <_ZL12MX_TIM1_Initv+0xfe>
		Error_Handler();
 800ce56:	f000 fdaf 	bl	800d9b8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ce62:	2300      	movs	r3, #0
 800ce64:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ce6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ce72:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ce74:	2300      	movs	r3, #0
 800ce76:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800ce78:	1d3b      	adds	r3, r7, #4
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4809      	ldr	r0, [pc, #36]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800ce7e:	f004 f9e9 	bl	8011254 <HAL_TIMEx_ConfigBreakDeadTime>
 800ce82:	4603      	mov	r3, r0
			!= HAL_OK) {
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	bf14      	ite	ne
 800ce88:	2301      	movne	r3, #1
 800ce8a:	2300      	moveq	r3, #0
 800ce8c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <_ZL12MX_TIM1_Initv+0x13a>
		Error_Handler();
 800ce92:	f000 fd91 	bl	800d9b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 800ce96:	4803      	ldr	r0, [pc, #12]	@ (800cea4 <_ZL12MX_TIM1_Initv+0x148>)
 800ce98:	f000 fef4 	bl	800dc84 <HAL_TIM_MspPostInit>

}
 800ce9c:	bf00      	nop
 800ce9e:	3748      	adds	r7, #72	@ 0x48
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	20000364 	.word	0x20000364
 800cea8:	40010000 	.word	0x40010000

0800ceac <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b08e      	sub	sp, #56	@ 0x38
 800ceb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800ceb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	605a      	str	r2, [r3, #4]
 800cebc:	609a      	str	r2, [r3, #8]
 800cebe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800cec0:	f107 0320 	add.w	r3, r7, #32
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800ceca:	1d3b      	adds	r3, r7, #4
 800cecc:	2200      	movs	r2, #0
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	605a      	str	r2, [r3, #4]
 800ced2:	609a      	str	r2, [r3, #8]
 800ced4:	60da      	str	r2, [r3, #12]
 800ced6:	611a      	str	r2, [r3, #16]
 800ced8:	615a      	str	r2, [r3, #20]
 800ceda:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800cedc:	4b39      	ldr	r3, [pc, #228]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cede:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800cee2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800cee4:	4b37      	ldr	r3, [pc, #220]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ceea:	4b36      	ldr	r3, [pc, #216]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800ceec:	2200      	movs	r2, #0
 800ceee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1800000;
 800cef0:	4b34      	ldr	r3, [pc, #208]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cef2:	4a35      	ldr	r2, [pc, #212]	@ (800cfc8 <_ZL12MX_TIM2_Initv+0x11c>)
 800cef4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cef6:	4b33      	ldr	r3, [pc, #204]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cefc:	4b31      	ldr	r3, [pc, #196]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cefe:	2280      	movs	r2, #128	@ 0x80
 800cf00:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800cf02:	4830      	ldr	r0, [pc, #192]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cf04:	f003 fa76 	bl	80103f4 <HAL_TIM_Base_Init>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	bf14      	ite	ne
 800cf0e:	2301      	movne	r3, #1
 800cf10:	2300      	moveq	r3, #0
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <_ZL12MX_TIM2_Initv+0x70>
		Error_Handler();
 800cf18:	f000 fd4e 	bl	800d9b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cf1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf20:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800cf22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cf26:	4619      	mov	r1, r3
 800cf28:	4826      	ldr	r0, [pc, #152]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cf2a:	f003 fd3d 	bl	80109a8 <HAL_TIM_ConfigClockSource>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	bf14      	ite	ne
 800cf34:	2301      	movne	r3, #1
 800cf36:	2300      	moveq	r3, #0
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d001      	beq.n	800cf42 <_ZL12MX_TIM2_Initv+0x96>
		Error_Handler();
 800cf3e:	f000 fd3b 	bl	800d9b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800cf42:	4820      	ldr	r0, [pc, #128]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cf44:	f003 fb16 	bl	8010574 <HAL_TIM_PWM_Init>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	bf14      	ite	ne
 800cf4e:	2301      	movne	r3, #1
 800cf50:	2300      	moveq	r3, #0
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 800cf58:	f000 fd2e 	bl	800d9b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf60:	2300      	movs	r3, #0
 800cf62:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800cf64:	f107 0320 	add.w	r3, r7, #32
 800cf68:	4619      	mov	r1, r3
 800cf6a:	4816      	ldr	r0, [pc, #88]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cf6c:	f004 f8f6 	bl	801115c <HAL_TIMEx_MasterConfigSynchronization>
 800cf70:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bf14      	ite	ne
 800cf76:	2301      	movne	r3, #1
 800cf78:	2300      	moveq	r3, #0
 800cf7a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <_ZL12MX_TIM2_Initv+0xd8>
		Error_Handler();
 800cf80:	f000 fd1a 	bl	800d9b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cf84:	2360      	movs	r3, #96	@ 0x60
 800cf86:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cf90:	2300      	movs	r3, #0
 800cf92:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800cf94:	1d3b      	adds	r3, r7, #4
 800cf96:	2200      	movs	r2, #0
 800cf98:	4619      	mov	r1, r3
 800cf9a:	480a      	ldr	r0, [pc, #40]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cf9c:	f003 fc42 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800cfa0:	4603      	mov	r3, r0
			!= HAL_OK) {
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	bf14      	ite	ne
 800cfa6:	2301      	movne	r3, #1
 800cfa8:	2300      	moveq	r3, #0
 800cfaa:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <_ZL12MX_TIM2_Initv+0x108>
		Error_Handler();
 800cfb0:	f000 fd02 	bl	800d9b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800cfb4:	4803      	ldr	r0, [pc, #12]	@ (800cfc4 <_ZL12MX_TIM2_Initv+0x118>)
 800cfb6:	f000 fe65 	bl	800dc84 <HAL_TIM_MspPostInit>

}
 800cfba:	bf00      	nop
 800cfbc:	3738      	adds	r7, #56	@ 0x38
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	200003ac 	.word	0x200003ac
 800cfc8:	001b7740 	.word	0x001b7740

0800cfcc <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08a      	sub	sp, #40	@ 0x28
 800cfd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800cfd2:	f107 0320 	add.w	r3, r7, #32
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800cfdc:	1d3b      	adds	r3, r7, #4
 800cfde:	2200      	movs	r2, #0
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	605a      	str	r2, [r3, #4]
 800cfe4:	609a      	str	r2, [r3, #8]
 800cfe6:	60da      	str	r2, [r3, #12]
 800cfe8:	611a      	str	r2, [r3, #16]
 800cfea:	615a      	str	r2, [r3, #20]
 800cfec:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800cfee:	4b29      	ldr	r3, [pc, #164]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800cff0:	4a29      	ldr	r2, [pc, #164]	@ (800d098 <_ZL12MX_TIM4_Initv+0xcc>)
 800cff2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800cff4:	4b27      	ldr	r3, [pc, #156]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800cff6:	2200      	movs	r2, #0
 800cff8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cffa:	4b26      	ldr	r3, [pc, #152]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800d000:	4b24      	ldr	r3, [pc, #144]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800d002:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d006:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d008:	4b22      	ldr	r3, [pc, #136]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d00e:	4b21      	ldr	r3, [pc, #132]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800d010:	2200      	movs	r2, #0
 800d012:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800d014:	481f      	ldr	r0, [pc, #124]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800d016:	f003 faad 	bl	8010574 <HAL_TIM_PWM_Init>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	bf14      	ite	ne
 800d020:	2301      	movne	r3, #1
 800d022:	2300      	moveq	r3, #0
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 800d02a:	f000 fcc5 	bl	800d9b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d02e:	2300      	movs	r3, #0
 800d030:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d032:	2300      	movs	r3, #0
 800d034:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800d036:	f107 0320 	add.w	r3, r7, #32
 800d03a:	4619      	mov	r1, r3
 800d03c:	4815      	ldr	r0, [pc, #84]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800d03e:	f004 f88d 	bl	801115c <HAL_TIMEx_MasterConfigSynchronization>
 800d042:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d044:	2b00      	cmp	r3, #0
 800d046:	bf14      	ite	ne
 800d048:	2301      	movne	r3, #1
 800d04a:	2300      	moveq	r3, #0
 800d04c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 800d052:	f000 fcb1 	bl	800d9b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d056:	2360      	movs	r3, #96	@ 0x60
 800d058:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800d05a:	2300      	movs	r3, #0
 800d05c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d05e:	2300      	movs	r3, #0
 800d060:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d062:	2300      	movs	r3, #0
 800d064:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800d066:	1d3b      	adds	r3, r7, #4
 800d068:	2204      	movs	r2, #4
 800d06a:	4619      	mov	r1, r3
 800d06c:	4809      	ldr	r0, [pc, #36]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800d06e:	f003 fbd9 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800d072:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d074:	2b00      	cmp	r3, #0
 800d076:	bf14      	ite	ne
 800d078:	2301      	movne	r3, #1
 800d07a:	2300      	moveq	r3, #0
 800d07c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 800d082:	f000 fc99 	bl	800d9b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit (&htim4);
 800d086:	4803      	ldr	r0, [pc, #12]	@ (800d094 <_ZL12MX_TIM4_Initv+0xc8>)
 800d088:	f000 fdfc 	bl	800dc84 <HAL_TIM_MspPostInit>

}
 800d08c:	bf00      	nop
 800d08e:	3728      	adds	r7, #40	@ 0x28
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	200003f4 	.word	0x200003f4
 800d098:	40000800 	.word	0x40000800

0800d09c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d0a2:	463b      	mov	r3, r7
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d0aa:	4b1a      	ldr	r3, [pc, #104]	@ (800d114 <_ZL12MX_TIM6_Initv+0x78>)
 800d0ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d118 <_ZL12MX_TIM6_Initv+0x7c>)
 800d0ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 800d0b0:	4b18      	ldr	r3, [pc, #96]	@ (800d114 <_ZL12MX_TIM6_Initv+0x78>)
 800d0b2:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800d0b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0b8:	4b16      	ldr	r3, [pc, #88]	@ (800d114 <_ZL12MX_TIM6_Initv+0x78>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65520;
 800d0be:	4b15      	ldr	r3, [pc, #84]	@ (800d114 <_ZL12MX_TIM6_Initv+0x78>)
 800d0c0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800d0c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d0c6:	4b13      	ldr	r3, [pc, #76]	@ (800d114 <_ZL12MX_TIM6_Initv+0x78>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d0cc:	4811      	ldr	r0, [pc, #68]	@ (800d114 <_ZL12MX_TIM6_Initv+0x78>)
 800d0ce:	f003 f991 	bl	80103f4 <HAL_TIM_Base_Init>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	bf14      	ite	ne
 800d0d8:	2301      	movne	r3, #1
 800d0da:	2300      	moveq	r3, #0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800d0e2:	f000 fc69 	bl	800d9b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d0ee:	463b      	mov	r3, r7
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4808      	ldr	r0, [pc, #32]	@ (800d114 <_ZL12MX_TIM6_Initv+0x78>)
 800d0f4:	f004 f832 	bl	801115c <HAL_TIMEx_MasterConfigSynchronization>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	bf14      	ite	ne
 800d0fe:	2301      	movne	r3, #1
 800d100:	2300      	moveq	r3, #0
 800d102:	b2db      	uxtb	r3, r3
 800d104:	2b00      	cmp	r3, #0
 800d106:	d001      	beq.n	800d10c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800d108:	f000 fc56 	bl	800d9b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d10c:	bf00      	nop
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	2000043c 	.word	0x2000043c
 800d118:	40001000 	.word	0x40001000

0800d11c <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b092      	sub	sp, #72	@ 0x48
 800d120:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d122:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d126:	2200      	movs	r2, #0
 800d128:	601a      	str	r2, [r3, #0]
 800d12a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d12c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d130:	2200      	movs	r2, #0
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	605a      	str	r2, [r3, #4]
 800d136:	609a      	str	r2, [r3, #8]
 800d138:	60da      	str	r2, [r3, #12]
 800d13a:	611a      	str	r2, [r3, #16]
 800d13c:	615a      	str	r2, [r3, #20]
 800d13e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800d140:	1d3b      	adds	r3, r7, #4
 800d142:	2220      	movs	r2, #32
 800d144:	2100      	movs	r1, #0
 800d146:	4618      	mov	r0, r3
 800d148:	f008 f84f 	bl	80151ea <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800d14c:	4b3d      	ldr	r3, [pc, #244]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d14e:	4a3e      	ldr	r2, [pc, #248]	@ (800d248 <_ZL12MX_TIM8_Initv+0x12c>)
 800d150:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800d152:	4b3c      	ldr	r3, [pc, #240]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d154:	2200      	movs	r2, #0
 800d156:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d158:	4b3a      	ldr	r3, [pc, #232]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d15a:	2200      	movs	r2, #0
 800d15c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800d15e:	4b39      	ldr	r3, [pc, #228]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d164:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d166:	4b37      	ldr	r3, [pc, #220]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d168:	2200      	movs	r2, #0
 800d16a:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800d16c:	4b35      	ldr	r3, [pc, #212]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d16e:	2200      	movs	r2, #0
 800d170:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d172:	4b34      	ldr	r3, [pc, #208]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d174:	2200      	movs	r2, #0
 800d176:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800d178:	4832      	ldr	r0, [pc, #200]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d17a:	f003 f9fb 	bl	8010574 <HAL_TIM_PWM_Init>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	bf14      	ite	ne
 800d184:	2301      	movne	r3, #1
 800d186:	2300      	moveq	r3, #0
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <_ZL12MX_TIM8_Initv+0x76>
		Error_Handler();
 800d18e:	f000 fc13 	bl	800d9b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d192:	2300      	movs	r3, #0
 800d194:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d196:	2300      	movs	r3, #0
 800d198:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800d19a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4828      	ldr	r0, [pc, #160]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d1a2:	f003 ffdb 	bl	801115c <HAL_TIMEx_MasterConfigSynchronization>
 800d1a6:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	bf14      	ite	ne
 800d1ac:	2301      	movne	r3, #1
 800d1ae:	2300      	moveq	r3, #0
 800d1b0:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <_ZL12MX_TIM8_Initv+0x9e>
		Error_Handler();
 800d1b6:	f000 fbff 	bl	800d9b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d1ba:	2360      	movs	r3, #96	@ 0x60
 800d1bc:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800d1d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1da:	2204      	movs	r2, #4
 800d1dc:	4619      	mov	r1, r3
 800d1de:	4819      	ldr	r0, [pc, #100]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d1e0:	f003 fb20 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800d1e4:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	bf14      	ite	ne
 800d1ea:	2301      	movne	r3, #1
 800d1ec:	2300      	moveq	r3, #0
 800d1ee:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <_ZL12MX_TIM8_Initv+0xdc>
		Error_Handler();
 800d1f4:	f000 fbe0 	bl	800d9b8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d200:	2300      	movs	r3, #0
 800d202:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d208:	2300      	movs	r3, #0
 800d20a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d20c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d210:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d212:	2300      	movs	r3, #0
 800d214:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800d216:	1d3b      	adds	r3, r7, #4
 800d218:	4619      	mov	r1, r3
 800d21a:	480a      	ldr	r0, [pc, #40]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d21c:	f004 f81a 	bl	8011254 <HAL_TIMEx_ConfigBreakDeadTime>
 800d220:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d222:	2b00      	cmp	r3, #0
 800d224:	bf14      	ite	ne
 800d226:	2301      	movne	r3, #1
 800d228:	2300      	moveq	r3, #0
 800d22a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d001      	beq.n	800d234 <_ZL12MX_TIM8_Initv+0x118>
		Error_Handler();
 800d230:	f000 fbc2 	bl	800d9b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit (&htim8);
 800d234:	4803      	ldr	r0, [pc, #12]	@ (800d244 <_ZL12MX_TIM8_Initv+0x128>)
 800d236:	f000 fd25 	bl	800dc84 <HAL_TIM_MspPostInit>

}
 800d23a:	bf00      	nop
 800d23c:	3748      	adds	r7, #72	@ 0x48
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	20000484 	.word	0x20000484
 800d248:	40010400 	.word	0x40010400

0800d24c <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800d24c:	b580      	push	{r7, lr}
 800d24e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800d250:	4b13      	ldr	r3, [pc, #76]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d252:	4a14      	ldr	r2, [pc, #80]	@ (800d2a4 <_ZL19MX_USART2_UART_Initv+0x58>)
 800d254:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800d256:	4b12      	ldr	r3, [pc, #72]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d25c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d25e:	4b10      	ldr	r3, [pc, #64]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d260:	2200      	movs	r2, #0
 800d262:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800d264:	4b0e      	ldr	r3, [pc, #56]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d266:	2200      	movs	r2, #0
 800d268:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800d26a:	4b0d      	ldr	r3, [pc, #52]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800d270:	4b0b      	ldr	r3, [pc, #44]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d272:	220c      	movs	r2, #12
 800d274:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d276:	4b0a      	ldr	r3, [pc, #40]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d278:	2200      	movs	r2, #0
 800d27a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d27c:	4b08      	ldr	r3, [pc, #32]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d27e:	2200      	movs	r2, #0
 800d280:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800d282:	4807      	ldr	r0, [pc, #28]	@ (800d2a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800d284:	f004 f84c 	bl	8011320 <HAL_UART_Init>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	bf14      	ite	ne
 800d28e:	2301      	movne	r3, #1
 800d290:	2300      	moveq	r3, #0
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800d298:	f000 fb8e 	bl	800d9b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800d29c:	bf00      	nop
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	200004cc 	.word	0x200004cc
 800d2a4:	40004400 	.word	0x40004400

0800d2a8 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800d2ac:	4b13      	ldr	r3, [pc, #76]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2ae:	4a14      	ldr	r2, [pc, #80]	@ (800d300 <_ZL19MX_USART3_UART_Initv+0x58>)
 800d2b0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800d2b2:	4b12      	ldr	r3, [pc, #72]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d2b8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d2ba:	4b10      	ldr	r3, [pc, #64]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800d2c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800d2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800d2cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2ce:	220c      	movs	r2, #12
 800d2d0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d2d8:	4b08      	ldr	r3, [pc, #32]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800d2de:	4807      	ldr	r0, [pc, #28]	@ (800d2fc <_ZL19MX_USART3_UART_Initv+0x54>)
 800d2e0:	f004 f81e 	bl	8011320 <HAL_UART_Init>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bf14      	ite	ne
 800d2ea:	2301      	movne	r3, #1
 800d2ec:	2300      	moveq	r3, #0
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <_ZL19MX_USART3_UART_Initv+0x50>
		Error_Handler();
 800d2f4:	f000 fb60 	bl	800d9b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800d2f8:	bf00      	nop
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	20000510 	.word	0x20000510
 800d300:	40004800 	.word	0x40004800

0800d304 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800d304:	b580      	push	{r7, lr}
 800d306:	b08a      	sub	sp, #40	@ 0x28
 800d308:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d30a:	f107 0314 	add.w	r3, r7, #20
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]
 800d312:	605a      	str	r2, [r3, #4]
 800d314:	609a      	str	r2, [r3, #8]
 800d316:	60da      	str	r2, [r3, #12]
 800d318:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d31a:	2300      	movs	r3, #0
 800d31c:	613b      	str	r3, [r7, #16]
 800d31e:	4b43      	ldr	r3, [pc, #268]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d322:	4a42      	ldr	r2, [pc, #264]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d324:	f043 0304 	orr.w	r3, r3, #4
 800d328:	6313      	str	r3, [r2, #48]	@ 0x30
 800d32a:	4b40      	ldr	r3, [pc, #256]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d32e:	f003 0304 	and.w	r3, r3, #4
 800d332:	613b      	str	r3, [r7, #16]
 800d334:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d336:	2300      	movs	r3, #0
 800d338:	60fb      	str	r3, [r7, #12]
 800d33a:	4b3c      	ldr	r3, [pc, #240]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d33e:	4a3b      	ldr	r2, [pc, #236]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d344:	6313      	str	r3, [r2, #48]	@ 0x30
 800d346:	4b39      	ldr	r3, [pc, #228]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d34a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d34e:	60fb      	str	r3, [r7, #12]
 800d350:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d352:	2300      	movs	r3, #0
 800d354:	60bb      	str	r3, [r7, #8]
 800d356:	4b35      	ldr	r3, [pc, #212]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d35a:	4a34      	ldr	r2, [pc, #208]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d35c:	f043 0301 	orr.w	r3, r3, #1
 800d360:	6313      	str	r3, [r2, #48]	@ 0x30
 800d362:	4b32      	ldr	r3, [pc, #200]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	60bb      	str	r3, [r7, #8]
 800d36c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d36e:	2300      	movs	r3, #0
 800d370:	607b      	str	r3, [r7, #4]
 800d372:	4b2e      	ldr	r3, [pc, #184]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d376:	4a2d      	ldr	r2, [pc, #180]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d378:	f043 0302 	orr.w	r3, r3, #2
 800d37c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d37e:	4b2b      	ldr	r3, [pc, #172]	@ (800d42c <_ZL12MX_GPIO_Initv+0x128>)
 800d380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d382:	f003 0302 	and.w	r3, r3, #2
 800d386:	607b      	str	r3, [r7, #4]
 800d388:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ssel1_Pin | LD2_Pin | ssel2_Pin, GPIO_PIN_RESET);
 800d38a:	2200      	movs	r2, #0
 800d38c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800d390:	4827      	ldr	r0, [pc, #156]	@ (800d430 <_ZL12MX_GPIO_Initv+0x12c>)
 800d392:	f001 fb0b 	bl	800e9ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800d396:	2200      	movs	r2, #0
 800d398:	f241 2130 	movw	r1, #4656	@ 0x1230
 800d39c:	4825      	ldr	r0, [pc, #148]	@ (800d434 <_ZL12MX_GPIO_Initv+0x130>)
 800d39e:	f001 fb05 	bl	800e9ac <HAL_GPIO_WritePin>
			GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800d3a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d3a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d3a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d3ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d3b2:	f107 0314 	add.w	r3, r7, #20
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	481f      	ldr	r0, [pc, #124]	@ (800d438 <_ZL12MX_GPIO_Initv+0x134>)
 800d3ba:	f001 f963 	bl	800e684 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d3c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800d3c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d3cc:	f107 0314 	add.w	r3, r7, #20
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	4819      	ldr	r0, [pc, #100]	@ (800d438 <_ZL12MX_GPIO_Initv+0x134>)
 800d3d4:	f001 f956 	bl	800e684 <HAL_GPIO_Init>

	/*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
	GPIO_InitStruct.Pin = ssel1_Pin | LD2_Pin | ssel2_Pin;
 800d3d8:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800d3dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3ea:	f107 0314 	add.w	r3, r7, #20
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	480f      	ldr	r0, [pc, #60]	@ (800d430 <_ZL12MX_GPIO_Initv+0x12c>)
 800d3f2:	f001 f947 	bl	800e684 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 reset_shield_2_Pin reset_shield_1_Pin PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin
 800d3f6:	f241 2330 	movw	r3, #4656	@ 0x1230
 800d3fa:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d400:	2300      	movs	r3, #0
 800d402:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d404:	2300      	movs	r3, #0
 800d406:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d408:	f107 0314 	add.w	r3, r7, #20
 800d40c:	4619      	mov	r1, r3
 800d40e:	4809      	ldr	r0, [pc, #36]	@ (800d434 <_ZL12MX_GPIO_Initv+0x130>)
 800d410:	f001 f938 	bl	800e684 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800d414:	2200      	movs	r2, #0
 800d416:	2100      	movs	r1, #0
 800d418:	2006      	movs	r0, #6
 800d41a:	f001 f86a 	bl	800e4f2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d41e:	2006      	movs	r0, #6
 800d420:	f001 f883 	bl	800e52a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800d424:	bf00      	nop
 800d426:	3728      	adds	r7, #40	@ 0x28
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	40023800 	.word	0x40023800
 800d430:	40020000 	.word	0x40020000
 800d434:	40020400 	.word	0x40020400
 800d438:	40020800 	.word	0x40020800
 800d43c:	00000000 	.word	0x00000000

0800d440 <_Z22setDefaultInstructionsP12Embase3Roues>:

/* USER CODE BEGIN 4 */

// Init instructions
void setDefaultInstructions(Embase3Roues *e)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
	e->init();
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7fe fd4a 	bl	800bee2 <_ZN12Embase3Roues4initEv>
	//Mettre appendWait(0); aprés Transmit p
	switch(equipe){
 800d44e:	4bc4      	ldr	r3, [pc, #784]	@ (800d760 <_Z22setDefaultInstructionsP12Embase3Roues+0x320>)
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b00      	cmp	r3, #0
 800d456:	d003      	beq.n	800d460 <_Z22setDefaultInstructionsP12Embase3Roues+0x20>
 800d458:	2b01      	cmp	r3, #1
 800d45a:	f000 80cb 	beq.w	800d5f4 <_Z22setDefaultInstructionsP12Embase3Roues+0x1b4>

	/*case 2://Calibration
		e->appendRelativeMove(0, -1*Coef_Neg, 0);*/

	default:
		break;
 800d45e:	e1e1      	b.n	800d824 <_Z22setDefaultInstructionsP12Embase3Roues+0x3e4>
		if(nb_panneaux == 6){
 800d460:	4bc0      	ldr	r3, [pc, #768]	@ (800d764 <_Z22setDefaultInstructionsP12Embase3Roues+0x324>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b06      	cmp	r3, #6
 800d468:	bf0c      	ite	eq
 800d46a:	2301      	moveq	r3, #1
 800d46c:	2300      	movne	r3, #0
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	2b00      	cmp	r3, #0
 800d472:	d073      	beq.n	800d55c <_Z22setDefaultInstructionsP12Embase3Roues+0x11c>
			e->appendUart('p');
 800d474:	2170      	movs	r1, #112	@ 0x70
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7fe fdb3 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d47c:	2100      	movs	r1, #0
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7fe fd8c 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 1.45, 0);
 800d484:	ed9f 2b9c 	vldr	d2, [pc, #624]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d488:	ed9f 1b9d 	vldr	d1, [pc, #628]	@ 800d700 <_Z22setDefaultInstructionsP12Embase3Roues+0x2c0>
 800d48c:	ed9f 0b9a 	vldr	d0, [pc, #616]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7fe fd50 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d496:	2170      	movs	r1, #112	@ 0x70
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7fe fda2 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d49e:	2100      	movs	r1, #0
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7fe fd7b 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, -0.225, 0);
 800d4a6:	ed9f 2b94 	vldr	d2, [pc, #592]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d4aa:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 800d708 <_Z22setDefaultInstructionsP12Embase3Roues+0x2c8>
 800d4ae:	ed9f 0b92 	vldr	d0, [pc, #584]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7fe fd3f 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d4b8:	2170      	movs	r1, #112	@ 0x70
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7fe fd91 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7fe fd6a 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, -0.225, 0);
 800d4c8:	ed9f 2b8b 	vldr	d2, [pc, #556]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d4cc:	ed9f 1b8e 	vldr	d1, [pc, #568]	@ 800d708 <_Z22setDefaultInstructionsP12Embase3Roues+0x2c8>
 800d4d0:	ed9f 0b89 	vldr	d0, [pc, #548]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7fe fd2e 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d4da:	2170      	movs	r1, #112	@ 0x70
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7fe fd80 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7fe fd59 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, -0.55, 0);
 800d4ea:	ed9f 2b83 	vldr	d2, [pc, #524]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d4ee:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 800d710 <_Z22setDefaultInstructionsP12Embase3Roues+0x2d0>
 800d4f2:	ed9f 0b81 	vldr	d0, [pc, #516]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7fe fd1d 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d4fc:	2170      	movs	r1, #112	@ 0x70
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f7fe fd6f 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d504:	2100      	movs	r1, #0
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7fe fd48 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, -0.225, 0);
 800d50c:	ed9f 2b7a 	vldr	d2, [pc, #488]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d510:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 800d708 <_Z22setDefaultInstructionsP12Embase3Roues+0x2c8>
 800d514:	ed9f 0b78 	vldr	d0, [pc, #480]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7fe fd0c 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d51e:	2170      	movs	r1, #112	@ 0x70
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7fe fd5e 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d526:	2100      	movs	r1, #0
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f7fe fd37 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0, 90);
 800d52e:	ed9f 2b7a 	vldr	d2, [pc, #488]	@ 800d718 <_Z22setDefaultInstructionsP12Embase3Roues+0x2d8>
 800d532:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d536:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7fe fcfb 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendRelativeMove(0, -1.760, 0);
 800d540:	ed9f 2b6d 	vldr	d2, [pc, #436]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d544:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 800d720 <_Z22setDefaultInstructionsP12Embase3Roues+0x2e0>
 800d548:	ed9f 0b6b 	vldr	d0, [pc, #428]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7fe fcf2 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendWait(100000);
 800d552:	4985      	ldr	r1, [pc, #532]	@ (800d768 <_Z22setDefaultInstructionsP12Embase3Roues+0x328>)
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7fe fd21 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
		break;
 800d55a:	e160      	b.n	800d81e <_Z22setDefaultInstructionsP12Embase3Roues+0x3de>
		else if(nb_panneaux == 3){
 800d55c:	4b81      	ldr	r3, [pc, #516]	@ (800d764 <_Z22setDefaultInstructionsP12Embase3Roues+0x324>)
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b03      	cmp	r3, #3
 800d564:	bf0c      	ite	eq
 800d566:	2301      	moveq	r3, #1
 800d568:	2300      	movne	r3, #0
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 8156 	beq.w	800d81e <_Z22setDefaultInstructionsP12Embase3Roues+0x3de>
			e->appendUart('p');
 800d572:	2170      	movs	r1, #112	@ 0x70
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7fe fd34 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d57a:	2100      	movs	r1, #0
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7fe fd0d 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0.225, 0);
 800d582:	ed9f 2b5d 	vldr	d2, [pc, #372]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d586:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 800d728 <_Z22setDefaultInstructionsP12Embase3Roues+0x2e8>
 800d58a:	ed9f 0b5b 	vldr	d0, [pc, #364]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7fe fcd1 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d594:	2170      	movs	r1, #112	@ 0x70
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7fe fd23 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d59c:	2100      	movs	r1, #0
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7fe fcfc 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0.225, 0);
 800d5a4:	ed9f 2b54 	vldr	d2, [pc, #336]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d5a8:	ed9f 1b5f 	vldr	d1, [pc, #380]	@ 800d728 <_Z22setDefaultInstructionsP12Embase3Roues+0x2e8>
 800d5ac:	ed9f 0b52 	vldr	d0, [pc, #328]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7fe fcc0 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d5b6:	2170      	movs	r1, #112	@ 0x70
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7fe fd12 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d5be:	2100      	movs	r1, #0
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7fe fceb 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0, -110);
 800d5c6:	ed9f 2b5a 	vldr	d2, [pc, #360]	@ 800d730 <_Z22setDefaultInstructionsP12Embase3Roues+0x2f0>
 800d5ca:	ed9f 1b4b 	vldr	d1, [pc, #300]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d5ce:	ed9f 0b4a 	vldr	d0, [pc, #296]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f7fe fcaf 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendRelativeMove(0, 1.736, 0);
 800d5d8:	ed9f 2b47 	vldr	d2, [pc, #284]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d5dc:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 800d738 <_Z22setDefaultInstructionsP12Embase3Roues+0x2f8>
 800d5e0:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7fe fca6 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendWait(100000);
 800d5ea:	495f      	ldr	r1, [pc, #380]	@ (800d768 <_Z22setDefaultInstructionsP12Embase3Roues+0x328>)
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7fe fcd5 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
		break;
 800d5f2:	e114      	b.n	800d81e <_Z22setDefaultInstructionsP12Embase3Roues+0x3de>
		if(nb_panneaux == 6){
 800d5f4:	4b5b      	ldr	r3, [pc, #364]	@ (800d764 <_Z22setDefaultInstructionsP12Embase3Roues+0x324>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	2b06      	cmp	r3, #6
 800d5fc:	bf0c      	ite	eq
 800d5fe:	2301      	moveq	r3, #1
 800d600:	2300      	movne	r3, #0
 800d602:	b2db      	uxtb	r3, r3
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 80b1 	beq.w	800d76c <_Z22setDefaultInstructionsP12Embase3Roues+0x32c>
			e->appendUart('p');
 800d60a:	2170      	movs	r1, #112	@ 0x70
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7fe fce8 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d612:	2100      	movs	r1, #0
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7fe fcc1 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, -1.45, 0);
 800d61a:	ed9f 2b37 	vldr	d2, [pc, #220]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d61e:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 800d740 <_Z22setDefaultInstructionsP12Embase3Roues+0x300>
 800d622:	ed9f 0b35 	vldr	d0, [pc, #212]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7fe fc85 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d62c:	2170      	movs	r1, #112	@ 0x70
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7fe fcd7 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d634:	2100      	movs	r1, #0
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7fe fcb0 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0.225, 0);
 800d63c:	ed9f 2b2e 	vldr	d2, [pc, #184]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d640:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 800d728 <_Z22setDefaultInstructionsP12Embase3Roues+0x2e8>
 800d644:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7fe fc74 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d64e:	2170      	movs	r1, #112	@ 0x70
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7fe fcc6 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d656:	2100      	movs	r1, #0
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7fe fc9f 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0.225, 0);
 800d65e:	ed9f 2b26 	vldr	d2, [pc, #152]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d662:	ed9f 1b31 	vldr	d1, [pc, #196]	@ 800d728 <_Z22setDefaultInstructionsP12Embase3Roues+0x2e8>
 800d666:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7fe fc63 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d670:	2170      	movs	r1, #112	@ 0x70
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7fe fcb5 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d678:	2100      	movs	r1, #0
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7fe fc8e 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0.55, 0);
 800d680:	ed9f 2b1d 	vldr	d2, [pc, #116]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d684:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 800d748 <_Z22setDefaultInstructionsP12Embase3Roues+0x308>
 800d688:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7fe fc52 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d692:	2170      	movs	r1, #112	@ 0x70
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7fe fca4 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d69a:	2100      	movs	r1, #0
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7fe fc7d 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0.225, 0);
 800d6a2:	ed9f 2b15 	vldr	d2, [pc, #84]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d6a6:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 800d728 <_Z22setDefaultInstructionsP12Embase3Roues+0x2e8>
 800d6aa:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7fe fc41 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d6b4:	2170      	movs	r1, #112	@ 0x70
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7fe fc93 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d6bc:	2100      	movs	r1, #0
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f7fe fc6c 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0, -90);
 800d6c4:	ed9f 2b22 	vldr	d2, [pc, #136]	@ 800d750 <_Z22setDefaultInstructionsP12Embase3Roues+0x310>
 800d6c8:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d6cc:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7fe fc30 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendRelativeMove(0, 1.760, 0);
 800d6d6:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d6da:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 800d758 <_Z22setDefaultInstructionsP12Embase3Roues+0x318>
 800d6de:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 800d6f8 <_Z22setDefaultInstructionsP12Embase3Roues+0x2b8>
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7fe fc27 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendWait(100000);
 800d6e8:	491f      	ldr	r1, [pc, #124]	@ (800d768 <_Z22setDefaultInstructionsP12Embase3Roues+0x328>)
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7fe fc56 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
		break;
 800d6f0:	e097      	b.n	800d822 <_Z22setDefaultInstructionsP12Embase3Roues+0x3e2>
 800d6f2:	bf00      	nop
 800d6f4:	f3af 8000 	nop.w
	...
 800d700:	33333333 	.word	0x33333333
 800d704:	3ff73333 	.word	0x3ff73333
 800d708:	cccccccd 	.word	0xcccccccd
 800d70c:	bfcccccc 	.word	0xbfcccccc
 800d710:	9999999a 	.word	0x9999999a
 800d714:	bfe19999 	.word	0xbfe19999
 800d718:	00000000 	.word	0x00000000
 800d71c:	40568000 	.word	0x40568000
 800d720:	c28f5c29 	.word	0xc28f5c29
 800d724:	bffc28f5 	.word	0xbffc28f5
 800d728:	cccccccd 	.word	0xcccccccd
 800d72c:	3fcccccc 	.word	0x3fcccccc
 800d730:	00000000 	.word	0x00000000
 800d734:	c05b8000 	.word	0xc05b8000
 800d738:	ef9db22d 	.word	0xef9db22d
 800d73c:	3ffbc6a7 	.word	0x3ffbc6a7
 800d740:	33333333 	.word	0x33333333
 800d744:	bff73333 	.word	0xbff73333
 800d748:	9999999a 	.word	0x9999999a
 800d74c:	3fe19999 	.word	0x3fe19999
 800d750:	00000000 	.word	0x00000000
 800d754:	c0568000 	.word	0xc0568000
 800d758:	c28f5c29 	.word	0xc28f5c29
 800d75c:	3ffc28f5 	.word	0x3ffc28f5
 800d760:	2000055d 	.word	0x2000055d
 800d764:	20000004 	.word	0x20000004
 800d768:	000186a0 	.word	0x000186a0
		else if(nb_panneaux == 3){
 800d76c:	4b3a      	ldr	r3, [pc, #232]	@ (800d858 <_Z22setDefaultInstructionsP12Embase3Roues+0x418>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	b2db      	uxtb	r3, r3
 800d772:	2b03      	cmp	r3, #3
 800d774:	bf0c      	ite	eq
 800d776:	2301      	moveq	r3, #1
 800d778:	2300      	movne	r3, #0
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d050      	beq.n	800d822 <_Z22setDefaultInstructionsP12Embase3Roues+0x3e2>
			e->appendRelativeMove(0, -0.1*Coef_Neg, 0);
 800d780:	ed9f 2b2b 	vldr	d2, [pc, #172]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d784:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 800d838 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f8>
 800d788:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7fe fbd2 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d792:	2170      	movs	r1, #112	@ 0x70
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7fe fc24 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d79a:	2100      	movs	r1, #0
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7fe fbfd 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, -0.225*Coef_Neg, 0);
 800d7a2:	ed9f 2b23 	vldr	d2, [pc, #140]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d7a6:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 800d840 <_Z22setDefaultInstructionsP12Embase3Roues+0x400>
 800d7aa:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7fe fbc1 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d7b4:	2170      	movs	r1, #112	@ 0x70
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7fe fc13 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d7bc:	2100      	movs	r1, #0
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7fe fbec 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, -0.225*Coef_Neg, 0);
 800d7c4:	ed9f 2b1a 	vldr	d2, [pc, #104]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d7c8:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 800d840 <_Z22setDefaultInstructionsP12Embase3Roues+0x400>
 800d7cc:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7fe fbb0 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendUart('p');
 800d7d6:	2170      	movs	r1, #112	@ 0x70
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7fe fc02 	bl	800bfe2 <_ZN12Embase3Roues10appendUartEh>
			e->appendWait(0);
 800d7de:	2100      	movs	r1, #0
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7fe fbdb 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, 0, 110);
 800d7e6:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 800d848 <_Z22setDefaultInstructionsP12Embase3Roues+0x408>
 800d7ea:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d7ee:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7fe fb9f 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendWait(1000);
 800d7f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f7fe fbcd 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
			e->appendRelativeMove(0, -1.736*Coef_Neg, 0);
 800d802:	ed9f 2b0b 	vldr	d2, [pc, #44]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d806:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 800d850 <_Z22setDefaultInstructionsP12Embase3Roues+0x410>
 800d80a:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 800d830 <_Z22setDefaultInstructionsP12Embase3Roues+0x3f0>
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7fe fb91 	bl	800bf36 <_ZN12Embase3Roues18appendRelativeMoveEddd>
			e->appendWait(100000);
 800d814:	4911      	ldr	r1, [pc, #68]	@ (800d85c <_Z22setDefaultInstructionsP12Embase3Roues+0x41c>)
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7fe fbc0 	bl	800bf9c <_ZN12Embase3Roues10appendWaitEm>
		break;
 800d81c:	e001      	b.n	800d822 <_Z22setDefaultInstructionsP12Embase3Roues+0x3e2>
		break;
 800d81e:	bf00      	nop
 800d820:	e000      	b.n	800d824 <_Z22setDefaultInstructionsP12Embase3Roues+0x3e4>
		break;
 800d822:	bf00      	nop
	}
}
 800d824:	bf00      	nop
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	f3af 8000 	nop.w
	...
 800d838:	c28f5c2a 	.word	0xc28f5c2a
 800d83c:	bfbc28f5 	.word	0xbfbc28f5
 800d840:	7ae147af 	.word	0x7ae147af
 800d844:	bfcfae14 	.word	0xbfcfae14
 800d848:	00000000 	.word	0x00000000
 800d84c:	405b8000 	.word	0x405b8000
 800d850:	bac710cc 	.word	0xbac710cc
 800d854:	bffe8db8 	.word	0xbffe8db8
 800d858:	20000004 	.word	0x20000004
 800d85c:	000186a0 	.word	0x000186a0

0800d860 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	4603      	mov	r3, r0
 800d868:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800d86a:	88fb      	ldrh	r3, [r7, #6]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d102      	bne.n	800d876 <HAL_GPIO_EXTI_Callback+0x16>
		// Motors are busy when pin low. Rising edge -> no longer busy
		motors_busy = false;
 800d870:	4b04      	ldr	r3, [pc, #16]	@ (800d884 <HAL_GPIO_EXTI_Callback+0x24>)
 800d872:	2200      	movs	r2, #0
 800d874:	701a      	strb	r2, [r3, #0]
	}
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	20000558 	.word	0x20000558

0800d888 <HAL_UART_TxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]

}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a35      	ldr	r2, [pc, #212]	@ (800d980 <HAL_UART_RxCpltCallback+0xe4>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d164      	bne.n	800d978 <HAL_UART_RxCpltCallback+0xdc>
	{
		switch(uart_received_char)
 800d8ae:	4b35      	ldr	r3, [pc, #212]	@ (800d984 <HAL_UART_RxCpltCallback+0xe8>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2b77      	cmp	r3, #119	@ 0x77
 800d8b4:	dc5a      	bgt.n	800d96c <HAL_UART_RxCpltCallback+0xd0>
 800d8b6:	2b62      	cmp	r3, #98	@ 0x62
 800d8b8:	da04      	bge.n	800d8c4 <HAL_UART_RxCpltCallback+0x28>
 800d8ba:	2b33      	cmp	r3, #51	@ 0x33
 800d8bc:	d04e      	beq.n	800d95c <HAL_UART_RxCpltCallback+0xc0>
 800d8be:	2b36      	cmp	r3, #54	@ 0x36
 800d8c0:	d050      	beq.n	800d964 <HAL_UART_RxCpltCallback+0xc8>
		case '6':
			nb_panneaux = 6;
			break;

		default:
			break;
 800d8c2:	e053      	b.n	800d96c <HAL_UART_RxCpltCallback+0xd0>
		switch(uart_received_char)
 800d8c4:	3b62      	subs	r3, #98	@ 0x62
 800d8c6:	2b15      	cmp	r3, #21
 800d8c8:	d850      	bhi.n	800d96c <HAL_UART_RxCpltCallback+0xd0>
 800d8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800d8d0 <HAL_UART_RxCpltCallback+0x34>)
 800d8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d0:	0800d94d 	.word	0x0800d94d
 800d8d4:	0800d96d 	.word	0x0800d96d
 800d8d8:	0800d96d 	.word	0x0800d96d
 800d8dc:	0800d96d 	.word	0x0800d96d
 800d8e0:	0800d96d 	.word	0x0800d96d
 800d8e4:	0800d96d 	.word	0x0800d96d
 800d8e8:	0800d96d 	.word	0x0800d96d
 800d8ec:	0800d93f 	.word	0x0800d93f
 800d8f0:	0800d955 	.word	0x0800d955
 800d8f4:	0800d96d 	.word	0x0800d96d
 800d8f8:	0800d96d 	.word	0x0800d96d
 800d8fc:	0800d96d 	.word	0x0800d96d
 800d900:	0800d96d 	.word	0x0800d96d
 800d904:	0800d96d 	.word	0x0800d96d
 800d908:	0800d96d 	.word	0x0800d96d
 800d90c:	0800d96d 	.word	0x0800d96d
 800d910:	0800d96d 	.word	0x0800d96d
 800d914:	0800d929 	.word	0x0800d929
 800d918:	0800d96d 	.word	0x0800d96d
 800d91c:	0800d96d 	.word	0x0800d96d
 800d920:	0800d96d 	.word	0x0800d96d
 800d924:	0800d937 	.word	0x0800d937
			movement_allowed = true;
 800d928:	4b17      	ldr	r3, [pc, #92]	@ (800d988 <HAL_UART_RxCpltCallback+0xec>)
 800d92a:	2201      	movs	r2, #1
 800d92c:	701a      	strb	r2, [r3, #0]
			robot_started = true;
 800d92e:	4b17      	ldr	r3, [pc, #92]	@ (800d98c <HAL_UART_RxCpltCallback+0xf0>)
 800d930:	2201      	movs	r2, #1
 800d932:	701a      	strb	r2, [r3, #0]
			break;
 800d934:	e01b      	b.n	800d96e <HAL_UART_RxCpltCallback+0xd2>
			movement_allowed = false;
 800d936:	4b14      	ldr	r3, [pc, #80]	@ (800d988 <HAL_UART_RxCpltCallback+0xec>)
 800d938:	2200      	movs	r2, #0
 800d93a:	701a      	strb	r2, [r3, #0]
			break;
 800d93c:	e017      	b.n	800d96e <HAL_UART_RxCpltCallback+0xd2>
			init_requested = true;
 800d93e:	4b14      	ldr	r3, [pc, #80]	@ (800d990 <HAL_UART_RxCpltCallback+0xf4>)
 800d940:	2201      	movs	r2, #1
 800d942:	701a      	strb	r2, [r3, #0]
			get_out_step = true;
 800d944:	4b13      	ldr	r3, [pc, #76]	@ (800d994 <HAL_UART_RxCpltCallback+0xf8>)
 800d946:	2201      	movs	r2, #1
 800d948:	701a      	strb	r2, [r3, #0]
			break;
 800d94a:	e010      	b.n	800d96e <HAL_UART_RxCpltCallback+0xd2>
			equipe = BLEU;
 800d94c:	4b12      	ldr	r3, [pc, #72]	@ (800d998 <HAL_UART_RxCpltCallback+0xfc>)
 800d94e:	2200      	movs	r2, #0
 800d950:	701a      	strb	r2, [r3, #0]
			break;
 800d952:	e00c      	b.n	800d96e <HAL_UART_RxCpltCallback+0xd2>
			equipe = JAUNE;
 800d954:	4b10      	ldr	r3, [pc, #64]	@ (800d998 <HAL_UART_RxCpltCallback+0xfc>)
 800d956:	2201      	movs	r2, #1
 800d958:	701a      	strb	r2, [r3, #0]
			break;
 800d95a:	e008      	b.n	800d96e <HAL_UART_RxCpltCallback+0xd2>
			nb_panneaux = 3;
 800d95c:	4b0f      	ldr	r3, [pc, #60]	@ (800d99c <HAL_UART_RxCpltCallback+0x100>)
 800d95e:	2203      	movs	r2, #3
 800d960:	701a      	strb	r2, [r3, #0]
			break;
 800d962:	e004      	b.n	800d96e <HAL_UART_RxCpltCallback+0xd2>
			nb_panneaux = 6;
 800d964:	4b0d      	ldr	r3, [pc, #52]	@ (800d99c <HAL_UART_RxCpltCallback+0x100>)
 800d966:	2206      	movs	r2, #6
 800d968:	701a      	strb	r2, [r3, #0]
			break;
 800d96a:	e000      	b.n	800d96e <HAL_UART_RxCpltCallback+0xd2>
			break;
 800d96c:	bf00      	nop
		}

		// ALWAYS READ UART
		HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800d96e:	2201      	movs	r2, #1
 800d970:	4904      	ldr	r1, [pc, #16]	@ (800d984 <HAL_UART_RxCpltCallback+0xe8>)
 800d972:	480b      	ldr	r0, [pc, #44]	@ (800d9a0 <HAL_UART_RxCpltCallback+0x104>)
 800d974:	f003 fdb3 	bl	80114de <HAL_UART_Receive_IT>
	}
}
 800d978:	bf00      	nop
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	40004400 	.word	0x40004400
 800d984:	2000055e 	.word	0x2000055e
 800d988:	20000559 	.word	0x20000559
 800d98c:	2000055a 	.word	0x2000055a
 800d990:	2000055b 	.word	0x2000055b
 800d994:	2000055c 	.word	0x2000055c
 800d998:	2000055d 	.word	0x2000055d
 800d99c:	20000004 	.word	0x20000004
 800d9a0:	200004cc 	.word	0x200004cc

0800d9a4 <HAL_TIM_PeriodElapsedCallback>:

//Timer 2 interrupt (every 20ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
						break;
			}

		}
	}*/
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800d9b8:	b480      	push	{r7}
 800d9ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d9bc:	b672      	cpsid	i
}
 800d9be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800d9c0:	bf00      	nop
 800d9c2:	e7fd      	b.n	800d9c0 <Error_Handler+0x8>

0800d9c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	607b      	str	r3, [r7, #4]
 800d9ce:	4b10      	ldr	r3, [pc, #64]	@ (800da10 <HAL_MspInit+0x4c>)
 800d9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9d2:	4a0f      	ldr	r2, [pc, #60]	@ (800da10 <HAL_MspInit+0x4c>)
 800d9d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d9d8:	6453      	str	r3, [r2, #68]	@ 0x44
 800d9da:	4b0d      	ldr	r3, [pc, #52]	@ (800da10 <HAL_MspInit+0x4c>)
 800d9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9e2:	607b      	str	r3, [r7, #4]
 800d9e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	603b      	str	r3, [r7, #0]
 800d9ea:	4b09      	ldr	r3, [pc, #36]	@ (800da10 <HAL_MspInit+0x4c>)
 800d9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ee:	4a08      	ldr	r2, [pc, #32]	@ (800da10 <HAL_MspInit+0x4c>)
 800d9f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d9f4:	6413      	str	r3, [r2, #64]	@ 0x40
 800d9f6:	4b06      	ldr	r3, [pc, #24]	@ (800da10 <HAL_MspInit+0x4c>)
 800d9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800da02:	2007      	movs	r0, #7
 800da04:	f000 fd6a 	bl	800e4dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da08:	bf00      	nop
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	40023800 	.word	0x40023800

0800da14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b08c      	sub	sp, #48	@ 0x30
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da1c:	f107 031c 	add.w	r3, r7, #28
 800da20:	2200      	movs	r2, #0
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	605a      	str	r2, [r3, #4]
 800da26:	609a      	str	r2, [r3, #8]
 800da28:	60da      	str	r2, [r3, #12]
 800da2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a45      	ldr	r2, [pc, #276]	@ (800db48 <HAL_SPI_MspInit+0x134>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d14a      	bne.n	800dacc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800da36:	2300      	movs	r3, #0
 800da38:	61bb      	str	r3, [r7, #24]
 800da3a:	4b44      	ldr	r3, [pc, #272]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da3e:	4a43      	ldr	r2, [pc, #268]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800da44:	6453      	str	r3, [r2, #68]	@ 0x44
 800da46:	4b41      	ldr	r3, [pc, #260]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da4e:	61bb      	str	r3, [r7, #24]
 800da50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da52:	2300      	movs	r3, #0
 800da54:	617b      	str	r3, [r7, #20]
 800da56:	4b3d      	ldr	r3, [pc, #244]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da5a:	4a3c      	ldr	r2, [pc, #240]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da5c:	f043 0301 	orr.w	r3, r3, #1
 800da60:	6313      	str	r3, [r2, #48]	@ 0x30
 800da62:	4b3a      	ldr	r3, [pc, #232]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da66:	f003 0301 	and.w	r3, r3, #1
 800da6a:	617b      	str	r3, [r7, #20]
 800da6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800da6e:	2300      	movs	r3, #0
 800da70:	613b      	str	r3, [r7, #16]
 800da72:	4b36      	ldr	r3, [pc, #216]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da76:	4a35      	ldr	r2, [pc, #212]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da78:	f043 0302 	orr.w	r3, r3, #2
 800da7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800da7e:	4b33      	ldr	r3, [pc, #204]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800da80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da82:	f003 0302 	and.w	r3, r3, #2
 800da86:	613b      	str	r3, [r7, #16]
 800da88:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800da8a:	23c0      	movs	r3, #192	@ 0xc0
 800da8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da8e:	2302      	movs	r3, #2
 800da90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da92:	2300      	movs	r3, #0
 800da94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da96:	2303      	movs	r3, #3
 800da98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800da9a:	2305      	movs	r3, #5
 800da9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da9e:	f107 031c 	add.w	r3, r7, #28
 800daa2:	4619      	mov	r1, r3
 800daa4:	482a      	ldr	r0, [pc, #168]	@ (800db50 <HAL_SPI_MspInit+0x13c>)
 800daa6:	f000 fded 	bl	800e684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800daaa:	2308      	movs	r3, #8
 800daac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daae:	2302      	movs	r3, #2
 800dab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dab6:	2303      	movs	r3, #3
 800dab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800daba:	2305      	movs	r3, #5
 800dabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dabe:	f107 031c 	add.w	r3, r7, #28
 800dac2:	4619      	mov	r1, r3
 800dac4:	4823      	ldr	r0, [pc, #140]	@ (800db54 <HAL_SPI_MspInit+0x140>)
 800dac6:	f000 fddd 	bl	800e684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800daca:	e038      	b.n	800db3e <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a21      	ldr	r2, [pc, #132]	@ (800db58 <HAL_SPI_MspInit+0x144>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d133      	bne.n	800db3e <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800dad6:	2300      	movs	r3, #0
 800dad8:	60fb      	str	r3, [r7, #12]
 800dada:	4b1c      	ldr	r3, [pc, #112]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800dadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dade:	4a1b      	ldr	r2, [pc, #108]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800dae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dae4:	6413      	str	r3, [r2, #64]	@ 0x40
 800dae6:	4b19      	ldr	r3, [pc, #100]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800dae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800daee:	60fb      	str	r3, [r7, #12]
 800daf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800daf2:	2300      	movs	r3, #0
 800daf4:	60bb      	str	r3, [r7, #8]
 800daf6:	4b15      	ldr	r3, [pc, #84]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800daf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dafa:	4a14      	ldr	r2, [pc, #80]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800dafc:	f043 0304 	orr.w	r3, r3, #4
 800db00:	6313      	str	r3, [r2, #48]	@ 0x30
 800db02:	4b12      	ldr	r3, [pc, #72]	@ (800db4c <HAL_SPI_MspInit+0x138>)
 800db04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db06:	f003 0304 	and.w	r3, r3, #4
 800db0a:	60bb      	str	r3, [r7, #8]
 800db0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800db0e:	238c      	movs	r3, #140	@ 0x8c
 800db10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db12:	2302      	movs	r3, #2
 800db14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db16:	2300      	movs	r3, #0
 800db18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db1a:	2303      	movs	r3, #3
 800db1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800db1e:	2305      	movs	r3, #5
 800db20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800db22:	f107 031c 	add.w	r3, r7, #28
 800db26:	4619      	mov	r1, r3
 800db28:	480c      	ldr	r0, [pc, #48]	@ (800db5c <HAL_SPI_MspInit+0x148>)
 800db2a:	f000 fdab 	bl	800e684 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800db2e:	2200      	movs	r2, #0
 800db30:	2100      	movs	r1, #0
 800db32:	2024      	movs	r0, #36	@ 0x24
 800db34:	f000 fcdd 	bl	800e4f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800db38:	2024      	movs	r0, #36	@ 0x24
 800db3a:	f000 fcf6 	bl	800e52a <HAL_NVIC_EnableIRQ>
}
 800db3e:	bf00      	nop
 800db40:	3730      	adds	r7, #48	@ 0x30
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	40013000 	.word	0x40013000
 800db4c:	40023800 	.word	0x40023800
 800db50:	40020000 	.word	0x40020000
 800db54:	40020400 	.word	0x40020400
 800db58:	40003800 	.word	0x40003800
 800db5c:	40020800 	.word	0x40020800

0800db60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800db60:	b480      	push	{r7}
 800db62:	b087      	sub	sp, #28
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a1f      	ldr	r2, [pc, #124]	@ (800dbec <HAL_TIM_PWM_MspInit+0x8c>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d10e      	bne.n	800db90 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800db72:	2300      	movs	r3, #0
 800db74:	617b      	str	r3, [r7, #20]
 800db76:	4b1e      	ldr	r3, [pc, #120]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800db78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db7a:	4a1d      	ldr	r2, [pc, #116]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800db7c:	f043 0301 	orr.w	r3, r3, #1
 800db80:	6453      	str	r3, [r2, #68]	@ 0x44
 800db82:	4b1b      	ldr	r3, [pc, #108]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800db84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	617b      	str	r3, [r7, #20]
 800db8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800db8e:	e026      	b.n	800dbde <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a17      	ldr	r2, [pc, #92]	@ (800dbf4 <HAL_TIM_PWM_MspInit+0x94>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d10e      	bne.n	800dbb8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800db9a:	2300      	movs	r3, #0
 800db9c:	613b      	str	r3, [r7, #16]
 800db9e:	4b14      	ldr	r3, [pc, #80]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800dba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba2:	4a13      	ldr	r2, [pc, #76]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800dba4:	f043 0304 	orr.w	r3, r3, #4
 800dba8:	6413      	str	r3, [r2, #64]	@ 0x40
 800dbaa:	4b11      	ldr	r3, [pc, #68]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800dbac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbae:	f003 0304 	and.w	r3, r3, #4
 800dbb2:	613b      	str	r3, [r7, #16]
 800dbb4:	693b      	ldr	r3, [r7, #16]
}
 800dbb6:	e012      	b.n	800dbde <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4a0e      	ldr	r2, [pc, #56]	@ (800dbf8 <HAL_TIM_PWM_MspInit+0x98>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d10d      	bne.n	800dbde <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800dbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbca:	4a09      	ldr	r2, [pc, #36]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800dbcc:	f043 0302 	orr.w	r3, r3, #2
 800dbd0:	6453      	str	r3, [r2, #68]	@ 0x44
 800dbd2:	4b07      	ldr	r3, [pc, #28]	@ (800dbf0 <HAL_TIM_PWM_MspInit+0x90>)
 800dbd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbd6:	f003 0302 	and.w	r3, r3, #2
 800dbda:	60fb      	str	r3, [r7, #12]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
}
 800dbde:	bf00      	nop
 800dbe0:	371c      	adds	r7, #28
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	40010000 	.word	0x40010000
 800dbf0:	40023800 	.word	0x40023800
 800dbf4:	40000800 	.word	0x40000800
 800dbf8:	40010400 	.word	0x40010400

0800dbfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc0c:	d116      	bne.n	800dc3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800dc0e:	2300      	movs	r3, #0
 800dc10:	60fb      	str	r3, [r7, #12]
 800dc12:	4b1a      	ldr	r3, [pc, #104]	@ (800dc7c <HAL_TIM_Base_MspInit+0x80>)
 800dc14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc16:	4a19      	ldr	r2, [pc, #100]	@ (800dc7c <HAL_TIM_Base_MspInit+0x80>)
 800dc18:	f043 0301 	orr.w	r3, r3, #1
 800dc1c:	6413      	str	r3, [r2, #64]	@ 0x40
 800dc1e:	4b17      	ldr	r3, [pc, #92]	@ (800dc7c <HAL_TIM_Base_MspInit+0x80>)
 800dc20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	201c      	movs	r0, #28
 800dc30:	f000 fc5f 	bl	800e4f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800dc34:	201c      	movs	r0, #28
 800dc36:	f000 fc78 	bl	800e52a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800dc3a:	e01a      	b.n	800dc72 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a0f      	ldr	r2, [pc, #60]	@ (800dc80 <HAL_TIM_Base_MspInit+0x84>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d115      	bne.n	800dc72 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800dc46:	2300      	movs	r3, #0
 800dc48:	60bb      	str	r3, [r7, #8]
 800dc4a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc7c <HAL_TIM_Base_MspInit+0x80>)
 800dc4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc4e:	4a0b      	ldr	r2, [pc, #44]	@ (800dc7c <HAL_TIM_Base_MspInit+0x80>)
 800dc50:	f043 0310 	orr.w	r3, r3, #16
 800dc54:	6413      	str	r3, [r2, #64]	@ 0x40
 800dc56:	4b09      	ldr	r3, [pc, #36]	@ (800dc7c <HAL_TIM_Base_MspInit+0x80>)
 800dc58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc5a:	f003 0310 	and.w	r3, r3, #16
 800dc5e:	60bb      	str	r3, [r7, #8]
 800dc60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800dc62:	2200      	movs	r2, #0
 800dc64:	2100      	movs	r1, #0
 800dc66:	2036      	movs	r0, #54	@ 0x36
 800dc68:	f000 fc43 	bl	800e4f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800dc6c:	2036      	movs	r0, #54	@ 0x36
 800dc6e:	f000 fc5c 	bl	800e52a <HAL_NVIC_EnableIRQ>
}
 800dc72:	bf00      	nop
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	40023800 	.word	0x40023800
 800dc80:	40001000 	.word	0x40001000

0800dc84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b08c      	sub	sp, #48	@ 0x30
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc8c:	f107 031c 	add.w	r3, r7, #28
 800dc90:	2200      	movs	r2, #0
 800dc92:	601a      	str	r2, [r3, #0]
 800dc94:	605a      	str	r2, [r3, #4]
 800dc96:	609a      	str	r2, [r3, #8]
 800dc98:	60da      	str	r2, [r3, #12]
 800dc9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a49      	ldr	r2, [pc, #292]	@ (800ddc8 <HAL_TIM_MspPostInit+0x144>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d11f      	bne.n	800dce6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dca6:	2300      	movs	r3, #0
 800dca8:	61bb      	str	r3, [r7, #24]
 800dcaa:	4b48      	ldr	r3, [pc, #288]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dcac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcae:	4a47      	ldr	r2, [pc, #284]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dcb0:	f043 0302 	orr.w	r3, r3, #2
 800dcb4:	6313      	str	r3, [r2, #48]	@ 0x30
 800dcb6:	4b45      	ldr	r3, [pc, #276]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dcb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcba:	f003 0302 	and.w	r3, r3, #2
 800dcbe:	61bb      	str	r3, [r7, #24]
 800dcc0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800dcc2:	f248 0301 	movw	r3, #32769	@ 0x8001
 800dcc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc8:	2302      	movs	r3, #2
 800dcca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dccc:	2300      	movs	r3, #0
 800dcce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcd8:	f107 031c 	add.w	r3, r7, #28
 800dcdc:	4619      	mov	r1, r3
 800dcde:	483c      	ldr	r0, [pc, #240]	@ (800ddd0 <HAL_TIM_MspPostInit+0x14c>)
 800dce0:	f000 fcd0 	bl	800e684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800dce4:	e06c      	b.n	800ddc0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcee:	d11f      	bne.n	800dd30 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	4b35      	ldr	r3, [pc, #212]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dcf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcf8:	4a34      	ldr	r2, [pc, #208]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dcfa:	f043 0301 	orr.w	r3, r3, #1
 800dcfe:	6313      	str	r3, [r2, #48]	@ 0x30
 800dd00:	4b32      	ldr	r3, [pc, #200]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dd02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd04:	f003 0301 	and.w	r3, r3, #1
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800dd0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd12:	2302      	movs	r3, #2
 800dd14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd22:	f107 031c 	add.w	r3, r7, #28
 800dd26:	4619      	mov	r1, r3
 800dd28:	482a      	ldr	r0, [pc, #168]	@ (800ddd4 <HAL_TIM_MspPostInit+0x150>)
 800dd2a:	f000 fcab 	bl	800e684 <HAL_GPIO_Init>
}
 800dd2e:	e047      	b.n	800ddc0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a28      	ldr	r2, [pc, #160]	@ (800ddd8 <HAL_TIM_MspPostInit+0x154>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d11e      	bne.n	800dd78 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	613b      	str	r3, [r7, #16]
 800dd3e:	4b23      	ldr	r3, [pc, #140]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd42:	4a22      	ldr	r2, [pc, #136]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dd44:	f043 0302 	orr.w	r3, r3, #2
 800dd48:	6313      	str	r3, [r2, #48]	@ 0x30
 800dd4a:	4b20      	ldr	r3, [pc, #128]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dd4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd4e:	f003 0302 	and.w	r3, r3, #2
 800dd52:	613b      	str	r3, [r7, #16]
 800dd54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800dd56:	2380      	movs	r3, #128	@ 0x80
 800dd58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd62:	2300      	movs	r3, #0
 800dd64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800dd66:	2302      	movs	r3, #2
 800dd68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dd6a:	f107 031c 	add.w	r3, r7, #28
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4817      	ldr	r0, [pc, #92]	@ (800ddd0 <HAL_TIM_MspPostInit+0x14c>)
 800dd72:	f000 fc87 	bl	800e684 <HAL_GPIO_Init>
}
 800dd76:	e023      	b.n	800ddc0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a17      	ldr	r2, [pc, #92]	@ (800dddc <HAL_TIM_MspPostInit+0x158>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d11e      	bne.n	800ddc0 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd82:	2300      	movs	r3, #0
 800dd84:	60fb      	str	r3, [r7, #12]
 800dd86:	4b11      	ldr	r3, [pc, #68]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dd88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd8a:	4a10      	ldr	r2, [pc, #64]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dd8c:	f043 0302 	orr.w	r3, r3, #2
 800dd90:	6313      	str	r3, [r2, #48]	@ 0x30
 800dd92:	4b0e      	ldr	r3, [pc, #56]	@ (800ddcc <HAL_TIM_MspPostInit+0x148>)
 800dd94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800dd9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dda2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dda4:	2302      	movs	r3, #2
 800dda6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddac:	2300      	movs	r3, #0
 800ddae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ddb4:	f107 031c 	add.w	r3, r7, #28
 800ddb8:	4619      	mov	r1, r3
 800ddba:	4805      	ldr	r0, [pc, #20]	@ (800ddd0 <HAL_TIM_MspPostInit+0x14c>)
 800ddbc:	f000 fc62 	bl	800e684 <HAL_GPIO_Init>
}
 800ddc0:	bf00      	nop
 800ddc2:	3730      	adds	r7, #48	@ 0x30
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	40010000 	.word	0x40010000
 800ddcc:	40023800 	.word	0x40023800
 800ddd0:	40020400 	.word	0x40020400
 800ddd4:	40020000 	.word	0x40020000
 800ddd8:	40000800 	.word	0x40000800
 800dddc:	40010400 	.word	0x40010400

0800dde0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08c      	sub	sp, #48	@ 0x30
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dde8:	f107 031c 	add.w	r3, r7, #28
 800ddec:	2200      	movs	r2, #0
 800ddee:	601a      	str	r2, [r3, #0]
 800ddf0:	605a      	str	r2, [r3, #4]
 800ddf2:	609a      	str	r2, [r3, #8]
 800ddf4:	60da      	str	r2, [r3, #12]
 800ddf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a49      	ldr	r2, [pc, #292]	@ (800df24 <HAL_UART_MspInit+0x144>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d134      	bne.n	800de6c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800de02:	2300      	movs	r3, #0
 800de04:	61bb      	str	r3, [r7, #24]
 800de06:	4b48      	ldr	r3, [pc, #288]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de0a:	4a47      	ldr	r2, [pc, #284]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de10:	6413      	str	r3, [r2, #64]	@ 0x40
 800de12:	4b45      	ldr	r3, [pc, #276]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de1a:	61bb      	str	r3, [r7, #24]
 800de1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de1e:	2300      	movs	r3, #0
 800de20:	617b      	str	r3, [r7, #20]
 800de22:	4b41      	ldr	r3, [pc, #260]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de26:	4a40      	ldr	r2, [pc, #256]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de28:	f043 0301 	orr.w	r3, r3, #1
 800de2c:	6313      	str	r3, [r2, #48]	@ 0x30
 800de2e:	4b3e      	ldr	r3, [pc, #248]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	617b      	str	r3, [r7, #20]
 800de38:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800de3a:	230c      	movs	r3, #12
 800de3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de3e:	2302      	movs	r3, #2
 800de40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de42:	2300      	movs	r3, #0
 800de44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de46:	2303      	movs	r3, #3
 800de48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800de4a:	2307      	movs	r3, #7
 800de4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de4e:	f107 031c 	add.w	r3, r7, #28
 800de52:	4619      	mov	r1, r3
 800de54:	4835      	ldr	r0, [pc, #212]	@ (800df2c <HAL_UART_MspInit+0x14c>)
 800de56:	f000 fc15 	bl	800e684 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800de5a:	2200      	movs	r2, #0
 800de5c:	2100      	movs	r1, #0
 800de5e:	2026      	movs	r0, #38	@ 0x26
 800de60:	f000 fb47 	bl	800e4f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800de64:	2026      	movs	r0, #38	@ 0x26
 800de66:	f000 fb60 	bl	800e52a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800de6a:	e057      	b.n	800df1c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a2f      	ldr	r2, [pc, #188]	@ (800df30 <HAL_UART_MspInit+0x150>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d152      	bne.n	800df1c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800de76:	2300      	movs	r3, #0
 800de78:	613b      	str	r3, [r7, #16]
 800de7a:	4b2b      	ldr	r3, [pc, #172]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de7e:	4a2a      	ldr	r2, [pc, #168]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800de84:	6413      	str	r3, [r2, #64]	@ 0x40
 800de86:	4b28      	ldr	r3, [pc, #160]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800de8e:	613b      	str	r3, [r7, #16]
 800de90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de92:	2300      	movs	r3, #0
 800de94:	60fb      	str	r3, [r7, #12]
 800de96:	4b24      	ldr	r3, [pc, #144]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de9a:	4a23      	ldr	r2, [pc, #140]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800de9c:	f043 0304 	orr.w	r3, r3, #4
 800dea0:	6313      	str	r3, [r2, #48]	@ 0x30
 800dea2:	4b21      	ldr	r3, [pc, #132]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800dea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dea6:	f003 0304 	and.w	r3, r3, #4
 800deaa:	60fb      	str	r3, [r7, #12]
 800deac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800deae:	2300      	movs	r3, #0
 800deb0:	60bb      	str	r3, [r7, #8]
 800deb2:	4b1d      	ldr	r3, [pc, #116]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800deb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deb6:	4a1c      	ldr	r2, [pc, #112]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800deb8:	f043 0302 	orr.w	r3, r3, #2
 800debc:	6313      	str	r3, [r2, #48]	@ 0x30
 800debe:	4b1a      	ldr	r3, [pc, #104]	@ (800df28 <HAL_UART_MspInit+0x148>)
 800dec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dec2:	f003 0302 	and.w	r3, r3, #2
 800dec6:	60bb      	str	r3, [r7, #8]
 800dec8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800deca:	2320      	movs	r3, #32
 800decc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dece:	2302      	movs	r3, #2
 800ded0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ded6:	2303      	movs	r3, #3
 800ded8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800deda:	2307      	movs	r3, #7
 800dedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dede:	f107 031c 	add.w	r3, r7, #28
 800dee2:	4619      	mov	r1, r3
 800dee4:	4813      	ldr	r0, [pc, #76]	@ (800df34 <HAL_UART_MspInit+0x154>)
 800dee6:	f000 fbcd 	bl	800e684 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800deea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800deee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800def0:	2302      	movs	r3, #2
 800def2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800def4:	2300      	movs	r3, #0
 800def6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800def8:	2303      	movs	r3, #3
 800defa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800defc:	2307      	movs	r3, #7
 800defe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df00:	f107 031c 	add.w	r3, r7, #28
 800df04:	4619      	mov	r1, r3
 800df06:	480c      	ldr	r0, [pc, #48]	@ (800df38 <HAL_UART_MspInit+0x158>)
 800df08:	f000 fbbc 	bl	800e684 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800df0c:	2200      	movs	r2, #0
 800df0e:	2100      	movs	r1, #0
 800df10:	2027      	movs	r0, #39	@ 0x27
 800df12:	f000 faee 	bl	800e4f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800df16:	2027      	movs	r0, #39	@ 0x27
 800df18:	f000 fb07 	bl	800e52a <HAL_NVIC_EnableIRQ>
}
 800df1c:	bf00      	nop
 800df1e:	3730      	adds	r7, #48	@ 0x30
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	40004400 	.word	0x40004400
 800df28:	40023800 	.word	0x40023800
 800df2c:	40020000 	.word	0x40020000
 800df30:	40004800 	.word	0x40004800
 800df34:	40020800 	.word	0x40020800
 800df38:	40020400 	.word	0x40020400

0800df3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800df3c:	b480      	push	{r7}
 800df3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800df40:	bf00      	nop
 800df42:	e7fd      	b.n	800df40 <NMI_Handler+0x4>

0800df44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800df44:	b480      	push	{r7}
 800df46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800df48:	bf00      	nop
 800df4a:	e7fd      	b.n	800df48 <HardFault_Handler+0x4>

0800df4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800df4c:	b480      	push	{r7}
 800df4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800df50:	bf00      	nop
 800df52:	e7fd      	b.n	800df50 <MemManage_Handler+0x4>

0800df54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800df54:	b480      	push	{r7}
 800df56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800df58:	bf00      	nop
 800df5a:	e7fd      	b.n	800df58 <BusFault_Handler+0x4>

0800df5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800df5c:	b480      	push	{r7}
 800df5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800df60:	bf00      	nop
 800df62:	e7fd      	b.n	800df60 <UsageFault_Handler+0x4>

0800df64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800df64:	b480      	push	{r7}
 800df66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800df68:	bf00      	nop
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800df72:	b480      	push	{r7}
 800df74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800df76:	bf00      	nop
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800df80:	b480      	push	{r7}
 800df82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800df84:	bf00      	nop
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800df92:	f000 f98f 	bl	800e2b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800df96:	bf00      	nop
 800df98:	bd80      	pop	{r7, pc}

0800df9a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800df9e:	2001      	movs	r0, #1
 800dfa0:	f000 fd1e 	bl	800e9e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800dfa4:	bf00      	nop
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800dfac:	4802      	ldr	r0, [pc, #8]	@ (800dfb8 <TIM2_IRQHandler+0x10>)
 800dfae:	f002 fb30 	bl	8010612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800dfb2:	bf00      	nop
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	200003ac 	.word	0x200003ac

0800dfbc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800dfc0:	4802      	ldr	r0, [pc, #8]	@ (800dfcc <SPI2_IRQHandler+0x10>)
 800dfc2:	f001 ffd5 	bl	800ff70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800dfc6:	bf00      	nop
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	2000030c 	.word	0x2000030c

0800dfd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800dfd4:	4802      	ldr	r0, [pc, #8]	@ (800dfe0 <USART2_IRQHandler+0x10>)
 800dfd6:	f003 fab3 	bl	8011540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800dfda:	bf00      	nop
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	200004cc 	.word	0x200004cc

0800dfe4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800dfe8:	4802      	ldr	r0, [pc, #8]	@ (800dff4 <USART3_IRQHandler+0x10>)
 800dfea:	f003 faa9 	bl	8011540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800dfee:	bf00      	nop
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20000510 	.word	0x20000510

0800dff8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800dffc:	4802      	ldr	r0, [pc, #8]	@ (800e008 <TIM6_DAC_IRQHandler+0x10>)
 800dffe:	f002 fb08 	bl	8010612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e002:	bf00      	nop
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	2000043c 	.word	0x2000043c

0800e00c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e00c:	b480      	push	{r7}
 800e00e:	af00      	add	r7, sp, #0
  return 1;
 800e010:	2301      	movs	r3, #1
}
 800e012:	4618      	mov	r0, r3
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <_kill>:

int _kill(int pid, int sig)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e026:	f007 f987 	bl	8015338 <__errno>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2216      	movs	r2, #22
 800e02e:	601a      	str	r2, [r3, #0]
  return -1;
 800e030:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <_exit>:

void _exit (int status)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e044:	f04f 31ff 	mov.w	r1, #4294967295
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7ff ffe7 	bl	800e01c <_kill>
  while (1) {}    /* Make sure we hang here */
 800e04e:	bf00      	nop
 800e050:	e7fd      	b.n	800e04e <_exit+0x12>

0800e052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b086      	sub	sp, #24
 800e056:	af00      	add	r7, sp, #0
 800e058:	60f8      	str	r0, [r7, #12]
 800e05a:	60b9      	str	r1, [r7, #8]
 800e05c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	e00a      	b.n	800e07a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e064:	f3af 8000 	nop.w
 800e068:	4601      	mov	r1, r0
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	1c5a      	adds	r2, r3, #1
 800e06e:	60ba      	str	r2, [r7, #8]
 800e070:	b2ca      	uxtb	r2, r1
 800e072:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	3301      	adds	r3, #1
 800e078:	617b      	str	r3, [r7, #20]
 800e07a:	697a      	ldr	r2, [r7, #20]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	429a      	cmp	r2, r3
 800e080:	dbf0      	blt.n	800e064 <_read+0x12>
  }

  return len;
 800e082:	687b      	ldr	r3, [r7, #4]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e098:	2300      	movs	r3, #0
 800e09a:	617b      	str	r3, [r7, #20]
 800e09c:	e009      	b.n	800e0b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	1c5a      	adds	r2, r3, #1
 800e0a2:	60ba      	str	r2, [r7, #8]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	617b      	str	r3, [r7, #20]
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	dbf1      	blt.n	800e09e <_write+0x12>
  }
  return len;
 800e0ba:	687b      	ldr	r3, [r7, #4]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3718      	adds	r7, #24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <_close>:

int _close(int file)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e0cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e0ec:	605a      	str	r2, [r3, #4]
  return 0;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <_isatty>:

int _isatty(int file)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e104:	2301      	movs	r3, #1
}
 800e106:	4618      	mov	r0, r3
 800e108:	370c      	adds	r7, #12
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e112:	b480      	push	{r7}
 800e114:	b085      	sub	sp, #20
 800e116:	af00      	add	r7, sp, #0
 800e118:	60f8      	str	r0, [r7, #12]
 800e11a:	60b9      	str	r1, [r7, #8]
 800e11c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e11e:	2300      	movs	r3, #0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b086      	sub	sp, #24
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e134:	4a14      	ldr	r2, [pc, #80]	@ (800e188 <_sbrk+0x5c>)
 800e136:	4b15      	ldr	r3, [pc, #84]	@ (800e18c <_sbrk+0x60>)
 800e138:	1ad3      	subs	r3, r2, r3
 800e13a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e140:	4b13      	ldr	r3, [pc, #76]	@ (800e190 <_sbrk+0x64>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d102      	bne.n	800e14e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e148:	4b11      	ldr	r3, [pc, #68]	@ (800e190 <_sbrk+0x64>)
 800e14a:	4a12      	ldr	r2, [pc, #72]	@ (800e194 <_sbrk+0x68>)
 800e14c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e14e:	4b10      	ldr	r3, [pc, #64]	@ (800e190 <_sbrk+0x64>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4413      	add	r3, r2
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d207      	bcs.n	800e16c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e15c:	f007 f8ec 	bl	8015338 <__errno>
 800e160:	4603      	mov	r3, r0
 800e162:	220c      	movs	r2, #12
 800e164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e166:	f04f 33ff 	mov.w	r3, #4294967295
 800e16a:	e009      	b.n	800e180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e16c:	4b08      	ldr	r3, [pc, #32]	@ (800e190 <_sbrk+0x64>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e172:	4b07      	ldr	r3, [pc, #28]	@ (800e190 <_sbrk+0x64>)
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4413      	add	r3, r2
 800e17a:	4a05      	ldr	r2, [pc, #20]	@ (800e190 <_sbrk+0x64>)
 800e17c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e17e:	68fb      	ldr	r3, [r7, #12]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	20020000 	.word	0x20020000
 800e18c:	00000400 	.word	0x00000400
 800e190:	20000560 	.word	0x20000560
 800e194:	200006e8 	.word	0x200006e8

0800e198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e198:	b480      	push	{r7}
 800e19a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e19c:	4b06      	ldr	r3, [pc, #24]	@ (800e1b8 <SystemInit+0x20>)
 800e19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1a2:	4a05      	ldr	r2, [pc, #20]	@ (800e1b8 <SystemInit+0x20>)
 800e1a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e1a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e1ac:	bf00      	nop
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	e000ed00 	.word	0xe000ed00

0800e1bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	;  ldr   sp, =_estack      /* set stack pointer */
 800e1bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800e1f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e1c0:	480d      	ldr	r0, [pc, #52]	@ (800e1f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e1c2:	490e      	ldr	r1, [pc, #56]	@ (800e1fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e1c4:	4a0e      	ldr	r2, [pc, #56]	@ (800e200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e1c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e1c8:	e002      	b.n	800e1d0 <LoopCopyDataInit>

0800e1ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e1ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e1cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e1ce:	3304      	adds	r3, #4

0800e1d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e1d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e1d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e1d4:	d3f9      	bcc.n	800e1ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e1d6:	4a0b      	ldr	r2, [pc, #44]	@ (800e204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e1d8:	4c0b      	ldr	r4, [pc, #44]	@ (800e208 <LoopFillZerobss+0x26>)
  movs r3, #0
 800e1da:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e1dc:	e001      	b.n	800e1e2 <LoopFillZerobss>

0800e1de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e1de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e1e0:	3204      	adds	r2, #4

0800e1e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e1e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e1e4:	d3fb      	bcc.n	800e1de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e1e6:	f7ff ffd7 	bl	800e198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e1ea:	f007 f8ab 	bl	8015344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e1ee:	f7fe fc2b 	bl	800ca48 <main>
  bx  lr    
 800e1f2:	4770      	bx	lr
	;  ldr   sp, =_estack      /* set stack pointer */
 800e1f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e1f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e1fc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800e200:	0801a92c 	.word	0x0801a92c
  ldr r2, =_sbss
 800e204:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800e208:	200006e4 	.word	0x200006e4

0800e20c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e20c:	e7fe      	b.n	800e20c <ADC_IRQHandler>
	...

0800e210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e214:	4b0e      	ldr	r3, [pc, #56]	@ (800e250 <HAL_Init+0x40>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a0d      	ldr	r2, [pc, #52]	@ (800e250 <HAL_Init+0x40>)
 800e21a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e21e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e220:	4b0b      	ldr	r3, [pc, #44]	@ (800e250 <HAL_Init+0x40>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a0a      	ldr	r2, [pc, #40]	@ (800e250 <HAL_Init+0x40>)
 800e226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e22a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e22c:	4b08      	ldr	r3, [pc, #32]	@ (800e250 <HAL_Init+0x40>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a07      	ldr	r2, [pc, #28]	@ (800e250 <HAL_Init+0x40>)
 800e232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e238:	2003      	movs	r0, #3
 800e23a:	f000 f94f 	bl	800e4dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e23e:	2000      	movs	r0, #0
 800e240:	f000 f808 	bl	800e254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e244:	f7ff fbbe 	bl	800d9c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	40023c00 	.word	0x40023c00

0800e254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e25c:	4b12      	ldr	r3, [pc, #72]	@ (800e2a8 <HAL_InitTick+0x54>)
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	4b12      	ldr	r3, [pc, #72]	@ (800e2ac <HAL_InitTick+0x58>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	4619      	mov	r1, r3
 800e266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e26a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e272:	4618      	mov	r0, r3
 800e274:	f000 f967 	bl	800e546 <HAL_SYSTICK_Config>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e27e:	2301      	movs	r3, #1
 800e280:	e00e      	b.n	800e2a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b0f      	cmp	r3, #15
 800e286:	d80a      	bhi.n	800e29e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e288:	2200      	movs	r2, #0
 800e28a:	6879      	ldr	r1, [r7, #4]
 800e28c:	f04f 30ff 	mov.w	r0, #4294967295
 800e290:	f000 f92f 	bl	800e4f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e294:	4a06      	ldr	r2, [pc, #24]	@ (800e2b0 <HAL_InitTick+0x5c>)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	e000      	b.n	800e2a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e29e:	2301      	movs	r3, #1
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	20000008 	.word	0x20000008
 800e2ac:	20000010 	.word	0x20000010
 800e2b0:	2000000c 	.word	0x2000000c

0800e2b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e2b8:	4b06      	ldr	r3, [pc, #24]	@ (800e2d4 <HAL_IncTick+0x20>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	461a      	mov	r2, r3
 800e2be:	4b06      	ldr	r3, [pc, #24]	@ (800e2d8 <HAL_IncTick+0x24>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	4a04      	ldr	r2, [pc, #16]	@ (800e2d8 <HAL_IncTick+0x24>)
 800e2c6:	6013      	str	r3, [r2, #0]
}
 800e2c8:	bf00      	nop
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	20000010 	.word	0x20000010
 800e2d8:	20000564 	.word	0x20000564

0800e2dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	af00      	add	r7, sp, #0
  return uwTick;
 800e2e0:	4b03      	ldr	r3, [pc, #12]	@ (800e2f0 <HAL_GetTick+0x14>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	20000564 	.word	0x20000564

0800e2f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e2fc:	f7ff ffee 	bl	800e2dc <HAL_GetTick>
 800e300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30c:	d005      	beq.n	800e31a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e30e:	4b0a      	ldr	r3, [pc, #40]	@ (800e338 <HAL_Delay+0x44>)
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	461a      	mov	r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	4413      	add	r3, r2
 800e318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e31a:	bf00      	nop
 800e31c:	f7ff ffde 	bl	800e2dc <HAL_GetTick>
 800e320:	4602      	mov	r2, r0
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	68fa      	ldr	r2, [r7, #12]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d8f7      	bhi.n	800e31c <HAL_Delay+0x28>
  {
  }
}
 800e32c:	bf00      	nop
 800e32e:	bf00      	nop
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	20000010 	.word	0x20000010

0800e33c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b085      	sub	sp, #20
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f003 0307 	and.w	r3, r3, #7
 800e34a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e34c:	4b0c      	ldr	r3, [pc, #48]	@ (800e380 <__NVIC_SetPriorityGrouping+0x44>)
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800e358:	4013      	ands	r3, r2
 800e35a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800e368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e36c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e36e:	4a04      	ldr	r2, [pc, #16]	@ (800e380 <__NVIC_SetPriorityGrouping+0x44>)
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	60d3      	str	r3, [r2, #12]
}
 800e374:	bf00      	nop
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr
 800e380:	e000ed00 	.word	0xe000ed00

0800e384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e388:	4b04      	ldr	r3, [pc, #16]	@ (800e39c <__NVIC_GetPriorityGrouping+0x18>)
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	0a1b      	lsrs	r3, r3, #8
 800e38e:	f003 0307 	and.w	r3, r3, #7
}
 800e392:	4618      	mov	r0, r3
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	e000ed00 	.word	0xe000ed00

0800e3a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e3aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	db0b      	blt.n	800e3ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e3b2:	79fb      	ldrb	r3, [r7, #7]
 800e3b4:	f003 021f 	and.w	r2, r3, #31
 800e3b8:	4907      	ldr	r1, [pc, #28]	@ (800e3d8 <__NVIC_EnableIRQ+0x38>)
 800e3ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3be:	095b      	lsrs	r3, r3, #5
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	fa00 f202 	lsl.w	r2, r0, r2
 800e3c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e3ca:	bf00      	nop
 800e3cc:	370c      	adds	r7, #12
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	e000e100 	.word	0xe000e100

0800e3dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	6039      	str	r1, [r7, #0]
 800e3e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e3e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	db0a      	blt.n	800e406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	490c      	ldr	r1, [pc, #48]	@ (800e428 <__NVIC_SetPriority+0x4c>)
 800e3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3fa:	0112      	lsls	r2, r2, #4
 800e3fc:	b2d2      	uxtb	r2, r2
 800e3fe:	440b      	add	r3, r1
 800e400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e404:	e00a      	b.n	800e41c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	b2da      	uxtb	r2, r3
 800e40a:	4908      	ldr	r1, [pc, #32]	@ (800e42c <__NVIC_SetPriority+0x50>)
 800e40c:	79fb      	ldrb	r3, [r7, #7]
 800e40e:	f003 030f 	and.w	r3, r3, #15
 800e412:	3b04      	subs	r3, #4
 800e414:	0112      	lsls	r2, r2, #4
 800e416:	b2d2      	uxtb	r2, r2
 800e418:	440b      	add	r3, r1
 800e41a:	761a      	strb	r2, [r3, #24]
}
 800e41c:	bf00      	nop
 800e41e:	370c      	adds	r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr
 800e428:	e000e100 	.word	0xe000e100
 800e42c:	e000ed00 	.word	0xe000ed00

0800e430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e430:	b480      	push	{r7}
 800e432:	b089      	sub	sp, #36	@ 0x24
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f003 0307 	and.w	r3, r3, #7
 800e442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	f1c3 0307 	rsb	r3, r3, #7
 800e44a:	2b04      	cmp	r3, #4
 800e44c:	bf28      	it	cs
 800e44e:	2304      	movcs	r3, #4
 800e450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	3304      	adds	r3, #4
 800e456:	2b06      	cmp	r3, #6
 800e458:	d902      	bls.n	800e460 <NVIC_EncodePriority+0x30>
 800e45a:	69fb      	ldr	r3, [r7, #28]
 800e45c:	3b03      	subs	r3, #3
 800e45e:	e000      	b.n	800e462 <NVIC_EncodePriority+0x32>
 800e460:	2300      	movs	r3, #0
 800e462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e464:	f04f 32ff 	mov.w	r2, #4294967295
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	fa02 f303 	lsl.w	r3, r2, r3
 800e46e:	43da      	mvns	r2, r3
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	401a      	ands	r2, r3
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e478:	f04f 31ff 	mov.w	r1, #4294967295
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	fa01 f303 	lsl.w	r3, r1, r3
 800e482:	43d9      	mvns	r1, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e488:	4313      	orrs	r3, r2
         );
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3724      	adds	r7, #36	@ 0x24
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
	...

0800e498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e4a8:	d301      	bcc.n	800e4ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e00f      	b.n	800e4ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e4ae:	4a0a      	ldr	r2, [pc, #40]	@ (800e4d8 <SysTick_Config+0x40>)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e4b6:	210f      	movs	r1, #15
 800e4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4bc:	f7ff ff8e 	bl	800e3dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e4c0:	4b05      	ldr	r3, [pc, #20]	@ (800e4d8 <SysTick_Config+0x40>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e4c6:	4b04      	ldr	r3, [pc, #16]	@ (800e4d8 <SysTick_Config+0x40>)
 800e4c8:	2207      	movs	r2, #7
 800e4ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3708      	adds	r7, #8
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	e000e010 	.word	0xe000e010

0800e4dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff ff29 	bl	800e33c <__NVIC_SetPriorityGrouping>
}
 800e4ea:	bf00      	nop
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b086      	sub	sp, #24
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	60b9      	str	r1, [r7, #8]
 800e4fc:	607a      	str	r2, [r7, #4]
 800e4fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e500:	2300      	movs	r3, #0
 800e502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e504:	f7ff ff3e 	bl	800e384 <__NVIC_GetPriorityGrouping>
 800e508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	6978      	ldr	r0, [r7, #20]
 800e510:	f7ff ff8e 	bl	800e430 <NVIC_EncodePriority>
 800e514:	4602      	mov	r2, r0
 800e516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e51a:	4611      	mov	r1, r2
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7ff ff5d 	bl	800e3dc <__NVIC_SetPriority>
}
 800e522:	bf00      	nop
 800e524:	3718      	adds	r7, #24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b082      	sub	sp, #8
 800e52e:	af00      	add	r7, sp, #0
 800e530:	4603      	mov	r3, r0
 800e532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e538:	4618      	mov	r0, r3
 800e53a:	f7ff ff31 	bl	800e3a0 <__NVIC_EnableIRQ>
}
 800e53e:	bf00      	nop
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b082      	sub	sp, #8
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7ff ffa2 	bl	800e498 <SysTick_Config>
 800e554:	4603      	mov	r3, r0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b084      	sub	sp, #16
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e56a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e56c:	f7ff feb6 	bl	800e2dc <HAL_GetTick>
 800e570:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d008      	beq.n	800e590 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2280      	movs	r2, #128	@ 0x80
 800e582:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	e052      	b.n	800e636 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f022 0216 	bic.w	r2, r2, #22
 800e59e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	695a      	ldr	r2, [r3, #20]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e5ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d103      	bne.n	800e5c0 <HAL_DMA_Abort+0x62>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d007      	beq.n	800e5d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f022 0208 	bic.w	r2, r2, #8
 800e5ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f022 0201 	bic.w	r2, r2, #1
 800e5de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e5e0:	e013      	b.n	800e60a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e5e2:	f7ff fe7b 	bl	800e2dc <HAL_GetTick>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	2b05      	cmp	r3, #5
 800e5ee:	d90c      	bls.n	800e60a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2220      	movs	r2, #32
 800e5f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2203      	movs	r2, #3
 800e5fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800e606:	2303      	movs	r3, #3
 800e608:	e015      	b.n	800e636 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1e4      	bne.n	800e5e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e61c:	223f      	movs	r2, #63	@ 0x3f
 800e61e:	409a      	lsls	r2, r3
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2201      	movs	r2, #1
 800e628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e63e:	b480      	push	{r7}
 800e640:	b083      	sub	sp, #12
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	2b02      	cmp	r3, #2
 800e650:	d004      	beq.n	800e65c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2280      	movs	r2, #128	@ 0x80
 800e656:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800e658:	2301      	movs	r3, #1
 800e65a:	e00c      	b.n	800e676 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2205      	movs	r2, #5
 800e660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f022 0201 	bic.w	r2, r2, #1
 800e672:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	370c      	adds	r7, #12
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
	...

0800e684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e684:	b480      	push	{r7}
 800e686:	b089      	sub	sp, #36	@ 0x24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e68e:	2300      	movs	r3, #0
 800e690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e692:	2300      	movs	r3, #0
 800e694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e696:	2300      	movs	r3, #0
 800e698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e69a:	2300      	movs	r3, #0
 800e69c:	61fb      	str	r3, [r7, #28]
 800e69e:	e165      	b.n	800e96c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	4013      	ands	r3, r2
 800e6b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e6b4:	693a      	ldr	r2, [r7, #16]
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	f040 8154 	bne.w	800e966 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	f003 0303 	and.w	r3, r3, #3
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d005      	beq.n	800e6d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d130      	bne.n	800e738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	2203      	movs	r2, #3
 800e6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e6:	43db      	mvns	r3, r3
 800e6e8:	69ba      	ldr	r2, [r7, #24]
 800e6ea:	4013      	ands	r3, r2
 800e6ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	68da      	ldr	r2, [r3, #12]
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	005b      	lsls	r3, r3, #1
 800e6f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6fa:	69ba      	ldr	r2, [r7, #24]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	69ba      	ldr	r2, [r7, #24]
 800e704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e70c:	2201      	movs	r2, #1
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	fa02 f303 	lsl.w	r3, r2, r3
 800e714:	43db      	mvns	r3, r3
 800e716:	69ba      	ldr	r2, [r7, #24]
 800e718:	4013      	ands	r3, r2
 800e71a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	091b      	lsrs	r3, r3, #4
 800e722:	f003 0201 	and.w	r2, r3, #1
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	fa02 f303 	lsl.w	r3, r2, r3
 800e72c:	69ba      	ldr	r2, [r7, #24]
 800e72e:	4313      	orrs	r3, r2
 800e730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	69ba      	ldr	r2, [r7, #24]
 800e736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	f003 0303 	and.w	r3, r3, #3
 800e740:	2b03      	cmp	r3, #3
 800e742:	d017      	beq.n	800e774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	2203      	movs	r2, #3
 800e750:	fa02 f303 	lsl.w	r3, r2, r3
 800e754:	43db      	mvns	r3, r3
 800e756:	69ba      	ldr	r2, [r7, #24]
 800e758:	4013      	ands	r3, r2
 800e75a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	689a      	ldr	r2, [r3, #8]
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	fa02 f303 	lsl.w	r3, r2, r3
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	4313      	orrs	r3, r2
 800e76c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	69ba      	ldr	r2, [r7, #24]
 800e772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	f003 0303 	and.w	r3, r3, #3
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d123      	bne.n	800e7c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	08da      	lsrs	r2, r3, #3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3208      	adds	r2, #8
 800e788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e78c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	f003 0307 	and.w	r3, r3, #7
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	220f      	movs	r2, #15
 800e798:	fa02 f303 	lsl.w	r3, r2, r3
 800e79c:	43db      	mvns	r3, r3
 800e79e:	69ba      	ldr	r2, [r7, #24]
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	691a      	ldr	r2, [r3, #16]
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	f003 0307 	and.w	r3, r3, #7
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b4:	69ba      	ldr	r2, [r7, #24]
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	08da      	lsrs	r2, r3, #3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	3208      	adds	r2, #8
 800e7c2:	69b9      	ldr	r1, [r7, #24]
 800e7c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	2203      	movs	r2, #3
 800e7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e7d8:	43db      	mvns	r3, r3
 800e7da:	69ba      	ldr	r2, [r7, #24]
 800e7dc:	4013      	ands	r3, r2
 800e7de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	f003 0203 	and.w	r2, r3, #3
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	005b      	lsls	r3, r3, #1
 800e7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e7f0:	69ba      	ldr	r2, [r7, #24]
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	69ba      	ldr	r2, [r7, #24]
 800e7fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 80ae 	beq.w	800e966 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e80a:	2300      	movs	r3, #0
 800e80c:	60fb      	str	r3, [r7, #12]
 800e80e:	4b5d      	ldr	r3, [pc, #372]	@ (800e984 <HAL_GPIO_Init+0x300>)
 800e810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e812:	4a5c      	ldr	r2, [pc, #368]	@ (800e984 <HAL_GPIO_Init+0x300>)
 800e814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e818:	6453      	str	r3, [r2, #68]	@ 0x44
 800e81a:	4b5a      	ldr	r3, [pc, #360]	@ (800e984 <HAL_GPIO_Init+0x300>)
 800e81c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e81e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e826:	4a58      	ldr	r2, [pc, #352]	@ (800e988 <HAL_GPIO_Init+0x304>)
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	089b      	lsrs	r3, r3, #2
 800e82c:	3302      	adds	r3, #2
 800e82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	f003 0303 	and.w	r3, r3, #3
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	220f      	movs	r2, #15
 800e83e:	fa02 f303 	lsl.w	r3, r2, r3
 800e842:	43db      	mvns	r3, r3
 800e844:	69ba      	ldr	r2, [r7, #24]
 800e846:	4013      	ands	r3, r2
 800e848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a4f      	ldr	r2, [pc, #316]	@ (800e98c <HAL_GPIO_Init+0x308>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d025      	beq.n	800e89e <HAL_GPIO_Init+0x21a>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a4e      	ldr	r2, [pc, #312]	@ (800e990 <HAL_GPIO_Init+0x30c>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d01f      	beq.n	800e89a <HAL_GPIO_Init+0x216>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a4d      	ldr	r2, [pc, #308]	@ (800e994 <HAL_GPIO_Init+0x310>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d019      	beq.n	800e896 <HAL_GPIO_Init+0x212>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4a4c      	ldr	r2, [pc, #304]	@ (800e998 <HAL_GPIO_Init+0x314>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d013      	beq.n	800e892 <HAL_GPIO_Init+0x20e>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4a4b      	ldr	r2, [pc, #300]	@ (800e99c <HAL_GPIO_Init+0x318>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d00d      	beq.n	800e88e <HAL_GPIO_Init+0x20a>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a4a      	ldr	r2, [pc, #296]	@ (800e9a0 <HAL_GPIO_Init+0x31c>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d007      	beq.n	800e88a <HAL_GPIO_Init+0x206>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a49      	ldr	r2, [pc, #292]	@ (800e9a4 <HAL_GPIO_Init+0x320>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d101      	bne.n	800e886 <HAL_GPIO_Init+0x202>
 800e882:	2306      	movs	r3, #6
 800e884:	e00c      	b.n	800e8a0 <HAL_GPIO_Init+0x21c>
 800e886:	2307      	movs	r3, #7
 800e888:	e00a      	b.n	800e8a0 <HAL_GPIO_Init+0x21c>
 800e88a:	2305      	movs	r3, #5
 800e88c:	e008      	b.n	800e8a0 <HAL_GPIO_Init+0x21c>
 800e88e:	2304      	movs	r3, #4
 800e890:	e006      	b.n	800e8a0 <HAL_GPIO_Init+0x21c>
 800e892:	2303      	movs	r3, #3
 800e894:	e004      	b.n	800e8a0 <HAL_GPIO_Init+0x21c>
 800e896:	2302      	movs	r3, #2
 800e898:	e002      	b.n	800e8a0 <HAL_GPIO_Init+0x21c>
 800e89a:	2301      	movs	r3, #1
 800e89c:	e000      	b.n	800e8a0 <HAL_GPIO_Init+0x21c>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	69fa      	ldr	r2, [r7, #28]
 800e8a2:	f002 0203 	and.w	r2, r2, #3
 800e8a6:	0092      	lsls	r2, r2, #2
 800e8a8:	4093      	lsls	r3, r2
 800e8aa:	69ba      	ldr	r2, [r7, #24]
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e8b0:	4935      	ldr	r1, [pc, #212]	@ (800e988 <HAL_GPIO_Init+0x304>)
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	089b      	lsrs	r3, r3, #2
 800e8b6:	3302      	adds	r3, #2
 800e8b8:	69ba      	ldr	r2, [r7, #24]
 800e8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e8be:	4b3a      	ldr	r3, [pc, #232]	@ (800e9a8 <HAL_GPIO_Init+0x324>)
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	43db      	mvns	r3, r3
 800e8c8:	69ba      	ldr	r2, [r7, #24]
 800e8ca:	4013      	ands	r3, r2
 800e8cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d003      	beq.n	800e8e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800e8da:	69ba      	ldr	r2, [r7, #24]
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e8e2:	4a31      	ldr	r2, [pc, #196]	@ (800e9a8 <HAL_GPIO_Init+0x324>)
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e8e8:	4b2f      	ldr	r3, [pc, #188]	@ (800e9a8 <HAL_GPIO_Init+0x324>)
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	43db      	mvns	r3, r3
 800e8f2:	69ba      	ldr	r2, [r7, #24]
 800e8f4:	4013      	ands	r3, r2
 800e8f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d003      	beq.n	800e90c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800e904:	69ba      	ldr	r2, [r7, #24]
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	4313      	orrs	r3, r2
 800e90a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e90c:	4a26      	ldr	r2, [pc, #152]	@ (800e9a8 <HAL_GPIO_Init+0x324>)
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e912:	4b25      	ldr	r3, [pc, #148]	@ (800e9a8 <HAL_GPIO_Init+0x324>)
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	43db      	mvns	r3, r3
 800e91c:	69ba      	ldr	r2, [r7, #24]
 800e91e:	4013      	ands	r3, r2
 800e920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d003      	beq.n	800e936 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800e92e:	69ba      	ldr	r2, [r7, #24]
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	4313      	orrs	r3, r2
 800e934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e936:	4a1c      	ldr	r2, [pc, #112]	@ (800e9a8 <HAL_GPIO_Init+0x324>)
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e93c:	4b1a      	ldr	r3, [pc, #104]	@ (800e9a8 <HAL_GPIO_Init+0x324>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	43db      	mvns	r3, r3
 800e946:	69ba      	ldr	r2, [r7, #24]
 800e948:	4013      	ands	r3, r2
 800e94a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800e958:	69ba      	ldr	r2, [r7, #24]
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	4313      	orrs	r3, r2
 800e95e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e960:	4a11      	ldr	r2, [pc, #68]	@ (800e9a8 <HAL_GPIO_Init+0x324>)
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	3301      	adds	r3, #1
 800e96a:	61fb      	str	r3, [r7, #28]
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	2b0f      	cmp	r3, #15
 800e970:	f67f ae96 	bls.w	800e6a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e974:	bf00      	nop
 800e976:	bf00      	nop
 800e978:	3724      	adds	r7, #36	@ 0x24
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	40023800 	.word	0x40023800
 800e988:	40013800 	.word	0x40013800
 800e98c:	40020000 	.word	0x40020000
 800e990:	40020400 	.word	0x40020400
 800e994:	40020800 	.word	0x40020800
 800e998:	40020c00 	.word	0x40020c00
 800e99c:	40021000 	.word	0x40021000
 800e9a0:	40021400 	.word	0x40021400
 800e9a4:	40021800 	.word	0x40021800
 800e9a8:	40013c00 	.word	0x40013c00

0800e9ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	807b      	strh	r3, [r7, #2]
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e9bc:	787b      	ldrb	r3, [r7, #1]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d003      	beq.n	800e9ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e9c2:	887a      	ldrh	r2, [r7, #2]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e9c8:	e003      	b.n	800e9d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e9ca:	887b      	ldrh	r3, [r7, #2]
 800e9cc:	041a      	lsls	r2, r3, #16
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	619a      	str	r2, [r3, #24]
}
 800e9d2:	bf00      	nop
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e9ea:	4b08      	ldr	r3, [pc, #32]	@ (800ea0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e9ec:	695a      	ldr	r2, [r3, #20]
 800e9ee:	88fb      	ldrh	r3, [r7, #6]
 800e9f0:	4013      	ands	r3, r2
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d006      	beq.n	800ea04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e9f6:	4a05      	ldr	r2, [pc, #20]	@ (800ea0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e9f8:	88fb      	ldrh	r3, [r7, #6]
 800e9fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e9fc:	88fb      	ldrh	r3, [r7, #6]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe ff2e 	bl	800d860 <HAL_GPIO_EXTI_Callback>
  }
}
 800ea04:	bf00      	nop
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	40013c00 	.word	0x40013c00

0800ea10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ea16:	2300      	movs	r3, #0
 800ea18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	603b      	str	r3, [r7, #0]
 800ea1e:	4b20      	ldr	r3, [pc, #128]	@ (800eaa0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ea20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea22:	4a1f      	ldr	r2, [pc, #124]	@ (800eaa0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ea24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea28:	6413      	str	r3, [r2, #64]	@ 0x40
 800ea2a:	4b1d      	ldr	r3, [pc, #116]	@ (800eaa0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ea2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ea36:	4b1b      	ldr	r3, [pc, #108]	@ (800eaa4 <HAL_PWREx_EnableOverDrive+0x94>)
 800ea38:	2201      	movs	r2, #1
 800ea3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ea3c:	f7ff fc4e 	bl	800e2dc <HAL_GetTick>
 800ea40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ea42:	e009      	b.n	800ea58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ea44:	f7ff fc4a 	bl	800e2dc <HAL_GetTick>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ea52:	d901      	bls.n	800ea58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ea54:	2303      	movs	r3, #3
 800ea56:	e01f      	b.n	800ea98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ea58:	4b13      	ldr	r3, [pc, #76]	@ (800eaa8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea64:	d1ee      	bne.n	800ea44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ea66:	4b11      	ldr	r3, [pc, #68]	@ (800eaac <HAL_PWREx_EnableOverDrive+0x9c>)
 800ea68:	2201      	movs	r2, #1
 800ea6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ea6c:	f7ff fc36 	bl	800e2dc <HAL_GetTick>
 800ea70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ea72:	e009      	b.n	800ea88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ea74:	f7ff fc32 	bl	800e2dc <HAL_GetTick>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ea82:	d901      	bls.n	800ea88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ea84:	2303      	movs	r3, #3
 800ea86:	e007      	b.n	800ea98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ea88:	4b07      	ldr	r3, [pc, #28]	@ (800eaa8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea94:	d1ee      	bne.n	800ea74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	40023800 	.word	0x40023800
 800eaa4:	420e0040 	.word	0x420e0040
 800eaa8:	40007000 	.word	0x40007000
 800eaac:	420e0044 	.word	0x420e0044

0800eab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	e0cc      	b.n	800ec5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eac4:	4b68      	ldr	r3, [pc, #416]	@ (800ec68 <HAL_RCC_ClockConfig+0x1b8>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f003 030f 	and.w	r3, r3, #15
 800eacc:	683a      	ldr	r2, [r7, #0]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d90c      	bls.n	800eaec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ead2:	4b65      	ldr	r3, [pc, #404]	@ (800ec68 <HAL_RCC_ClockConfig+0x1b8>)
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	b2d2      	uxtb	r2, r2
 800ead8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eada:	4b63      	ldr	r3, [pc, #396]	@ (800ec68 <HAL_RCC_ClockConfig+0x1b8>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 030f 	and.w	r3, r3, #15
 800eae2:	683a      	ldr	r2, [r7, #0]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d001      	beq.n	800eaec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eae8:	2301      	movs	r3, #1
 800eaea:	e0b8      	b.n	800ec5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f003 0302 	and.w	r3, r3, #2
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d020      	beq.n	800eb3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f003 0304 	and.w	r3, r3, #4
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d005      	beq.n	800eb10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eb04:	4b59      	ldr	r3, [pc, #356]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	4a58      	ldr	r2, [pc, #352]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800eb0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f003 0308 	and.w	r3, r3, #8
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d005      	beq.n	800eb28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eb1c:	4b53      	ldr	r3, [pc, #332]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	4a52      	ldr	r2, [pc, #328]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800eb26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eb28:	4b50      	ldr	r3, [pc, #320]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	494d      	ldr	r1, [pc, #308]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb36:	4313      	orrs	r3, r2
 800eb38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f003 0301 	and.w	r3, r3, #1
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d044      	beq.n	800ebd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d107      	bne.n	800eb5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb4e:	4b47      	ldr	r3, [pc, #284]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d119      	bne.n	800eb8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	e07f      	b.n	800ec5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d003      	beq.n	800eb6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eb6a:	2b03      	cmp	r3, #3
 800eb6c:	d107      	bne.n	800eb7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb6e:	4b3f      	ldr	r3, [pc, #252]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d109      	bne.n	800eb8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e06f      	b.n	800ec5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb7e:	4b3b      	ldr	r3, [pc, #236]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f003 0302 	and.w	r3, r3, #2
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e067      	b.n	800ec5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eb8e:	4b37      	ldr	r3, [pc, #220]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	f023 0203 	bic.w	r2, r3, #3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	4934      	ldr	r1, [pc, #208]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800eba0:	f7ff fb9c 	bl	800e2dc <HAL_GetTick>
 800eba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eba6:	e00a      	b.n	800ebbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eba8:	f7ff fb98 	bl	800e2dc <HAL_GetTick>
 800ebac:	4602      	mov	r2, r0
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d901      	bls.n	800ebbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ebba:	2303      	movs	r3, #3
 800ebbc:	e04f      	b.n	800ec5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ebbe:	4b2b      	ldr	r3, [pc, #172]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	f003 020c 	and.w	r2, r3, #12
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d1eb      	bne.n	800eba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ebd0:	4b25      	ldr	r3, [pc, #148]	@ (800ec68 <HAL_RCC_ClockConfig+0x1b8>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f003 030f 	and.w	r3, r3, #15
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d20c      	bcs.n	800ebf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ebde:	4b22      	ldr	r3, [pc, #136]	@ (800ec68 <HAL_RCC_ClockConfig+0x1b8>)
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	b2d2      	uxtb	r2, r2
 800ebe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ebe6:	4b20      	ldr	r3, [pc, #128]	@ (800ec68 <HAL_RCC_ClockConfig+0x1b8>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f003 030f 	and.w	r3, r3, #15
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d001      	beq.n	800ebf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	e032      	b.n	800ec5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f003 0304 	and.w	r3, r3, #4
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d008      	beq.n	800ec16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ec04:	4b19      	ldr	r3, [pc, #100]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800ec06:	689b      	ldr	r3, [r3, #8]
 800ec08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	4916      	ldr	r1, [pc, #88]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800ec12:	4313      	orrs	r3, r2
 800ec14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f003 0308 	and.w	r3, r3, #8
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d009      	beq.n	800ec36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ec22:	4b12      	ldr	r3, [pc, #72]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	00db      	lsls	r3, r3, #3
 800ec30:	490e      	ldr	r1, [pc, #56]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800ec32:	4313      	orrs	r3, r2
 800ec34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ec36:	f000 f855 	bl	800ece4 <HAL_RCC_GetSysClockFreq>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ec6c <HAL_RCC_ClockConfig+0x1bc>)
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	091b      	lsrs	r3, r3, #4
 800ec42:	f003 030f 	and.w	r3, r3, #15
 800ec46:	490a      	ldr	r1, [pc, #40]	@ (800ec70 <HAL_RCC_ClockConfig+0x1c0>)
 800ec48:	5ccb      	ldrb	r3, [r1, r3]
 800ec4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ec4e:	4a09      	ldr	r2, [pc, #36]	@ (800ec74 <HAL_RCC_ClockConfig+0x1c4>)
 800ec50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ec52:	4b09      	ldr	r3, [pc, #36]	@ (800ec78 <HAL_RCC_ClockConfig+0x1c8>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff fafc 	bl	800e254 <HAL_InitTick>

  return HAL_OK;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	40023c00 	.word	0x40023c00
 800ec6c:	40023800 	.word	0x40023800
 800ec70:	08018340 	.word	0x08018340
 800ec74:	20000008 	.word	0x20000008
 800ec78:	2000000c 	.word	0x2000000c

0800ec7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ec80:	4b03      	ldr	r3, [pc, #12]	@ (800ec90 <HAL_RCC_GetHCLKFreq+0x14>)
 800ec82:	681b      	ldr	r3, [r3, #0]
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	20000008 	.word	0x20000008

0800ec94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ec98:	f7ff fff0 	bl	800ec7c <HAL_RCC_GetHCLKFreq>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	4b05      	ldr	r3, [pc, #20]	@ (800ecb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	0a9b      	lsrs	r3, r3, #10
 800eca4:	f003 0307 	and.w	r3, r3, #7
 800eca8:	4903      	ldr	r1, [pc, #12]	@ (800ecb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ecaa:	5ccb      	ldrb	r3, [r1, r3]
 800ecac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	40023800 	.word	0x40023800
 800ecb8:	08018350 	.word	0x08018350

0800ecbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ecc0:	f7ff ffdc 	bl	800ec7c <HAL_RCC_GetHCLKFreq>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	4b05      	ldr	r3, [pc, #20]	@ (800ecdc <HAL_RCC_GetPCLK2Freq+0x20>)
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	0b5b      	lsrs	r3, r3, #13
 800eccc:	f003 0307 	and.w	r3, r3, #7
 800ecd0:	4903      	ldr	r1, [pc, #12]	@ (800ece0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ecd2:	5ccb      	ldrb	r3, [r1, r3]
 800ecd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	40023800 	.word	0x40023800
 800ece0:	08018350 	.word	0x08018350

0800ece4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ece4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ece8:	b0ae      	sub	sp, #184	@ 0xb8
 800ecea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ecec:	2300      	movs	r3, #0
 800ecee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800ed04:	2300      	movs	r3, #0
 800ed06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed0a:	4bcb      	ldr	r3, [pc, #812]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	f003 030c 	and.w	r3, r3, #12
 800ed12:	2b0c      	cmp	r3, #12
 800ed14:	f200 8206 	bhi.w	800f124 <HAL_RCC_GetSysClockFreq+0x440>
 800ed18:	a201      	add	r2, pc, #4	@ (adr r2, 800ed20 <HAL_RCC_GetSysClockFreq+0x3c>)
 800ed1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1e:	bf00      	nop
 800ed20:	0800ed55 	.word	0x0800ed55
 800ed24:	0800f125 	.word	0x0800f125
 800ed28:	0800f125 	.word	0x0800f125
 800ed2c:	0800f125 	.word	0x0800f125
 800ed30:	0800ed5d 	.word	0x0800ed5d
 800ed34:	0800f125 	.word	0x0800f125
 800ed38:	0800f125 	.word	0x0800f125
 800ed3c:	0800f125 	.word	0x0800f125
 800ed40:	0800ed65 	.word	0x0800ed65
 800ed44:	0800f125 	.word	0x0800f125
 800ed48:	0800f125 	.word	0x0800f125
 800ed4c:	0800f125 	.word	0x0800f125
 800ed50:	0800ef55 	.word	0x0800ef55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ed54:	4bb9      	ldr	r3, [pc, #740]	@ (800f03c <HAL_RCC_GetSysClockFreq+0x358>)
 800ed56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800ed5a:	e1e7      	b.n	800f12c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ed5c:	4bb8      	ldr	r3, [pc, #736]	@ (800f040 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ed5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ed62:	e1e3      	b.n	800f12c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ed64:	4bb4      	ldr	r3, [pc, #720]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ed70:	4bb1      	ldr	r3, [pc, #708]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d071      	beq.n	800ee60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed7c:	4bae      	ldr	r3, [pc, #696]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	099b      	lsrs	r3, r3, #6
 800ed82:	2200      	movs	r2, #0
 800ed84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ed88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800ed8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ed9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800eda2:	4622      	mov	r2, r4
 800eda4:	462b      	mov	r3, r5
 800eda6:	f04f 0000 	mov.w	r0, #0
 800edaa:	f04f 0100 	mov.w	r1, #0
 800edae:	0159      	lsls	r1, r3, #5
 800edb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800edb4:	0150      	lsls	r0, r2, #5
 800edb6:	4602      	mov	r2, r0
 800edb8:	460b      	mov	r3, r1
 800edba:	4621      	mov	r1, r4
 800edbc:	1a51      	subs	r1, r2, r1
 800edbe:	6439      	str	r1, [r7, #64]	@ 0x40
 800edc0:	4629      	mov	r1, r5
 800edc2:	eb63 0301 	sbc.w	r3, r3, r1
 800edc6:	647b      	str	r3, [r7, #68]	@ 0x44
 800edc8:	f04f 0200 	mov.w	r2, #0
 800edcc:	f04f 0300 	mov.w	r3, #0
 800edd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800edd4:	4649      	mov	r1, r9
 800edd6:	018b      	lsls	r3, r1, #6
 800edd8:	4641      	mov	r1, r8
 800edda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800edde:	4641      	mov	r1, r8
 800ede0:	018a      	lsls	r2, r1, #6
 800ede2:	4641      	mov	r1, r8
 800ede4:	1a51      	subs	r1, r2, r1
 800ede6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ede8:	4649      	mov	r1, r9
 800edea:	eb63 0301 	sbc.w	r3, r3, r1
 800edee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edf0:	f04f 0200 	mov.w	r2, #0
 800edf4:	f04f 0300 	mov.w	r3, #0
 800edf8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800edfc:	4649      	mov	r1, r9
 800edfe:	00cb      	lsls	r3, r1, #3
 800ee00:	4641      	mov	r1, r8
 800ee02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ee06:	4641      	mov	r1, r8
 800ee08:	00ca      	lsls	r2, r1, #3
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	4603      	mov	r3, r0
 800ee10:	4622      	mov	r2, r4
 800ee12:	189b      	adds	r3, r3, r2
 800ee14:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee16:	462b      	mov	r3, r5
 800ee18:	460a      	mov	r2, r1
 800ee1a:	eb42 0303 	adc.w	r3, r2, r3
 800ee1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee20:	f04f 0200 	mov.w	r2, #0
 800ee24:	f04f 0300 	mov.w	r3, #0
 800ee28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	024b      	lsls	r3, r1, #9
 800ee30:	4621      	mov	r1, r4
 800ee32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ee36:	4621      	mov	r1, r4
 800ee38:	024a      	lsls	r2, r1, #9
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee42:	2200      	movs	r2, #0
 800ee44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ee48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ee4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ee50:	f7f1 ff4a 	bl	8000ce8 <__aeabi_uldivmod>
 800ee54:	4602      	mov	r2, r0
 800ee56:	460b      	mov	r3, r1
 800ee58:	4613      	mov	r3, r2
 800ee5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ee5e:	e067      	b.n	800ef30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee60:	4b75      	ldr	r3, [pc, #468]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	099b      	lsrs	r3, r3, #6
 800ee66:	2200      	movs	r2, #0
 800ee68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ee6c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ee70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ee74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee78:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ee7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800ee82:	4622      	mov	r2, r4
 800ee84:	462b      	mov	r3, r5
 800ee86:	f04f 0000 	mov.w	r0, #0
 800ee8a:	f04f 0100 	mov.w	r1, #0
 800ee8e:	0159      	lsls	r1, r3, #5
 800ee90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ee94:	0150      	lsls	r0, r2, #5
 800ee96:	4602      	mov	r2, r0
 800ee98:	460b      	mov	r3, r1
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	1a51      	subs	r1, r2, r1
 800ee9e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800eea0:	4629      	mov	r1, r5
 800eea2:	eb63 0301 	sbc.w	r3, r3, r1
 800eea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eea8:	f04f 0200 	mov.w	r2, #0
 800eeac:	f04f 0300 	mov.w	r3, #0
 800eeb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	018b      	lsls	r3, r1, #6
 800eeb8:	4641      	mov	r1, r8
 800eeba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800eebe:	4641      	mov	r1, r8
 800eec0:	018a      	lsls	r2, r1, #6
 800eec2:	4641      	mov	r1, r8
 800eec4:	ebb2 0a01 	subs.w	sl, r2, r1
 800eec8:	4649      	mov	r1, r9
 800eeca:	eb63 0b01 	sbc.w	fp, r3, r1
 800eece:	f04f 0200 	mov.w	r2, #0
 800eed2:	f04f 0300 	mov.w	r3, #0
 800eed6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800eeda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800eede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eee2:	4692      	mov	sl, r2
 800eee4:	469b      	mov	fp, r3
 800eee6:	4623      	mov	r3, r4
 800eee8:	eb1a 0303 	adds.w	r3, sl, r3
 800eeec:	623b      	str	r3, [r7, #32]
 800eeee:	462b      	mov	r3, r5
 800eef0:	eb4b 0303 	adc.w	r3, fp, r3
 800eef4:	627b      	str	r3, [r7, #36]	@ 0x24
 800eef6:	f04f 0200 	mov.w	r2, #0
 800eefa:	f04f 0300 	mov.w	r3, #0
 800eefe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800ef02:	4629      	mov	r1, r5
 800ef04:	028b      	lsls	r3, r1, #10
 800ef06:	4621      	mov	r1, r4
 800ef08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	028a      	lsls	r2, r1, #10
 800ef10:	4610      	mov	r0, r2
 800ef12:	4619      	mov	r1, r3
 800ef14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef18:	2200      	movs	r2, #0
 800ef1a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ef1c:	677a      	str	r2, [r7, #116]	@ 0x74
 800ef1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800ef22:	f7f1 fee1 	bl	8000ce8 <__aeabi_uldivmod>
 800ef26:	4602      	mov	r2, r0
 800ef28:	460b      	mov	r3, r1
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ef30:	4b41      	ldr	r3, [pc, #260]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	0c1b      	lsrs	r3, r3, #16
 800ef36:	f003 0303 	and.w	r3, r3, #3
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	005b      	lsls	r3, r3, #1
 800ef3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800ef42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ef4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ef52:	e0eb      	b.n	800f12c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ef54:	4b38      	ldr	r3, [pc, #224]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ef5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ef60:	4b35      	ldr	r3, [pc, #212]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d06b      	beq.n	800f044 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ef6c:	4b32      	ldr	r3, [pc, #200]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x354>)
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	099b      	lsrs	r3, r3, #6
 800ef72:	2200      	movs	r2, #0
 800ef74:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ef76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ef78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef7e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef80:	2300      	movs	r3, #0
 800ef82:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800ef88:	4622      	mov	r2, r4
 800ef8a:	462b      	mov	r3, r5
 800ef8c:	f04f 0000 	mov.w	r0, #0
 800ef90:	f04f 0100 	mov.w	r1, #0
 800ef94:	0159      	lsls	r1, r3, #5
 800ef96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ef9a:	0150      	lsls	r0, r2, #5
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	4621      	mov	r1, r4
 800efa2:	1a51      	subs	r1, r2, r1
 800efa4:	61b9      	str	r1, [r7, #24]
 800efa6:	4629      	mov	r1, r5
 800efa8:	eb63 0301 	sbc.w	r3, r3, r1
 800efac:	61fb      	str	r3, [r7, #28]
 800efae:	f04f 0200 	mov.w	r2, #0
 800efb2:	f04f 0300 	mov.w	r3, #0
 800efb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800efba:	4659      	mov	r1, fp
 800efbc:	018b      	lsls	r3, r1, #6
 800efbe:	4651      	mov	r1, sl
 800efc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800efc4:	4651      	mov	r1, sl
 800efc6:	018a      	lsls	r2, r1, #6
 800efc8:	4651      	mov	r1, sl
 800efca:	ebb2 0801 	subs.w	r8, r2, r1
 800efce:	4659      	mov	r1, fp
 800efd0:	eb63 0901 	sbc.w	r9, r3, r1
 800efd4:	f04f 0200 	mov.w	r2, #0
 800efd8:	f04f 0300 	mov.w	r3, #0
 800efdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800efe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800efe4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800efe8:	4690      	mov	r8, r2
 800efea:	4699      	mov	r9, r3
 800efec:	4623      	mov	r3, r4
 800efee:	eb18 0303 	adds.w	r3, r8, r3
 800eff2:	613b      	str	r3, [r7, #16]
 800eff4:	462b      	mov	r3, r5
 800eff6:	eb49 0303 	adc.w	r3, r9, r3
 800effa:	617b      	str	r3, [r7, #20]
 800effc:	f04f 0200 	mov.w	r2, #0
 800f000:	f04f 0300 	mov.w	r3, #0
 800f004:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800f008:	4629      	mov	r1, r5
 800f00a:	024b      	lsls	r3, r1, #9
 800f00c:	4621      	mov	r1, r4
 800f00e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f012:	4621      	mov	r1, r4
 800f014:	024a      	lsls	r2, r1, #9
 800f016:	4610      	mov	r0, r2
 800f018:	4619      	mov	r1, r3
 800f01a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f01e:	2200      	movs	r2, #0
 800f020:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f022:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800f024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f028:	f7f1 fe5e 	bl	8000ce8 <__aeabi_uldivmod>
 800f02c:	4602      	mov	r2, r0
 800f02e:	460b      	mov	r3, r1
 800f030:	4613      	mov	r3, r2
 800f032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f036:	e065      	b.n	800f104 <HAL_RCC_GetSysClockFreq+0x420>
 800f038:	40023800 	.word	0x40023800
 800f03c:	00f42400 	.word	0x00f42400
 800f040:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f044:	4b3d      	ldr	r3, [pc, #244]	@ (800f13c <HAL_RCC_GetSysClockFreq+0x458>)
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	099b      	lsrs	r3, r3, #6
 800f04a:	2200      	movs	r2, #0
 800f04c:	4618      	mov	r0, r3
 800f04e:	4611      	mov	r1, r2
 800f050:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f054:	653b      	str	r3, [r7, #80]	@ 0x50
 800f056:	2300      	movs	r3, #0
 800f058:	657b      	str	r3, [r7, #84]	@ 0x54
 800f05a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800f05e:	4642      	mov	r2, r8
 800f060:	464b      	mov	r3, r9
 800f062:	f04f 0000 	mov.w	r0, #0
 800f066:	f04f 0100 	mov.w	r1, #0
 800f06a:	0159      	lsls	r1, r3, #5
 800f06c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f070:	0150      	lsls	r0, r2, #5
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	4641      	mov	r1, r8
 800f078:	1a51      	subs	r1, r2, r1
 800f07a:	60b9      	str	r1, [r7, #8]
 800f07c:	4649      	mov	r1, r9
 800f07e:	eb63 0301 	sbc.w	r3, r3, r1
 800f082:	60fb      	str	r3, [r7, #12]
 800f084:	f04f 0200 	mov.w	r2, #0
 800f088:	f04f 0300 	mov.w	r3, #0
 800f08c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800f090:	4659      	mov	r1, fp
 800f092:	018b      	lsls	r3, r1, #6
 800f094:	4651      	mov	r1, sl
 800f096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f09a:	4651      	mov	r1, sl
 800f09c:	018a      	lsls	r2, r1, #6
 800f09e:	4651      	mov	r1, sl
 800f0a0:	1a54      	subs	r4, r2, r1
 800f0a2:	4659      	mov	r1, fp
 800f0a4:	eb63 0501 	sbc.w	r5, r3, r1
 800f0a8:	f04f 0200 	mov.w	r2, #0
 800f0ac:	f04f 0300 	mov.w	r3, #0
 800f0b0:	00eb      	lsls	r3, r5, #3
 800f0b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f0b6:	00e2      	lsls	r2, r4, #3
 800f0b8:	4614      	mov	r4, r2
 800f0ba:	461d      	mov	r5, r3
 800f0bc:	4643      	mov	r3, r8
 800f0be:	18e3      	adds	r3, r4, r3
 800f0c0:	603b      	str	r3, [r7, #0]
 800f0c2:	464b      	mov	r3, r9
 800f0c4:	eb45 0303 	adc.w	r3, r5, r3
 800f0c8:	607b      	str	r3, [r7, #4]
 800f0ca:	f04f 0200 	mov.w	r2, #0
 800f0ce:	f04f 0300 	mov.w	r3, #0
 800f0d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	028b      	lsls	r3, r1, #10
 800f0da:	4621      	mov	r1, r4
 800f0dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	028a      	lsls	r2, r1, #10
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f0f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f0f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800f0f6:	f7f1 fdf7 	bl	8000ce8 <__aeabi_uldivmod>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	4613      	mov	r3, r2
 800f100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800f104:	4b0d      	ldr	r3, [pc, #52]	@ (800f13c <HAL_RCC_GetSysClockFreq+0x458>)
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	0f1b      	lsrs	r3, r3, #28
 800f10a:	f003 0307 	and.w	r3, r3, #7
 800f10e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800f112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f11e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800f122:	e003      	b.n	800f12c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f124:	4b06      	ldr	r3, [pc, #24]	@ (800f140 <HAL_RCC_GetSysClockFreq+0x45c>)
 800f126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800f12a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f12c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800f130:	4618      	mov	r0, r3
 800f132:	37b8      	adds	r7, #184	@ 0xb8
 800f134:	46bd      	mov	sp, r7
 800f136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f13a:	bf00      	nop
 800f13c:	40023800 	.word	0x40023800
 800f140:	00f42400 	.word	0x00f42400

0800f144 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f152:	2301      	movs	r3, #1
 800f154:	e28d      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f003 0301 	and.w	r3, r3, #1
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f000 8083 	beq.w	800f26a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800f164:	4b94      	ldr	r3, [pc, #592]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	f003 030c 	and.w	r3, r3, #12
 800f16c:	2b04      	cmp	r3, #4
 800f16e:	d019      	beq.n	800f1a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f170:	4b91      	ldr	r3, [pc, #580]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f172:	689b      	ldr	r3, [r3, #8]
 800f174:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800f178:	2b08      	cmp	r3, #8
 800f17a:	d106      	bne.n	800f18a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f17c:	4b8e      	ldr	r3, [pc, #568]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f188:	d00c      	beq.n	800f1a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f18a:	4b8b      	ldr	r3, [pc, #556]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f192:	2b0c      	cmp	r3, #12
 800f194:	d112      	bne.n	800f1bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f196:	4b88      	ldr	r3, [pc, #544]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f19e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f1a2:	d10b      	bne.n	800f1bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f1a4:	4b84      	ldr	r3, [pc, #528]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d05b      	beq.n	800f268 <HAL_RCC_OscConfig+0x124>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d157      	bne.n	800f268 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e25a      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1c4:	d106      	bne.n	800f1d4 <HAL_RCC_OscConfig+0x90>
 800f1c6:	4b7c      	ldr	r3, [pc, #496]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a7b      	ldr	r2, [pc, #492]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	e01d      	b.n	800f210 <HAL_RCC_OscConfig+0xcc>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f1dc:	d10c      	bne.n	800f1f8 <HAL_RCC_OscConfig+0xb4>
 800f1de:	4b76      	ldr	r3, [pc, #472]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4a75      	ldr	r2, [pc, #468]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f1e8:	6013      	str	r3, [r2, #0]
 800f1ea:	4b73      	ldr	r3, [pc, #460]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4a72      	ldr	r2, [pc, #456]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f1f4:	6013      	str	r3, [r2, #0]
 800f1f6:	e00b      	b.n	800f210 <HAL_RCC_OscConfig+0xcc>
 800f1f8:	4b6f      	ldr	r3, [pc, #444]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4a6e      	ldr	r2, [pc, #440]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f1fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f202:	6013      	str	r3, [r2, #0]
 800f204:	4b6c      	ldr	r3, [pc, #432]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a6b      	ldr	r2, [pc, #428]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f20a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f20e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d013      	beq.n	800f240 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f218:	f7ff f860 	bl	800e2dc <HAL_GetTick>
 800f21c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f21e:	e008      	b.n	800f232 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f220:	f7ff f85c 	bl	800e2dc <HAL_GetTick>
 800f224:	4602      	mov	r2, r0
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	2b64      	cmp	r3, #100	@ 0x64
 800f22c:	d901      	bls.n	800f232 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800f22e:	2303      	movs	r3, #3
 800f230:	e21f      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f232:	4b61      	ldr	r3, [pc, #388]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0f0      	beq.n	800f220 <HAL_RCC_OscConfig+0xdc>
 800f23e:	e014      	b.n	800f26a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f240:	f7ff f84c 	bl	800e2dc <HAL_GetTick>
 800f244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f246:	e008      	b.n	800f25a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f248:	f7ff f848 	bl	800e2dc <HAL_GetTick>
 800f24c:	4602      	mov	r2, r0
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	2b64      	cmp	r3, #100	@ 0x64
 800f254:	d901      	bls.n	800f25a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800f256:	2303      	movs	r3, #3
 800f258:	e20b      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f25a:	4b57      	ldr	r3, [pc, #348]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1f0      	bne.n	800f248 <HAL_RCC_OscConfig+0x104>
 800f266:	e000      	b.n	800f26a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f003 0302 	and.w	r3, r3, #2
 800f272:	2b00      	cmp	r3, #0
 800f274:	d06f      	beq.n	800f356 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800f276:	4b50      	ldr	r3, [pc, #320]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	f003 030c 	and.w	r3, r3, #12
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d017      	beq.n	800f2b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f282:	4b4d      	ldr	r3, [pc, #308]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800f28a:	2b08      	cmp	r3, #8
 800f28c:	d105      	bne.n	800f29a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f28e:	4b4a      	ldr	r3, [pc, #296]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00b      	beq.n	800f2b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f29a:	4b47      	ldr	r3, [pc, #284]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f2a2:	2b0c      	cmp	r3, #12
 800f2a4:	d11c      	bne.n	800f2e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f2a6:	4b44      	ldr	r3, [pc, #272]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d116      	bne.n	800f2e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f2b2:	4b41      	ldr	r3, [pc, #260]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f003 0302 	and.w	r3, r3, #2
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d005      	beq.n	800f2ca <HAL_RCC_OscConfig+0x186>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d001      	beq.n	800f2ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e1d3      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2ca:	4b3b      	ldr	r3, [pc, #236]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	00db      	lsls	r3, r3, #3
 800f2d8:	4937      	ldr	r1, [pc, #220]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f2de:	e03a      	b.n	800f356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d020      	beq.n	800f32a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f2e8:	4b34      	ldr	r3, [pc, #208]	@ (800f3bc <HAL_RCC_OscConfig+0x278>)
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2ee:	f7fe fff5 	bl	800e2dc <HAL_GetTick>
 800f2f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f2f4:	e008      	b.n	800f308 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f2f6:	f7fe fff1 	bl	800e2dc <HAL_GetTick>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	1ad3      	subs	r3, r2, r3
 800f300:	2b02      	cmp	r3, #2
 800f302:	d901      	bls.n	800f308 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800f304:	2303      	movs	r3, #3
 800f306:	e1b4      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f308:	4b2b      	ldr	r3, [pc, #172]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f003 0302 	and.w	r3, r3, #2
 800f310:	2b00      	cmp	r3, #0
 800f312:	d0f0      	beq.n	800f2f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f314:	4b28      	ldr	r3, [pc, #160]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	691b      	ldr	r3, [r3, #16]
 800f320:	00db      	lsls	r3, r3, #3
 800f322:	4925      	ldr	r1, [pc, #148]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f324:	4313      	orrs	r3, r2
 800f326:	600b      	str	r3, [r1, #0]
 800f328:	e015      	b.n	800f356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f32a:	4b24      	ldr	r3, [pc, #144]	@ (800f3bc <HAL_RCC_OscConfig+0x278>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f330:	f7fe ffd4 	bl	800e2dc <HAL_GetTick>
 800f334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f336:	e008      	b.n	800f34a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f338:	f7fe ffd0 	bl	800e2dc <HAL_GetTick>
 800f33c:	4602      	mov	r2, r0
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	2b02      	cmp	r3, #2
 800f344:	d901      	bls.n	800f34a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800f346:	2303      	movs	r3, #3
 800f348:	e193      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f34a:	4b1b      	ldr	r3, [pc, #108]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f003 0302 	and.w	r3, r3, #2
 800f352:	2b00      	cmp	r3, #0
 800f354:	d1f0      	bne.n	800f338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f003 0308 	and.w	r3, r3, #8
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d036      	beq.n	800f3d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	695b      	ldr	r3, [r3, #20]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d016      	beq.n	800f398 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f36a:	4b15      	ldr	r3, [pc, #84]	@ (800f3c0 <HAL_RCC_OscConfig+0x27c>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f370:	f7fe ffb4 	bl	800e2dc <HAL_GetTick>
 800f374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f376:	e008      	b.n	800f38a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f378:	f7fe ffb0 	bl	800e2dc <HAL_GetTick>
 800f37c:	4602      	mov	r2, r0
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	1ad3      	subs	r3, r2, r3
 800f382:	2b02      	cmp	r3, #2
 800f384:	d901      	bls.n	800f38a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800f386:	2303      	movs	r3, #3
 800f388:	e173      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f38a:	4b0b      	ldr	r3, [pc, #44]	@ (800f3b8 <HAL_RCC_OscConfig+0x274>)
 800f38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f38e:	f003 0302 	and.w	r3, r3, #2
 800f392:	2b00      	cmp	r3, #0
 800f394:	d0f0      	beq.n	800f378 <HAL_RCC_OscConfig+0x234>
 800f396:	e01b      	b.n	800f3d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f398:	4b09      	ldr	r3, [pc, #36]	@ (800f3c0 <HAL_RCC_OscConfig+0x27c>)
 800f39a:	2200      	movs	r2, #0
 800f39c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f39e:	f7fe ff9d 	bl	800e2dc <HAL_GetTick>
 800f3a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f3a4:	e00e      	b.n	800f3c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f3a6:	f7fe ff99 	bl	800e2dc <HAL_GetTick>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	2b02      	cmp	r3, #2
 800f3b2:	d907      	bls.n	800f3c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	e15c      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
 800f3b8:	40023800 	.word	0x40023800
 800f3bc:	42470000 	.word	0x42470000
 800f3c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f3c4:	4b8a      	ldr	r3, [pc, #552]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f3c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3c8:	f003 0302 	and.w	r3, r3, #2
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1ea      	bne.n	800f3a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f003 0304 	and.w	r3, r3, #4
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 8097 	beq.w	800f50c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f3e2:	4b83      	ldr	r3, [pc, #524]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f3e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d10f      	bne.n	800f40e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	60bb      	str	r3, [r7, #8]
 800f3f2:	4b7f      	ldr	r3, [pc, #508]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3f6:	4a7e      	ldr	r2, [pc, #504]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f3f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f3fc:	6413      	str	r3, [r2, #64]	@ 0x40
 800f3fe:	4b7c      	ldr	r3, [pc, #496]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f406:	60bb      	str	r3, [r7, #8]
 800f408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f40a:	2301      	movs	r3, #1
 800f40c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f40e:	4b79      	ldr	r3, [pc, #484]	@ (800f5f4 <HAL_RCC_OscConfig+0x4b0>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f416:	2b00      	cmp	r3, #0
 800f418:	d118      	bne.n	800f44c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f41a:	4b76      	ldr	r3, [pc, #472]	@ (800f5f4 <HAL_RCC_OscConfig+0x4b0>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a75      	ldr	r2, [pc, #468]	@ (800f5f4 <HAL_RCC_OscConfig+0x4b0>)
 800f420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f426:	f7fe ff59 	bl	800e2dc <HAL_GetTick>
 800f42a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f42c:	e008      	b.n	800f440 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f42e:	f7fe ff55 	bl	800e2dc <HAL_GetTick>
 800f432:	4602      	mov	r2, r0
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	1ad3      	subs	r3, r2, r3
 800f438:	2b02      	cmp	r3, #2
 800f43a:	d901      	bls.n	800f440 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800f43c:	2303      	movs	r3, #3
 800f43e:	e118      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f440:	4b6c      	ldr	r3, [pc, #432]	@ (800f5f4 <HAL_RCC_OscConfig+0x4b0>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d0f0      	beq.n	800f42e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d106      	bne.n	800f462 <HAL_RCC_OscConfig+0x31e>
 800f454:	4b66      	ldr	r3, [pc, #408]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f458:	4a65      	ldr	r2, [pc, #404]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f45a:	f043 0301 	orr.w	r3, r3, #1
 800f45e:	6713      	str	r3, [r2, #112]	@ 0x70
 800f460:	e01c      	b.n	800f49c <HAL_RCC_OscConfig+0x358>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	2b05      	cmp	r3, #5
 800f468:	d10c      	bne.n	800f484 <HAL_RCC_OscConfig+0x340>
 800f46a:	4b61      	ldr	r3, [pc, #388]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f46c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f46e:	4a60      	ldr	r2, [pc, #384]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f470:	f043 0304 	orr.w	r3, r3, #4
 800f474:	6713      	str	r3, [r2, #112]	@ 0x70
 800f476:	4b5e      	ldr	r3, [pc, #376]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f47a:	4a5d      	ldr	r2, [pc, #372]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f47c:	f043 0301 	orr.w	r3, r3, #1
 800f480:	6713      	str	r3, [r2, #112]	@ 0x70
 800f482:	e00b      	b.n	800f49c <HAL_RCC_OscConfig+0x358>
 800f484:	4b5a      	ldr	r3, [pc, #360]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f488:	4a59      	ldr	r2, [pc, #356]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f48a:	f023 0301 	bic.w	r3, r3, #1
 800f48e:	6713      	str	r3, [r2, #112]	@ 0x70
 800f490:	4b57      	ldr	r3, [pc, #348]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f494:	4a56      	ldr	r2, [pc, #344]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f496:	f023 0304 	bic.w	r3, r3, #4
 800f49a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d015      	beq.n	800f4d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f4a4:	f7fe ff1a 	bl	800e2dc <HAL_GetTick>
 800f4a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f4aa:	e00a      	b.n	800f4c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f4ac:	f7fe ff16 	bl	800e2dc <HAL_GetTick>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d901      	bls.n	800f4c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800f4be:	2303      	movs	r3, #3
 800f4c0:	e0d7      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f4c2:	4b4b      	ldr	r3, [pc, #300]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f4c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f4c6:	f003 0302 	and.w	r3, r3, #2
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d0ee      	beq.n	800f4ac <HAL_RCC_OscConfig+0x368>
 800f4ce:	e014      	b.n	800f4fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f4d0:	f7fe ff04 	bl	800e2dc <HAL_GetTick>
 800f4d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f4d6:	e00a      	b.n	800f4ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f4d8:	f7fe ff00 	bl	800e2dc <HAL_GetTick>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	1ad3      	subs	r3, r2, r3
 800f4e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d901      	bls.n	800f4ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f4ea:	2303      	movs	r3, #3
 800f4ec:	e0c1      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f4ee:	4b40      	ldr	r3, [pc, #256]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f4f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f4f2:	f003 0302 	and.w	r3, r3, #2
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d1ee      	bne.n	800f4d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f4fa:	7dfb      	ldrb	r3, [r7, #23]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d105      	bne.n	800f50c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f500:	4b3b      	ldr	r3, [pc, #236]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f504:	4a3a      	ldr	r2, [pc, #232]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f50a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	2b00      	cmp	r3, #0
 800f512:	f000 80ad 	beq.w	800f670 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f516:	4b36      	ldr	r3, [pc, #216]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	f003 030c 	and.w	r3, r3, #12
 800f51e:	2b08      	cmp	r3, #8
 800f520:	d060      	beq.n	800f5e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	699b      	ldr	r3, [r3, #24]
 800f526:	2b02      	cmp	r3, #2
 800f528:	d145      	bne.n	800f5b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f52a:	4b33      	ldr	r3, [pc, #204]	@ (800f5f8 <HAL_RCC_OscConfig+0x4b4>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f530:	f7fe fed4 	bl	800e2dc <HAL_GetTick>
 800f534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f536:	e008      	b.n	800f54a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f538:	f7fe fed0 	bl	800e2dc <HAL_GetTick>
 800f53c:	4602      	mov	r2, r0
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	2b02      	cmp	r3, #2
 800f544:	d901      	bls.n	800f54a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800f546:	2303      	movs	r3, #3
 800f548:	e093      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f54a:	4b29      	ldr	r3, [pc, #164]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1f0      	bne.n	800f538 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	69da      	ldr	r2, [r3, #28]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a1b      	ldr	r3, [r3, #32]
 800f55e:	431a      	orrs	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f564:	019b      	lsls	r3, r3, #6
 800f566:	431a      	orrs	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f56c:	085b      	lsrs	r3, r3, #1
 800f56e:	3b01      	subs	r3, #1
 800f570:	041b      	lsls	r3, r3, #16
 800f572:	431a      	orrs	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f578:	061b      	lsls	r3, r3, #24
 800f57a:	431a      	orrs	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f580:	071b      	lsls	r3, r3, #28
 800f582:	491b      	ldr	r1, [pc, #108]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f584:	4313      	orrs	r3, r2
 800f586:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f588:	4b1b      	ldr	r3, [pc, #108]	@ (800f5f8 <HAL_RCC_OscConfig+0x4b4>)
 800f58a:	2201      	movs	r2, #1
 800f58c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f58e:	f7fe fea5 	bl	800e2dc <HAL_GetTick>
 800f592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f594:	e008      	b.n	800f5a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f596:	f7fe fea1 	bl	800e2dc <HAL_GetTick>
 800f59a:	4602      	mov	r2, r0
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	2b02      	cmp	r3, #2
 800f5a2:	d901      	bls.n	800f5a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800f5a4:	2303      	movs	r3, #3
 800f5a6:	e064      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f5a8:	4b11      	ldr	r3, [pc, #68]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d0f0      	beq.n	800f596 <HAL_RCC_OscConfig+0x452>
 800f5b4:	e05c      	b.n	800f670 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f5b6:	4b10      	ldr	r3, [pc, #64]	@ (800f5f8 <HAL_RCC_OscConfig+0x4b4>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5bc:	f7fe fe8e 	bl	800e2dc <HAL_GetTick>
 800f5c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f5c2:	e008      	b.n	800f5d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f5c4:	f7fe fe8a 	bl	800e2dc <HAL_GetTick>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	d901      	bls.n	800f5d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800f5d2:	2303      	movs	r3, #3
 800f5d4:	e04d      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f5d6:	4b06      	ldr	r3, [pc, #24]	@ (800f5f0 <HAL_RCC_OscConfig+0x4ac>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1f0      	bne.n	800f5c4 <HAL_RCC_OscConfig+0x480>
 800f5e2:	e045      	b.n	800f670 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	699b      	ldr	r3, [r3, #24]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d107      	bne.n	800f5fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	e040      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
 800f5f0:	40023800 	.word	0x40023800
 800f5f4:	40007000 	.word	0x40007000
 800f5f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f5fc:	4b1f      	ldr	r3, [pc, #124]	@ (800f67c <HAL_RCC_OscConfig+0x538>)
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	699b      	ldr	r3, [r3, #24]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d030      	beq.n	800f66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f614:	429a      	cmp	r2, r3
 800f616:	d129      	bne.n	800f66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f622:	429a      	cmp	r2, r3
 800f624:	d122      	bne.n	800f66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f62c:	4013      	ands	r3, r2
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f634:	4293      	cmp	r3, r2
 800f636:	d119      	bne.n	800f66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f642:	085b      	lsrs	r3, r3, #1
 800f644:	3b01      	subs	r3, #1
 800f646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f648:	429a      	cmp	r2, r3
 800f64a:	d10f      	bne.n	800f66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f658:	429a      	cmp	r2, r3
 800f65a:	d107      	bne.n	800f66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f666:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f668:	429a      	cmp	r2, r3
 800f66a:	d001      	beq.n	800f670 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e000      	b.n	800f672 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3718      	adds	r7, #24
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	40023800 	.word	0x40023800

0800f680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d101      	bne.n	800f692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f68e:	2301      	movs	r3, #1
 800f690:	e07b      	b.n	800f78a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f696:	2b00      	cmp	r3, #0
 800f698:	d108      	bne.n	800f6ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f6a2:	d009      	beq.n	800f6b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	61da      	str	r2, [r3, #28]
 800f6aa:	e005      	b.n	800f6b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7fe f99e 	bl	800da14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f6ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f700:	431a      	orrs	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f70a:	431a      	orrs	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	f003 0302 	and.w	r3, r3, #2
 800f714:	431a      	orrs	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	695b      	ldr	r3, [r3, #20]
 800f71a:	f003 0301 	and.w	r3, r3, #1
 800f71e:	431a      	orrs	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	699b      	ldr	r3, [r3, #24]
 800f724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f728:	431a      	orrs	r2, r3
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	69db      	ldr	r3, [r3, #28]
 800f72e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f732:	431a      	orrs	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a1b      	ldr	r3, [r3, #32]
 800f738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f73c:	ea42 0103 	orr.w	r1, r2, r3
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	430a      	orrs	r2, r1
 800f74e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	699b      	ldr	r3, [r3, #24]
 800f754:	0c1b      	lsrs	r3, r3, #16
 800f756:	f003 0104 	and.w	r1, r3, #4
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f75e:	f003 0210 	and.w	r2, r3, #16
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	430a      	orrs	r2, r1
 800f768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	69da      	ldr	r2, [r3, #28]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f788:	2300      	movs	r3, #0
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f792:	b580      	push	{r7, lr}
 800f794:	b088      	sub	sp, #32
 800f796:	af00      	add	r7, sp, #0
 800f798:	60f8      	str	r0, [r7, #12]
 800f79a:	60b9      	str	r1, [r7, #8]
 800f79c:	603b      	str	r3, [r7, #0]
 800f79e:	4613      	mov	r3, r2
 800f7a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d101      	bne.n	800f7b4 <HAL_SPI_Transmit+0x22>
 800f7b0:	2302      	movs	r3, #2
 800f7b2:	e126      	b.n	800fa02 <HAL_SPI_Transmit+0x270>
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7bc:	f7fe fd8e 	bl	800e2dc <HAL_GetTick>
 800f7c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f7c2:	88fb      	ldrh	r3, [r7, #6]
 800f7c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d002      	beq.n	800f7d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f7d6:	e10b      	b.n	800f9f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d002      	beq.n	800f7e4 <HAL_SPI_Transmit+0x52>
 800f7de:	88fb      	ldrh	r3, [r7, #6]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d102      	bne.n	800f7ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f7e8:	e102      	b.n	800f9f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2203      	movs	r2, #3
 800f7ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	88fa      	ldrh	r2, [r7, #6]
 800f802:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	88fa      	ldrh	r2, [r7, #6]
 800f808:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2200      	movs	r2, #0
 800f814:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2200      	movs	r2, #0
 800f81a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2200      	movs	r2, #0
 800f820:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2200      	movs	r2, #0
 800f826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f830:	d10f      	bne.n	800f852 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f840:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f850:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f85c:	2b40      	cmp	r3, #64	@ 0x40
 800f85e:	d007      	beq.n	800f870 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f86e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f878:	d14b      	bne.n	800f912 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d002      	beq.n	800f888 <HAL_SPI_Transmit+0xf6>
 800f882:	8afb      	ldrh	r3, [r7, #22]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d13e      	bne.n	800f906 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f88c:	881a      	ldrh	r2, [r3, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f898:	1c9a      	adds	r2, r3, #2
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f8ac:	e02b      	b.n	800f906 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	689b      	ldr	r3, [r3, #8]
 800f8b4:	f003 0302 	and.w	r3, r3, #2
 800f8b8:	2b02      	cmp	r3, #2
 800f8ba:	d112      	bne.n	800f8e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8c0:	881a      	ldrh	r2, [r3, #0]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8cc:	1c9a      	adds	r2, r3, #2
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f8e0:	e011      	b.n	800f906 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8e2:	f7fe fcfb 	bl	800e2dc <HAL_GetTick>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	1ad3      	subs	r3, r2, r3
 800f8ec:	683a      	ldr	r2, [r7, #0]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d803      	bhi.n	800f8fa <HAL_SPI_Transmit+0x168>
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f8:	d102      	bne.n	800f900 <HAL_SPI_Transmit+0x16e>
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d102      	bne.n	800f906 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800f900:	2303      	movs	r3, #3
 800f902:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f904:	e074      	b.n	800f9f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1ce      	bne.n	800f8ae <HAL_SPI_Transmit+0x11c>
 800f910:	e04c      	b.n	800f9ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d002      	beq.n	800f920 <HAL_SPI_Transmit+0x18e>
 800f91a:	8afb      	ldrh	r3, [r7, #22]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d140      	bne.n	800f9a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	330c      	adds	r3, #12
 800f92a:	7812      	ldrb	r2, [r2, #0]
 800f92c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f932:	1c5a      	adds	r2, r3, #1
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	3b01      	subs	r3, #1
 800f940:	b29a      	uxth	r2, r3
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f946:	e02c      	b.n	800f9a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	f003 0302 	and.w	r3, r3, #2
 800f952:	2b02      	cmp	r3, #2
 800f954:	d113      	bne.n	800f97e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	330c      	adds	r3, #12
 800f960:	7812      	ldrb	r2, [r2, #0]
 800f962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f968:	1c5a      	adds	r2, r3, #1
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f972:	b29b      	uxth	r3, r3
 800f974:	3b01      	subs	r3, #1
 800f976:	b29a      	uxth	r2, r3
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f97c:	e011      	b.n	800f9a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f97e:	f7fe fcad 	bl	800e2dc <HAL_GetTick>
 800f982:	4602      	mov	r2, r0
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d803      	bhi.n	800f996 <HAL_SPI_Transmit+0x204>
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f994:	d102      	bne.n	800f99c <HAL_SPI_Transmit+0x20a>
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d102      	bne.n	800f9a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800f99c:	2303      	movs	r3, #3
 800f99e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f9a0:	e026      	b.n	800f9f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d1cd      	bne.n	800f948 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f9ac:	69ba      	ldr	r2, [r7, #24]
 800f9ae:	6839      	ldr	r1, [r7, #0]
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f000 fcdd 	bl	8010370 <SPI_EndRxTxTransaction>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d002      	beq.n	800f9c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2220      	movs	r2, #32
 800f9c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	689b      	ldr	r3, [r3, #8]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d10a      	bne.n	800f9e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	613b      	str	r3, [r7, #16]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	613b      	str	r3, [r7, #16]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	613b      	str	r3, [r7, #16]
 800f9de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d002      	beq.n	800f9ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	77fb      	strb	r3, [r7, #31]
 800f9ec:	e000      	b.n	800f9f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800f9ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800fa00:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3720      	adds	r7, #32
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b088      	sub	sp, #32
 800fa0e:	af02      	add	r7, sp, #8
 800fa10:	60f8      	str	r0, [r7, #12]
 800fa12:	60b9      	str	r1, [r7, #8]
 800fa14:	603b      	str	r3, [r7, #0]
 800fa16:	4613      	mov	r3, r2
 800fa18:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa26:	d112      	bne.n	800fa4e <HAL_SPI_Receive+0x44>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d10e      	bne.n	800fa4e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2204      	movs	r2, #4
 800fa34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800fa38:	88fa      	ldrh	r2, [r7, #6]
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	9300      	str	r3, [sp, #0]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	68ba      	ldr	r2, [r7, #8]
 800fa42:	68b9      	ldr	r1, [r7, #8]
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f000 f8f1 	bl	800fc2c <HAL_SPI_TransmitReceive>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	e0ea      	b.n	800fc24 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d101      	bne.n	800fa5c <HAL_SPI_Receive+0x52>
 800fa58:	2302      	movs	r3, #2
 800fa5a:	e0e3      	b.n	800fc24 <HAL_SPI_Receive+0x21a>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fa64:	f7fe fc3a 	bl	800e2dc <HAL_GetTick>
 800fa68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d002      	beq.n	800fa7c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800fa76:	2302      	movs	r3, #2
 800fa78:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fa7a:	e0ca      	b.n	800fc12 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <HAL_SPI_Receive+0x7e>
 800fa82:	88fb      	ldrh	r3, [r7, #6]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d102      	bne.n	800fa8e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fa8c:	e0c1      	b.n	800fc12 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2204      	movs	r2, #4
 800fa92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	88fa      	ldrh	r2, [r7, #6]
 800faa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	88fa      	ldrh	r2, [r7, #6]
 800faac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2200      	movs	r2, #0
 800fab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2200      	movs	r2, #0
 800fabe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fad4:	d10f      	bne.n	800faf6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800faf4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb00:	2b40      	cmp	r3, #64	@ 0x40
 800fb02:	d007      	beq.n	800fb14 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fb12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d162      	bne.n	800fbe2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800fb1c:	e02e      	b.n	800fb7c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	f003 0301 	and.w	r3, r3, #1
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d115      	bne.n	800fb58 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f103 020c 	add.w	r2, r3, #12
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb38:	7812      	ldrb	r2, [r2, #0]
 800fb3a:	b2d2      	uxtb	r2, r2
 800fb3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb42:	1c5a      	adds	r2, r3, #1
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fb56:	e011      	b.n	800fb7c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb58:	f7fe fbc0 	bl	800e2dc <HAL_GetTick>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	683a      	ldr	r2, [r7, #0]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d803      	bhi.n	800fb70 <HAL_SPI_Receive+0x166>
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb6e:	d102      	bne.n	800fb76 <HAL_SPI_Receive+0x16c>
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d102      	bne.n	800fb7c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800fb76:	2303      	movs	r3, #3
 800fb78:	75fb      	strb	r3, [r7, #23]
          goto error;
 800fb7a:	e04a      	b.n	800fc12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1cb      	bne.n	800fb1e <HAL_SPI_Receive+0x114>
 800fb86:	e031      	b.n	800fbec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	f003 0301 	and.w	r3, r3, #1
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d113      	bne.n	800fbbe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	68da      	ldr	r2, [r3, #12]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba0:	b292      	uxth	r2, r2
 800fba2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba8:	1c9a      	adds	r2, r3, #2
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fbbc:	e011      	b.n	800fbe2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbbe:	f7fe fb8d 	bl	800e2dc <HAL_GetTick>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d803      	bhi.n	800fbd6 <HAL_SPI_Receive+0x1cc>
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd4:	d102      	bne.n	800fbdc <HAL_SPI_Receive+0x1d2>
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d102      	bne.n	800fbe2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800fbdc:	2303      	movs	r3, #3
 800fbde:	75fb      	strb	r3, [r7, #23]
          goto error;
 800fbe0:	e017      	b.n	800fc12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d1cd      	bne.n	800fb88 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fbec:	693a      	ldr	r2, [r7, #16]
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f000 fb57 	bl	80102a4 <SPI_EndRxTransaction>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d002      	beq.n	800fc02 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2220      	movs	r2, #32
 800fc00:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d002      	beq.n	800fc10 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	75fb      	strb	r3, [r7, #23]
 800fc0e:	e000      	b.n	800fc12 <HAL_SPI_Receive+0x208>
  }

error :
 800fc10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2201      	movs	r2, #1
 800fc16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800fc22:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b08c      	sub	sp, #48	@ 0x30
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	607a      	str	r2, [r7, #4]
 800fc38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d101      	bne.n	800fc52 <HAL_SPI_TransmitReceive+0x26>
 800fc4e:	2302      	movs	r3, #2
 800fc50:	e18a      	b.n	800ff68 <HAL_SPI_TransmitReceive+0x33c>
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2201      	movs	r2, #1
 800fc56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc5a:	f7fe fb3f 	bl	800e2dc <HAL_GetTick>
 800fc5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fc66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800fc70:	887b      	ldrh	r3, [r7, #2]
 800fc72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fc74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d00f      	beq.n	800fc9c <HAL_SPI_TransmitReceive+0x70>
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fc82:	d107      	bne.n	800fc94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d103      	bne.n	800fc94 <HAL_SPI_TransmitReceive+0x68>
 800fc8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fc90:	2b04      	cmp	r3, #4
 800fc92:	d003      	beq.n	800fc9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800fc94:	2302      	movs	r3, #2
 800fc96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800fc9a:	e15b      	b.n	800ff54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d005      	beq.n	800fcae <HAL_SPI_TransmitReceive+0x82>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d002      	beq.n	800fcae <HAL_SPI_TransmitReceive+0x82>
 800fca8:	887b      	ldrh	r3, [r7, #2]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d103      	bne.n	800fcb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800fcb4:	e14e      	b.n	800ff54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b04      	cmp	r3, #4
 800fcc0:	d003      	beq.n	800fcca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2205      	movs	r2, #5
 800fcc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2200      	movs	r2, #0
 800fcce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	887a      	ldrh	r2, [r7, #2]
 800fcda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	887a      	ldrh	r2, [r7, #2]
 800fce0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	887a      	ldrh	r2, [r7, #2]
 800fcec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	887a      	ldrh	r2, [r7, #2]
 800fcf2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd0a:	2b40      	cmp	r3, #64	@ 0x40
 800fd0c:	d007      	beq.n	800fd1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fd26:	d178      	bne.n	800fe1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <HAL_SPI_TransmitReceive+0x10a>
 800fd30:	8b7b      	ldrh	r3, [r7, #26]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d166      	bne.n	800fe04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd3a:	881a      	ldrh	r2, [r3, #0]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd46:	1c9a      	adds	r2, r3, #2
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	3b01      	subs	r3, #1
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fd5a:	e053      	b.n	800fe04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	689b      	ldr	r3, [r3, #8]
 800fd62:	f003 0302 	and.w	r3, r3, #2
 800fd66:	2b02      	cmp	r3, #2
 800fd68:	d11b      	bne.n	800fda2 <HAL_SPI_TransmitReceive+0x176>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d016      	beq.n	800fda2 <HAL_SPI_TransmitReceive+0x176>
 800fd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d113      	bne.n	800fda2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd7e:	881a      	ldrh	r2, [r3, #0]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd8a:	1c9a      	adds	r2, r3, #2
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	3b01      	subs	r3, #1
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	f003 0301 	and.w	r3, r3, #1
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d119      	bne.n	800fde4 <HAL_SPI_TransmitReceive+0x1b8>
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d014      	beq.n	800fde4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	68da      	ldr	r2, [r3, #12]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdc4:	b292      	uxth	r2, r2
 800fdc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdcc:	1c9a      	adds	r2, r3, #2
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fde0:	2301      	movs	r3, #1
 800fde2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fde4:	f7fe fa7a 	bl	800e2dc <HAL_GetTick>
 800fde8:	4602      	mov	r2, r0
 800fdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d807      	bhi.n	800fe04 <HAL_SPI_TransmitReceive+0x1d8>
 800fdf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdfa:	d003      	beq.n	800fe04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800fe02:	e0a7      	b.n	800ff54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1a6      	bne.n	800fd5c <HAL_SPI_TransmitReceive+0x130>
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1a1      	bne.n	800fd5c <HAL_SPI_TransmitReceive+0x130>
 800fe18:	e07c      	b.n	800ff14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d002      	beq.n	800fe28 <HAL_SPI_TransmitReceive+0x1fc>
 800fe22:	8b7b      	ldrh	r3, [r7, #26]
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d16b      	bne.n	800ff00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	330c      	adds	r3, #12
 800fe32:	7812      	ldrb	r2, [r2, #0]
 800fe34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe3a:	1c5a      	adds	r2, r3, #1
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	3b01      	subs	r3, #1
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fe4e:	e057      	b.n	800ff00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	f003 0302 	and.w	r3, r3, #2
 800fe5a:	2b02      	cmp	r3, #2
 800fe5c:	d11c      	bne.n	800fe98 <HAL_SPI_TransmitReceive+0x26c>
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d017      	beq.n	800fe98 <HAL_SPI_TransmitReceive+0x26c>
 800fe68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d114      	bne.n	800fe98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	330c      	adds	r3, #12
 800fe78:	7812      	ldrb	r2, [r2, #0]
 800fe7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe80:	1c5a      	adds	r2, r3, #1
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fe94:	2300      	movs	r3, #0
 800fe96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	f003 0301 	and.w	r3, r3, #1
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d119      	bne.n	800feda <HAL_SPI_TransmitReceive+0x2ae>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800feaa:	b29b      	uxth	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d014      	beq.n	800feda <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	68da      	ldr	r2, [r3, #12]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feba:	b2d2      	uxtb	r2, r2
 800febc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fec2:	1c5a      	adds	r2, r3, #1
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fecc:	b29b      	uxth	r3, r3
 800fece:	3b01      	subs	r3, #1
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fed6:	2301      	movs	r3, #1
 800fed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800feda:	f7fe f9ff 	bl	800e2dc <HAL_GetTick>
 800fede:	4602      	mov	r2, r0
 800fee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d803      	bhi.n	800fef2 <HAL_SPI_TransmitReceive+0x2c6>
 800feea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef0:	d102      	bne.n	800fef8 <HAL_SPI_TransmitReceive+0x2cc>
 800fef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d103      	bne.n	800ff00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800fef8:	2303      	movs	r3, #3
 800fefa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800fefe:	e029      	b.n	800ff54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1a2      	bne.n	800fe50 <HAL_SPI_TransmitReceive+0x224>
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d19d      	bne.n	800fe50 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ff14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f000 fa29 	bl	8010370 <SPI_EndRxTxTransaction>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d006      	beq.n	800ff32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ff24:	2301      	movs	r3, #1
 800ff26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2220      	movs	r2, #32
 800ff2e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800ff30:	e010      	b.n	800ff54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d10b      	bne.n	800ff52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	617b      	str	r3, [r7, #20]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	617b      	str	r3, [r7, #20]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	617b      	str	r3, [r7, #20]
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	e000      	b.n	800ff54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ff52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2201      	movs	r2, #1
 800ff58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ff64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3730      	adds	r7, #48	@ 0x30
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b088      	sub	sp, #32
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d10e      	bne.n	800ffb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ff92:	69bb      	ldr	r3, [r7, #24]
 800ff94:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d009      	beq.n	800ffb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d004      	beq.n	800ffb0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	4798      	blx	r3
    return;
 800ffae:	e0ce      	b.n	801014e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ffb0:	69bb      	ldr	r3, [r7, #24]
 800ffb2:	f003 0302 	and.w	r3, r3, #2
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d009      	beq.n	800ffce <HAL_SPI_IRQHandler+0x5e>
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d004      	beq.n	800ffce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	4798      	blx	r3
    return;
 800ffcc:	e0bf      	b.n	801014e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	f003 0320 	and.w	r3, r3, #32
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d10a      	bne.n	800ffee <HAL_SPI_IRQHandler+0x7e>
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d105      	bne.n	800ffee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	f000 80b0 	beq.w	801014e <HAL_SPI_IRQHandler+0x1de>
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	f003 0320 	and.w	r3, r3, #32
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	f000 80aa 	beq.w	801014e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010000:	2b00      	cmp	r3, #0
 8010002:	d023      	beq.n	801004c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801000a:	b2db      	uxtb	r3, r3
 801000c:	2b03      	cmp	r3, #3
 801000e:	d011      	beq.n	8010034 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010014:	f043 0204 	orr.w	r2, r3, #4
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801001c:	2300      	movs	r3, #0
 801001e:	617b      	str	r3, [r7, #20]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	617b      	str	r3, [r7, #20]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	617b      	str	r3, [r7, #20]
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	e00b      	b.n	801004c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010034:	2300      	movs	r3, #0
 8010036:	613b      	str	r3, [r7, #16]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	613b      	str	r3, [r7, #16]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	689b      	ldr	r3, [r3, #8]
 8010046:	613b      	str	r3, [r7, #16]
 8010048:	693b      	ldr	r3, [r7, #16]
        return;
 801004a:	e080      	b.n	801014e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	f003 0320 	and.w	r3, r3, #32
 8010052:	2b00      	cmp	r3, #0
 8010054:	d014      	beq.n	8010080 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801005a:	f043 0201 	orr.w	r2, r3, #1
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010062:	2300      	movs	r3, #0
 8010064:	60fb      	str	r3, [r7, #12]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	60fb      	str	r3, [r7, #12]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010086:	2b00      	cmp	r3, #0
 8010088:	d00c      	beq.n	80100a4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801008e:	f043 0208 	orr.w	r2, r3, #8
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010096:	2300      	movs	r3, #0
 8010098:	60bb      	str	r3, [r7, #8]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	60bb      	str	r3, [r7, #8]
 80100a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d04f      	beq.n	801014c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	685a      	ldr	r2, [r3, #4]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80100ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2201      	movs	r2, #1
 80100c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	f003 0302 	and.w	r3, r3, #2
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d104      	bne.n	80100d8 <HAL_SPI_IRQHandler+0x168>
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d034      	beq.n	8010142 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	685a      	ldr	r2, [r3, #4]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f022 0203 	bic.w	r2, r2, #3
 80100e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d011      	beq.n	8010114 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100f4:	4a17      	ldr	r2, [pc, #92]	@ (8010154 <HAL_SPI_IRQHandler+0x1e4>)
 80100f6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe fa9e 	bl	800e63e <HAL_DMA_Abort_IT>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d005      	beq.n	8010114 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801010c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010118:	2b00      	cmp	r3, #0
 801011a:	d016      	beq.n	801014a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010120:	4a0c      	ldr	r2, [pc, #48]	@ (8010154 <HAL_SPI_IRQHandler+0x1e4>)
 8010122:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010128:	4618      	mov	r0, r3
 801012a:	f7fe fa88 	bl	800e63e <HAL_DMA_Abort_IT>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00a      	beq.n	801014a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010138:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8010140:	e003      	b.n	801014a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 f808 	bl	8010158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010148:	e000      	b.n	801014c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 801014a:	bf00      	nop
    return;
 801014c:	bf00      	nop
  }
}
 801014e:	3720      	adds	r7, #32
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	0801016d 	.word	0x0801016d

08010158 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010160:	bf00      	nop
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010178:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2200      	movs	r2, #0
 801017e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2200      	movs	r2, #0
 8010184:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f7ff ffe6 	bl	8010158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801018c:	bf00      	nop
 801018e:	3710      	adds	r7, #16
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b088      	sub	sp, #32
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	60b9      	str	r1, [r7, #8]
 801019e:	603b      	str	r3, [r7, #0]
 80101a0:	4613      	mov	r3, r2
 80101a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80101a4:	f7fe f89a 	bl	800e2dc <HAL_GetTick>
 80101a8:	4602      	mov	r2, r0
 80101aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ac:	1a9b      	subs	r3, r3, r2
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	4413      	add	r3, r2
 80101b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80101b4:	f7fe f892 	bl	800e2dc <HAL_GetTick>
 80101b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80101ba:	4b39      	ldr	r3, [pc, #228]	@ (80102a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	015b      	lsls	r3, r3, #5
 80101c0:	0d1b      	lsrs	r3, r3, #20
 80101c2:	69fa      	ldr	r2, [r7, #28]
 80101c4:	fb02 f303 	mul.w	r3, r2, r3
 80101c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80101ca:	e054      	b.n	8010276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d2:	d050      	beq.n	8010276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80101d4:	f7fe f882 	bl	800e2dc <HAL_GetTick>
 80101d8:	4602      	mov	r2, r0
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	69fa      	ldr	r2, [r7, #28]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d902      	bls.n	80101ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d13d      	bne.n	8010266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	685a      	ldr	r2, [r3, #4]
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80101f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010202:	d111      	bne.n	8010228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801020c:	d004      	beq.n	8010218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010216:	d107      	bne.n	8010228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801022c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010230:	d10f      	bne.n	8010252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010240:	601a      	str	r2, [r3, #0]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2201      	movs	r2, #1
 8010256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2200      	movs	r2, #0
 801025e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8010262:	2303      	movs	r3, #3
 8010264:	e017      	b.n	8010296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d101      	bne.n	8010270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801026c:	2300      	movs	r3, #0
 801026e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	3b01      	subs	r3, #1
 8010274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	689a      	ldr	r2, [r3, #8]
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	4013      	ands	r3, r2
 8010280:	68ba      	ldr	r2, [r7, #8]
 8010282:	429a      	cmp	r2, r3
 8010284:	bf0c      	ite	eq
 8010286:	2301      	moveq	r3, #1
 8010288:	2300      	movne	r3, #0
 801028a:	b2db      	uxtb	r3, r3
 801028c:	461a      	mov	r2, r3
 801028e:	79fb      	ldrb	r3, [r7, #7]
 8010290:	429a      	cmp	r2, r3
 8010292:	d19b      	bne.n	80101cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3720      	adds	r7, #32
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	20000008 	.word	0x20000008

080102a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b086      	sub	sp, #24
 80102a8:	af02      	add	r7, sp, #8
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102b8:	d111      	bne.n	80102de <SPI_EndRxTransaction+0x3a>
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80102c2:	d004      	beq.n	80102ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102cc:	d107      	bne.n	80102de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80102dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102e6:	d12a      	bne.n	801033e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	689b      	ldr	r3, [r3, #8]
 80102ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102f0:	d012      	beq.n	8010318 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	2200      	movs	r2, #0
 80102fa:	2180      	movs	r1, #128	@ 0x80
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	f7ff ff49 	bl	8010194 <SPI_WaitFlagStateUntilTimeout>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d02d      	beq.n	8010364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801030c:	f043 0220 	orr.w	r2, r3, #32
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010314:	2303      	movs	r3, #3
 8010316:	e026      	b.n	8010366 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	2200      	movs	r2, #0
 8010320:	2101      	movs	r1, #1
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7ff ff36 	bl	8010194 <SPI_WaitFlagStateUntilTimeout>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d01a      	beq.n	8010364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010332:	f043 0220 	orr.w	r2, r3, #32
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801033a:	2303      	movs	r3, #3
 801033c:	e013      	b.n	8010366 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	2200      	movs	r2, #0
 8010346:	2101      	movs	r1, #1
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	f7ff ff23 	bl	8010194 <SPI_WaitFlagStateUntilTimeout>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d007      	beq.n	8010364 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010358:	f043 0220 	orr.w	r2, r3, #32
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010360:	2303      	movs	r3, #3
 8010362:	e000      	b.n	8010366 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010364:	2300      	movs	r3, #0
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
	...

08010370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b088      	sub	sp, #32
 8010374:	af02      	add	r7, sp, #8
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801037c:	4b1b      	ldr	r3, [pc, #108]	@ (80103ec <SPI_EndRxTxTransaction+0x7c>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a1b      	ldr	r2, [pc, #108]	@ (80103f0 <SPI_EndRxTxTransaction+0x80>)
 8010382:	fba2 2303 	umull	r2, r3, r2, r3
 8010386:	0d5b      	lsrs	r3, r3, #21
 8010388:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801038c:	fb02 f303 	mul.w	r3, r2, r3
 8010390:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801039a:	d112      	bne.n	80103c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	2200      	movs	r2, #0
 80103a4:	2180      	movs	r1, #128	@ 0x80
 80103a6:	68f8      	ldr	r0, [r7, #12]
 80103a8:	f7ff fef4 	bl	8010194 <SPI_WaitFlagStateUntilTimeout>
 80103ac:	4603      	mov	r3, r0
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d016      	beq.n	80103e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103b6:	f043 0220 	orr.w	r2, r3, #32
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80103be:	2303      	movs	r3, #3
 80103c0:	e00f      	b.n	80103e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00a      	beq.n	80103de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	3b01      	subs	r3, #1
 80103cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103d8:	2b80      	cmp	r3, #128	@ 0x80
 80103da:	d0f2      	beq.n	80103c2 <SPI_EndRxTxTransaction+0x52>
 80103dc:	e000      	b.n	80103e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80103de:	bf00      	nop
  }

  return HAL_OK;
 80103e0:	2300      	movs	r3, #0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3718      	adds	r7, #24
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	20000008 	.word	0x20000008
 80103f0:	165e9f81 	.word	0x165e9f81

080103f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d101      	bne.n	8010406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010402:	2301      	movs	r3, #1
 8010404:	e041      	b.n	801048a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801040c:	b2db      	uxtb	r3, r3
 801040e:	2b00      	cmp	r3, #0
 8010410:	d106      	bne.n	8010420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7fd fbee 	bl	800dbfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2202      	movs	r2, #2
 8010424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	3304      	adds	r3, #4
 8010430:	4619      	mov	r1, r3
 8010432:	4610      	mov	r0, r2
 8010434:	f000 fba8 	bl	8010b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2201      	movs	r2, #1
 801043c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2201      	movs	r2, #1
 8010444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2201      	movs	r2, #1
 801044c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2201      	movs	r2, #1
 8010454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2201      	movs	r2, #1
 801046c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2201      	movs	r2, #1
 8010484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
	...

08010494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d001      	beq.n	80104ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80104a8:	2301      	movs	r3, #1
 80104aa:	e04e      	b.n	801054a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2202      	movs	r2, #2
 80104b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	68da      	ldr	r2, [r3, #12]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f042 0201 	orr.w	r2, r2, #1
 80104c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4a23      	ldr	r2, [pc, #140]	@ (8010558 <HAL_TIM_Base_Start_IT+0xc4>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d022      	beq.n	8010514 <HAL_TIM_Base_Start_IT+0x80>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104d6:	d01d      	beq.n	8010514 <HAL_TIM_Base_Start_IT+0x80>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	4a1f      	ldr	r2, [pc, #124]	@ (801055c <HAL_TIM_Base_Start_IT+0xc8>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d018      	beq.n	8010514 <HAL_TIM_Base_Start_IT+0x80>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a1e      	ldr	r2, [pc, #120]	@ (8010560 <HAL_TIM_Base_Start_IT+0xcc>)
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d013      	beq.n	8010514 <HAL_TIM_Base_Start_IT+0x80>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4a1c      	ldr	r2, [pc, #112]	@ (8010564 <HAL_TIM_Base_Start_IT+0xd0>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d00e      	beq.n	8010514 <HAL_TIM_Base_Start_IT+0x80>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4a1b      	ldr	r2, [pc, #108]	@ (8010568 <HAL_TIM_Base_Start_IT+0xd4>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d009      	beq.n	8010514 <HAL_TIM_Base_Start_IT+0x80>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4a19      	ldr	r2, [pc, #100]	@ (801056c <HAL_TIM_Base_Start_IT+0xd8>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d004      	beq.n	8010514 <HAL_TIM_Base_Start_IT+0x80>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a18      	ldr	r2, [pc, #96]	@ (8010570 <HAL_TIM_Base_Start_IT+0xdc>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d111      	bne.n	8010538 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	f003 0307 	and.w	r3, r3, #7
 801051e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2b06      	cmp	r3, #6
 8010524:	d010      	beq.n	8010548 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f042 0201 	orr.w	r2, r2, #1
 8010534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010536:	e007      	b.n	8010548 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f042 0201 	orr.w	r2, r2, #1
 8010546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010548:	2300      	movs	r3, #0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3714      	adds	r7, #20
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	40010000 	.word	0x40010000
 801055c:	40000400 	.word	0x40000400
 8010560:	40000800 	.word	0x40000800
 8010564:	40000c00 	.word	0x40000c00
 8010568:	40010400 	.word	0x40010400
 801056c:	40014000 	.word	0x40014000
 8010570:	40001800 	.word	0x40001800

08010574 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d101      	bne.n	8010586 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e041      	b.n	801060a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801058c:	b2db      	uxtb	r3, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	d106      	bne.n	80105a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2200      	movs	r2, #0
 8010596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7fd fae0 	bl	800db60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2202      	movs	r2, #2
 80105a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	3304      	adds	r3, #4
 80105b0:	4619      	mov	r1, r3
 80105b2:	4610      	mov	r0, r2
 80105b4:	f000 fae8 	bl	8010b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2201      	movs	r2, #1
 80105bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2201      	movs	r2, #1
 80105c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2201      	movs	r2, #1
 80105cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2201      	movs	r2, #1
 80105dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2201      	movs	r2, #1
 80105ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2201      	movs	r2, #1
 80105f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2201      	movs	r2, #1
 8010604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010608:	2300      	movs	r3, #0
}
 801060a:	4618      	mov	r0, r3
 801060c:	3708      	adds	r7, #8
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010612:	b580      	push	{r7, lr}
 8010614:	b082      	sub	sp, #8
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	691b      	ldr	r3, [r3, #16]
 8010620:	f003 0302 	and.w	r3, r3, #2
 8010624:	2b02      	cmp	r3, #2
 8010626:	d122      	bne.n	801066e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	f003 0302 	and.w	r3, r3, #2
 8010632:	2b02      	cmp	r3, #2
 8010634:	d11b      	bne.n	801066e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f06f 0202 	mvn.w	r2, #2
 801063e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2201      	movs	r2, #1
 8010644:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	699b      	ldr	r3, [r3, #24]
 801064c:	f003 0303 	and.w	r3, r3, #3
 8010650:	2b00      	cmp	r3, #0
 8010652:	d003      	beq.n	801065c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fa78 	bl	8010b4a <HAL_TIM_IC_CaptureCallback>
 801065a:	e005      	b.n	8010668 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 fa6a 	bl	8010b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 fa7b 	bl	8010b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	691b      	ldr	r3, [r3, #16]
 8010674:	f003 0304 	and.w	r3, r3, #4
 8010678:	2b04      	cmp	r3, #4
 801067a:	d122      	bne.n	80106c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	f003 0304 	and.w	r3, r3, #4
 8010686:	2b04      	cmp	r3, #4
 8010688:	d11b      	bne.n	80106c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f06f 0204 	mvn.w	r2, #4
 8010692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2202      	movs	r2, #2
 8010698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	699b      	ldr	r3, [r3, #24]
 80106a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d003      	beq.n	80106b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 fa4e 	bl	8010b4a <HAL_TIM_IC_CaptureCallback>
 80106ae:	e005      	b.n	80106bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f000 fa40 	bl	8010b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 fa51 	bl	8010b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	691b      	ldr	r3, [r3, #16]
 80106c8:	f003 0308 	and.w	r3, r3, #8
 80106cc:	2b08      	cmp	r3, #8
 80106ce:	d122      	bne.n	8010716 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	68db      	ldr	r3, [r3, #12]
 80106d6:	f003 0308 	and.w	r3, r3, #8
 80106da:	2b08      	cmp	r3, #8
 80106dc:	d11b      	bne.n	8010716 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f06f 0208 	mvn.w	r2, #8
 80106e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2204      	movs	r2, #4
 80106ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	69db      	ldr	r3, [r3, #28]
 80106f4:	f003 0303 	and.w	r3, r3, #3
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f000 fa24 	bl	8010b4a <HAL_TIM_IC_CaptureCallback>
 8010702:	e005      	b.n	8010710 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f000 fa16 	bl	8010b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f000 fa27 	bl	8010b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2200      	movs	r2, #0
 8010714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	691b      	ldr	r3, [r3, #16]
 801071c:	f003 0310 	and.w	r3, r3, #16
 8010720:	2b10      	cmp	r3, #16
 8010722:	d122      	bne.n	801076a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	f003 0310 	and.w	r3, r3, #16
 801072e:	2b10      	cmp	r3, #16
 8010730:	d11b      	bne.n	801076a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f06f 0210 	mvn.w	r2, #16
 801073a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2208      	movs	r2, #8
 8010740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	69db      	ldr	r3, [r3, #28]
 8010748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801074c:	2b00      	cmp	r3, #0
 801074e:	d003      	beq.n	8010758 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f000 f9fa 	bl	8010b4a <HAL_TIM_IC_CaptureCallback>
 8010756:	e005      	b.n	8010764 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 f9ec 	bl	8010b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 f9fd 	bl	8010b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	f003 0301 	and.w	r3, r3, #1
 8010774:	2b01      	cmp	r3, #1
 8010776:	d10e      	bne.n	8010796 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	f003 0301 	and.w	r3, r3, #1
 8010782:	2b01      	cmp	r3, #1
 8010784:	d107      	bne.n	8010796 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f06f 0201 	mvn.w	r2, #1
 801078e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f7fd f907 	bl	800d9a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	691b      	ldr	r3, [r3, #16]
 801079c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107a0:	2b80      	cmp	r3, #128	@ 0x80
 80107a2:	d10e      	bne.n	80107c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107ae:	2b80      	cmp	r3, #128	@ 0x80
 80107b0:	d107      	bne.n	80107c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80107ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 fda5 	bl	801130c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	691b      	ldr	r3, [r3, #16]
 80107c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107cc:	2b40      	cmp	r3, #64	@ 0x40
 80107ce:	d10e      	bne.n	80107ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	68db      	ldr	r3, [r3, #12]
 80107d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107da:	2b40      	cmp	r3, #64	@ 0x40
 80107dc:	d107      	bne.n	80107ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80107e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 f9c2 	bl	8010b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	691b      	ldr	r3, [r3, #16]
 80107f4:	f003 0320 	and.w	r3, r3, #32
 80107f8:	2b20      	cmp	r3, #32
 80107fa:	d10e      	bne.n	801081a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	f003 0320 	and.w	r3, r3, #32
 8010806:	2b20      	cmp	r3, #32
 8010808:	d107      	bne.n	801081a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f06f 0220 	mvn.w	r2, #32
 8010812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f000 fd6f 	bl	80112f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801081a:	bf00      	nop
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
	...

08010824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b086      	sub	sp, #24
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801083a:	2b01      	cmp	r3, #1
 801083c:	d101      	bne.n	8010842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801083e:	2302      	movs	r3, #2
 8010840:	e0ae      	b.n	80109a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2201      	movs	r2, #1
 8010846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2b0c      	cmp	r3, #12
 801084e:	f200 809f 	bhi.w	8010990 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8010852:	a201      	add	r2, pc, #4	@ (adr r2, 8010858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010858:	0801088d 	.word	0x0801088d
 801085c:	08010991 	.word	0x08010991
 8010860:	08010991 	.word	0x08010991
 8010864:	08010991 	.word	0x08010991
 8010868:	080108cd 	.word	0x080108cd
 801086c:	08010991 	.word	0x08010991
 8010870:	08010991 	.word	0x08010991
 8010874:	08010991 	.word	0x08010991
 8010878:	0801090f 	.word	0x0801090f
 801087c:	08010991 	.word	0x08010991
 8010880:	08010991 	.word	0x08010991
 8010884:	08010991 	.word	0x08010991
 8010888:	0801094f 	.word	0x0801094f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	68b9      	ldr	r1, [r7, #8]
 8010892:	4618      	mov	r0, r3
 8010894:	f000 fa18 	bl	8010cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	699a      	ldr	r2, [r3, #24]
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f042 0208 	orr.w	r2, r2, #8
 80108a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	699a      	ldr	r2, [r3, #24]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	f022 0204 	bic.w	r2, r2, #4
 80108b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	6999      	ldr	r1, [r3, #24]
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	691a      	ldr	r2, [r3, #16]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	430a      	orrs	r2, r1
 80108c8:	619a      	str	r2, [r3, #24]
      break;
 80108ca:	e064      	b.n	8010996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	68b9      	ldr	r1, [r7, #8]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f000 fa68 	bl	8010da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	699a      	ldr	r2, [r3, #24]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80108e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	699a      	ldr	r2, [r3, #24]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80108f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	6999      	ldr	r1, [r3, #24]
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	691b      	ldr	r3, [r3, #16]
 8010902:	021a      	lsls	r2, r3, #8
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	430a      	orrs	r2, r1
 801090a:	619a      	str	r2, [r3, #24]
      break;
 801090c:	e043      	b.n	8010996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68b9      	ldr	r1, [r7, #8]
 8010914:	4618      	mov	r0, r3
 8010916:	f000 fabd 	bl	8010e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	69da      	ldr	r2, [r3, #28]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f042 0208 	orr.w	r2, r2, #8
 8010928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	69da      	ldr	r2, [r3, #28]
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f022 0204 	bic.w	r2, r2, #4
 8010938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	69d9      	ldr	r1, [r3, #28]
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	691a      	ldr	r2, [r3, #16]
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	430a      	orrs	r2, r1
 801094a:	61da      	str	r2, [r3, #28]
      break;
 801094c:	e023      	b.n	8010996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	68b9      	ldr	r1, [r7, #8]
 8010954:	4618      	mov	r0, r3
 8010956:	f000 fb11 	bl	8010f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	69da      	ldr	r2, [r3, #28]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	69da      	ldr	r2, [r3, #28]
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	69d9      	ldr	r1, [r3, #28]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	691b      	ldr	r3, [r3, #16]
 8010984:	021a      	lsls	r2, r3, #8
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	430a      	orrs	r2, r1
 801098c:	61da      	str	r2, [r3, #28]
      break;
 801098e:	e002      	b.n	8010996 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010990:	2301      	movs	r3, #1
 8010992:	75fb      	strb	r3, [r7, #23]
      break;
 8010994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2200      	movs	r2, #0
 801099a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801099e:	7dfb      	ldrb	r3, [r7, #23]
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3718      	adds	r7, #24
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80109b2:	2300      	movs	r3, #0
 80109b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d101      	bne.n	80109c4 <HAL_TIM_ConfigClockSource+0x1c>
 80109c0:	2302      	movs	r3, #2
 80109c2:	e0b4      	b.n	8010b2e <HAL_TIM_ConfigClockSource+0x186>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2202      	movs	r2, #2
 80109d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80109e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80109ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	68ba      	ldr	r2, [r7, #8]
 80109f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80109fc:	d03e      	beq.n	8010a7c <HAL_TIM_ConfigClockSource+0xd4>
 80109fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a02:	f200 8087 	bhi.w	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
 8010a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a0a:	f000 8086 	beq.w	8010b1a <HAL_TIM_ConfigClockSource+0x172>
 8010a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a12:	d87f      	bhi.n	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
 8010a14:	2b70      	cmp	r3, #112	@ 0x70
 8010a16:	d01a      	beq.n	8010a4e <HAL_TIM_ConfigClockSource+0xa6>
 8010a18:	2b70      	cmp	r3, #112	@ 0x70
 8010a1a:	d87b      	bhi.n	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
 8010a1c:	2b60      	cmp	r3, #96	@ 0x60
 8010a1e:	d050      	beq.n	8010ac2 <HAL_TIM_ConfigClockSource+0x11a>
 8010a20:	2b60      	cmp	r3, #96	@ 0x60
 8010a22:	d877      	bhi.n	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
 8010a24:	2b50      	cmp	r3, #80	@ 0x50
 8010a26:	d03c      	beq.n	8010aa2 <HAL_TIM_ConfigClockSource+0xfa>
 8010a28:	2b50      	cmp	r3, #80	@ 0x50
 8010a2a:	d873      	bhi.n	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
 8010a2c:	2b40      	cmp	r3, #64	@ 0x40
 8010a2e:	d058      	beq.n	8010ae2 <HAL_TIM_ConfigClockSource+0x13a>
 8010a30:	2b40      	cmp	r3, #64	@ 0x40
 8010a32:	d86f      	bhi.n	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
 8010a34:	2b30      	cmp	r3, #48	@ 0x30
 8010a36:	d064      	beq.n	8010b02 <HAL_TIM_ConfigClockSource+0x15a>
 8010a38:	2b30      	cmp	r3, #48	@ 0x30
 8010a3a:	d86b      	bhi.n	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
 8010a3c:	2b20      	cmp	r3, #32
 8010a3e:	d060      	beq.n	8010b02 <HAL_TIM_ConfigClockSource+0x15a>
 8010a40:	2b20      	cmp	r3, #32
 8010a42:	d867      	bhi.n	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d05c      	beq.n	8010b02 <HAL_TIM_ConfigClockSource+0x15a>
 8010a48:	2b10      	cmp	r3, #16
 8010a4a:	d05a      	beq.n	8010b02 <HAL_TIM_ConfigClockSource+0x15a>
 8010a4c:	e062      	b.n	8010b14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	6899      	ldr	r1, [r3, #8]
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	685a      	ldr	r2, [r3, #4]
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	f000 fb5d 	bl	801111c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	689b      	ldr	r3, [r3, #8]
 8010a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	68ba      	ldr	r2, [r7, #8]
 8010a78:	609a      	str	r2, [r3, #8]
      break;
 8010a7a:	e04f      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6818      	ldr	r0, [r3, #0]
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	6899      	ldr	r1, [r3, #8]
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	685a      	ldr	r2, [r3, #4]
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	68db      	ldr	r3, [r3, #12]
 8010a8c:	f000 fb46 	bl	801111c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	689a      	ldr	r2, [r3, #8]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010a9e:	609a      	str	r2, [r3, #8]
      break;
 8010aa0:	e03c      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6818      	ldr	r0, [r3, #0]
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	6859      	ldr	r1, [r3, #4]
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	f000 faba 	bl	8011028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	2150      	movs	r1, #80	@ 0x50
 8010aba:	4618      	mov	r0, r3
 8010abc:	f000 fb13 	bl	80110e6 <TIM_ITRx_SetConfig>
      break;
 8010ac0:	e02c      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6818      	ldr	r0, [r3, #0]
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	6859      	ldr	r1, [r3, #4]
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	f000 fad9 	bl	8011086 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2160      	movs	r1, #96	@ 0x60
 8010ada:	4618      	mov	r0, r3
 8010adc:	f000 fb03 	bl	80110e6 <TIM_ITRx_SetConfig>
      break;
 8010ae0:	e01c      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6818      	ldr	r0, [r3, #0]
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	6859      	ldr	r1, [r3, #4]
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	461a      	mov	r2, r3
 8010af0:	f000 fa9a 	bl	8011028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2140      	movs	r1, #64	@ 0x40
 8010afa:	4618      	mov	r0, r3
 8010afc:	f000 faf3 	bl	80110e6 <TIM_ITRx_SetConfig>
      break;
 8010b00:	e00c      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	f000 faea 	bl	80110e6 <TIM_ITRx_SetConfig>
      break;
 8010b12:	e003      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010b14:	2301      	movs	r3, #1
 8010b16:	73fb      	strb	r3, [r7, #15]
      break;
 8010b18:	e000      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2200      	movs	r2, #0
 8010b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3710      	adds	r7, #16
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b36:	b480      	push	{r7}
 8010b38:	b083      	sub	sp, #12
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010b3e:	bf00      	nop
 8010b40:	370c      	adds	r7, #12
 8010b42:	46bd      	mov	sp, r7
 8010b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b48:	4770      	bx	lr

08010b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010b4a:	b480      	push	{r7}
 8010b4c:	b083      	sub	sp, #12
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010b52:	bf00      	nop
 8010b54:	370c      	adds	r7, #12
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010b5e:	b480      	push	{r7}
 8010b60:	b083      	sub	sp, #12
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010b66:	bf00      	nop
 8010b68:	370c      	adds	r7, #12
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010b72:	b480      	push	{r7}
 8010b74:	b083      	sub	sp, #12
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010b7a:	bf00      	nop
 8010b7c:	370c      	adds	r7, #12
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr
	...

08010b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4a40      	ldr	r2, [pc, #256]	@ (8010c9c <TIM_Base_SetConfig+0x114>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d013      	beq.n	8010bc8 <TIM_Base_SetConfig+0x40>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ba6:	d00f      	beq.n	8010bc8 <TIM_Base_SetConfig+0x40>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4a3d      	ldr	r2, [pc, #244]	@ (8010ca0 <TIM_Base_SetConfig+0x118>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d00b      	beq.n	8010bc8 <TIM_Base_SetConfig+0x40>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8010ca4 <TIM_Base_SetConfig+0x11c>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d007      	beq.n	8010bc8 <TIM_Base_SetConfig+0x40>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4a3b      	ldr	r2, [pc, #236]	@ (8010ca8 <TIM_Base_SetConfig+0x120>)
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d003      	beq.n	8010bc8 <TIM_Base_SetConfig+0x40>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4a3a      	ldr	r2, [pc, #232]	@ (8010cac <TIM_Base_SetConfig+0x124>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d108      	bne.n	8010bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	68fa      	ldr	r2, [r7, #12]
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8010c9c <TIM_Base_SetConfig+0x114>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d02b      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010be8:	d027      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	4a2c      	ldr	r2, [pc, #176]	@ (8010ca0 <TIM_Base_SetConfig+0x118>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d023      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8010ca4 <TIM_Base_SetConfig+0x11c>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d01f      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8010ca8 <TIM_Base_SetConfig+0x120>)
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	d01b      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4a29      	ldr	r2, [pc, #164]	@ (8010cac <TIM_Base_SetConfig+0x124>)
 8010c06:	4293      	cmp	r3, r2
 8010c08:	d017      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4a28      	ldr	r2, [pc, #160]	@ (8010cb0 <TIM_Base_SetConfig+0x128>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d013      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	4a27      	ldr	r2, [pc, #156]	@ (8010cb4 <TIM_Base_SetConfig+0x12c>)
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d00f      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4a26      	ldr	r2, [pc, #152]	@ (8010cb8 <TIM_Base_SetConfig+0x130>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d00b      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4a25      	ldr	r2, [pc, #148]	@ (8010cbc <TIM_Base_SetConfig+0x134>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d007      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4a24      	ldr	r2, [pc, #144]	@ (8010cc0 <TIM_Base_SetConfig+0x138>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d003      	beq.n	8010c3a <TIM_Base_SetConfig+0xb2>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4a23      	ldr	r2, [pc, #140]	@ (8010cc4 <TIM_Base_SetConfig+0x13c>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d108      	bne.n	8010c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	695b      	ldr	r3, [r3, #20]
 8010c56:	4313      	orrs	r3, r2
 8010c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	689a      	ldr	r2, [r3, #8]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4a0a      	ldr	r2, [pc, #40]	@ (8010c9c <TIM_Base_SetConfig+0x114>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d003      	beq.n	8010c80 <TIM_Base_SetConfig+0xf8>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8010cac <TIM_Base_SetConfig+0x124>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d103      	bne.n	8010c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	691a      	ldr	r2, [r3, #16]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	615a      	str	r2, [r3, #20]
}
 8010c8e:	bf00      	nop
 8010c90:	3714      	adds	r7, #20
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	40010000 	.word	0x40010000
 8010ca0:	40000400 	.word	0x40000400
 8010ca4:	40000800 	.word	0x40000800
 8010ca8:	40000c00 	.word	0x40000c00
 8010cac:	40010400 	.word	0x40010400
 8010cb0:	40014000 	.word	0x40014000
 8010cb4:	40014400 	.word	0x40014400
 8010cb8:	40014800 	.word	0x40014800
 8010cbc:	40001800 	.word	0x40001800
 8010cc0:	40001c00 	.word	0x40001c00
 8010cc4:	40002000 	.word	0x40002000

08010cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b087      	sub	sp, #28
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6a1b      	ldr	r3, [r3, #32]
 8010cd6:	f023 0201 	bic.w	r2, r3, #1
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a1b      	ldr	r3, [r3, #32]
 8010ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	699b      	ldr	r3, [r3, #24]
 8010cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f023 0303 	bic.w	r3, r3, #3
 8010cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	68fa      	ldr	r2, [r7, #12]
 8010d06:	4313      	orrs	r3, r2
 8010d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	f023 0302 	bic.w	r3, r3, #2
 8010d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	689b      	ldr	r3, [r3, #8]
 8010d16:	697a      	ldr	r2, [r7, #20]
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4a20      	ldr	r2, [pc, #128]	@ (8010da0 <TIM_OC1_SetConfig+0xd8>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d003      	beq.n	8010d2c <TIM_OC1_SetConfig+0x64>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	4a1f      	ldr	r2, [pc, #124]	@ (8010da4 <TIM_OC1_SetConfig+0xdc>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d10c      	bne.n	8010d46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	f023 0308 	bic.w	r3, r3, #8
 8010d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	697a      	ldr	r2, [r7, #20]
 8010d3a:	4313      	orrs	r3, r2
 8010d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	f023 0304 	bic.w	r3, r3, #4
 8010d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	4a15      	ldr	r2, [pc, #84]	@ (8010da0 <TIM_OC1_SetConfig+0xd8>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d003      	beq.n	8010d56 <TIM_OC1_SetConfig+0x8e>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4a14      	ldr	r2, [pc, #80]	@ (8010da4 <TIM_OC1_SetConfig+0xdc>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d111      	bne.n	8010d7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	695b      	ldr	r3, [r3, #20]
 8010d6a:	693a      	ldr	r2, [r7, #16]
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	699b      	ldr	r3, [r3, #24]
 8010d74:	693a      	ldr	r2, [r7, #16]
 8010d76:	4313      	orrs	r3, r2
 8010d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	68fa      	ldr	r2, [r7, #12]
 8010d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	685a      	ldr	r2, [r3, #4]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	621a      	str	r2, [r3, #32]
}
 8010d94:	bf00      	nop
 8010d96:	371c      	adds	r7, #28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	40010000 	.word	0x40010000
 8010da4:	40010400 	.word	0x40010400

08010da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b087      	sub	sp, #28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6a1b      	ldr	r3, [r3, #32]
 8010db6:	f023 0210 	bic.w	r2, r3, #16
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6a1b      	ldr	r3, [r3, #32]
 8010dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	699b      	ldr	r3, [r3, #24]
 8010dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	021b      	lsls	r3, r3, #8
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	4313      	orrs	r3, r2
 8010dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	f023 0320 	bic.w	r3, r3, #32
 8010df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	011b      	lsls	r3, r3, #4
 8010dfa:	697a      	ldr	r2, [r7, #20]
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	4a22      	ldr	r2, [pc, #136]	@ (8010e8c <TIM_OC2_SetConfig+0xe4>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d003      	beq.n	8010e10 <TIM_OC2_SetConfig+0x68>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	4a21      	ldr	r2, [pc, #132]	@ (8010e90 <TIM_OC2_SetConfig+0xe8>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d10d      	bne.n	8010e2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	011b      	lsls	r3, r3, #4
 8010e1e:	697a      	ldr	r2, [r7, #20]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	4a17      	ldr	r2, [pc, #92]	@ (8010e8c <TIM_OC2_SetConfig+0xe4>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d003      	beq.n	8010e3c <TIM_OC2_SetConfig+0x94>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	4a16      	ldr	r2, [pc, #88]	@ (8010e90 <TIM_OC2_SetConfig+0xe8>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d113      	bne.n	8010e64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	695b      	ldr	r3, [r3, #20]
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	693a      	ldr	r2, [r7, #16]
 8010e54:	4313      	orrs	r3, r2
 8010e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	699b      	ldr	r3, [r3, #24]
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	693a      	ldr	r2, [r7, #16]
 8010e60:	4313      	orrs	r3, r2
 8010e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	693a      	ldr	r2, [r7, #16]
 8010e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	685a      	ldr	r2, [r3, #4]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	697a      	ldr	r2, [r7, #20]
 8010e7c:	621a      	str	r2, [r3, #32]
}
 8010e7e:	bf00      	nop
 8010e80:	371c      	adds	r7, #28
 8010e82:	46bd      	mov	sp, r7
 8010e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e88:	4770      	bx	lr
 8010e8a:	bf00      	nop
 8010e8c:	40010000 	.word	0x40010000
 8010e90:	40010400 	.word	0x40010400

08010e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b087      	sub	sp, #28
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6a1b      	ldr	r3, [r3, #32]
 8010ea2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6a1b      	ldr	r3, [r3, #32]
 8010eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f023 0303 	bic.w	r3, r3, #3
 8010eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	021b      	lsls	r3, r3, #8
 8010ee4:	697a      	ldr	r2, [r7, #20]
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	4a21      	ldr	r2, [pc, #132]	@ (8010f74 <TIM_OC3_SetConfig+0xe0>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d003      	beq.n	8010efa <TIM_OC3_SetConfig+0x66>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4a20      	ldr	r2, [pc, #128]	@ (8010f78 <TIM_OC3_SetConfig+0xe4>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d10d      	bne.n	8010f16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	021b      	lsls	r3, r3, #8
 8010f08:	697a      	ldr	r2, [r7, #20]
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4a16      	ldr	r2, [pc, #88]	@ (8010f74 <TIM_OC3_SetConfig+0xe0>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d003      	beq.n	8010f26 <TIM_OC3_SetConfig+0x92>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4a15      	ldr	r2, [pc, #84]	@ (8010f78 <TIM_OC3_SetConfig+0xe4>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d113      	bne.n	8010f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	695b      	ldr	r3, [r3, #20]
 8010f3a:	011b      	lsls	r3, r3, #4
 8010f3c:	693a      	ldr	r2, [r7, #16]
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	699b      	ldr	r3, [r3, #24]
 8010f46:	011b      	lsls	r3, r3, #4
 8010f48:	693a      	ldr	r2, [r7, #16]
 8010f4a:	4313      	orrs	r3, r2
 8010f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	685a      	ldr	r2, [r3, #4]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	697a      	ldr	r2, [r7, #20]
 8010f66:	621a      	str	r2, [r3, #32]
}
 8010f68:	bf00      	nop
 8010f6a:	371c      	adds	r7, #28
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	40010000 	.word	0x40010000
 8010f78:	40010400 	.word	0x40010400

08010f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b087      	sub	sp, #28
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6a1b      	ldr	r3, [r3, #32]
 8010f8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a1b      	ldr	r3, [r3, #32]
 8010f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	69db      	ldr	r3, [r3, #28]
 8010fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	021b      	lsls	r3, r3, #8
 8010fba:	68fa      	ldr	r2, [r7, #12]
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	689b      	ldr	r3, [r3, #8]
 8010fcc:	031b      	lsls	r3, r3, #12
 8010fce:	693a      	ldr	r2, [r7, #16]
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	4a12      	ldr	r2, [pc, #72]	@ (8011020 <TIM_OC4_SetConfig+0xa4>)
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d003      	beq.n	8010fe4 <TIM_OC4_SetConfig+0x68>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	4a11      	ldr	r2, [pc, #68]	@ (8011024 <TIM_OC4_SetConfig+0xa8>)
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d109      	bne.n	8010ff8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	695b      	ldr	r3, [r3, #20]
 8010ff0:	019b      	lsls	r3, r3, #6
 8010ff2:	697a      	ldr	r2, [r7, #20]
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	697a      	ldr	r2, [r7, #20]
 8010ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	685a      	ldr	r2, [r3, #4]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	693a      	ldr	r2, [r7, #16]
 8011010:	621a      	str	r2, [r3, #32]
}
 8011012:	bf00      	nop
 8011014:	371c      	adds	r7, #28
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr
 801101e:	bf00      	nop
 8011020:	40010000 	.word	0x40010000
 8011024:	40010400 	.word	0x40010400

08011028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011028:	b480      	push	{r7}
 801102a:	b087      	sub	sp, #28
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	6a1b      	ldr	r3, [r3, #32]
 8011038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6a1b      	ldr	r3, [r3, #32]
 801103e:	f023 0201 	bic.w	r2, r3, #1
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	699b      	ldr	r3, [r3, #24]
 801104a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	011b      	lsls	r3, r3, #4
 8011058:	693a      	ldr	r2, [r7, #16]
 801105a:	4313      	orrs	r3, r2
 801105c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	f023 030a 	bic.w	r3, r3, #10
 8011064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011066:	697a      	ldr	r2, [r7, #20]
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	4313      	orrs	r3, r2
 801106c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	693a      	ldr	r2, [r7, #16]
 8011072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	697a      	ldr	r2, [r7, #20]
 8011078:	621a      	str	r2, [r3, #32]
}
 801107a:	bf00      	nop
 801107c:	371c      	adds	r7, #28
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr

08011086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011086:	b480      	push	{r7}
 8011088:	b087      	sub	sp, #28
 801108a:	af00      	add	r7, sp, #0
 801108c:	60f8      	str	r0, [r7, #12]
 801108e:	60b9      	str	r1, [r7, #8]
 8011090:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6a1b      	ldr	r3, [r3, #32]
 8011096:	f023 0210 	bic.w	r2, r3, #16
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	699b      	ldr	r3, [r3, #24]
 80110a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	6a1b      	ldr	r3, [r3, #32]
 80110a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80110b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	031b      	lsls	r3, r3, #12
 80110b6:	697a      	ldr	r2, [r7, #20]
 80110b8:	4313      	orrs	r3, r2
 80110ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80110c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	011b      	lsls	r3, r3, #4
 80110c8:	693a      	ldr	r2, [r7, #16]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	697a      	ldr	r2, [r7, #20]
 80110d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	693a      	ldr	r2, [r7, #16]
 80110d8:	621a      	str	r2, [r3, #32]
}
 80110da:	bf00      	nop
 80110dc:	371c      	adds	r7, #28
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr

080110e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80110e6:	b480      	push	{r7}
 80110e8:	b085      	sub	sp, #20
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
 80110ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80110fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80110fe:	683a      	ldr	r2, [r7, #0]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4313      	orrs	r3, r2
 8011104:	f043 0307 	orr.w	r3, r3, #7
 8011108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	68fa      	ldr	r2, [r7, #12]
 801110e:	609a      	str	r2, [r3, #8]
}
 8011110:	bf00      	nop
 8011112:	3714      	adds	r7, #20
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr

0801111c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801111c:	b480      	push	{r7}
 801111e:	b087      	sub	sp, #28
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
 8011128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	689b      	ldr	r3, [r3, #8]
 801112e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	021a      	lsls	r2, r3, #8
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	431a      	orrs	r2, r3
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	4313      	orrs	r3, r2
 8011144:	697a      	ldr	r2, [r7, #20]
 8011146:	4313      	orrs	r3, r2
 8011148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	697a      	ldr	r2, [r7, #20]
 801114e:	609a      	str	r2, [r3, #8]
}
 8011150:	bf00      	nop
 8011152:	371c      	adds	r7, #28
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801115c:	b480      	push	{r7}
 801115e:	b085      	sub	sp, #20
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801116c:	2b01      	cmp	r3, #1
 801116e:	d101      	bne.n	8011174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011170:	2302      	movs	r3, #2
 8011172:	e05a      	b.n	801122a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2201      	movs	r2, #1
 8011178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2202      	movs	r2, #2
 8011180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	689b      	ldr	r3, [r3, #8]
 8011192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801119a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	68fa      	ldr	r2, [r7, #12]
 80111a2:	4313      	orrs	r3, r2
 80111a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	68fa      	ldr	r2, [r7, #12]
 80111ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4a21      	ldr	r2, [pc, #132]	@ (8011238 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d022      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111c0:	d01d      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a1d      	ldr	r2, [pc, #116]	@ (801123c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d018      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4a1b      	ldr	r2, [pc, #108]	@ (8011240 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80111d2:	4293      	cmp	r3, r2
 80111d4:	d013      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4a1a      	ldr	r2, [pc, #104]	@ (8011244 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d00e      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4a18      	ldr	r2, [pc, #96]	@ (8011248 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d009      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4a17      	ldr	r2, [pc, #92]	@ (801124c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d004      	beq.n	80111fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a15      	ldr	r2, [pc, #84]	@ (8011250 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d10c      	bne.n	8011218 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	4313      	orrs	r3, r2
 801120e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2201      	movs	r2, #1
 801121c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	40010000 	.word	0x40010000
 801123c:	40000400 	.word	0x40000400
 8011240:	40000800 	.word	0x40000800
 8011244:	40000c00 	.word	0x40000c00
 8011248:	40010400 	.word	0x40010400
 801124c:	40014000 	.word	0x40014000
 8011250:	40001800 	.word	0x40001800

08011254 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011254:	b480      	push	{r7}
 8011256:	b085      	sub	sp, #20
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801125e:	2300      	movs	r3, #0
 8011260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011268:	2b01      	cmp	r3, #1
 801126a:	d101      	bne.n	8011270 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801126c:	2302      	movs	r3, #2
 801126e:	e03d      	b.n	80112ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2201      	movs	r2, #1
 8011274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	68db      	ldr	r3, [r3, #12]
 8011282:	4313      	orrs	r3, r2
 8011284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	689b      	ldr	r3, [r3, #8]
 8011290:	4313      	orrs	r3, r2
 8011292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	4313      	orrs	r3, r2
 80112a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4313      	orrs	r3, r2
 80112ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	691b      	ldr	r3, [r3, #16]
 80112ba:	4313      	orrs	r3, r2
 80112bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	695b      	ldr	r3, [r3, #20]
 80112c8:	4313      	orrs	r3, r2
 80112ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	69db      	ldr	r3, [r3, #28]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	68fa      	ldr	r2, [r7, #12]
 80112e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80112ea:	2300      	movs	r3, #0
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3714      	adds	r7, #20
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011300:	bf00      	nop
 8011302:	370c      	adds	r7, #12
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr

0801130c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011314:	bf00      	nop
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d101      	bne.n	8011332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801132e:	2301      	movs	r3, #1
 8011330:	e03f      	b.n	80113b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011338:	b2db      	uxtb	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d106      	bne.n	801134c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f7fc fd4a 	bl	800dde0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2224      	movs	r2, #36	@ 0x24
 8011350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	68da      	ldr	r2, [r3, #12]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 fdd5 	bl	8011f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	691a      	ldr	r2, [r3, #16]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	695a      	ldr	r2, [r3, #20]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	68da      	ldr	r2, [r3, #12]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2200      	movs	r2, #0
 801139e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2220      	movs	r2, #32
 80113a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2220      	movs	r2, #32
 80113ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80113b0:	2300      	movs	r3, #0
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b08a      	sub	sp, #40	@ 0x28
 80113be:	af02      	add	r7, sp, #8
 80113c0:	60f8      	str	r0, [r7, #12]
 80113c2:	60b9      	str	r1, [r7, #8]
 80113c4:	603b      	str	r3, [r7, #0]
 80113c6:	4613      	mov	r3, r2
 80113c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80113ca:	2300      	movs	r3, #0
 80113cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	2b20      	cmp	r3, #32
 80113d8:	d17c      	bne.n	80114d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d002      	beq.n	80113e6 <HAL_UART_Transmit+0x2c>
 80113e0:	88fb      	ldrh	r3, [r7, #6]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80113e6:	2301      	movs	r3, #1
 80113e8:	e075      	b.n	80114d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d101      	bne.n	80113f8 <HAL_UART_Transmit+0x3e>
 80113f4:	2302      	movs	r3, #2
 80113f6:	e06e      	b.n	80114d6 <HAL_UART_Transmit+0x11c>
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2201      	movs	r2, #1
 80113fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2200      	movs	r2, #0
 8011404:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2221      	movs	r2, #33	@ 0x21
 801140a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801140e:	f7fc ff65 	bl	800e2dc <HAL_GetTick>
 8011412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	88fa      	ldrh	r2, [r7, #6]
 8011418:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	88fa      	ldrh	r2, [r7, #6]
 801141e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	689b      	ldr	r3, [r3, #8]
 8011424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011428:	d108      	bne.n	801143c <HAL_UART_Transmit+0x82>
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	691b      	ldr	r3, [r3, #16]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d104      	bne.n	801143c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011432:	2300      	movs	r3, #0
 8011434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	61bb      	str	r3, [r7, #24]
 801143a:	e003      	b.n	8011444 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011440:	2300      	movs	r3, #0
 8011442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2200      	movs	r2, #0
 8011448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 801144c:	e02a      	b.n	80114a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	2200      	movs	r2, #0
 8011456:	2180      	movs	r1, #128	@ 0x80
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f000 fb15 	bl	8011a88 <UART_WaitOnFlagUntilTimeout>
 801145e:	4603      	mov	r3, r0
 8011460:	2b00      	cmp	r3, #0
 8011462:	d001      	beq.n	8011468 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011464:	2303      	movs	r3, #3
 8011466:	e036      	b.n	80114d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011468:	69fb      	ldr	r3, [r7, #28]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d10b      	bne.n	8011486 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	881b      	ldrh	r3, [r3, #0]
 8011472:	461a      	mov	r2, r3
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801147c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	3302      	adds	r3, #2
 8011482:	61bb      	str	r3, [r7, #24]
 8011484:	e007      	b.n	8011496 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	781a      	ldrb	r2, [r3, #0]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011490:	69fb      	ldr	r3, [r7, #28]
 8011492:	3301      	adds	r3, #1
 8011494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801149a:	b29b      	uxth	r3, r3
 801149c:	3b01      	subs	r3, #1
 801149e:	b29a      	uxth	r2, r3
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1cf      	bne.n	801144e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	2200      	movs	r2, #0
 80114b6:	2140      	movs	r1, #64	@ 0x40
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f000 fae5 	bl	8011a88 <UART_WaitOnFlagUntilTimeout>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80114c4:	2303      	movs	r3, #3
 80114c6:	e006      	b.n	80114d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2220      	movs	r2, #32
 80114cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80114d0:	2300      	movs	r3, #0
 80114d2:	e000      	b.n	80114d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80114d4:	2302      	movs	r3, #2
  }
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3720      	adds	r7, #32
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b084      	sub	sp, #16
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	60f8      	str	r0, [r7, #12]
 80114e6:	60b9      	str	r1, [r7, #8]
 80114e8:	4613      	mov	r3, r2
 80114ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80114f2:	b2db      	uxtb	r3, r3
 80114f4:	2b20      	cmp	r3, #32
 80114f6:	d11d      	bne.n	8011534 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <HAL_UART_Receive_IT+0x26>
 80114fe:	88fb      	ldrh	r3, [r7, #6]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d101      	bne.n	8011508 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8011504:	2301      	movs	r3, #1
 8011506:	e016      	b.n	8011536 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801150e:	2b01      	cmp	r3, #1
 8011510:	d101      	bne.n	8011516 <HAL_UART_Receive_IT+0x38>
 8011512:	2302      	movs	r3, #2
 8011514:	e00f      	b.n	8011536 <HAL_UART_Receive_IT+0x58>
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2201      	movs	r2, #1
 801151a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2200      	movs	r2, #0
 8011522:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011524:	88fb      	ldrh	r3, [r7, #6]
 8011526:	461a      	mov	r2, r3
 8011528:	68b9      	ldr	r1, [r7, #8]
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f000 fb1a 	bl	8011b64 <UART_Start_Receive_IT>
 8011530:	4603      	mov	r3, r0
 8011532:	e000      	b.n	8011536 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8011534:	2302      	movs	r3, #2
  }
}
 8011536:	4618      	mov	r0, r3
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
	...

08011540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b0ba      	sub	sp, #232	@ 0xe8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	695b      	ldr	r3, [r3, #20]
 8011562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8011566:	2300      	movs	r3, #0
 8011568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 801156c:	2300      	movs	r3, #0
 801156e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011576:	f003 030f 	and.w	r3, r3, #15
 801157a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 801157e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011582:	2b00      	cmp	r3, #0
 8011584:	d10f      	bne.n	80115a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801158a:	f003 0320 	and.w	r3, r3, #32
 801158e:	2b00      	cmp	r3, #0
 8011590:	d009      	beq.n	80115a6 <HAL_UART_IRQHandler+0x66>
 8011592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011596:	f003 0320 	and.w	r3, r3, #32
 801159a:	2b00      	cmp	r3, #0
 801159c:	d003      	beq.n	80115a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f000 fbfd 	bl	8011d9e <UART_Receive_IT>
      return;
 80115a4:	e256      	b.n	8011a54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80115a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f000 80de 	beq.w	801176c <HAL_UART_IRQHandler+0x22c>
 80115b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80115b4:	f003 0301 	and.w	r3, r3, #1
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d106      	bne.n	80115ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80115bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80115c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	f000 80d1 	beq.w	801176c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80115ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80115ce:	f003 0301 	and.w	r3, r3, #1
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d00b      	beq.n	80115ee <HAL_UART_IRQHandler+0xae>
 80115d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80115da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d005      	beq.n	80115ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115e6:	f043 0201 	orr.w	r2, r3, #1
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80115ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80115f2:	f003 0304 	and.w	r3, r3, #4
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d00b      	beq.n	8011612 <HAL_UART_IRQHandler+0xd2>
 80115fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80115fe:	f003 0301 	and.w	r3, r3, #1
 8011602:	2b00      	cmp	r3, #0
 8011604:	d005      	beq.n	8011612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801160a:	f043 0202 	orr.w	r2, r3, #2
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011616:	f003 0302 	and.w	r3, r3, #2
 801161a:	2b00      	cmp	r3, #0
 801161c:	d00b      	beq.n	8011636 <HAL_UART_IRQHandler+0xf6>
 801161e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011622:	f003 0301 	and.w	r3, r3, #1
 8011626:	2b00      	cmp	r3, #0
 8011628:	d005      	beq.n	8011636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801162e:	f043 0204 	orr.w	r2, r3, #4
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801163a:	f003 0308 	and.w	r3, r3, #8
 801163e:	2b00      	cmp	r3, #0
 8011640:	d011      	beq.n	8011666 <HAL_UART_IRQHandler+0x126>
 8011642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011646:	f003 0320 	and.w	r3, r3, #32
 801164a:	2b00      	cmp	r3, #0
 801164c:	d105      	bne.n	801165a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801164e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011652:	f003 0301 	and.w	r3, r3, #1
 8011656:	2b00      	cmp	r3, #0
 8011658:	d005      	beq.n	8011666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801165e:	f043 0208 	orr.w	r2, r3, #8
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801166a:	2b00      	cmp	r3, #0
 801166c:	f000 81ed 	beq.w	8011a4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011674:	f003 0320 	and.w	r3, r3, #32
 8011678:	2b00      	cmp	r3, #0
 801167a:	d008      	beq.n	801168e <HAL_UART_IRQHandler+0x14e>
 801167c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011680:	f003 0320 	and.w	r3, r3, #32
 8011684:	2b00      	cmp	r3, #0
 8011686:	d002      	beq.n	801168e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 fb88 	bl	8011d9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	695b      	ldr	r3, [r3, #20]
 8011694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011698:	2b40      	cmp	r3, #64	@ 0x40
 801169a:	bf0c      	ite	eq
 801169c:	2301      	moveq	r3, #1
 801169e:	2300      	movne	r3, #0
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116aa:	f003 0308 	and.w	r3, r3, #8
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d103      	bne.n	80116ba <HAL_UART_IRQHandler+0x17a>
 80116b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d04f      	beq.n	801175a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 fa90 	bl	8011be0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	695b      	ldr	r3, [r3, #20]
 80116c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116ca:	2b40      	cmp	r3, #64	@ 0x40
 80116cc:	d141      	bne.n	8011752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	3314      	adds	r3, #20
 80116d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80116dc:	e853 3f00 	ldrex	r3, [r3]
 80116e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80116e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80116e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	3314      	adds	r3, #20
 80116f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80116fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80116fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801170a:	e841 2300 	strex	r3, r2, [r1]
 801170e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8011712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d1d9      	bne.n	80116ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801171e:	2b00      	cmp	r3, #0
 8011720:	d013      	beq.n	801174a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011726:	4a7d      	ldr	r2, [pc, #500]	@ (801191c <HAL_UART_IRQHandler+0x3dc>)
 8011728:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801172e:	4618      	mov	r0, r3
 8011730:	f7fc ff85 	bl	800e63e <HAL_DMA_Abort_IT>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d016      	beq.n	8011768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801173e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011744:	4610      	mov	r0, r2
 8011746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011748:	e00e      	b.n	8011768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f000 f986 	bl	8011a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011750:	e00a      	b.n	8011768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f000 f982 	bl	8011a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011758:	e006      	b.n	8011768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 f97e 	bl	8011a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2200      	movs	r2, #0
 8011764:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8011766:	e170      	b.n	8011a4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011768:	bf00      	nop
    return;
 801176a:	e16e      	b.n	8011a4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011770:	2b01      	cmp	r3, #1
 8011772:	f040 814a 	bne.w	8011a0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801177a:	f003 0310 	and.w	r3, r3, #16
 801177e:	2b00      	cmp	r3, #0
 8011780:	f000 8143 	beq.w	8011a0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011788:	f003 0310 	and.w	r3, r3, #16
 801178c:	2b00      	cmp	r3, #0
 801178e:	f000 813c 	beq.w	8011a0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011792:	2300      	movs	r3, #0
 8011794:	60bb      	str	r3, [r7, #8]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	60bb      	str	r3, [r7, #8]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	60bb      	str	r3, [r7, #8]
 80117a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117b2:	2b40      	cmp	r3, #64	@ 0x40
 80117b4:	f040 80b4 	bne.w	8011920 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80117c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f000 8140 	beq.w	8011a4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80117d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80117d6:	429a      	cmp	r2, r3
 80117d8:	f080 8139 	bcs.w	8011a4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80117e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117e8:	69db      	ldr	r3, [r3, #28]
 80117ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117ee:	f000 8088 	beq.w	8011902 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	330c      	adds	r3, #12
 80117f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011800:	e853 3f00 	ldrex	r3, [r3]
 8011804:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011808:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801180c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	330c      	adds	r3, #12
 801181a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801181e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011826:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801182a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801182e:	e841 2300 	strex	r3, r2, [r1]
 8011832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8011836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801183a:	2b00      	cmp	r3, #0
 801183c:	d1d9      	bne.n	80117f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	3314      	adds	r3, #20
 8011844:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011846:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011848:	e853 3f00 	ldrex	r3, [r3]
 801184c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801184e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011850:	f023 0301 	bic.w	r3, r3, #1
 8011854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	3314      	adds	r3, #20
 801185e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011862:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011866:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011868:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801186a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801186e:	e841 2300 	strex	r3, r2, [r1]
 8011872:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011876:	2b00      	cmp	r3, #0
 8011878:	d1e1      	bne.n	801183e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	3314      	adds	r3, #20
 8011880:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011882:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011884:	e853 3f00 	ldrex	r3, [r3]
 8011888:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801188a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801188c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	3314      	adds	r3, #20
 801189a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801189e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80118a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80118a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80118a6:	e841 2300 	strex	r3, r2, [r1]
 80118aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80118ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1e3      	bne.n	801187a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2220      	movs	r2, #32
 80118b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2200      	movs	r2, #0
 80118be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	330c      	adds	r3, #12
 80118c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118ca:	e853 3f00 	ldrex	r3, [r3]
 80118ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80118d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118d2:	f023 0310 	bic.w	r3, r3, #16
 80118d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	330c      	adds	r3, #12
 80118e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80118e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80118e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80118ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80118ec:	e841 2300 	strex	r3, r2, [r1]
 80118f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80118f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1e3      	bne.n	80118c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7fc fe2e 	bl	800e55e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801190a:	b29b      	uxth	r3, r3
 801190c:	1ad3      	subs	r3, r2, r3
 801190e:	b29b      	uxth	r3, r3
 8011910:	4619      	mov	r1, r3
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 f8ac 	bl	8011a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011918:	e099      	b.n	8011a4e <HAL_UART_IRQHandler+0x50e>
 801191a:	bf00      	nop
 801191c:	08011ca7 	.word	0x08011ca7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011928:	b29b      	uxth	r3, r3
 801192a:	1ad3      	subs	r3, r2, r3
 801192c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011934:	b29b      	uxth	r3, r3
 8011936:	2b00      	cmp	r3, #0
 8011938:	f000 808b 	beq.w	8011a52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801193c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011940:	2b00      	cmp	r3, #0
 8011942:	f000 8086 	beq.w	8011a52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	330c      	adds	r3, #12
 801194c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801194e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011950:	e853 3f00 	ldrex	r3, [r3]
 8011954:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801195c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	330c      	adds	r3, #12
 8011966:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801196a:	647a      	str	r2, [r7, #68]	@ 0x44
 801196c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801196e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011970:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011972:	e841 2300 	strex	r3, r2, [r1]
 8011976:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1e3      	bne.n	8011946 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	3314      	adds	r3, #20
 8011984:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011988:	e853 3f00 	ldrex	r3, [r3]
 801198c:	623b      	str	r3, [r7, #32]
   return(result);
 801198e:	6a3b      	ldr	r3, [r7, #32]
 8011990:	f023 0301 	bic.w	r3, r3, #1
 8011994:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	3314      	adds	r3, #20
 801199e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80119a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80119a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119aa:	e841 2300 	strex	r3, r2, [r1]
 80119ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80119b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d1e3      	bne.n	801197e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2220      	movs	r2, #32
 80119ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2200      	movs	r2, #0
 80119c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	330c      	adds	r3, #12
 80119ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	e853 3f00 	ldrex	r3, [r3]
 80119d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f023 0310 	bic.w	r3, r3, #16
 80119da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	330c      	adds	r3, #12
 80119e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80119e8:	61fa      	str	r2, [r7, #28]
 80119ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ec:	69b9      	ldr	r1, [r7, #24]
 80119ee:	69fa      	ldr	r2, [r7, #28]
 80119f0:	e841 2300 	strex	r3, r2, [r1]
 80119f4:	617b      	str	r3, [r7, #20]
   return(result);
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1e3      	bne.n	80119c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80119fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011a00:	4619      	mov	r1, r3
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 f834 	bl	8011a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011a08:	e023      	b.n	8011a52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d009      	beq.n	8011a2a <HAL_UART_IRQHandler+0x4ea>
 8011a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d003      	beq.n	8011a2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f953 	bl	8011cce <UART_Transmit_IT>
    return;
 8011a28:	e014      	b.n	8011a54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00e      	beq.n	8011a54 <HAL_UART_IRQHandler+0x514>
 8011a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d008      	beq.n	8011a54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 f993 	bl	8011d6e <UART_EndTransmit_IT>
    return;
 8011a48:	e004      	b.n	8011a54 <HAL_UART_IRQHandler+0x514>
    return;
 8011a4a:	bf00      	nop
 8011a4c:	e002      	b.n	8011a54 <HAL_UART_IRQHandler+0x514>
      return;
 8011a4e:	bf00      	nop
 8011a50:	e000      	b.n	8011a54 <HAL_UART_IRQHandler+0x514>
      return;
 8011a52:	bf00      	nop
  }
}
 8011a54:	37e8      	adds	r7, #232	@ 0xe8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop

08011a5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011a64:	bf00      	nop
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	460b      	mov	r3, r1
 8011a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011a7c:	bf00      	nop
 8011a7e:	370c      	adds	r7, #12
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr

08011a88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b090      	sub	sp, #64	@ 0x40
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	603b      	str	r3, [r7, #0]
 8011a94:	4613      	mov	r3, r2
 8011a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a98:	e050      	b.n	8011b3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aa0:	d04c      	beq.n	8011b3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d007      	beq.n	8011ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011aa8:	f7fc fc18 	bl	800e2dc <HAL_GetTick>
 8011aac:	4602      	mov	r2, r0
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d241      	bcs.n	8011b3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	330c      	adds	r3, #12
 8011abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac2:	e853 3f00 	ldrex	r3, [r3]
 8011ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aca:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	330c      	adds	r3, #12
 8011ad6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011ad8:	637a      	str	r2, [r7, #52]	@ 0x34
 8011ada:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011ade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ae0:	e841 2300 	strex	r3, r2, [r1]
 8011ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d1e5      	bne.n	8011ab8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	3314      	adds	r3, #20
 8011af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	e853 3f00 	ldrex	r3, [r3]
 8011afa:	613b      	str	r3, [r7, #16]
   return(result);
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	f023 0301 	bic.w	r3, r3, #1
 8011b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	3314      	adds	r3, #20
 8011b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b0c:	623a      	str	r2, [r7, #32]
 8011b0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b10:	69f9      	ldr	r1, [r7, #28]
 8011b12:	6a3a      	ldr	r2, [r7, #32]
 8011b14:	e841 2300 	strex	r3, r2, [r1]
 8011b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d1e5      	bne.n	8011aec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2220      	movs	r2, #32
 8011b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2220      	movs	r2, #32
 8011b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2200      	movs	r2, #0
 8011b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8011b38:	2303      	movs	r3, #3
 8011b3a:	e00f      	b.n	8011b5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	4013      	ands	r3, r2
 8011b46:	68ba      	ldr	r2, [r7, #8]
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	bf0c      	ite	eq
 8011b4c:	2301      	moveq	r3, #1
 8011b4e:	2300      	movne	r3, #0
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	461a      	mov	r2, r3
 8011b54:	79fb      	ldrb	r3, [r7, #7]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d09f      	beq.n	8011a9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011b5a:	2300      	movs	r3, #0
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3740      	adds	r7, #64	@ 0x40
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	60b9      	str	r1, [r7, #8]
 8011b6e:	4613      	mov	r3, r2
 8011b70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	68ba      	ldr	r2, [r7, #8]
 8011b76:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	88fa      	ldrh	r2, [r7, #6]
 8011b7c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	88fa      	ldrh	r2, [r7, #6]
 8011b82:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2200      	movs	r2, #0
 8011b88:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2222      	movs	r2, #34	@ 0x22
 8011b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2200      	movs	r2, #0
 8011b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d007      	beq.n	8011bb2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	68da      	ldr	r2, [r3, #12]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011bb0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	695a      	ldr	r2, [r3, #20]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f042 0201 	orr.w	r2, r2, #1
 8011bc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	68da      	ldr	r2, [r3, #12]
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f042 0220 	orr.w	r2, r2, #32
 8011bd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011bd2:	2300      	movs	r3, #0
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3714      	adds	r7, #20
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bde:	4770      	bx	lr

08011be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b095      	sub	sp, #84	@ 0x54
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	330c      	adds	r3, #12
 8011bee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bf2:	e853 3f00 	ldrex	r3, [r3]
 8011bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	330c      	adds	r3, #12
 8011c06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011c08:	643a      	str	r2, [r7, #64]	@ 0x40
 8011c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c10:	e841 2300 	strex	r3, r2, [r1]
 8011c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d1e5      	bne.n	8011be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	3314      	adds	r3, #20
 8011c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c24:	6a3b      	ldr	r3, [r7, #32]
 8011c26:	e853 3f00 	ldrex	r3, [r3]
 8011c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c2c:	69fb      	ldr	r3, [r7, #28]
 8011c2e:	f023 0301 	bic.w	r3, r3, #1
 8011c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	3314      	adds	r3, #20
 8011c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c44:	e841 2300 	strex	r3, r2, [r1]
 8011c48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d1e5      	bne.n	8011c1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d119      	bne.n	8011c8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	330c      	adds	r3, #12
 8011c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	e853 3f00 	ldrex	r3, [r3]
 8011c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	f023 0310 	bic.w	r3, r3, #16
 8011c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	330c      	adds	r3, #12
 8011c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011c78:	61ba      	str	r2, [r7, #24]
 8011c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c7c:	6979      	ldr	r1, [r7, #20]
 8011c7e:	69ba      	ldr	r2, [r7, #24]
 8011c80:	e841 2300 	strex	r3, r2, [r1]
 8011c84:	613b      	str	r3, [r7, #16]
   return(result);
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d1e5      	bne.n	8011c58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2220      	movs	r2, #32
 8011c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2200      	movs	r2, #0
 8011c98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011c9a:	bf00      	nop
 8011c9c:	3754      	adds	r7, #84	@ 0x54
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca4:	4770      	bx	lr

08011ca6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b084      	sub	sp, #16
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011cc0:	68f8      	ldr	r0, [r7, #12]
 8011cc2:	f7ff fecb 	bl	8011a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011cc6:	bf00      	nop
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}

08011cce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011cce:	b480      	push	{r7}
 8011cd0:	b085      	sub	sp, #20
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	2b21      	cmp	r3, #33	@ 0x21
 8011ce0:	d13e      	bne.n	8011d60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011cea:	d114      	bne.n	8011d16 <UART_Transmit_IT+0x48>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	691b      	ldr	r3, [r3, #16]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d110      	bne.n	8011d16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6a1b      	ldr	r3, [r3, #32]
 8011cf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011d08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6a1b      	ldr	r3, [r3, #32]
 8011d0e:	1c9a      	adds	r2, r3, #2
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	621a      	str	r2, [r3, #32]
 8011d14:	e008      	b.n	8011d28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6a1b      	ldr	r3, [r3, #32]
 8011d1a:	1c59      	adds	r1, r3, #1
 8011d1c:	687a      	ldr	r2, [r7, #4]
 8011d1e:	6211      	str	r1, [r2, #32]
 8011d20:	781a      	ldrb	r2, [r3, #0]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	4619      	mov	r1, r3
 8011d36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d10f      	bne.n	8011d5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	68da      	ldr	r2, [r3, #12]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011d4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	68da      	ldr	r2, [r3, #12]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011d5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	e000      	b.n	8011d62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011d60:	2302      	movs	r3, #2
  }
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3714      	adds	r7, #20
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr

08011d6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b082      	sub	sp, #8
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	68da      	ldr	r2, [r3, #12]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011d84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2220      	movs	r2, #32
 8011d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f7fb fd7a 	bl	800d888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011d94:	2300      	movs	r3, #0
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3708      	adds	r7, #8
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b08c      	sub	sp, #48	@ 0x30
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	2b22      	cmp	r3, #34	@ 0x22
 8011db0:	f040 80ab 	bne.w	8011f0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	689b      	ldr	r3, [r3, #8]
 8011db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011dbc:	d117      	bne.n	8011dee <UART_Receive_IT+0x50>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	691b      	ldr	r3, [r3, #16]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d113      	bne.n	8011dee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011de6:	1c9a      	adds	r2, r3, #2
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	629a      	str	r2, [r3, #40]	@ 0x28
 8011dec:	e026      	b.n	8011e3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011df4:	2300      	movs	r3, #0
 8011df6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	689b      	ldr	r3, [r3, #8]
 8011dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011e00:	d007      	beq.n	8011e12 <UART_Receive_IT+0x74>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	689b      	ldr	r3, [r3, #8]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d10a      	bne.n	8011e20 <UART_Receive_IT+0x82>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	691b      	ldr	r3, [r3, #16]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d106      	bne.n	8011e20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	b2da      	uxtb	r2, r3
 8011e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e1c:	701a      	strb	r2, [r3, #0]
 8011e1e:	e008      	b.n	8011e32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e36:	1c5a      	adds	r2, r3, #1
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	3b01      	subs	r3, #1
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	4619      	mov	r1, r3
 8011e4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d15a      	bne.n	8011f06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	68da      	ldr	r2, [r3, #12]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	f022 0220 	bic.w	r2, r2, #32
 8011e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	68da      	ldr	r2, [r3, #12]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	695a      	ldr	r2, [r3, #20]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	f022 0201 	bic.w	r2, r2, #1
 8011e7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2220      	movs	r2, #32
 8011e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d135      	bne.n	8011efc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2200      	movs	r2, #0
 8011e94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	330c      	adds	r3, #12
 8011e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	e853 3f00 	ldrex	r3, [r3]
 8011ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	f023 0310 	bic.w	r3, r3, #16
 8011eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	330c      	adds	r3, #12
 8011eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eb6:	623a      	str	r2, [r7, #32]
 8011eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eba:	69f9      	ldr	r1, [r7, #28]
 8011ebc:	6a3a      	ldr	r2, [r7, #32]
 8011ebe:	e841 2300 	strex	r3, r2, [r1]
 8011ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8011ec4:	69bb      	ldr	r3, [r7, #24]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d1e5      	bne.n	8011e96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f003 0310 	and.w	r3, r3, #16
 8011ed4:	2b10      	cmp	r3, #16
 8011ed6:	d10a      	bne.n	8011eee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011ed8:	2300      	movs	r3, #0
 8011eda:	60fb      	str	r3, [r7, #12]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	60fb      	str	r3, [r7, #12]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	60fb      	str	r3, [r7, #12]
 8011eec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f7ff fdbb 	bl	8011a70 <HAL_UARTEx_RxEventCallback>
 8011efa:	e002      	b.n	8011f02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f7fb fccd 	bl	800d89c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011f02:	2300      	movs	r3, #0
 8011f04:	e002      	b.n	8011f0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011f06:	2300      	movs	r3, #0
 8011f08:	e000      	b.n	8011f0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011f0a:	2302      	movs	r3, #2
  }
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3730      	adds	r7, #48	@ 0x30
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011f18:	b0c0      	sub	sp, #256	@ 0x100
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	691b      	ldr	r3, [r3, #16]
 8011f28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f30:	68d9      	ldr	r1, [r3, #12]
 8011f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	ea40 0301 	orr.w	r3, r0, r1
 8011f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f42:	689a      	ldr	r2, [r3, #8]
 8011f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f48:	691b      	ldr	r3, [r3, #16]
 8011f4a:	431a      	orrs	r2, r3
 8011f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f50:	695b      	ldr	r3, [r3, #20]
 8011f52:	431a      	orrs	r2, r3
 8011f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f58:	69db      	ldr	r3, [r3, #28]
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011f6c:	f021 010c 	bic.w	r1, r1, #12
 8011f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011f7a:	430b      	orrs	r3, r1
 8011f7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	695b      	ldr	r3, [r3, #20]
 8011f86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f8e:	6999      	ldr	r1, [r3, #24]
 8011f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	ea40 0301 	orr.w	r3, r0, r1
 8011f9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	4b8f      	ldr	r3, [pc, #572]	@ (80121e0 <UART_SetConfig+0x2cc>)
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d005      	beq.n	8011fb4 <UART_SetConfig+0xa0>
 8011fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	4b8d      	ldr	r3, [pc, #564]	@ (80121e4 <UART_SetConfig+0x2d0>)
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d104      	bne.n	8011fbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011fb4:	f7fc fe82 	bl	800ecbc <HAL_RCC_GetPCLK2Freq>
 8011fb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011fbc:	e003      	b.n	8011fc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011fbe:	f7fc fe69 	bl	800ec94 <HAL_RCC_GetPCLK1Freq>
 8011fc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fca:	69db      	ldr	r3, [r3, #28]
 8011fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fd0:	f040 810c 	bne.w	80121ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011fde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011fe2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011fe6:	4622      	mov	r2, r4
 8011fe8:	462b      	mov	r3, r5
 8011fea:	1891      	adds	r1, r2, r2
 8011fec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011fee:	415b      	adcs	r3, r3
 8011ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ff2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	eb12 0801 	adds.w	r8, r2, r1
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	eb43 0901 	adc.w	r9, r3, r1
 8012002:	f04f 0200 	mov.w	r2, #0
 8012006:	f04f 0300 	mov.w	r3, #0
 801200a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801200e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012016:	4690      	mov	r8, r2
 8012018:	4699      	mov	r9, r3
 801201a:	4623      	mov	r3, r4
 801201c:	eb18 0303 	adds.w	r3, r8, r3
 8012020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012024:	462b      	mov	r3, r5
 8012026:	eb49 0303 	adc.w	r3, r9, r3
 801202a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801203a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801203e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012042:	460b      	mov	r3, r1
 8012044:	18db      	adds	r3, r3, r3
 8012046:	653b      	str	r3, [r7, #80]	@ 0x50
 8012048:	4613      	mov	r3, r2
 801204a:	eb42 0303 	adc.w	r3, r2, r3
 801204e:	657b      	str	r3, [r7, #84]	@ 0x54
 8012050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8012054:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8012058:	f7ee fe46 	bl	8000ce8 <__aeabi_uldivmod>
 801205c:	4602      	mov	r2, r0
 801205e:	460b      	mov	r3, r1
 8012060:	4b61      	ldr	r3, [pc, #388]	@ (80121e8 <UART_SetConfig+0x2d4>)
 8012062:	fba3 2302 	umull	r2, r3, r3, r2
 8012066:	095b      	lsrs	r3, r3, #5
 8012068:	011c      	lsls	r4, r3, #4
 801206a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801206e:	2200      	movs	r2, #0
 8012070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012074:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8012078:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801207c:	4642      	mov	r2, r8
 801207e:	464b      	mov	r3, r9
 8012080:	1891      	adds	r1, r2, r2
 8012082:	64b9      	str	r1, [r7, #72]	@ 0x48
 8012084:	415b      	adcs	r3, r3
 8012086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801208c:	4641      	mov	r1, r8
 801208e:	eb12 0a01 	adds.w	sl, r2, r1
 8012092:	4649      	mov	r1, r9
 8012094:	eb43 0b01 	adc.w	fp, r3, r1
 8012098:	f04f 0200 	mov.w	r2, #0
 801209c:	f04f 0300 	mov.w	r3, #0
 80120a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80120a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80120a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80120ac:	4692      	mov	sl, r2
 80120ae:	469b      	mov	fp, r3
 80120b0:	4643      	mov	r3, r8
 80120b2:	eb1a 0303 	adds.w	r3, sl, r3
 80120b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80120ba:	464b      	mov	r3, r9
 80120bc:	eb4b 0303 	adc.w	r3, fp, r3
 80120c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80120c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80120d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80120d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80120d8:	460b      	mov	r3, r1
 80120da:	18db      	adds	r3, r3, r3
 80120dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80120de:	4613      	mov	r3, r2
 80120e0:	eb42 0303 	adc.w	r3, r2, r3
 80120e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80120e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80120ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80120ee:	f7ee fdfb 	bl	8000ce8 <__aeabi_uldivmod>
 80120f2:	4602      	mov	r2, r0
 80120f4:	460b      	mov	r3, r1
 80120f6:	4611      	mov	r1, r2
 80120f8:	4b3b      	ldr	r3, [pc, #236]	@ (80121e8 <UART_SetConfig+0x2d4>)
 80120fa:	fba3 2301 	umull	r2, r3, r3, r1
 80120fe:	095b      	lsrs	r3, r3, #5
 8012100:	2264      	movs	r2, #100	@ 0x64
 8012102:	fb02 f303 	mul.w	r3, r2, r3
 8012106:	1acb      	subs	r3, r1, r3
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801210e:	4b36      	ldr	r3, [pc, #216]	@ (80121e8 <UART_SetConfig+0x2d4>)
 8012110:	fba3 2302 	umull	r2, r3, r3, r2
 8012114:	095b      	lsrs	r3, r3, #5
 8012116:	005b      	lsls	r3, r3, #1
 8012118:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801211c:	441c      	add	r4, r3
 801211e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012122:	2200      	movs	r2, #0
 8012124:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012128:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801212c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8012130:	4642      	mov	r2, r8
 8012132:	464b      	mov	r3, r9
 8012134:	1891      	adds	r1, r2, r2
 8012136:	63b9      	str	r1, [r7, #56]	@ 0x38
 8012138:	415b      	adcs	r3, r3
 801213a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801213c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012140:	4641      	mov	r1, r8
 8012142:	1851      	adds	r1, r2, r1
 8012144:	6339      	str	r1, [r7, #48]	@ 0x30
 8012146:	4649      	mov	r1, r9
 8012148:	414b      	adcs	r3, r1
 801214a:	637b      	str	r3, [r7, #52]	@ 0x34
 801214c:	f04f 0200 	mov.w	r2, #0
 8012150:	f04f 0300 	mov.w	r3, #0
 8012154:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8012158:	4659      	mov	r1, fp
 801215a:	00cb      	lsls	r3, r1, #3
 801215c:	4651      	mov	r1, sl
 801215e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012162:	4651      	mov	r1, sl
 8012164:	00ca      	lsls	r2, r1, #3
 8012166:	4610      	mov	r0, r2
 8012168:	4619      	mov	r1, r3
 801216a:	4603      	mov	r3, r0
 801216c:	4642      	mov	r2, r8
 801216e:	189b      	adds	r3, r3, r2
 8012170:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012174:	464b      	mov	r3, r9
 8012176:	460a      	mov	r2, r1
 8012178:	eb42 0303 	adc.w	r3, r2, r3
 801217c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801218c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012194:	460b      	mov	r3, r1
 8012196:	18db      	adds	r3, r3, r3
 8012198:	62bb      	str	r3, [r7, #40]	@ 0x28
 801219a:	4613      	mov	r3, r2
 801219c:	eb42 0303 	adc.w	r3, r2, r3
 80121a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80121a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80121aa:	f7ee fd9d 	bl	8000ce8 <__aeabi_uldivmod>
 80121ae:	4602      	mov	r2, r0
 80121b0:	460b      	mov	r3, r1
 80121b2:	4b0d      	ldr	r3, [pc, #52]	@ (80121e8 <UART_SetConfig+0x2d4>)
 80121b4:	fba3 1302 	umull	r1, r3, r3, r2
 80121b8:	095b      	lsrs	r3, r3, #5
 80121ba:	2164      	movs	r1, #100	@ 0x64
 80121bc:	fb01 f303 	mul.w	r3, r1, r3
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	00db      	lsls	r3, r3, #3
 80121c4:	3332      	adds	r3, #50	@ 0x32
 80121c6:	4a08      	ldr	r2, [pc, #32]	@ (80121e8 <UART_SetConfig+0x2d4>)
 80121c8:	fba2 2303 	umull	r2, r3, r2, r3
 80121cc:	095b      	lsrs	r3, r3, #5
 80121ce:	f003 0207 	and.w	r2, r3, #7
 80121d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	4422      	add	r2, r4
 80121da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80121dc:	e106      	b.n	80123ec <UART_SetConfig+0x4d8>
 80121de:	bf00      	nop
 80121e0:	40011000 	.word	0x40011000
 80121e4:	40011400 	.word	0x40011400
 80121e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80121ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80121f0:	2200      	movs	r2, #0
 80121f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80121f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80121fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80121fe:	4642      	mov	r2, r8
 8012200:	464b      	mov	r3, r9
 8012202:	1891      	adds	r1, r2, r2
 8012204:	6239      	str	r1, [r7, #32]
 8012206:	415b      	adcs	r3, r3
 8012208:	627b      	str	r3, [r7, #36]	@ 0x24
 801220a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801220e:	4641      	mov	r1, r8
 8012210:	1854      	adds	r4, r2, r1
 8012212:	4649      	mov	r1, r9
 8012214:	eb43 0501 	adc.w	r5, r3, r1
 8012218:	f04f 0200 	mov.w	r2, #0
 801221c:	f04f 0300 	mov.w	r3, #0
 8012220:	00eb      	lsls	r3, r5, #3
 8012222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012226:	00e2      	lsls	r2, r4, #3
 8012228:	4614      	mov	r4, r2
 801222a:	461d      	mov	r5, r3
 801222c:	4643      	mov	r3, r8
 801222e:	18e3      	adds	r3, r4, r3
 8012230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012234:	464b      	mov	r3, r9
 8012236:	eb45 0303 	adc.w	r3, r5, r3
 801223a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801223e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	2200      	movs	r2, #0
 8012246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801224a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801224e:	f04f 0200 	mov.w	r2, #0
 8012252:	f04f 0300 	mov.w	r3, #0
 8012256:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801225a:	4629      	mov	r1, r5
 801225c:	008b      	lsls	r3, r1, #2
 801225e:	4621      	mov	r1, r4
 8012260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012264:	4621      	mov	r1, r4
 8012266:	008a      	lsls	r2, r1, #2
 8012268:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801226c:	f7ee fd3c 	bl	8000ce8 <__aeabi_uldivmod>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	4b60      	ldr	r3, [pc, #384]	@ (80123f8 <UART_SetConfig+0x4e4>)
 8012276:	fba3 2302 	umull	r2, r3, r3, r2
 801227a:	095b      	lsrs	r3, r3, #5
 801227c:	011c      	lsls	r4, r3, #4
 801227e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012282:	2200      	movs	r2, #0
 8012284:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012288:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801228c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8012290:	4642      	mov	r2, r8
 8012292:	464b      	mov	r3, r9
 8012294:	1891      	adds	r1, r2, r2
 8012296:	61b9      	str	r1, [r7, #24]
 8012298:	415b      	adcs	r3, r3
 801229a:	61fb      	str	r3, [r7, #28]
 801229c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80122a0:	4641      	mov	r1, r8
 80122a2:	1851      	adds	r1, r2, r1
 80122a4:	6139      	str	r1, [r7, #16]
 80122a6:	4649      	mov	r1, r9
 80122a8:	414b      	adcs	r3, r1
 80122aa:	617b      	str	r3, [r7, #20]
 80122ac:	f04f 0200 	mov.w	r2, #0
 80122b0:	f04f 0300 	mov.w	r3, #0
 80122b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80122b8:	4659      	mov	r1, fp
 80122ba:	00cb      	lsls	r3, r1, #3
 80122bc:	4651      	mov	r1, sl
 80122be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80122c2:	4651      	mov	r1, sl
 80122c4:	00ca      	lsls	r2, r1, #3
 80122c6:	4610      	mov	r0, r2
 80122c8:	4619      	mov	r1, r3
 80122ca:	4603      	mov	r3, r0
 80122cc:	4642      	mov	r2, r8
 80122ce:	189b      	adds	r3, r3, r2
 80122d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80122d4:	464b      	mov	r3, r9
 80122d6:	460a      	mov	r2, r1
 80122d8:	eb42 0303 	adc.w	r3, r2, r3
 80122dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80122e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	2200      	movs	r2, #0
 80122e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80122ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80122ec:	f04f 0200 	mov.w	r2, #0
 80122f0:	f04f 0300 	mov.w	r3, #0
 80122f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80122f8:	4649      	mov	r1, r9
 80122fa:	008b      	lsls	r3, r1, #2
 80122fc:	4641      	mov	r1, r8
 80122fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012302:	4641      	mov	r1, r8
 8012304:	008a      	lsls	r2, r1, #2
 8012306:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801230a:	f7ee fced 	bl	8000ce8 <__aeabi_uldivmod>
 801230e:	4602      	mov	r2, r0
 8012310:	460b      	mov	r3, r1
 8012312:	4611      	mov	r1, r2
 8012314:	4b38      	ldr	r3, [pc, #224]	@ (80123f8 <UART_SetConfig+0x4e4>)
 8012316:	fba3 2301 	umull	r2, r3, r3, r1
 801231a:	095b      	lsrs	r3, r3, #5
 801231c:	2264      	movs	r2, #100	@ 0x64
 801231e:	fb02 f303 	mul.w	r3, r2, r3
 8012322:	1acb      	subs	r3, r1, r3
 8012324:	011b      	lsls	r3, r3, #4
 8012326:	3332      	adds	r3, #50	@ 0x32
 8012328:	4a33      	ldr	r2, [pc, #204]	@ (80123f8 <UART_SetConfig+0x4e4>)
 801232a:	fba2 2303 	umull	r2, r3, r2, r3
 801232e:	095b      	lsrs	r3, r3, #5
 8012330:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012334:	441c      	add	r4, r3
 8012336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801233a:	2200      	movs	r2, #0
 801233c:	673b      	str	r3, [r7, #112]	@ 0x70
 801233e:	677a      	str	r2, [r7, #116]	@ 0x74
 8012340:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8012344:	4642      	mov	r2, r8
 8012346:	464b      	mov	r3, r9
 8012348:	1891      	adds	r1, r2, r2
 801234a:	60b9      	str	r1, [r7, #8]
 801234c:	415b      	adcs	r3, r3
 801234e:	60fb      	str	r3, [r7, #12]
 8012350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012354:	4641      	mov	r1, r8
 8012356:	1851      	adds	r1, r2, r1
 8012358:	6039      	str	r1, [r7, #0]
 801235a:	4649      	mov	r1, r9
 801235c:	414b      	adcs	r3, r1
 801235e:	607b      	str	r3, [r7, #4]
 8012360:	f04f 0200 	mov.w	r2, #0
 8012364:	f04f 0300 	mov.w	r3, #0
 8012368:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801236c:	4659      	mov	r1, fp
 801236e:	00cb      	lsls	r3, r1, #3
 8012370:	4651      	mov	r1, sl
 8012372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012376:	4651      	mov	r1, sl
 8012378:	00ca      	lsls	r2, r1, #3
 801237a:	4610      	mov	r0, r2
 801237c:	4619      	mov	r1, r3
 801237e:	4603      	mov	r3, r0
 8012380:	4642      	mov	r2, r8
 8012382:	189b      	adds	r3, r3, r2
 8012384:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012386:	464b      	mov	r3, r9
 8012388:	460a      	mov	r2, r1
 801238a:	eb42 0303 	adc.w	r3, r2, r3
 801238e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	663b      	str	r3, [r7, #96]	@ 0x60
 801239a:	667a      	str	r2, [r7, #100]	@ 0x64
 801239c:	f04f 0200 	mov.w	r2, #0
 80123a0:	f04f 0300 	mov.w	r3, #0
 80123a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80123a8:	4649      	mov	r1, r9
 80123aa:	008b      	lsls	r3, r1, #2
 80123ac:	4641      	mov	r1, r8
 80123ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80123b2:	4641      	mov	r1, r8
 80123b4:	008a      	lsls	r2, r1, #2
 80123b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80123ba:	f7ee fc95 	bl	8000ce8 <__aeabi_uldivmod>
 80123be:	4602      	mov	r2, r0
 80123c0:	460b      	mov	r3, r1
 80123c2:	4b0d      	ldr	r3, [pc, #52]	@ (80123f8 <UART_SetConfig+0x4e4>)
 80123c4:	fba3 1302 	umull	r1, r3, r3, r2
 80123c8:	095b      	lsrs	r3, r3, #5
 80123ca:	2164      	movs	r1, #100	@ 0x64
 80123cc:	fb01 f303 	mul.w	r3, r1, r3
 80123d0:	1ad3      	subs	r3, r2, r3
 80123d2:	011b      	lsls	r3, r3, #4
 80123d4:	3332      	adds	r3, #50	@ 0x32
 80123d6:	4a08      	ldr	r2, [pc, #32]	@ (80123f8 <UART_SetConfig+0x4e4>)
 80123d8:	fba2 2303 	umull	r2, r3, r2, r3
 80123dc:	095b      	lsrs	r3, r3, #5
 80123de:	f003 020f 	and.w	r2, r3, #15
 80123e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	4422      	add	r2, r4
 80123ea:	609a      	str	r2, [r3, #8]
}
 80123ec:	bf00      	nop
 80123ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80123f2:	46bd      	mov	sp, r7
 80123f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80123f8:	51eb851f 	.word	0x51eb851f

080123fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80123fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80123fe:	2400      	movs	r4, #0
 8012400:	2310      	movs	r3, #16
 8012402:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012406:	6803      	ldr	r3, [r0, #0]
 8012408:	4615      	mov	r5, r2
 801240a:	699e      	ldr	r6, [r3, #24]
 801240c:	6812      	ldr	r2, [r2, #0]
 801240e:	466b      	mov	r3, sp
 8012410:	e9cd 4400 	strd	r4, r4, [sp]
 8012414:	47b0      	blx	r6
 8012416:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801241a:	f003 0306 	and.w	r3, r3, #6
 801241e:	2b06      	cmp	r3, #6
 8012420:	bf03      	ittte	eq
 8012422:	9b00      	ldreq	r3, [sp, #0]
 8012424:	602b      	streq	r3, [r5, #0]
 8012426:	2001      	moveq	r0, #1
 8012428:	4620      	movne	r0, r4
 801242a:	b004      	add	sp, #16
 801242c:	bd70      	pop	{r4, r5, r6, pc}

0801242e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801242e:	9800      	ldr	r0, [sp, #0]
 8012430:	4290      	cmp	r0, r2
 8012432:	bf0c      	ite	eq
 8012434:	2006      	moveq	r0, #6
 8012436:	2001      	movne	r0, #1
 8012438:	4770      	bx	lr
	...

0801243c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801243c:	b510      	push	{r4, lr}
 801243e:	4b03      	ldr	r3, [pc, #12]	@ (801244c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8012440:	6003      	str	r3, [r0, #0]
 8012442:	4604      	mov	r4, r0
 8012444:	f000 fd3b 	bl	8012ebe <_ZNSt9type_infoD1Ev>
 8012448:	4620      	mov	r0, r4
 801244a:	bd10      	pop	{r4, pc}
 801244c:	08018390 	.word	0x08018390

08012450 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8012450:	b510      	push	{r4, lr}
 8012452:	4604      	mov	r4, r0
 8012454:	f7ff fff2 	bl	801243c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012458:	4620      	mov	r0, r4
 801245a:	2108      	movs	r1, #8
 801245c:	f000 f842 	bl	80124e4 <_ZdlPvj>
 8012460:	4620      	mov	r0, r4
 8012462:	bd10      	pop	{r4, pc}

08012464 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8012464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012468:	461f      	mov	r7, r3
 801246a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801246e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012472:	4598      	cmp	r8, r3
 8012474:	4606      	mov	r6, r0
 8012476:	4615      	mov	r5, r2
 8012478:	d107      	bne.n	801248a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801247a:	9907      	ldr	r1, [sp, #28]
 801247c:	f000 fd22 	bl	8012ec4 <_ZNKSt9type_info7__equalERKS_>
 8012480:	b118      	cbz	r0, 801248a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8012482:	7165      	strb	r5, [r4, #5]
 8012484:	2000      	movs	r0, #0
 8012486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801248a:	4639      	mov	r1, r7
 801248c:	4630      	mov	r0, r6
 801248e:	f000 fd19 	bl	8012ec4 <_ZNKSt9type_info7__equalERKS_>
 8012492:	2800      	cmp	r0, #0
 8012494:	d0f6      	beq.n	8012484 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8012496:	2301      	movs	r3, #1
 8012498:	f8c4 8000 	str.w	r8, [r4]
 801249c:	7125      	strb	r5, [r4, #4]
 801249e:	71a3      	strb	r3, [r4, #6]
 80124a0:	e7f0      	b.n	8012484 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080124a2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80124a2:	b538      	push	{r3, r4, r5, lr}
 80124a4:	4615      	mov	r5, r2
 80124a6:	461c      	mov	r4, r3
 80124a8:	f000 fd0c 	bl	8012ec4 <_ZNKSt9type_info7__equalERKS_>
 80124ac:	b120      	cbz	r0, 80124b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80124ae:	2308      	movs	r3, #8
 80124b0:	60e3      	str	r3, [r4, #12]
 80124b2:	2306      	movs	r3, #6
 80124b4:	6025      	str	r5, [r4, #0]
 80124b6:	7123      	strb	r3, [r4, #4]
 80124b8:	bd38      	pop	{r3, r4, r5, pc}

080124ba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80124ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124be:	4605      	mov	r5, r0
 80124c0:	460c      	mov	r4, r1
 80124c2:	4616      	mov	r6, r2
 80124c4:	461f      	mov	r7, r3
 80124c6:	f000 fcfd 	bl	8012ec4 <_ZNKSt9type_info7__equalERKS_>
 80124ca:	b948      	cbnz	r0, 80124e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80124cc:	2f03      	cmp	r7, #3
 80124ce:	d807      	bhi.n	80124e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80124d0:	6823      	ldr	r3, [r4, #0]
 80124d2:	4632      	mov	r2, r6
 80124d4:	4629      	mov	r1, r5
 80124d6:	4620      	mov	r0, r4
 80124d8:	695b      	ldr	r3, [r3, #20]
 80124da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124de:	4718      	bx	r3
 80124e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080124e4 <_ZdlPvj>:
 80124e4:	f000 bdd4 	b.w	8013090 <_ZdlPv>

080124e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 80124e8:	4a19      	ldr	r2, [pc, #100]	@ (8012550 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 80124ea:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80124ee:	6853      	ldr	r3, [r2, #4]
 80124f0:	b570      	push	{r4, r5, r6, lr}
 80124f2:	f1a0 0408 	sub.w	r4, r0, #8
 80124f6:	b113      	cbz	r3, 80124fe <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 80124f8:	1865      	adds	r5, r4, r1
 80124fa:	42ab      	cmp	r3, r5
 80124fc:	d903      	bls.n	8012506 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 80124fe:	f840 3c04 	str.w	r3, [r0, #-4]
 8012502:	6054      	str	r4, [r2, #4]
 8012504:	bd70      	pop	{r4, r5, r6, pc}
 8012506:	685e      	ldr	r6, [r3, #4]
 8012508:	d11f      	bne.n	801254a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x62>
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	440b      	add	r3, r1
 801250e:	e940 3602 	strd	r3, r6, [r0, #-8]
 8012512:	e7f6      	b.n	8012502 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 8012514:	1d1a      	adds	r2, r3, #4
 8012516:	4633      	mov	r3, r6
 8012518:	685e      	ldr	r6, [r3, #4]
 801251a:	b136      	cbz	r6, 801252a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
 801251c:	42b5      	cmp	r5, r6
 801251e:	d3f9      	bcc.n	8012514 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 8012520:	bf01      	itttt	eq
 8012522:	682e      	ldreq	r6, [r5, #0]
 8012524:	686d      	ldreq	r5, [r5, #4]
 8012526:	605d      	streq	r5, [r3, #4]
 8012528:	1989      	addeq	r1, r1, r6
 801252a:	6813      	ldr	r3, [r2, #0]
 801252c:	681d      	ldr	r5, [r3, #0]
 801252e:	195e      	adds	r6, r3, r5
 8012530:	42b4      	cmp	r4, r6
 8012532:	bf1f      	itttt	ne
 8012534:	685b      	ldrne	r3, [r3, #4]
 8012536:	f840 3c04 	strne.w	r3, [r0, #-4]
 801253a:	6813      	ldrne	r3, [r2, #0]
 801253c:	f840 1c08 	strne.w	r1, [r0, #-8]
 8012540:	bf06      	itte	eq
 8012542:	186d      	addeq	r5, r5, r1
 8012544:	601d      	streq	r5, [r3, #0]
 8012546:	605c      	strne	r4, [r3, #4]
 8012548:	e7dc      	b.n	8012504 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 801254a:	3204      	adds	r2, #4
 801254c:	e7e4      	b.n	8012518 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 801254e:	bf00      	nop
 8012550:	20000568 	.word	0x20000568

08012554 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8012554:	3008      	adds	r0, #8
 8012556:	2808      	cmp	r0, #8
 8012558:	b530      	push	{r4, r5, lr}
 801255a:	4a0f      	ldr	r2, [pc, #60]	@ (8012598 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 801255c:	bf38      	it	cc
 801255e:	2008      	movcc	r0, #8
 8012560:	3007      	adds	r0, #7
 8012562:	f020 0307 	bic.w	r3, r0, #7
 8012566:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801256a:	b198      	cbz	r0, 8012594 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x40>
 801256c:	6801      	ldr	r1, [r0, #0]
 801256e:	428b      	cmp	r3, r1
 8012570:	d806      	bhi.n	8012580 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x2c>
 8012572:	1acd      	subs	r5, r1, r3
 8012574:	2d07      	cmp	r5, #7
 8012576:	6844      	ldr	r4, [r0, #4]
 8012578:	d805      	bhi.n	8012586 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x32>
 801257a:	6001      	str	r1, [r0, #0]
 801257c:	4621      	mov	r1, r4
 801257e:	e007      	b.n	8012590 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 8012580:	1d02      	adds	r2, r0, #4
 8012582:	6840      	ldr	r0, [r0, #4]
 8012584:	e7f1      	b.n	801256a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x16>
 8012586:	18c1      	adds	r1, r0, r3
 8012588:	604c      	str	r4, [r1, #4]
 801258a:	50c5      	str	r5, [r0, r3]
 801258c:	6810      	ldr	r0, [r2, #0]
 801258e:	6003      	str	r3, [r0, #0]
 8012590:	6011      	str	r1, [r2, #0]
 8012592:	3008      	adds	r0, #8
 8012594:	bd30      	pop	{r4, r5, pc}
 8012596:	bf00      	nop
 8012598:	20000568 	.word	0x20000568

0801259c <__cxa_allocate_exception>:
 801259c:	b510      	push	{r4, lr}
 801259e:	f100 0480 	add.w	r4, r0, #128	@ 0x80
 80125a2:	4620      	mov	r0, r4
 80125a4:	f001 fff8 	bl	8014598 <malloc>
 80125a8:	4603      	mov	r3, r0
 80125aa:	b930      	cbnz	r0, 80125ba <__cxa_allocate_exception+0x1e>
 80125ac:	4620      	mov	r0, r4
 80125ae:	f7ff ffd1 	bl	8012554 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 80125b2:	4603      	mov	r3, r0
 80125b4:	b908      	cbnz	r0, 80125ba <__cxa_allocate_exception+0x1e>
 80125b6:	f000 fb6d 	bl	8012c94 <_ZSt9terminatev>
 80125ba:	2280      	movs	r2, #128	@ 0x80
 80125bc:	2100      	movs	r1, #0
 80125be:	4618      	mov	r0, r3
 80125c0:	f002 fe13 	bl	80151ea <memset>
 80125c4:	3080      	adds	r0, #128	@ 0x80
 80125c6:	bd10      	pop	{r4, pc}

080125c8 <__cxa_free_exception>:
 80125c8:	4a06      	ldr	r2, [pc, #24]	@ (80125e4 <__cxa_free_exception+0x1c>)
 80125ca:	6893      	ldr	r3, [r2, #8]
 80125cc:	3880      	subs	r0, #128	@ 0x80
 80125ce:	4298      	cmp	r0, r3
 80125d0:	d905      	bls.n	80125de <__cxa_free_exception+0x16>
 80125d2:	68d2      	ldr	r2, [r2, #12]
 80125d4:	4413      	add	r3, r2
 80125d6:	4298      	cmp	r0, r3
 80125d8:	d201      	bcs.n	80125de <__cxa_free_exception+0x16>
 80125da:	f7ff bf85 	b.w	80124e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 80125de:	f001 bfe3 	b.w	80145a8 <free>
 80125e2:	bf00      	nop
 80125e4:	20000568 	.word	0x20000568

080125e8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80125e8:	b538      	push	{r3, r4, r5, lr}
 80125ea:	4c08      	ldr	r4, [pc, #32]	@ (801260c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80125ec:	f44f 651e 	mov.w	r5, #2528	@ 0x9e0
 80125f0:	4628      	mov	r0, r5
 80125f2:	60e5      	str	r5, [r4, #12]
 80125f4:	f001 ffd0 	bl	8014598 <malloc>
 80125f8:	60a0      	str	r0, [r4, #8]
 80125fa:	b910      	cbnz	r0, 8012602 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80125fc:	60e0      	str	r0, [r4, #12]
 80125fe:	6060      	str	r0, [r4, #4]
 8012600:	bd38      	pop	{r3, r4, r5, pc}
 8012602:	2300      	movs	r3, #0
 8012604:	6060      	str	r0, [r4, #4]
 8012606:	6005      	str	r5, [r0, #0]
 8012608:	6043      	str	r3, [r0, #4]
 801260a:	e7f9      	b.n	8012600 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 801260c:	20000568 	.word	0x20000568

08012610 <__cxa_end_cleanup>:
 8012610:	b41e      	push	{r1, r2, r3, r4}
 8012612:	f000 f89c 	bl	801274e <__gnu_end_cleanup>
 8012616:	bc1e      	pop	{r1, r2, r3, r4}
 8012618:	f7ef fa64 	bl	8001ae4 <_Unwind_Resume>

0801261c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 801261c:	7803      	ldrb	r3, [r0, #0]
 801261e:	2b47      	cmp	r3, #71	@ 0x47
 8012620:	d117      	bne.n	8012652 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012622:	7843      	ldrb	r3, [r0, #1]
 8012624:	2b4e      	cmp	r3, #78	@ 0x4e
 8012626:	d114      	bne.n	8012652 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012628:	7883      	ldrb	r3, [r0, #2]
 801262a:	2b55      	cmp	r3, #85	@ 0x55
 801262c:	d111      	bne.n	8012652 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801262e:	78c3      	ldrb	r3, [r0, #3]
 8012630:	2b43      	cmp	r3, #67	@ 0x43
 8012632:	d10e      	bne.n	8012652 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012634:	7903      	ldrb	r3, [r0, #4]
 8012636:	2b43      	cmp	r3, #67	@ 0x43
 8012638:	d10b      	bne.n	8012652 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801263a:	7943      	ldrb	r3, [r0, #5]
 801263c:	2b2b      	cmp	r3, #43	@ 0x2b
 801263e:	d108      	bne.n	8012652 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012640:	7983      	ldrb	r3, [r0, #6]
 8012642:	2b2b      	cmp	r3, #43	@ 0x2b
 8012644:	d105      	bne.n	8012652 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012646:	79c0      	ldrb	r0, [r0, #7]
 8012648:	2801      	cmp	r0, #1
 801264a:	bf8c      	ite	hi
 801264c:	2000      	movhi	r0, #0
 801264e:	2001      	movls	r0, #1
 8012650:	4770      	bx	lr
 8012652:	2000      	movs	r0, #0
 8012654:	4770      	bx	lr
	...

08012658 <__cxa_type_match>:
 8012658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801265c:	461d      	mov	r5, r3
 801265e:	7803      	ldrb	r3, [r0, #0]
 8012660:	2b47      	cmp	r3, #71	@ 0x47
 8012662:	460e      	mov	r6, r1
 8012664:	4602      	mov	r2, r0
 8012666:	79c1      	ldrb	r1, [r0, #7]
 8012668:	d113      	bne.n	8012692 <__cxa_type_match+0x3a>
 801266a:	7843      	ldrb	r3, [r0, #1]
 801266c:	2b4e      	cmp	r3, #78	@ 0x4e
 801266e:	d110      	bne.n	8012692 <__cxa_type_match+0x3a>
 8012670:	7883      	ldrb	r3, [r0, #2]
 8012672:	2b55      	cmp	r3, #85	@ 0x55
 8012674:	d10d      	bne.n	8012692 <__cxa_type_match+0x3a>
 8012676:	78c3      	ldrb	r3, [r0, #3]
 8012678:	2b43      	cmp	r3, #67	@ 0x43
 801267a:	d10a      	bne.n	8012692 <__cxa_type_match+0x3a>
 801267c:	7903      	ldrb	r3, [r0, #4]
 801267e:	2b46      	cmp	r3, #70	@ 0x46
 8012680:	d107      	bne.n	8012692 <__cxa_type_match+0x3a>
 8012682:	7943      	ldrb	r3, [r0, #5]
 8012684:	2b4f      	cmp	r3, #79	@ 0x4f
 8012686:	d104      	bne.n	8012692 <__cxa_type_match+0x3a>
 8012688:	7983      	ldrb	r3, [r0, #6]
 801268a:	2b52      	cmp	r3, #82	@ 0x52
 801268c:	d101      	bne.n	8012692 <__cxa_type_match+0x3a>
 801268e:	2900      	cmp	r1, #0
 8012690:	d031      	beq.n	80126f6 <__cxa_type_match+0x9e>
 8012692:	4610      	mov	r0, r2
 8012694:	f7ff ffc2 	bl	801261c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012698:	f080 0401 	eor.w	r4, r0, #1
 801269c:	b2e4      	uxtb	r4, r4
 801269e:	2300      	movs	r3, #0
 80126a0:	2000      	movs	r0, #0
 80126a2:	9001      	str	r0, [sp, #4]
 80126a4:	bb53      	cbnz	r3, 80126fc <__cxa_type_match+0xa4>
 80126a6:	bb5c      	cbnz	r4, 8012700 <__cxa_type_match+0xa8>
 80126a8:	2901      	cmp	r1, #1
 80126aa:	bf0a      	itet	eq
 80126ac:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 80126b0:	f1a2 0320 	subne.w	r3, r2, #32
 80126b4:	3b78      	subeq	r3, #120	@ 0x78
 80126b6:	2901      	cmp	r1, #1
 80126b8:	bf08      	it	eq
 80126ba:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80126be:	681c      	ldr	r4, [r3, #0]
 80126c0:	bf18      	it	ne
 80126c2:	3258      	addne	r2, #88	@ 0x58
 80126c4:	9201      	str	r2, [sp, #4]
 80126c6:	6823      	ldr	r3, [r4, #0]
 80126c8:	4620      	mov	r0, r4
 80126ca:	689b      	ldr	r3, [r3, #8]
 80126cc:	4798      	blx	r3
 80126ce:	b1c8      	cbz	r0, 8012704 <__cxa_type_match+0xac>
 80126d0:	9b01      	ldr	r3, [sp, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	9301      	str	r3, [sp, #4]
 80126d6:	2702      	movs	r7, #2
 80126d8:	6833      	ldr	r3, [r6, #0]
 80126da:	aa01      	add	r2, sp, #4
 80126dc:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80126e0:	4621      	mov	r1, r4
 80126e2:	2301      	movs	r3, #1
 80126e4:	4630      	mov	r0, r6
 80126e6:	47c0      	blx	r8
 80126e8:	b170      	cbz	r0, 8012708 <__cxa_type_match+0xb0>
 80126ea:	9b01      	ldr	r3, [sp, #4]
 80126ec:	602b      	str	r3, [r5, #0]
 80126ee:	4638      	mov	r0, r7
 80126f0:	b002      	add	sp, #8
 80126f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126f6:	2301      	movs	r3, #1
 80126f8:	460c      	mov	r4, r1
 80126fa:	e7d1      	b.n	80126a0 <__cxa_type_match+0x48>
 80126fc:	4c03      	ldr	r4, [pc, #12]	@ (801270c <__cxa_type_match+0xb4>)
 80126fe:	e7e2      	b.n	80126c6 <__cxa_type_match+0x6e>
 8012700:	4c03      	ldr	r4, [pc, #12]	@ (8012710 <__cxa_type_match+0xb8>)
 8012702:	e7e0      	b.n	80126c6 <__cxa_type_match+0x6e>
 8012704:	2701      	movs	r7, #1
 8012706:	e7e7      	b.n	80126d8 <__cxa_type_match+0x80>
 8012708:	4607      	mov	r7, r0
 801270a:	e7f0      	b.n	80126ee <__cxa_type_match+0x96>
 801270c:	080183ec 	.word	0x080183ec
 8012710:	08018418 	.word	0x08018418

08012714 <__cxa_begin_cleanup>:
 8012714:	b510      	push	{r4, lr}
 8012716:	4604      	mov	r4, r0
 8012718:	f000 f834 	bl	8012784 <__cxa_get_globals>
 801271c:	4602      	mov	r2, r0
 801271e:	4620      	mov	r0, r4
 8012720:	f1a4 0120 	sub.w	r1, r4, #32
 8012724:	f7ff ff7a 	bl	801261c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012728:	b160      	cbz	r0, 8012744 <__cxa_begin_cleanup+0x30>
 801272a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801272e:	3301      	adds	r3, #1
 8012730:	2b01      	cmp	r3, #1
 8012732:	f844 3c04 	str.w	r3, [r4, #-4]
 8012736:	d103      	bne.n	8012740 <__cxa_begin_cleanup+0x2c>
 8012738:	6893      	ldr	r3, [r2, #8]
 801273a:	f844 3c08 	str.w	r3, [r4, #-8]
 801273e:	6091      	str	r1, [r2, #8]
 8012740:	2001      	movs	r0, #1
 8012742:	bd10      	pop	{r4, pc}
 8012744:	6893      	ldr	r3, [r2, #8]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d0f9      	beq.n	801273e <__cxa_begin_cleanup+0x2a>
 801274a:	f000 faa3 	bl	8012c94 <_ZSt9terminatev>

0801274e <__gnu_end_cleanup>:
 801274e:	b510      	push	{r4, lr}
 8012750:	f000 f818 	bl	8012784 <__cxa_get_globals>
 8012754:	6882      	ldr	r2, [r0, #8]
 8012756:	4601      	mov	r1, r0
 8012758:	b90a      	cbnz	r2, 801275e <__gnu_end_cleanup+0x10>
 801275a:	f000 fa9b 	bl	8012c94 <_ZSt9terminatev>
 801275e:	f102 0420 	add.w	r4, r2, #32
 8012762:	4620      	mov	r0, r4
 8012764:	f7ff ff5a 	bl	801261c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012768:	b140      	cbz	r0, 801277c <__gnu_end_cleanup+0x2e>
 801276a:	69d3      	ldr	r3, [r2, #28]
 801276c:	3b01      	subs	r3, #1
 801276e:	61d3      	str	r3, [r2, #28]
 8012770:	b913      	cbnz	r3, 8012778 <__gnu_end_cleanup+0x2a>
 8012772:	6990      	ldr	r0, [r2, #24]
 8012774:	6088      	str	r0, [r1, #8]
 8012776:	6193      	str	r3, [r2, #24]
 8012778:	4620      	mov	r0, r4
 801277a:	bd10      	pop	{r4, pc}
 801277c:	6088      	str	r0, [r1, #8]
 801277e:	e7fb      	b.n	8012778 <__gnu_end_cleanup+0x2a>

08012780 <_ZNSt9exceptionD1Ev>:
 8012780:	4770      	bx	lr

08012782 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8012782:	4770      	bx	lr

08012784 <__cxa_get_globals>:
 8012784:	4800      	ldr	r0, [pc, #0]	@ (8012788 <__cxa_get_globals+0x4>)
 8012786:	4770      	bx	lr
 8012788:	20000578 	.word	0x20000578

0801278c <_GLOBAL__sub_I___cxa_get_globals_fast>:
 801278c:	4a02      	ldr	r2, [pc, #8]	@ (8012798 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 801278e:	4903      	ldr	r1, [pc, #12]	@ (801279c <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8012790:	4803      	ldr	r0, [pc, #12]	@ (80127a0 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 8012792:	f000 bc78 	b.w	8013086 <__aeabi_atexit>
 8012796:	bf00      	nop
 8012798:	20000000 	.word	0x20000000
 801279c:	08012783 	.word	0x08012783
 80127a0:	20000578 	.word	0x20000578

080127a4 <_ZL12read_uleb128PKhPm>:
 80127a4:	b530      	push	{r4, r5, lr}
 80127a6:	2300      	movs	r3, #0
 80127a8:	461a      	mov	r2, r3
 80127aa:	f810 5b01 	ldrb.w	r5, [r0], #1
 80127ae:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 80127b2:	4094      	lsls	r4, r2
 80127b4:	4323      	orrs	r3, r4
 80127b6:	062c      	lsls	r4, r5, #24
 80127b8:	f102 0207 	add.w	r2, r2, #7
 80127bc:	d4f5      	bmi.n	80127aa <_ZL12read_uleb128PKhPm+0x6>
 80127be:	600b      	str	r3, [r1, #0]
 80127c0:	bd30      	pop	{r4, r5, pc}

080127c2 <_ZL12read_sleb128PKhPl>:
 80127c2:	b530      	push	{r4, r5, lr}
 80127c4:	2300      	movs	r3, #0
 80127c6:	461a      	mov	r2, r3
 80127c8:	f810 4b01 	ldrb.w	r4, [r0], #1
 80127cc:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 80127d0:	4095      	lsls	r5, r2
 80127d2:	432b      	orrs	r3, r5
 80127d4:	0625      	lsls	r5, r4, #24
 80127d6:	f102 0207 	add.w	r2, r2, #7
 80127da:	d4f5      	bmi.n	80127c8 <_ZL12read_sleb128PKhPl+0x6>
 80127dc:	2a1f      	cmp	r2, #31
 80127de:	d806      	bhi.n	80127ee <_ZL12read_sleb128PKhPl+0x2c>
 80127e0:	0664      	lsls	r4, r4, #25
 80127e2:	bf42      	ittt	mi
 80127e4:	f04f 34ff 	movmi.w	r4, #4294967295
 80127e8:	fa04 f202 	lslmi.w	r2, r4, r2
 80127ec:	4313      	orrmi	r3, r2
 80127ee:	600b      	str	r3, [r1, #0]
 80127f0:	bd30      	pop	{r4, r5, pc}

080127f2 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80127f2:	2850      	cmp	r0, #80	@ 0x50
 80127f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80127f8:	4606      	mov	r6, r0
 80127fa:	4688      	mov	r8, r1
 80127fc:	4615      	mov	r5, r2
 80127fe:	461f      	mov	r7, r3
 8012800:	d108      	bne.n	8012814 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8012802:	1cd0      	adds	r0, r2, #3
 8012804:	f020 0003 	bic.w	r0, r0, #3
 8012808:	f850 4b04 	ldr.w	r4, [r0], #4
 801280c:	603c      	str	r4, [r7, #0]
 801280e:	b002      	add	sp, #8
 8012810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012814:	f000 030f 	and.w	r3, r0, #15
 8012818:	2b0c      	cmp	r3, #12
 801281a:	d82e      	bhi.n	801287a <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 801281c:	e8df f003 	tbb	[pc, r3]
 8012820:	251d0725 	.word	0x251d0725
 8012824:	2d2d2d29 	.word	0x2d2d2d29
 8012828:	2521182d 	.word	0x2521182d
 801282c:	29          	.byte	0x29
 801282d:	00          	.byte	0x00
 801282e:	a901      	add	r1, sp, #4
 8012830:	4628      	mov	r0, r5
 8012832:	f7ff ffb7 	bl	80127a4 <_ZL12read_uleb128PKhPm>
 8012836:	9c01      	ldr	r4, [sp, #4]
 8012838:	2c00      	cmp	r4, #0
 801283a:	d0e7      	beq.n	801280c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 801283c:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 8012840:	2b10      	cmp	r3, #16
 8012842:	bf08      	it	eq
 8012844:	46a8      	moveq	r8, r5
 8012846:	4444      	add	r4, r8
 8012848:	0633      	lsls	r3, r6, #24
 801284a:	bf48      	it	mi
 801284c:	6824      	ldrmi	r4, [r4, #0]
 801284e:	e7dd      	b.n	801280c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8012850:	a901      	add	r1, sp, #4
 8012852:	4628      	mov	r0, r5
 8012854:	f7ff ffb5 	bl	80127c2 <_ZL12read_sleb128PKhPl>
 8012858:	e7ed      	b.n	8012836 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 801285a:	4628      	mov	r0, r5
 801285c:	f830 4b02 	ldrh.w	r4, [r0], #2
 8012860:	e7ea      	b.n	8012838 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012862:	4628      	mov	r0, r5
 8012864:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8012868:	e7e6      	b.n	8012838 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801286a:	4628      	mov	r0, r5
 801286c:	f850 4b04 	ldr.w	r4, [r0], #4
 8012870:	e7e2      	b.n	8012838 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012872:	4628      	mov	r0, r5
 8012874:	f850 4b08 	ldr.w	r4, [r0], #8
 8012878:	e7de      	b.n	8012838 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801287a:	f001 fe85 	bl	8014588 <abort>

0801287e <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 801287e:	b508      	push	{r3, lr}
 8012880:	4603      	mov	r3, r0
 8012882:	2bff      	cmp	r3, #255	@ 0xff
 8012884:	4608      	mov	r0, r1
 8012886:	d00d      	beq.n	80128a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8012888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801288c:	2b30      	cmp	r3, #48	@ 0x30
 801288e:	d00f      	beq.n	80128b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8012890:	d804      	bhi.n	801289c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8012892:	2b20      	cmp	r3, #32
 8012894:	d008      	beq.n	80128a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8012896:	d905      	bls.n	80128a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8012898:	f001 fe76 	bl	8014588 <abort>
 801289c:	2b40      	cmp	r3, #64	@ 0x40
 801289e:	d00b      	beq.n	80128b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 80128a0:	2b50      	cmp	r3, #80	@ 0x50
 80128a2:	d1f9      	bne.n	8012898 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80128a4:	2000      	movs	r0, #0
 80128a6:	bd08      	pop	{r3, pc}
 80128a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80128ac:	f004 bb05 	b.w	8016eba <_Unwind_GetTextRelBase>
 80128b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80128b4:	f004 bafe 	b.w	8016eb4 <_Unwind_GetDataRelBase>
 80128b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80128bc:	f7ef bb06 	b.w	8001ecc <_Unwind_GetRegionStart>

080128c0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	460c      	mov	r4, r1
 80128c4:	4601      	mov	r1, r0
 80128c6:	4620      	mov	r0, r4
 80128c8:	4615      	mov	r5, r2
 80128ca:	461e      	mov	r6, r3
 80128cc:	f7ff ffd7 	bl	801287e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80128d0:	4633      	mov	r3, r6
 80128d2:	4601      	mov	r1, r0
 80128d4:	462a      	mov	r2, r5
 80128d6:	4620      	mov	r0, r4
 80128d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128dc:	f7ff bf89 	b.w	80127f2 <_ZL28read_encoded_value_with_basehjPKhPj>

080128e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80128e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128e2:	460c      	mov	r4, r1
 80128e4:	4615      	mov	r5, r2
 80128e6:	4606      	mov	r6, r0
 80128e8:	b108      	cbz	r0, 80128ee <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80128ea:	f7ef faef 	bl	8001ecc <_Unwind_GetRegionStart>
 80128ee:	4622      	mov	r2, r4
 80128f0:	6028      	str	r0, [r5, #0]
 80128f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80128f6:	29ff      	cmp	r1, #255	@ 0xff
 80128f8:	d01c      	beq.n	8012934 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 80128fa:	1d2b      	adds	r3, r5, #4
 80128fc:	4630      	mov	r0, r6
 80128fe:	f7ff ffdf 	bl	80128c0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012902:	4602      	mov	r2, r0
 8012904:	4610      	mov	r0, r2
 8012906:	f810 3b01 	ldrb.w	r3, [r0], #1
 801290a:	2bff      	cmp	r3, #255	@ 0xff
 801290c:	d014      	beq.n	8012938 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 801290e:	2310      	movs	r3, #16
 8012910:	752b      	strb	r3, [r5, #20]
 8012912:	a901      	add	r1, sp, #4
 8012914:	f7ff ff46 	bl	80127a4 <_ZL12read_uleb128PKhPm>
 8012918:	9b01      	ldr	r3, [sp, #4]
 801291a:	4403      	add	r3, r0
 801291c:	60eb      	str	r3, [r5, #12]
 801291e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012922:	756b      	strb	r3, [r5, #21]
 8012924:	a901      	add	r1, sp, #4
 8012926:	f7ff ff3d 	bl	80127a4 <_ZL12read_uleb128PKhPm>
 801292a:	9b01      	ldr	r3, [sp, #4]
 801292c:	4403      	add	r3, r0
 801292e:	612b      	str	r3, [r5, #16]
 8012930:	b002      	add	sp, #8
 8012932:	bd70      	pop	{r4, r5, r6, pc}
 8012934:	6068      	str	r0, [r5, #4]
 8012936:	e7e5      	b.n	8012904 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8012938:	752b      	strb	r3, [r5, #20]
 801293a:	2300      	movs	r3, #0
 801293c:	e7ee      	b.n	801291c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

0801293e <_Unwind_GetGR>:
 801293e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012940:	ab03      	add	r3, sp, #12
 8012942:	9300      	str	r3, [sp, #0]
 8012944:	2300      	movs	r3, #0
 8012946:	460a      	mov	r2, r1
 8012948:	4619      	mov	r1, r3
 801294a:	f7ee fd0b 	bl	8001364 <_Unwind_VRS_Get>
 801294e:	9803      	ldr	r0, [sp, #12]
 8012950:	b005      	add	sp, #20
 8012952:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012958 <__gxx_personality_v0>:
 8012958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801295c:	b093      	sub	sp, #76	@ 0x4c
 801295e:	2300      	movs	r3, #0
 8012960:	9307      	str	r3, [sp, #28]
 8012962:	f000 0303 	and.w	r3, r0, #3
 8012966:	2b01      	cmp	r3, #1
 8012968:	4605      	mov	r5, r0
 801296a:	460c      	mov	r4, r1
 801296c:	4616      	mov	r6, r2
 801296e:	d010      	beq.n	8012992 <__gxx_personality_v0+0x3a>
 8012970:	2b02      	cmp	r3, #2
 8012972:	d003      	beq.n	801297c <__gxx_personality_v0+0x24>
 8012974:	2b00      	cmp	r3, #0
 8012976:	d13b      	bne.n	80129f0 <__gxx_personality_v0+0x98>
 8012978:	0701      	lsls	r1, r0, #28
 801297a:	d53b      	bpl.n	80129f4 <__gxx_personality_v0+0x9c>
 801297c:	4631      	mov	r1, r6
 801297e:	4620      	mov	r0, r4
 8012980:	f7ef fa8e 	bl	8001ea0 <__gnu_unwind_frame>
 8012984:	b118      	cbz	r0, 801298e <__gxx_personality_v0+0x36>
 8012986:	2009      	movs	r0, #9
 8012988:	b013      	add	sp, #76	@ 0x4c
 801298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801298e:	2008      	movs	r0, #8
 8012990:	e7fa      	b.n	8012988 <__gxx_personality_v0+0x30>
 8012992:	0702      	lsls	r2, r0, #28
 8012994:	d523      	bpl.n	80129de <__gxx_personality_v0+0x86>
 8012996:	2302      	movs	r3, #2
 8012998:	f005 0508 	and.w	r5, r5, #8
 801299c:	431d      	orrs	r5, r3
 801299e:	ab0c      	add	r3, sp, #48	@ 0x30
 80129a0:	9300      	str	r3, [sp, #0]
 80129a2:	2300      	movs	r3, #0
 80129a4:	220c      	movs	r2, #12
 80129a6:	4619      	mov	r1, r3
 80129a8:	4630      	mov	r0, r6
 80129aa:	940c      	str	r4, [sp, #48]	@ 0x30
 80129ac:	f7ee fd00 	bl	80013b0 <_Unwind_VRS_Set>
 80129b0:	2d06      	cmp	r5, #6
 80129b2:	d121      	bne.n	80129f8 <__gxx_personality_v0+0xa0>
 80129b4:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 80129b8:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 80129bc:	f1b8 0f00 	cmp.w	r8, #0
 80129c0:	bf0c      	ite	eq
 80129c2:	f04f 0a01 	moveq.w	sl, #1
 80129c6:	f04f 0a03 	movne.w	sl, #3
 80129ca:	f015 0508 	ands.w	r5, r5, #8
 80129ce:	f000 8103 	beq.w	8012bd8 <__gxx_personality_v0+0x280>
 80129d2:	f1ba 0f01 	cmp.w	sl, #1
 80129d6:	f040 80fb 	bne.w	8012bd0 <__gxx_personality_v0+0x278>
 80129da:	f000 f95b 	bl	8012c94 <_ZSt9terminatev>
 80129de:	6a0f      	ldr	r7, [r1, #32]
 80129e0:	4630      	mov	r0, r6
 80129e2:	210d      	movs	r1, #13
 80129e4:	f7ff ffab 	bl	801293e <_Unwind_GetGR>
 80129e8:	4287      	cmp	r7, r0
 80129ea:	d1d4      	bne.n	8012996 <__gxx_personality_v0+0x3e>
 80129ec:	2306      	movs	r3, #6
 80129ee:	e7d3      	b.n	8012998 <__gxx_personality_v0+0x40>
 80129f0:	f001 fdca 	bl	8014588 <abort>
 80129f4:	2301      	movs	r3, #1
 80129f6:	e7cf      	b.n	8012998 <__gxx_personality_v0+0x40>
 80129f8:	4630      	mov	r0, r6
 80129fa:	f7ef fa6d 	bl	8001ed8 <_Unwind_GetLanguageSpecificData>
 80129fe:	4681      	mov	r9, r0
 8012a00:	2800      	cmp	r0, #0
 8012a02:	d0bb      	beq.n	801297c <__gxx_personality_v0+0x24>
 8012a04:	aa0c      	add	r2, sp, #48	@ 0x30
 8012a06:	4601      	mov	r1, r0
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7ff ff69 	bl	80128e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8012a0e:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 8012a12:	9003      	str	r0, [sp, #12]
 8012a14:	4631      	mov	r1, r6
 8012a16:	4658      	mov	r0, fp
 8012a18:	f7ff ff31 	bl	801287e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012a1c:	210f      	movs	r1, #15
 8012a1e:	9002      	str	r0, [sp, #8]
 8012a20:	900e      	str	r0, [sp, #56]	@ 0x38
 8012a22:	4630      	mov	r0, r6
 8012a24:	f7ff ff8b 	bl	801293e <_Unwind_GetGR>
 8012a28:	9a03      	ldr	r2, [sp, #12]
 8012a2a:	f020 0801 	bic.w	r8, r0, #1
 8012a2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012a32:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012a34:	4297      	cmp	r7, r2
 8012a36:	d815      	bhi.n	8012a64 <__gxx_personality_v0+0x10c>
 8012a38:	2700      	movs	r7, #0
 8012a3a:	46b8      	mov	r8, r7
 8012a3c:	f04f 0a01 	mov.w	sl, #1
 8012a40:	07eb      	lsls	r3, r5, #31
 8012a42:	d5c2      	bpl.n	80129ca <__gxx_personality_v0+0x72>
 8012a44:	f1ba 0f02 	cmp.w	sl, #2
 8012a48:	d098      	beq.n	801297c <__gxx_personality_v0+0x24>
 8012a4a:	210d      	movs	r1, #13
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	9d07      	ldr	r5, [sp, #28]
 8012a50:	f7ff ff75 	bl	801293e <_Unwind_GetGR>
 8012a54:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 8012a58:	e9c4 0508 	strd	r0, r5, [r4, #32]
 8012a5c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8012a60:	2006      	movs	r0, #6
 8012a62:	e791      	b.n	8012988 <__gxx_personality_v0+0x30>
 8012a64:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 8012a68:	ab08      	add	r3, sp, #32
 8012a6a:	4651      	mov	r1, sl
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	f7ff ff27 	bl	80128c0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012a72:	ab09      	add	r3, sp, #36	@ 0x24
 8012a74:	4602      	mov	r2, r0
 8012a76:	4651      	mov	r1, sl
 8012a78:	2000      	movs	r0, #0
 8012a7a:	f7ff ff21 	bl	80128c0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012a7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012a80:	4602      	mov	r2, r0
 8012a82:	4651      	mov	r1, sl
 8012a84:	2000      	movs	r0, #0
 8012a86:	f7ff ff1b 	bl	80128c0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012a8a:	a90b      	add	r1, sp, #44	@ 0x2c
 8012a8c:	f7ff fe8a 	bl	80127a4 <_ZL12read_uleb128PKhPm>
 8012a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a92:	9908      	ldr	r1, [sp, #32]
 8012a94:	440b      	add	r3, r1
 8012a96:	4543      	cmp	r3, r8
 8012a98:	4602      	mov	r2, r0
 8012a9a:	d84b      	bhi.n	8012b34 <__gxx_personality_v0+0x1dc>
 8012a9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a9e:	440b      	add	r3, r1
 8012aa0:	4543      	cmp	r3, r8
 8012aa2:	d9c6      	bls.n	8012a32 <__gxx_personality_v0+0xda>
 8012aa4:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8012aa8:	f1b8 0f00 	cmp.w	r8, #0
 8012aac:	d001      	beq.n	8012ab2 <__gxx_personality_v0+0x15a>
 8012aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ab0:	4498      	add	r8, r3
 8012ab2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012ab4:	b108      	cbz	r0, 8012aba <__gxx_personality_v0+0x162>
 8012ab6:	3801      	subs	r0, #1
 8012ab8:	4438      	add	r0, r7
 8012aba:	f1b8 0f00 	cmp.w	r8, #0
 8012abe:	f43f af5d 	beq.w	801297c <__gxx_personality_v0+0x24>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	f000 80d6 	beq.w	8012c74 <__gxx_personality_v0+0x31c>
 8012ac8:	f015 0308 	ands.w	r3, r5, #8
 8012acc:	9304      	str	r3, [sp, #16]
 8012ace:	d033      	beq.n	8012b38 <__gxx_personality_v0+0x1e0>
 8012ad0:	2347      	movs	r3, #71	@ 0x47
 8012ad2:	7023      	strb	r3, [r4, #0]
 8012ad4:	234e      	movs	r3, #78	@ 0x4e
 8012ad6:	7063      	strb	r3, [r4, #1]
 8012ad8:	2355      	movs	r3, #85	@ 0x55
 8012ada:	70a3      	strb	r3, [r4, #2]
 8012adc:	2343      	movs	r3, #67	@ 0x43
 8012ade:	70e3      	strb	r3, [r4, #3]
 8012ae0:	2346      	movs	r3, #70	@ 0x46
 8012ae2:	7123      	strb	r3, [r4, #4]
 8012ae4:	234f      	movs	r3, #79	@ 0x4f
 8012ae6:	7163      	strb	r3, [r4, #5]
 8012ae8:	2352      	movs	r3, #82	@ 0x52
 8012aea:	71a3      	strb	r3, [r4, #6]
 8012aec:	2300      	movs	r3, #0
 8012aee:	71e3      	strb	r3, [r4, #7]
 8012af0:	2300      	movs	r3, #0
 8012af2:	9303      	str	r3, [sp, #12]
 8012af4:	a909      	add	r1, sp, #36	@ 0x24
 8012af6:	f7ff fe64 	bl	80127c2 <_ZL12read_sleb128PKhPl>
 8012afa:	a90a      	add	r1, sp, #40	@ 0x28
 8012afc:	9005      	str	r0, [sp, #20]
 8012afe:	f7ff fe60 	bl	80127c2 <_ZL12read_sleb128PKhPl>
 8012b02:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012b04:	2f00      	cmp	r7, #0
 8012b06:	d060      	beq.n	8012bca <__gxx_personality_v0+0x272>
 8012b08:	dd3a      	ble.n	8012b80 <__gxx_personality_v0+0x228>
 8012b0a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8012b0e:	d033      	beq.n	8012b78 <__gxx_personality_v0+0x220>
 8012b10:	f00b 0307 	and.w	r3, fp, #7
 8012b14:	2b04      	cmp	r3, #4
 8012b16:	f63f af6b 	bhi.w	80129f0 <__gxx_personality_v0+0x98>
 8012b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8012b20 <__gxx_personality_v0+0x1c8>)
 8012b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b20:	08012b7d 	.word	0x08012b7d
 8012b24:	080129f1 	.word	0x080129f1
 8012b28:	08012b4b 	.word	0x08012b4b
 8012b2c:	08012b7d 	.word	0x08012b7d
 8012b30:	08012b75 	.word	0x08012b75
 8012b34:	463a      	mov	r2, r7
 8012b36:	e77c      	b.n	8012a32 <__gxx_personality_v0+0xda>
 8012b38:	79e3      	ldrb	r3, [r4, #7]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	bf0c      	ite	eq
 8012b3e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8012b42:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 8012b46:	9307      	str	r3, [sp, #28]
 8012b48:	e7d2      	b.n	8012af0 <__gxx_personality_v0+0x198>
 8012b4a:	2202      	movs	r2, #2
 8012b4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012b4e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012b50:	fb07 1212 	mls	r2, r7, r2, r1
 8012b54:	4658      	mov	r0, fp
 8012b56:	9902      	ldr	r1, [sp, #8]
 8012b58:	f7ff fe4b 	bl	80127f2 <_ZL28read_encoded_value_with_basehjPKhPj>
 8012b5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012b5e:	b131      	cbz	r1, 8012b6e <__gxx_personality_v0+0x216>
 8012b60:	b33c      	cbz	r4, 8012bb2 <__gxx_personality_v0+0x25a>
 8012b62:	ab07      	add	r3, sp, #28
 8012b64:	2200      	movs	r2, #0
 8012b66:	4620      	mov	r0, r4
 8012b68:	f7ff fd76 	bl	8012658 <__cxa_type_match>
 8012b6c:	b308      	cbz	r0, 8012bb2 <__gxx_personality_v0+0x25a>
 8012b6e:	f04f 0a03 	mov.w	sl, #3
 8012b72:	e765      	b.n	8012a40 <__gxx_personality_v0+0xe8>
 8012b74:	2208      	movs	r2, #8
 8012b76:	e7e9      	b.n	8012b4c <__gxx_personality_v0+0x1f4>
 8012b78:	2200      	movs	r2, #0
 8012b7a:	e7e7      	b.n	8012b4c <__gxx_personality_v0+0x1f4>
 8012b7c:	2204      	movs	r2, #4
 8012b7e:	e7e5      	b.n	8012b4c <__gxx_personality_v0+0x1f4>
 8012b80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b82:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8012b86:	1bd2      	subs	r2, r2, r7
 8012b88:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8012b8c:	b1c4      	cbz	r4, 8012bc0 <__gxx_personality_v0+0x268>
 8012b8e:	9904      	ldr	r1, [sp, #16]
 8012b90:	b9b1      	cbnz	r1, 8012bc0 <__gxx_personality_v0+0x268>
 8012b92:	9b07      	ldr	r3, [sp, #28]
 8012b94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b96:	f1aa 0a04 	sub.w	sl, sl, #4
 8012b9a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8012b9e:	2900      	cmp	r1, #0
 8012ba0:	d0e5      	beq.n	8012b6e <__gxx_personality_v0+0x216>
 8012ba2:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	4451      	add	r1, sl
 8012ba8:	4620      	mov	r0, r4
 8012baa:	f7ff fd55 	bl	8012658 <__cxa_type_match>
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d0f3      	beq.n	8012b9a <__gxx_personality_v0+0x242>
 8012bb2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d059      	beq.n	8012c6c <__gxx_personality_v0+0x314>
 8012bb8:	9b05      	ldr	r3, [sp, #20]
 8012bba:	4403      	add	r3, r0
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	e799      	b.n	8012af4 <__gxx_personality_v0+0x19c>
 8012bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d1f4      	bne.n	8012bb2 <__gxx_personality_v0+0x25a>
 8012bc8:	e7d1      	b.n	8012b6e <__gxx_personality_v0+0x216>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	9303      	str	r3, [sp, #12]
 8012bce:	e7f0      	b.n	8012bb2 <__gxx_personality_v0+0x25a>
 8012bd0:	2f00      	cmp	r7, #0
 8012bd2:	da1f      	bge.n	8012c14 <__gxx_personality_v0+0x2bc>
 8012bd4:	f000 f870 	bl	8012cb8 <_ZSt10unexpectedv>
 8012bd8:	f1ba 0f01 	cmp.w	sl, #1
 8012bdc:	d102      	bne.n	8012be4 <__gxx_personality_v0+0x28c>
 8012bde:	4620      	mov	r0, r4
 8012be0:	f000 fa75 	bl	80130ce <__cxa_call_terminate>
 8012be4:	2f00      	cmp	r7, #0
 8012be6:	da15      	bge.n	8012c14 <__gxx_personality_v0+0x2bc>
 8012be8:	aa0c      	add	r2, sp, #48	@ 0x30
 8012bea:	4649      	mov	r1, r9
 8012bec:	4630      	mov	r0, r6
 8012bee:	f7ff fe77 	bl	80128e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8012bf2:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012bf6:	4631      	mov	r1, r6
 8012bf8:	f7ff fe41 	bl	801287e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012bfe:	43fa      	mvns	r2, r7
 8012c00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012c04:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8012c08:	bb52      	cbnz	r2, 8012c60 <__gxx_personality_v0+0x308>
 8012c0a:	2204      	movs	r2, #4
 8012c0c:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 8012c10:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8012c14:	2300      	movs	r3, #0
 8012c16:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012c18:	461a      	mov	r2, r3
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	9500      	str	r5, [sp, #0]
 8012c1e:	4630      	mov	r0, r6
 8012c20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012c22:	f7ee fbc5 	bl	80013b0 <_Unwind_VRS_Set>
 8012c26:	2300      	movs	r3, #0
 8012c28:	4619      	mov	r1, r3
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	9500      	str	r5, [sp, #0]
 8012c2e:	4630      	mov	r0, r6
 8012c30:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012c32:	f7ee fbbd 	bl	80013b0 <_Unwind_VRS_Set>
 8012c36:	210f      	movs	r1, #15
 8012c38:	4630      	mov	r0, r6
 8012c3a:	f7ff fe80 	bl	801293e <_Unwind_GetGR>
 8012c3e:	f000 0001 	and.w	r0, r0, #1
 8012c42:	ea40 0008 	orr.w	r0, r0, r8
 8012c46:	2300      	movs	r3, #0
 8012c48:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012c4a:	9500      	str	r5, [sp, #0]
 8012c4c:	220f      	movs	r2, #15
 8012c4e:	4619      	mov	r1, r3
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7ee fbad 	bl	80013b0 <_Unwind_VRS_Set>
 8012c56:	f1ba 0f02 	cmp.w	sl, #2
 8012c5a:	d003      	beq.n	8012c64 <__gxx_personality_v0+0x30c>
 8012c5c:	2007      	movs	r0, #7
 8012c5e:	e693      	b.n	8012988 <__gxx_personality_v0+0x30>
 8012c60:	3501      	adds	r5, #1
 8012c62:	e7cf      	b.n	8012c04 <__gxx_personality_v0+0x2ac>
 8012c64:	4620      	mov	r0, r4
 8012c66:	f7ff fd55 	bl	8012714 <__cxa_begin_cleanup>
 8012c6a:	e7f7      	b.n	8012c5c <__gxx_personality_v0+0x304>
 8012c6c:	9b03      	ldr	r3, [sp, #12]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	f43f ae84 	beq.w	801297c <__gxx_personality_v0+0x24>
 8012c74:	2700      	movs	r7, #0
 8012c76:	f04f 0a02 	mov.w	sl, #2
 8012c7a:	e6e1      	b.n	8012a40 <__gxx_personality_v0+0xe8>

08012c7c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012c7c:	b508      	push	{r3, lr}
 8012c7e:	4780      	blx	r0
 8012c80:	f001 fc82 	bl	8014588 <abort>

08012c84 <_ZSt13get_terminatev>:
 8012c84:	4b02      	ldr	r3, [pc, #8]	@ (8012c90 <_ZSt13get_terminatev+0xc>)
 8012c86:	6818      	ldr	r0, [r3, #0]
 8012c88:	f3bf 8f5b 	dmb	ish
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop
 8012c90:	20000018 	.word	0x20000018

08012c94 <_ZSt9terminatev>:
 8012c94:	b508      	push	{r3, lr}
 8012c96:	f7ff fff5 	bl	8012c84 <_ZSt13get_terminatev>
 8012c9a:	f7ff ffef 	bl	8012c7c <_ZN10__cxxabiv111__terminateEPFvvE>

08012c9e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8012c9e:	b508      	push	{r3, lr}
 8012ca0:	4780      	blx	r0
 8012ca2:	f7ff fff7 	bl	8012c94 <_ZSt9terminatev>
	...

08012ca8 <_ZSt14get_unexpectedv>:
 8012ca8:	4b02      	ldr	r3, [pc, #8]	@ (8012cb4 <_ZSt14get_unexpectedv+0xc>)
 8012caa:	6818      	ldr	r0, [r3, #0]
 8012cac:	f3bf 8f5b 	dmb	ish
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	20000014 	.word	0x20000014

08012cb8 <_ZSt10unexpectedv>:
 8012cb8:	b508      	push	{r3, lr}
 8012cba:	f7ff fff5 	bl	8012ca8 <_ZSt14get_unexpectedv>
 8012cbe:	f7ff ffee 	bl	8012c9e <_ZN10__cxxabiv112__unexpectedEPFvvE>

08012cc2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8012cc2:	2801      	cmp	r0, #1
 8012cc4:	b510      	push	{r4, lr}
 8012cc6:	d903      	bls.n	8012cd0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8012cc8:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8012ccc:	f7ff ffd6 	bl	8012c7c <_ZN10__cxxabiv111__terminateEPFvvE>
 8012cd0:	f1a1 0328 	sub.w	r3, r1, #40	@ 0x28
 8012cd4:	f3bf 8f5b 	dmb	ish
 8012cd8:	e853 2f00 	ldrex	r2, [r3]
 8012cdc:	3a01      	subs	r2, #1
 8012cde:	e843 2000 	strex	r0, r2, [r3]
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	d1f8      	bne.n	8012cd8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 8012ce6:	f3bf 8f5b 	dmb	ish
 8012cea:	b95a      	cbnz	r2, 8012d04 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 8012cec:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8012cf0:	f101 0458 	add.w	r4, r1, #88	@ 0x58
 8012cf4:	b10b      	cbz	r3, 8012cfa <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x38>
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	4798      	blx	r3
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d00:	f7ff bc62 	b.w	80125c8 <__cxa_free_exception>
 8012d04:	bd10      	pop	{r4, pc}
	...

08012d08 <__cxa_init_primary_exception>:
 8012d08:	b538      	push	{r3, r4, r5, lr}
 8012d0a:	2500      	movs	r5, #0
 8012d0c:	e940 121e 	strd	r1, r2, [r0, #-120]	@ 0x78
 8012d10:	f840 5c80 	str.w	r5, [r0, #-128]
 8012d14:	4604      	mov	r4, r0
 8012d16:	f7ff ffc7 	bl	8012ca8 <_ZSt14get_unexpectedv>
 8012d1a:	f844 0c70 	str.w	r0, [r4, #-112]
 8012d1e:	f7ff ffb1 	bl	8012c84 <_ZSt13get_terminatev>
 8012d22:	2347      	movs	r3, #71	@ 0x47
 8012d24:	f804 3c58 	strb.w	r3, [r4, #-88]
 8012d28:	234e      	movs	r3, #78	@ 0x4e
 8012d2a:	f804 3c57 	strb.w	r3, [r4, #-87]
 8012d2e:	2355      	movs	r3, #85	@ 0x55
 8012d30:	f804 3c56 	strb.w	r3, [r4, #-86]
 8012d34:	2343      	movs	r3, #67	@ 0x43
 8012d36:	f804 3c55 	strb.w	r3, [r4, #-85]
 8012d3a:	f804 3c54 	strb.w	r3, [r4, #-84]
 8012d3e:	232b      	movs	r3, #43	@ 0x2b
 8012d40:	f804 3c53 	strb.w	r3, [r4, #-83]
 8012d44:	f804 3c52 	strb.w	r3, [r4, #-82]
 8012d48:	f804 5c51 	strb.w	r5, [r4, #-81]
 8012d4c:	4b03      	ldr	r3, [pc, #12]	@ (8012d5c <__cxa_init_primary_exception+0x54>)
 8012d4e:	f844 0c6c 	str.w	r0, [r4, #-108]
 8012d52:	f844 3c50 	str.w	r3, [r4, #-80]
 8012d56:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
 8012d5a:	bd38      	pop	{r3, r4, r5, pc}
 8012d5c:	08012cc3 	.word	0x08012cc3

08012d60 <__cxa_throw>:
 8012d60:	b508      	push	{r3, lr}
 8012d62:	4604      	mov	r4, r0
 8012d64:	460d      	mov	r5, r1
 8012d66:	4616      	mov	r6, r2
 8012d68:	f7ff fd0c 	bl	8012784 <__cxa_get_globals>
 8012d6c:	6843      	ldr	r3, [r0, #4]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	6043      	str	r3, [r0, #4]
 8012d72:	4632      	mov	r2, r6
 8012d74:	4629      	mov	r1, r5
 8012d76:	4620      	mov	r0, r4
 8012d78:	f7ff ffc6 	bl	8012d08 <__cxa_init_primary_exception>
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	2301      	movs	r3, #1
 8012d80:	f844 3b28 	str.w	r3, [r4], #40
 8012d84:	4620      	mov	r0, r4
 8012d86:	f7ee fe9b 	bl	8001ac0 <_Unwind_RaiseException>
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f000 f9df 	bl	801314e <__cxa_begin_catch>
 8012d90:	f7ff ff80 	bl	8012c94 <_ZSt9terminatev>

08012d94 <_Znwj>:
 8012d94:	2801      	cmp	r0, #1
 8012d96:	bf38      	it	cc
 8012d98:	2001      	movcc	r0, #1
 8012d9a:	b510      	push	{r4, lr}
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f001 fbfa 	bl	8014598 <malloc>
 8012da4:	b100      	cbz	r0, 8012da8 <_Znwj+0x14>
 8012da6:	bd10      	pop	{r4, pc}
 8012da8:	f000 f9fa 	bl	80131a0 <_ZSt15get_new_handlerv>
 8012dac:	b908      	cbnz	r0, 8012db2 <_Znwj+0x1e>
 8012dae:	f001 fbeb 	bl	8014588 <abort>
 8012db2:	4780      	blx	r0
 8012db4:	e7f3      	b.n	8012d9e <_Znwj+0xa>

08012db6 <_Znaj>:
 8012db6:	f7ff bfed 	b.w	8012d94 <_Znwj>
	...

08012dbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	4b03      	ldr	r3, [pc, #12]	@ (8012dcc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8012dc0:	6003      	str	r3, [r0, #0]
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	f7ff fb3a 	bl	801243c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012dc8:	4620      	mov	r0, r4
 8012dca:	bd10      	pop	{r4, pc}
 8012dcc:	0801845c 	.word	0x0801845c

08012dd0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8012dd0:	b510      	push	{r4, lr}
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	f7ff fff2 	bl	8012dbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8012dd8:	4620      	mov	r0, r4
 8012dda:	210c      	movs	r1, #12
 8012ddc:	f7ff fb82 	bl	80124e4 <_ZdlPvj>
 8012de0:	4620      	mov	r0, r4
 8012de2:	bd10      	pop	{r4, pc}

08012de4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8012de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012dec:	4590      	cmp	r8, r2
 8012dee:	4606      	mov	r6, r0
 8012df0:	460f      	mov	r7, r1
 8012df2:	4615      	mov	r5, r2
 8012df4:	461c      	mov	r4, r3
 8012df6:	d00b      	beq.n	8012e10 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8012df8:	68b0      	ldr	r0, [r6, #8]
 8012dfa:	6803      	ldr	r3, [r0, #0]
 8012dfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8012e00:	6a1e      	ldr	r6, [r3, #32]
 8012e02:	462a      	mov	r2, r5
 8012e04:	4623      	mov	r3, r4
 8012e06:	4639      	mov	r1, r7
 8012e08:	46b4      	mov	ip, r6
 8012e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e0e:	4760      	bx	ip
 8012e10:	4619      	mov	r1, r3
 8012e12:	f000 f857 	bl	8012ec4 <_ZNKSt9type_info7__equalERKS_>
 8012e16:	2800      	cmp	r0, #0
 8012e18:	d0ee      	beq.n	8012df8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8012e1a:	2006      	movs	r0, #6
 8012e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8012e20:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e24:	460d      	mov	r5, r1
 8012e26:	4619      	mov	r1, r3
 8012e28:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8012e2c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8012e30:	4681      	mov	r9, r0
 8012e32:	4617      	mov	r7, r2
 8012e34:	4698      	mov	r8, r3
 8012e36:	f000 f845 	bl	8012ec4 <_ZNKSt9type_info7__equalERKS_>
 8012e3a:	b190      	cbz	r0, 8012e62 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8012e3c:	2d00      	cmp	r5, #0
 8012e3e:	6034      	str	r4, [r6, #0]
 8012e40:	7137      	strb	r7, [r6, #4]
 8012e42:	db09      	blt.n	8012e58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8012e44:	442c      	add	r4, r5
 8012e46:	45a2      	cmp	sl, r4
 8012e48:	bf14      	ite	ne
 8012e4a:	2401      	movne	r4, #1
 8012e4c:	2406      	moveq	r4, #6
 8012e4e:	71b4      	strb	r4, [r6, #6]
 8012e50:	2000      	movs	r0, #0
 8012e52:	b001      	add	sp, #4
 8012e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e58:	3502      	adds	r5, #2
 8012e5a:	d1f9      	bne.n	8012e50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	71b3      	strb	r3, [r6, #6]
 8012e60:	e7f6      	b.n	8012e50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012e62:	4554      	cmp	r4, sl
 8012e64:	d106      	bne.n	8012e74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8012e66:	4659      	mov	r1, fp
 8012e68:	4648      	mov	r0, r9
 8012e6a:	f000 f82b 	bl	8012ec4 <_ZNKSt9type_info7__equalERKS_>
 8012e6e:	b108      	cbz	r0, 8012e74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8012e70:	7177      	strb	r7, [r6, #5]
 8012e72:	e7ed      	b.n	8012e50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012e74:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8012e78:	6803      	ldr	r3, [r0, #0]
 8012e7a:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8012e7e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8012e82:	69dc      	ldr	r4, [r3, #28]
 8012e84:	463a      	mov	r2, r7
 8012e86:	4643      	mov	r3, r8
 8012e88:	4629      	mov	r1, r5
 8012e8a:	46a4      	mov	ip, r4
 8012e8c:	b001      	add	sp, #4
 8012e8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e92:	4760      	bx	ip

08012e94 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8012e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e98:	4607      	mov	r7, r0
 8012e9a:	460c      	mov	r4, r1
 8012e9c:	4615      	mov	r5, r2
 8012e9e:	461e      	mov	r6, r3
 8012ea0:	f7ff faff 	bl	80124a2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8012ea4:	b948      	cbnz	r0, 8012eba <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8012ea6:	68b8      	ldr	r0, [r7, #8]
 8012ea8:	6803      	ldr	r3, [r0, #0]
 8012eaa:	699f      	ldr	r7, [r3, #24]
 8012eac:	462a      	mov	r2, r5
 8012eae:	4633      	mov	r3, r6
 8012eb0:	4621      	mov	r1, r4
 8012eb2:	46bc      	mov	ip, r7
 8012eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb8:	4760      	bx	ip
 8012eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ebe <_ZNSt9type_infoD1Ev>:
 8012ebe:	4770      	bx	lr

08012ec0 <_ZNKSt9type_info14__is_pointer_pEv>:
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	4770      	bx	lr

08012ec4 <_ZNKSt9type_info7__equalERKS_>:
 8012ec4:	4281      	cmp	r1, r0
 8012ec6:	b508      	push	{r3, lr}
 8012ec8:	d00e      	beq.n	8012ee8 <_ZNKSt9type_info7__equalERKS_+0x24>
 8012eca:	6840      	ldr	r0, [r0, #4]
 8012ecc:	7803      	ldrb	r3, [r0, #0]
 8012ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ed0:	d00c      	beq.n	8012eec <_ZNKSt9type_info7__equalERKS_+0x28>
 8012ed2:	6849      	ldr	r1, [r1, #4]
 8012ed4:	780b      	ldrb	r3, [r1, #0]
 8012ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ed8:	bf08      	it	eq
 8012eda:	3101      	addeq	r1, #1
 8012edc:	f7ed f998 	bl	8000210 <strcmp>
 8012ee0:	fab0 f080 	clz	r0, r0
 8012ee4:	0940      	lsrs	r0, r0, #5
 8012ee6:	bd08      	pop	{r3, pc}
 8012ee8:	2001      	movs	r0, #1
 8012eea:	e7fc      	b.n	8012ee6 <_ZNKSt9type_info7__equalERKS_+0x22>
 8012eec:	2000      	movs	r0, #0
 8012eee:	e7fa      	b.n	8012ee6 <_ZNKSt9type_info7__equalERKS_+0x22>

08012ef0 <_ZNKSt11logic_error4whatEv>:
 8012ef0:	6840      	ldr	r0, [r0, #4]
 8012ef2:	4770      	bx	lr

08012ef4 <_ZNSt13runtime_errorD1Ev>:
 8012ef4:	b513      	push	{r0, r1, r4, lr}
 8012ef6:	4b07      	ldr	r3, [pc, #28]	@ (8012f14 <_ZNSt13runtime_errorD1Ev+0x20>)
 8012ef8:	6003      	str	r3, [r0, #0]
 8012efa:	4604      	mov	r4, r0
 8012efc:	6840      	ldr	r0, [r0, #4]
 8012efe:	a901      	add	r1, sp, #4
 8012f00:	380c      	subs	r0, #12
 8012f02:	f000 f8a9 	bl	8013058 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 8012f06:	4620      	mov	r0, r4
 8012f08:	f7ff fc3a 	bl	8012780 <_ZNSt9exceptionD1Ev>
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	b002      	add	sp, #8
 8012f10:	bd10      	pop	{r4, pc}
 8012f12:	bf00      	nop
 8012f14:	080184c0 	.word	0x080184c0

08012f18 <_ZNSt13runtime_errorD0Ev>:
 8012f18:	b510      	push	{r4, lr}
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	f7ff ffea 	bl	8012ef4 <_ZNSt13runtime_errorD1Ev>
 8012f20:	4620      	mov	r0, r4
 8012f22:	f000 f8b5 	bl	8013090 <_ZdlPv>
 8012f26:	4620      	mov	r0, r4
 8012f28:	bd10      	pop	{r4, pc}
	...

08012f2c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>:
 8012f2c:	4288      	cmp	r0, r1
 8012f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f32:	4604      	mov	r4, r0
 8012f34:	460d      	mov	r5, r1
 8012f36:	d018      	beq.n	8012f6a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x3e>
 8012f38:	b1a0      	cbz	r0, 8012f64 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x38>
 8012f3a:	eba1 0800 	sub.w	r8, r1, r0
 8012f3e:	4640      	mov	r0, r8
 8012f40:	2100      	movs	r1, #0
 8012f42:	f000 f857 	bl	8012ff4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8012f46:	f100 070c 	add.w	r7, r0, #12
 8012f4a:	4606      	mov	r6, r0
 8012f4c:	4621      	mov	r1, r4
 8012f4e:	4638      	mov	r0, r7
 8012f50:	462a      	mov	r2, r5
 8012f52:	f000 f83d 	bl	8012fd0 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8012f56:	4641      	mov	r1, r8
 8012f58:	4630      	mov	r0, r6
 8012f5a:	f000 f83f 	bl	8012fdc <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8012f5e:	4638      	mov	r0, r7
 8012f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f64:	4802      	ldr	r0, [pc, #8]	@ (8012f70 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x44>)
 8012f66:	f000 f888 	bl	801307a <_ZSt19__throw_logic_errorPKc>
 8012f6a:	4f02      	ldr	r7, [pc, #8]	@ (8012f74 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x48>)
 8012f6c:	e7f7      	b.n	8012f5e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x32>
 8012f6e:	bf00      	nop
 8012f70:	080184cc 	.word	0x080184cc
 8012f74:	20000590 	.word	0x20000590

08012f78 <_ZNSsC2EPKcRKSaIcE.isra.0>:
 8012f78:	b570      	push	{r4, r5, r6, lr}
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	4616      	mov	r6, r2
 8012f7e:	460c      	mov	r4, r1
 8012f80:	b149      	cbz	r1, 8012f96 <_ZNSsC2EPKcRKSaIcE.isra.0+0x1e>
 8012f82:	4608      	mov	r0, r1
 8012f84:	f7ed f9a4 	bl	80002d0 <strlen>
 8012f88:	1821      	adds	r1, r4, r0
 8012f8a:	4632      	mov	r2, r6
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	f7ff ffcd 	bl	8012f2c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>
 8012f92:	6028      	str	r0, [r5, #0]
 8012f94:	bd70      	pop	{r4, r5, r6, pc}
 8012f96:	f04f 31ff 	mov.w	r1, #4294967295
 8012f9a:	e7f6      	b.n	8012f8a <_ZNSsC2EPKcRKSaIcE.isra.0+0x12>

08012f9c <_ZNSt13runtime_errorC1EPKc>:
 8012f9c:	b513      	push	{r0, r1, r4, lr}
 8012f9e:	4b05      	ldr	r3, [pc, #20]	@ (8012fb4 <_ZNSt13runtime_errorC1EPKc+0x18>)
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	aa01      	add	r2, sp, #4
 8012fa4:	f840 3b04 	str.w	r3, [r0], #4
 8012fa8:	f7ff ffe6 	bl	8012f78 <_ZNSsC2EPKcRKSaIcE.isra.0>
 8012fac:	4620      	mov	r0, r4
 8012fae:	b002      	add	sp, #8
 8012fb0:	bd10      	pop	{r4, pc}
 8012fb2:	bf00      	nop
 8012fb4:	080184c0 	.word	0x080184c0

08012fb8 <_ZNSs7_M_copyEPcPKcj>:
 8012fb8:	2a01      	cmp	r2, #1
 8012fba:	b430      	push	{r4, r5}
 8012fbc:	d103      	bne.n	8012fc6 <_ZNSs7_M_copyEPcPKcj+0xe>
 8012fbe:	780b      	ldrb	r3, [r1, #0]
 8012fc0:	7003      	strb	r3, [r0, #0]
 8012fc2:	bc30      	pop	{r4, r5}
 8012fc4:	4770      	bx	lr
 8012fc6:	2a00      	cmp	r2, #0
 8012fc8:	d0fb      	beq.n	8012fc2 <_ZNSs7_M_copyEPcPKcj+0xa>
 8012fca:	bc30      	pop	{r4, r5}
 8012fcc:	f002 b9e1 	b.w	8015392 <memcpy>

08012fd0 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8012fd0:	b508      	push	{r3, lr}
 8012fd2:	1a52      	subs	r2, r2, r1
 8012fd4:	f7ff fff0 	bl	8012fb8 <_ZNSs7_M_copyEPcPKcj>
 8012fd8:	bd08      	pop	{r3, pc}
	...

08012fdc <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8012fdc:	4b04      	ldr	r3, [pc, #16]	@ (8012ff0 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8012fde:	4298      	cmp	r0, r3
 8012fe0:	d004      	beq.n	8012fec <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	6083      	str	r3, [r0, #8]
 8012fe6:	6001      	str	r1, [r0, #0]
 8012fe8:	4408      	add	r0, r1
 8012fea:	7303      	strb	r3, [r0, #12]
 8012fec:	4770      	bx	lr
 8012fee:	bf00      	nop
 8012ff0:	20000584 	.word	0x20000584

08012ff4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8012ff4:	4b15      	ldr	r3, [pc, #84]	@ (801304c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8012ff6:	4298      	cmp	r0, r3
 8012ff8:	b510      	push	{r4, lr}
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	d902      	bls.n	8013004 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8012ffe:	4814      	ldr	r0, [pc, #80]	@ (8013050 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8013000:	f000 f83e 	bl	8013080 <_ZSt20__throw_length_errorPKc>
 8013004:	4288      	cmp	r0, r1
 8013006:	d903      	bls.n	8013010 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8013008:	004b      	lsls	r3, r1, #1
 801300a:	4298      	cmp	r0, r3
 801300c:	bf38      	it	cc
 801300e:	461c      	movcc	r4, r3
 8013010:	f104 031d 	add.w	r3, r4, #29
 8013014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013018:	f104 000d 	add.w	r0, r4, #13
 801301c:	d90c      	bls.n	8013038 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 801301e:	428c      	cmp	r4, r1
 8013020:	d90a      	bls.n	8013038 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8013022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013026:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 801302a:	1ae4      	subs	r4, r4, r3
 801302c:	4b07      	ldr	r3, [pc, #28]	@ (801304c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 801302e:	429c      	cmp	r4, r3
 8013030:	bf28      	it	cs
 8013032:	461c      	movcs	r4, r3
 8013034:	f104 000d 	add.w	r0, r4, #13
 8013038:	2800      	cmp	r0, #0
 801303a:	da01      	bge.n	8013040 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 801303c:	f000 f81a 	bl	8013074 <_ZSt17__throw_bad_allocv>
 8013040:	f7ff fea8 	bl	8012d94 <_Znwj>
 8013044:	2200      	movs	r2, #0
 8013046:	6044      	str	r4, [r0, #4]
 8013048:	6082      	str	r2, [r0, #8]
 801304a:	bd10      	pop	{r4, pc}
 801304c:	3ffffffc 	.word	0x3ffffffc
 8013050:	080184f6 	.word	0x080184f6

08013054 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8013054:	f000 b81c 	b.w	8013090 <_ZdlPv>

08013058 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8013058:	4a05      	ldr	r2, [pc, #20]	@ (8013070 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 801305a:	4290      	cmp	r0, r2
 801305c:	b510      	push	{r4, lr}
 801305e:	d006      	beq.n	801306e <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8013060:	6882      	ldr	r2, [r0, #8]
 8013062:	1e54      	subs	r4, r2, #1
 8013064:	2a00      	cmp	r2, #0
 8013066:	6084      	str	r4, [r0, #8]
 8013068:	dc01      	bgt.n	801306e <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 801306a:	f7ff fff3 	bl	8013054 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801306e:	bd10      	pop	{r4, pc}
 8013070:	20000584 	.word	0x20000584

08013074 <_ZSt17__throw_bad_allocv>:
 8013074:	b508      	push	{r3, lr}
 8013076:	f001 fa87 	bl	8014588 <abort>

0801307a <_ZSt19__throw_logic_errorPKc>:
 801307a:	b508      	push	{r3, lr}
 801307c:	f001 fa84 	bl	8014588 <abort>

08013080 <_ZSt20__throw_length_errorPKc>:
 8013080:	b508      	push	{r3, lr}
 8013082:	f001 fa81 	bl	8014588 <abort>

08013086 <__aeabi_atexit>:
 8013086:	460b      	mov	r3, r1
 8013088:	4601      	mov	r1, r0
 801308a:	4618      	mov	r0, r3
 801308c:	f001 bb42 	b.w	8014714 <__cxa_atexit>

08013090 <_ZdlPv>:
 8013090:	f001 ba8a 	b.w	80145a8 <free>

08013094 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8013094:	7803      	ldrb	r3, [r0, #0]
 8013096:	2b47      	cmp	r3, #71	@ 0x47
 8013098:	d117      	bne.n	80130ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801309a:	7843      	ldrb	r3, [r0, #1]
 801309c:	2b4e      	cmp	r3, #78	@ 0x4e
 801309e:	d114      	bne.n	80130ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80130a0:	7883      	ldrb	r3, [r0, #2]
 80130a2:	2b55      	cmp	r3, #85	@ 0x55
 80130a4:	d111      	bne.n	80130ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80130a6:	78c3      	ldrb	r3, [r0, #3]
 80130a8:	2b43      	cmp	r3, #67	@ 0x43
 80130aa:	d10e      	bne.n	80130ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80130ac:	7903      	ldrb	r3, [r0, #4]
 80130ae:	2b43      	cmp	r3, #67	@ 0x43
 80130b0:	d10b      	bne.n	80130ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80130b2:	7943      	ldrb	r3, [r0, #5]
 80130b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80130b6:	d108      	bne.n	80130ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80130b8:	7983      	ldrb	r3, [r0, #6]
 80130ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80130bc:	d105      	bne.n	80130ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80130be:	79c0      	ldrb	r0, [r0, #7]
 80130c0:	2801      	cmp	r0, #1
 80130c2:	bf8c      	ite	hi
 80130c4:	2000      	movhi	r0, #0
 80130c6:	2001      	movls	r0, #1
 80130c8:	4770      	bx	lr
 80130ca:	2000      	movs	r0, #0
 80130cc:	4770      	bx	lr

080130ce <__cxa_call_terminate>:
 80130ce:	b510      	push	{r4, lr}
 80130d0:	4604      	mov	r4, r0
 80130d2:	b148      	cbz	r0, 80130e8 <__cxa_call_terminate+0x1a>
 80130d4:	f000 f83b 	bl	801314e <__cxa_begin_catch>
 80130d8:	4620      	mov	r0, r4
 80130da:	f7ff ffdb 	bl	8013094 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80130de:	b118      	cbz	r0, 80130e8 <__cxa_call_terminate+0x1a>
 80130e0:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80130e4:	f7ff fdca 	bl	8012c7c <_ZN10__cxxabiv111__terminateEPFvvE>
 80130e8:	f7ff fdd4 	bl	8012c94 <_ZSt9terminatev>

080130ec <__cxa_call_unexpected>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	4602      	mov	r2, r0
 80130f0:	f7ff ffd0 	bl	8013094 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80130f4:	4604      	mov	r4, r0
 80130f6:	b140      	cbz	r0, 801310a <__cxa_call_unexpected+0x1e>
 80130f8:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80130fc:	2500      	movs	r5, #0
 80130fe:	4610      	mov	r0, r2
 8013100:	f000 f825 	bl	801314e <__cxa_begin_catch>
 8013104:	b11d      	cbz	r5, 801310e <__cxa_call_unexpected+0x22>
 8013106:	f7ff fdd7 	bl	8012cb8 <_ZSt10unexpectedv>
 801310a:	2501      	movs	r5, #1
 801310c:	e7f7      	b.n	80130fe <__cxa_call_unexpected+0x12>
 801310e:	4620      	mov	r0, r4
 8013110:	f7ff fdc5 	bl	8012c9e <_ZN10__cxxabiv112__unexpectedEPFvvE>

08013114 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8013114:	7803      	ldrb	r3, [r0, #0]
 8013116:	2b47      	cmp	r3, #71	@ 0x47
 8013118:	d117      	bne.n	801314a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801311a:	7843      	ldrb	r3, [r0, #1]
 801311c:	2b4e      	cmp	r3, #78	@ 0x4e
 801311e:	d114      	bne.n	801314a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013120:	7883      	ldrb	r3, [r0, #2]
 8013122:	2b55      	cmp	r3, #85	@ 0x55
 8013124:	d111      	bne.n	801314a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013126:	78c3      	ldrb	r3, [r0, #3]
 8013128:	2b43      	cmp	r3, #67	@ 0x43
 801312a:	d10e      	bne.n	801314a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801312c:	7903      	ldrb	r3, [r0, #4]
 801312e:	2b43      	cmp	r3, #67	@ 0x43
 8013130:	d10b      	bne.n	801314a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013132:	7943      	ldrb	r3, [r0, #5]
 8013134:	2b2b      	cmp	r3, #43	@ 0x2b
 8013136:	d108      	bne.n	801314a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013138:	7983      	ldrb	r3, [r0, #6]
 801313a:	2b2b      	cmp	r3, #43	@ 0x2b
 801313c:	d105      	bne.n	801314a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801313e:	79c0      	ldrb	r0, [r0, #7]
 8013140:	2801      	cmp	r0, #1
 8013142:	bf8c      	ite	hi
 8013144:	2000      	movhi	r0, #0
 8013146:	2001      	movls	r0, #1
 8013148:	4770      	bx	lr
 801314a:	2000      	movs	r0, #0
 801314c:	4770      	bx	lr

0801314e <__cxa_begin_catch>:
 801314e:	b538      	push	{r3, r4, r5, lr}
 8013150:	4604      	mov	r4, r0
 8013152:	f7ff fb17 	bl	8012784 <__cxa_get_globals>
 8013156:	6805      	ldr	r5, [r0, #0]
 8013158:	4602      	mov	r2, r0
 801315a:	4620      	mov	r0, r4
 801315c:	f1a4 0120 	sub.w	r1, r4, #32
 8013160:	f7ff ffd8 	bl	8013114 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013164:	b928      	cbnz	r0, 8013172 <__cxa_begin_catch+0x24>
 8013166:	b10d      	cbz	r5, 801316c <__cxa_begin_catch+0x1e>
 8013168:	f7ff fd94 	bl	8012c94 <_ZSt9terminatev>
 801316c:	6011      	str	r1, [r2, #0]
 801316e:	4628      	mov	r0, r5
 8013170:	bd38      	pop	{r3, r4, r5, pc}
 8013172:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8013176:	2b00      	cmp	r3, #0
 8013178:	bfb4      	ite	lt
 801317a:	f1c3 0301 	rsblt	r3, r3, #1
 801317e:	3301      	addge	r3, #1
 8013180:	f844 3c0c 	str.w	r3, [r4, #-12]
 8013184:	6853      	ldr	r3, [r2, #4]
 8013186:	428d      	cmp	r5, r1
 8013188:	f103 33ff 	add.w	r3, r3, #4294967295
 801318c:	6053      	str	r3, [r2, #4]
 801318e:	4620      	mov	r0, r4
 8013190:	bf1c      	itt	ne
 8013192:	f844 5c10 	strne.w	r5, [r4, #-16]
 8013196:	6011      	strne	r1, [r2, #0]
 8013198:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801319a:	f7ee f8db 	bl	8001354 <_Unwind_Complete>
 801319e:	e7e6      	b.n	801316e <__cxa_begin_catch+0x20>

080131a0 <_ZSt15get_new_handlerv>:
 80131a0:	4b02      	ldr	r3, [pc, #8]	@ (80131ac <_ZSt15get_new_handlerv+0xc>)
 80131a2:	6818      	ldr	r0, [r3, #0]
 80131a4:	f3bf 8f5b 	dmb	ish
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop
 80131ac:	20000594 	.word	0x20000594

080131b0 <atan2>:
 80131b0:	f000 b982 	b.w	80134b8 <__ieee754_atan2>

080131b4 <pow>:
 80131b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b6:	ed2d 8b02 	vpush	{d8}
 80131ba:	eeb0 8a40 	vmov.f32	s16, s0
 80131be:	eef0 8a60 	vmov.f32	s17, s1
 80131c2:	ec55 4b11 	vmov	r4, r5, d1
 80131c6:	f000 fa3f 	bl	8013648 <__ieee754_pow>
 80131ca:	4622      	mov	r2, r4
 80131cc:	462b      	mov	r3, r5
 80131ce:	4620      	mov	r0, r4
 80131d0:	4629      	mov	r1, r5
 80131d2:	ec57 6b10 	vmov	r6, r7, d0
 80131d6:	f7ed fcd9 	bl	8000b8c <__aeabi_dcmpun>
 80131da:	2800      	cmp	r0, #0
 80131dc:	d13b      	bne.n	8013256 <pow+0xa2>
 80131de:	ec51 0b18 	vmov	r0, r1, d8
 80131e2:	2200      	movs	r2, #0
 80131e4:	2300      	movs	r3, #0
 80131e6:	f7ed fc9f 	bl	8000b28 <__aeabi_dcmpeq>
 80131ea:	b1b8      	cbz	r0, 801321c <pow+0x68>
 80131ec:	2200      	movs	r2, #0
 80131ee:	2300      	movs	r3, #0
 80131f0:	4620      	mov	r0, r4
 80131f2:	4629      	mov	r1, r5
 80131f4:	f7ed fc98 	bl	8000b28 <__aeabi_dcmpeq>
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d146      	bne.n	801328a <pow+0xd6>
 80131fc:	ec45 4b10 	vmov	d0, r4, r5
 8013200:	f000 f874 	bl	80132ec <finite>
 8013204:	b338      	cbz	r0, 8013256 <pow+0xa2>
 8013206:	2200      	movs	r2, #0
 8013208:	2300      	movs	r3, #0
 801320a:	4620      	mov	r0, r4
 801320c:	4629      	mov	r1, r5
 801320e:	f7ed fc95 	bl	8000b3c <__aeabi_dcmplt>
 8013212:	b300      	cbz	r0, 8013256 <pow+0xa2>
 8013214:	f002 f890 	bl	8015338 <__errno>
 8013218:	2322      	movs	r3, #34	@ 0x22
 801321a:	e01b      	b.n	8013254 <pow+0xa0>
 801321c:	ec47 6b10 	vmov	d0, r6, r7
 8013220:	f000 f864 	bl	80132ec <finite>
 8013224:	b9e0      	cbnz	r0, 8013260 <pow+0xac>
 8013226:	eeb0 0a48 	vmov.f32	s0, s16
 801322a:	eef0 0a68 	vmov.f32	s1, s17
 801322e:	f000 f85d 	bl	80132ec <finite>
 8013232:	b1a8      	cbz	r0, 8013260 <pow+0xac>
 8013234:	ec45 4b10 	vmov	d0, r4, r5
 8013238:	f000 f858 	bl	80132ec <finite>
 801323c:	b180      	cbz	r0, 8013260 <pow+0xac>
 801323e:	4632      	mov	r2, r6
 8013240:	463b      	mov	r3, r7
 8013242:	4630      	mov	r0, r6
 8013244:	4639      	mov	r1, r7
 8013246:	f7ed fca1 	bl	8000b8c <__aeabi_dcmpun>
 801324a:	2800      	cmp	r0, #0
 801324c:	d0e2      	beq.n	8013214 <pow+0x60>
 801324e:	f002 f873 	bl	8015338 <__errno>
 8013252:	2321      	movs	r3, #33	@ 0x21
 8013254:	6003      	str	r3, [r0, #0]
 8013256:	ecbd 8b02 	vpop	{d8}
 801325a:	ec47 6b10 	vmov	d0, r6, r7
 801325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013260:	2200      	movs	r2, #0
 8013262:	2300      	movs	r3, #0
 8013264:	4630      	mov	r0, r6
 8013266:	4639      	mov	r1, r7
 8013268:	f7ed fc5e 	bl	8000b28 <__aeabi_dcmpeq>
 801326c:	2800      	cmp	r0, #0
 801326e:	d0f2      	beq.n	8013256 <pow+0xa2>
 8013270:	eeb0 0a48 	vmov.f32	s0, s16
 8013274:	eef0 0a68 	vmov.f32	s1, s17
 8013278:	f000 f838 	bl	80132ec <finite>
 801327c:	2800      	cmp	r0, #0
 801327e:	d0ea      	beq.n	8013256 <pow+0xa2>
 8013280:	ec45 4b10 	vmov	d0, r4, r5
 8013284:	f000 f832 	bl	80132ec <finite>
 8013288:	e7c3      	b.n	8013212 <pow+0x5e>
 801328a:	4f01      	ldr	r7, [pc, #4]	@ (8013290 <pow+0xdc>)
 801328c:	2600      	movs	r6, #0
 801328e:	e7e2      	b.n	8013256 <pow+0xa2>
 8013290:	3ff00000 	.word	0x3ff00000

08013294 <sqrt>:
 8013294:	b538      	push	{r3, r4, r5, lr}
 8013296:	ed2d 8b02 	vpush	{d8}
 801329a:	ec55 4b10 	vmov	r4, r5, d0
 801329e:	f000 f831 	bl	8013304 <__ieee754_sqrt>
 80132a2:	4622      	mov	r2, r4
 80132a4:	462b      	mov	r3, r5
 80132a6:	4620      	mov	r0, r4
 80132a8:	4629      	mov	r1, r5
 80132aa:	eeb0 8a40 	vmov.f32	s16, s0
 80132ae:	eef0 8a60 	vmov.f32	s17, s1
 80132b2:	f7ed fc6b 	bl	8000b8c <__aeabi_dcmpun>
 80132b6:	b990      	cbnz	r0, 80132de <sqrt+0x4a>
 80132b8:	2200      	movs	r2, #0
 80132ba:	2300      	movs	r3, #0
 80132bc:	4620      	mov	r0, r4
 80132be:	4629      	mov	r1, r5
 80132c0:	f7ed fc3c 	bl	8000b3c <__aeabi_dcmplt>
 80132c4:	b158      	cbz	r0, 80132de <sqrt+0x4a>
 80132c6:	f002 f837 	bl	8015338 <__errno>
 80132ca:	2321      	movs	r3, #33	@ 0x21
 80132cc:	6003      	str	r3, [r0, #0]
 80132ce:	2200      	movs	r2, #0
 80132d0:	2300      	movs	r3, #0
 80132d2:	4610      	mov	r0, r2
 80132d4:	4619      	mov	r1, r3
 80132d6:	f7ed fae9 	bl	80008ac <__aeabi_ddiv>
 80132da:	ec41 0b18 	vmov	d8, r0, r1
 80132de:	eeb0 0a48 	vmov.f32	s0, s16
 80132e2:	eef0 0a68 	vmov.f32	s1, s17
 80132e6:	ecbd 8b02 	vpop	{d8}
 80132ea:	bd38      	pop	{r3, r4, r5, pc}

080132ec <finite>:
 80132ec:	b082      	sub	sp, #8
 80132ee:	ed8d 0b00 	vstr	d0, [sp]
 80132f2:	9801      	ldr	r0, [sp, #4]
 80132f4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80132f8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80132fc:	0fc0      	lsrs	r0, r0, #31
 80132fe:	b002      	add	sp, #8
 8013300:	4770      	bx	lr
	...

08013304 <__ieee754_sqrt>:
 8013304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013308:	4a68      	ldr	r2, [pc, #416]	@ (80134ac <__ieee754_sqrt+0x1a8>)
 801330a:	ec55 4b10 	vmov	r4, r5, d0
 801330e:	43aa      	bics	r2, r5
 8013310:	462b      	mov	r3, r5
 8013312:	4621      	mov	r1, r4
 8013314:	d110      	bne.n	8013338 <__ieee754_sqrt+0x34>
 8013316:	4622      	mov	r2, r4
 8013318:	4620      	mov	r0, r4
 801331a:	4629      	mov	r1, r5
 801331c:	f7ed f99c 	bl	8000658 <__aeabi_dmul>
 8013320:	4602      	mov	r2, r0
 8013322:	460b      	mov	r3, r1
 8013324:	4620      	mov	r0, r4
 8013326:	4629      	mov	r1, r5
 8013328:	f7ec ffe0 	bl	80002ec <__adddf3>
 801332c:	4604      	mov	r4, r0
 801332e:	460d      	mov	r5, r1
 8013330:	ec45 4b10 	vmov	d0, r4, r5
 8013334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013338:	2d00      	cmp	r5, #0
 801333a:	dc0e      	bgt.n	801335a <__ieee754_sqrt+0x56>
 801333c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013340:	4322      	orrs	r2, r4
 8013342:	d0f5      	beq.n	8013330 <__ieee754_sqrt+0x2c>
 8013344:	b19d      	cbz	r5, 801336e <__ieee754_sqrt+0x6a>
 8013346:	4622      	mov	r2, r4
 8013348:	4620      	mov	r0, r4
 801334a:	4629      	mov	r1, r5
 801334c:	f7ec ffcc 	bl	80002e8 <__aeabi_dsub>
 8013350:	4602      	mov	r2, r0
 8013352:	460b      	mov	r3, r1
 8013354:	f7ed faaa 	bl	80008ac <__aeabi_ddiv>
 8013358:	e7e8      	b.n	801332c <__ieee754_sqrt+0x28>
 801335a:	152a      	asrs	r2, r5, #20
 801335c:	d115      	bne.n	801338a <__ieee754_sqrt+0x86>
 801335e:	2000      	movs	r0, #0
 8013360:	e009      	b.n	8013376 <__ieee754_sqrt+0x72>
 8013362:	0acb      	lsrs	r3, r1, #11
 8013364:	3a15      	subs	r2, #21
 8013366:	0549      	lsls	r1, r1, #21
 8013368:	2b00      	cmp	r3, #0
 801336a:	d0fa      	beq.n	8013362 <__ieee754_sqrt+0x5e>
 801336c:	e7f7      	b.n	801335e <__ieee754_sqrt+0x5a>
 801336e:	462a      	mov	r2, r5
 8013370:	e7fa      	b.n	8013368 <__ieee754_sqrt+0x64>
 8013372:	005b      	lsls	r3, r3, #1
 8013374:	3001      	adds	r0, #1
 8013376:	02dc      	lsls	r4, r3, #11
 8013378:	d5fb      	bpl.n	8013372 <__ieee754_sqrt+0x6e>
 801337a:	1e44      	subs	r4, r0, #1
 801337c:	1b12      	subs	r2, r2, r4
 801337e:	f1c0 0420 	rsb	r4, r0, #32
 8013382:	fa21 f404 	lsr.w	r4, r1, r4
 8013386:	4323      	orrs	r3, r4
 8013388:	4081      	lsls	r1, r0
 801338a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801338e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013396:	07d2      	lsls	r2, r2, #31
 8013398:	bf5c      	itt	pl
 801339a:	005b      	lslpl	r3, r3, #1
 801339c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80133a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80133a4:	bf58      	it	pl
 80133a6:	0049      	lslpl	r1, r1, #1
 80133a8:	2600      	movs	r6, #0
 80133aa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80133ae:	106d      	asrs	r5, r5, #1
 80133b0:	0049      	lsls	r1, r1, #1
 80133b2:	2016      	movs	r0, #22
 80133b4:	4632      	mov	r2, r6
 80133b6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80133ba:	1917      	adds	r7, r2, r4
 80133bc:	429f      	cmp	r7, r3
 80133be:	bfde      	ittt	le
 80133c0:	193a      	addle	r2, r7, r4
 80133c2:	1bdb      	suble	r3, r3, r7
 80133c4:	1936      	addle	r6, r6, r4
 80133c6:	0fcf      	lsrs	r7, r1, #31
 80133c8:	3801      	subs	r0, #1
 80133ca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80133ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80133d2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80133d6:	d1f0      	bne.n	80133ba <__ieee754_sqrt+0xb6>
 80133d8:	4604      	mov	r4, r0
 80133da:	2720      	movs	r7, #32
 80133dc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80133e0:	429a      	cmp	r2, r3
 80133e2:	eb00 0e0c 	add.w	lr, r0, ip
 80133e6:	db02      	blt.n	80133ee <__ieee754_sqrt+0xea>
 80133e8:	d113      	bne.n	8013412 <__ieee754_sqrt+0x10e>
 80133ea:	458e      	cmp	lr, r1
 80133ec:	d811      	bhi.n	8013412 <__ieee754_sqrt+0x10e>
 80133ee:	f1be 0f00 	cmp.w	lr, #0
 80133f2:	eb0e 000c 	add.w	r0, lr, ip
 80133f6:	da42      	bge.n	801347e <__ieee754_sqrt+0x17a>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	db40      	blt.n	801347e <__ieee754_sqrt+0x17a>
 80133fc:	f102 0801 	add.w	r8, r2, #1
 8013400:	1a9b      	subs	r3, r3, r2
 8013402:	458e      	cmp	lr, r1
 8013404:	bf88      	it	hi
 8013406:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801340a:	eba1 010e 	sub.w	r1, r1, lr
 801340e:	4464      	add	r4, ip
 8013410:	4642      	mov	r2, r8
 8013412:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013416:	3f01      	subs	r7, #1
 8013418:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801341c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013420:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013424:	d1dc      	bne.n	80133e0 <__ieee754_sqrt+0xdc>
 8013426:	4319      	orrs	r1, r3
 8013428:	d01b      	beq.n	8013462 <__ieee754_sqrt+0x15e>
 801342a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80134b0 <__ieee754_sqrt+0x1ac>
 801342e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80134b4 <__ieee754_sqrt+0x1b0>
 8013432:	e9da 0100 	ldrd	r0, r1, [sl]
 8013436:	e9db 2300 	ldrd	r2, r3, [fp]
 801343a:	f7ec ff55 	bl	80002e8 <__aeabi_dsub>
 801343e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013442:	4602      	mov	r2, r0
 8013444:	460b      	mov	r3, r1
 8013446:	4640      	mov	r0, r8
 8013448:	4649      	mov	r1, r9
 801344a:	f7ed fb81 	bl	8000b50 <__aeabi_dcmple>
 801344e:	b140      	cbz	r0, 8013462 <__ieee754_sqrt+0x15e>
 8013450:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013454:	e9da 0100 	ldrd	r0, r1, [sl]
 8013458:	e9db 2300 	ldrd	r2, r3, [fp]
 801345c:	d111      	bne.n	8013482 <__ieee754_sqrt+0x17e>
 801345e:	3601      	adds	r6, #1
 8013460:	463c      	mov	r4, r7
 8013462:	1072      	asrs	r2, r6, #1
 8013464:	0863      	lsrs	r3, r4, #1
 8013466:	07f1      	lsls	r1, r6, #31
 8013468:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801346c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013470:	bf48      	it	mi
 8013472:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013476:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801347a:	4618      	mov	r0, r3
 801347c:	e756      	b.n	801332c <__ieee754_sqrt+0x28>
 801347e:	4690      	mov	r8, r2
 8013480:	e7be      	b.n	8013400 <__ieee754_sqrt+0xfc>
 8013482:	f7ec ff33 	bl	80002ec <__adddf3>
 8013486:	e9da 8900 	ldrd	r8, r9, [sl]
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	4640      	mov	r0, r8
 8013490:	4649      	mov	r1, r9
 8013492:	f7ed fb53 	bl	8000b3c <__aeabi_dcmplt>
 8013496:	b120      	cbz	r0, 80134a2 <__ieee754_sqrt+0x19e>
 8013498:	1ca0      	adds	r0, r4, #2
 801349a:	bf08      	it	eq
 801349c:	3601      	addeq	r6, #1
 801349e:	3402      	adds	r4, #2
 80134a0:	e7df      	b.n	8013462 <__ieee754_sqrt+0x15e>
 80134a2:	1c63      	adds	r3, r4, #1
 80134a4:	f023 0401 	bic.w	r4, r3, #1
 80134a8:	e7db      	b.n	8013462 <__ieee754_sqrt+0x15e>
 80134aa:	bf00      	nop
 80134ac:	7ff00000 	.word	0x7ff00000
 80134b0:	20000028 	.word	0x20000028
 80134b4:	20000020 	.word	0x20000020

080134b8 <__ieee754_atan2>:
 80134b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134bc:	ec57 6b11 	vmov	r6, r7, d1
 80134c0:	4273      	negs	r3, r6
 80134c2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013640 <__ieee754_atan2+0x188>
 80134c6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80134ca:	4333      	orrs	r3, r6
 80134cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80134d0:	4543      	cmp	r3, r8
 80134d2:	ec51 0b10 	vmov	r0, r1, d0
 80134d6:	4635      	mov	r5, r6
 80134d8:	d809      	bhi.n	80134ee <__ieee754_atan2+0x36>
 80134da:	4244      	negs	r4, r0
 80134dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134e0:	4304      	orrs	r4, r0
 80134e2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80134e6:	4544      	cmp	r4, r8
 80134e8:	468e      	mov	lr, r1
 80134ea:	4681      	mov	r9, r0
 80134ec:	d907      	bls.n	80134fe <__ieee754_atan2+0x46>
 80134ee:	4632      	mov	r2, r6
 80134f0:	463b      	mov	r3, r7
 80134f2:	f7ec fefb 	bl	80002ec <__adddf3>
 80134f6:	ec41 0b10 	vmov	d0, r0, r1
 80134fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134fe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013502:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013506:	4334      	orrs	r4, r6
 8013508:	d103      	bne.n	8013512 <__ieee754_atan2+0x5a>
 801350a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801350e:	f000 bddf 	b.w	80140d0 <atan>
 8013512:	17bc      	asrs	r4, r7, #30
 8013514:	f004 0402 	and.w	r4, r4, #2
 8013518:	ea53 0909 	orrs.w	r9, r3, r9
 801351c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013520:	d107      	bne.n	8013532 <__ieee754_atan2+0x7a>
 8013522:	2c02      	cmp	r4, #2
 8013524:	d05f      	beq.n	80135e6 <__ieee754_atan2+0x12e>
 8013526:	2c03      	cmp	r4, #3
 8013528:	d1e5      	bne.n	80134f6 <__ieee754_atan2+0x3e>
 801352a:	a141      	add	r1, pc, #260	@ (adr r1, 8013630 <__ieee754_atan2+0x178>)
 801352c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013530:	e7e1      	b.n	80134f6 <__ieee754_atan2+0x3e>
 8013532:	4315      	orrs	r5, r2
 8013534:	d106      	bne.n	8013544 <__ieee754_atan2+0x8c>
 8013536:	f1be 0f00 	cmp.w	lr, #0
 801353a:	da5f      	bge.n	80135fc <__ieee754_atan2+0x144>
 801353c:	a13e      	add	r1, pc, #248	@ (adr r1, 8013638 <__ieee754_atan2+0x180>)
 801353e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013542:	e7d8      	b.n	80134f6 <__ieee754_atan2+0x3e>
 8013544:	4542      	cmp	r2, r8
 8013546:	d10f      	bne.n	8013568 <__ieee754_atan2+0xb0>
 8013548:	4293      	cmp	r3, r2
 801354a:	f104 34ff 	add.w	r4, r4, #4294967295
 801354e:	d107      	bne.n	8013560 <__ieee754_atan2+0xa8>
 8013550:	2c02      	cmp	r4, #2
 8013552:	d84c      	bhi.n	80135ee <__ieee754_atan2+0x136>
 8013554:	4b34      	ldr	r3, [pc, #208]	@ (8013628 <__ieee754_atan2+0x170>)
 8013556:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801355a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801355e:	e7ca      	b.n	80134f6 <__ieee754_atan2+0x3e>
 8013560:	2c02      	cmp	r4, #2
 8013562:	d848      	bhi.n	80135f6 <__ieee754_atan2+0x13e>
 8013564:	4b31      	ldr	r3, [pc, #196]	@ (801362c <__ieee754_atan2+0x174>)
 8013566:	e7f6      	b.n	8013556 <__ieee754_atan2+0x9e>
 8013568:	4543      	cmp	r3, r8
 801356a:	d0e4      	beq.n	8013536 <__ieee754_atan2+0x7e>
 801356c:	1a9b      	subs	r3, r3, r2
 801356e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8013572:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013576:	da1e      	bge.n	80135b6 <__ieee754_atan2+0xfe>
 8013578:	2f00      	cmp	r7, #0
 801357a:	da01      	bge.n	8013580 <__ieee754_atan2+0xc8>
 801357c:	323c      	adds	r2, #60	@ 0x3c
 801357e:	db1e      	blt.n	80135be <__ieee754_atan2+0x106>
 8013580:	4632      	mov	r2, r6
 8013582:	463b      	mov	r3, r7
 8013584:	f7ed f992 	bl	80008ac <__aeabi_ddiv>
 8013588:	ec41 0b10 	vmov	d0, r0, r1
 801358c:	f000 ff38 	bl	8014400 <fabs>
 8013590:	f000 fd9e 	bl	80140d0 <atan>
 8013594:	ec51 0b10 	vmov	r0, r1, d0
 8013598:	2c01      	cmp	r4, #1
 801359a:	d013      	beq.n	80135c4 <__ieee754_atan2+0x10c>
 801359c:	2c02      	cmp	r4, #2
 801359e:	d015      	beq.n	80135cc <__ieee754_atan2+0x114>
 80135a0:	2c00      	cmp	r4, #0
 80135a2:	d0a8      	beq.n	80134f6 <__ieee754_atan2+0x3e>
 80135a4:	a318      	add	r3, pc, #96	@ (adr r3, 8013608 <__ieee754_atan2+0x150>)
 80135a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135aa:	f7ec fe9d 	bl	80002e8 <__aeabi_dsub>
 80135ae:	a318      	add	r3, pc, #96	@ (adr r3, 8013610 <__ieee754_atan2+0x158>)
 80135b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b4:	e014      	b.n	80135e0 <__ieee754_atan2+0x128>
 80135b6:	a118      	add	r1, pc, #96	@ (adr r1, 8013618 <__ieee754_atan2+0x160>)
 80135b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135bc:	e7ec      	b.n	8013598 <__ieee754_atan2+0xe0>
 80135be:	2000      	movs	r0, #0
 80135c0:	2100      	movs	r1, #0
 80135c2:	e7e9      	b.n	8013598 <__ieee754_atan2+0xe0>
 80135c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80135c8:	4619      	mov	r1, r3
 80135ca:	e794      	b.n	80134f6 <__ieee754_atan2+0x3e>
 80135cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8013608 <__ieee754_atan2+0x150>)
 80135ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d2:	f7ec fe89 	bl	80002e8 <__aeabi_dsub>
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	a10d      	add	r1, pc, #52	@ (adr r1, 8013610 <__ieee754_atan2+0x158>)
 80135dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135e0:	f7ec fe82 	bl	80002e8 <__aeabi_dsub>
 80135e4:	e787      	b.n	80134f6 <__ieee754_atan2+0x3e>
 80135e6:	a10a      	add	r1, pc, #40	@ (adr r1, 8013610 <__ieee754_atan2+0x158>)
 80135e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135ec:	e783      	b.n	80134f6 <__ieee754_atan2+0x3e>
 80135ee:	a10c      	add	r1, pc, #48	@ (adr r1, 8013620 <__ieee754_atan2+0x168>)
 80135f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135f4:	e77f      	b.n	80134f6 <__ieee754_atan2+0x3e>
 80135f6:	2000      	movs	r0, #0
 80135f8:	2100      	movs	r1, #0
 80135fa:	e77c      	b.n	80134f6 <__ieee754_atan2+0x3e>
 80135fc:	a106      	add	r1, pc, #24	@ (adr r1, 8013618 <__ieee754_atan2+0x160>)
 80135fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013602:	e778      	b.n	80134f6 <__ieee754_atan2+0x3e>
 8013604:	f3af 8000 	nop.w
 8013608:	33145c07 	.word	0x33145c07
 801360c:	3ca1a626 	.word	0x3ca1a626
 8013610:	54442d18 	.word	0x54442d18
 8013614:	400921fb 	.word	0x400921fb
 8013618:	54442d18 	.word	0x54442d18
 801361c:	3ff921fb 	.word	0x3ff921fb
 8013620:	54442d18 	.word	0x54442d18
 8013624:	3fe921fb 	.word	0x3fe921fb
 8013628:	08018528 	.word	0x08018528
 801362c:	08018510 	.word	0x08018510
 8013630:	54442d18 	.word	0x54442d18
 8013634:	c00921fb 	.word	0xc00921fb
 8013638:	54442d18 	.word	0x54442d18
 801363c:	bff921fb 	.word	0xbff921fb
 8013640:	7ff00000 	.word	0x7ff00000
 8013644:	00000000 	.word	0x00000000

08013648 <__ieee754_pow>:
 8013648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364c:	b091      	sub	sp, #68	@ 0x44
 801364e:	ed8d 1b00 	vstr	d1, [sp]
 8013652:	e9dd 1900 	ldrd	r1, r9, [sp]
 8013656:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801365a:	ea5a 0001 	orrs.w	r0, sl, r1
 801365e:	ec57 6b10 	vmov	r6, r7, d0
 8013662:	d113      	bne.n	801368c <__ieee754_pow+0x44>
 8013664:	19b3      	adds	r3, r6, r6
 8013666:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801366a:	4152      	adcs	r2, r2
 801366c:	4298      	cmp	r0, r3
 801366e:	4b98      	ldr	r3, [pc, #608]	@ (80138d0 <__ieee754_pow+0x288>)
 8013670:	4193      	sbcs	r3, r2
 8013672:	f080 84ea 	bcs.w	801404a <__ieee754_pow+0xa02>
 8013676:	e9dd 2300 	ldrd	r2, r3, [sp]
 801367a:	4630      	mov	r0, r6
 801367c:	4639      	mov	r1, r7
 801367e:	f7ec fe35 	bl	80002ec <__adddf3>
 8013682:	ec41 0b10 	vmov	d0, r0, r1
 8013686:	b011      	add	sp, #68	@ 0x44
 8013688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368c:	4a91      	ldr	r2, [pc, #580]	@ (80138d4 <__ieee754_pow+0x28c>)
 801368e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013692:	4590      	cmp	r8, r2
 8013694:	463d      	mov	r5, r7
 8013696:	4633      	mov	r3, r6
 8013698:	d806      	bhi.n	80136a8 <__ieee754_pow+0x60>
 801369a:	d101      	bne.n	80136a0 <__ieee754_pow+0x58>
 801369c:	2e00      	cmp	r6, #0
 801369e:	d1ea      	bne.n	8013676 <__ieee754_pow+0x2e>
 80136a0:	4592      	cmp	sl, r2
 80136a2:	d801      	bhi.n	80136a8 <__ieee754_pow+0x60>
 80136a4:	d10e      	bne.n	80136c4 <__ieee754_pow+0x7c>
 80136a6:	b169      	cbz	r1, 80136c4 <__ieee754_pow+0x7c>
 80136a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80136ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80136b0:	431d      	orrs	r5, r3
 80136b2:	d1e0      	bne.n	8013676 <__ieee754_pow+0x2e>
 80136b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80136b8:	18db      	adds	r3, r3, r3
 80136ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80136be:	4152      	adcs	r2, r2
 80136c0:	429d      	cmp	r5, r3
 80136c2:	e7d4      	b.n	801366e <__ieee754_pow+0x26>
 80136c4:	2d00      	cmp	r5, #0
 80136c6:	46c3      	mov	fp, r8
 80136c8:	da3a      	bge.n	8013740 <__ieee754_pow+0xf8>
 80136ca:	4a83      	ldr	r2, [pc, #524]	@ (80138d8 <__ieee754_pow+0x290>)
 80136cc:	4592      	cmp	sl, r2
 80136ce:	d84d      	bhi.n	801376c <__ieee754_pow+0x124>
 80136d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80136d4:	4592      	cmp	sl, r2
 80136d6:	f240 84c7 	bls.w	8014068 <__ieee754_pow+0xa20>
 80136da:	ea4f 522a 	mov.w	r2, sl, asr #20
 80136de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80136e2:	2a14      	cmp	r2, #20
 80136e4:	dd0f      	ble.n	8013706 <__ieee754_pow+0xbe>
 80136e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80136ea:	fa21 f402 	lsr.w	r4, r1, r2
 80136ee:	fa04 f202 	lsl.w	r2, r4, r2
 80136f2:	428a      	cmp	r2, r1
 80136f4:	f040 84b8 	bne.w	8014068 <__ieee754_pow+0xa20>
 80136f8:	f004 0401 	and.w	r4, r4, #1
 80136fc:	f1c4 0402 	rsb	r4, r4, #2
 8013700:	2900      	cmp	r1, #0
 8013702:	d158      	bne.n	80137b6 <__ieee754_pow+0x16e>
 8013704:	e00e      	b.n	8013724 <__ieee754_pow+0xdc>
 8013706:	2900      	cmp	r1, #0
 8013708:	d154      	bne.n	80137b4 <__ieee754_pow+0x16c>
 801370a:	f1c2 0214 	rsb	r2, r2, #20
 801370e:	fa4a f402 	asr.w	r4, sl, r2
 8013712:	fa04 f202 	lsl.w	r2, r4, r2
 8013716:	4552      	cmp	r2, sl
 8013718:	f040 84a3 	bne.w	8014062 <__ieee754_pow+0xa1a>
 801371c:	f004 0401 	and.w	r4, r4, #1
 8013720:	f1c4 0402 	rsb	r4, r4, #2
 8013724:	4a6d      	ldr	r2, [pc, #436]	@ (80138dc <__ieee754_pow+0x294>)
 8013726:	4592      	cmp	sl, r2
 8013728:	d12e      	bne.n	8013788 <__ieee754_pow+0x140>
 801372a:	f1b9 0f00 	cmp.w	r9, #0
 801372e:	f280 8494 	bge.w	801405a <__ieee754_pow+0xa12>
 8013732:	496a      	ldr	r1, [pc, #424]	@ (80138dc <__ieee754_pow+0x294>)
 8013734:	4632      	mov	r2, r6
 8013736:	463b      	mov	r3, r7
 8013738:	2000      	movs	r0, #0
 801373a:	f7ed f8b7 	bl	80008ac <__aeabi_ddiv>
 801373e:	e7a0      	b.n	8013682 <__ieee754_pow+0x3a>
 8013740:	2400      	movs	r4, #0
 8013742:	bbc1      	cbnz	r1, 80137b6 <__ieee754_pow+0x16e>
 8013744:	4a63      	ldr	r2, [pc, #396]	@ (80138d4 <__ieee754_pow+0x28c>)
 8013746:	4592      	cmp	sl, r2
 8013748:	d1ec      	bne.n	8013724 <__ieee754_pow+0xdc>
 801374a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801374e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8013752:	431a      	orrs	r2, r3
 8013754:	f000 8479 	beq.w	801404a <__ieee754_pow+0xa02>
 8013758:	4b61      	ldr	r3, [pc, #388]	@ (80138e0 <__ieee754_pow+0x298>)
 801375a:	4598      	cmp	r8, r3
 801375c:	d908      	bls.n	8013770 <__ieee754_pow+0x128>
 801375e:	f1b9 0f00 	cmp.w	r9, #0
 8013762:	f2c0 8476 	blt.w	8014052 <__ieee754_pow+0xa0a>
 8013766:	e9dd 0100 	ldrd	r0, r1, [sp]
 801376a:	e78a      	b.n	8013682 <__ieee754_pow+0x3a>
 801376c:	2402      	movs	r4, #2
 801376e:	e7e8      	b.n	8013742 <__ieee754_pow+0xfa>
 8013770:	f1b9 0f00 	cmp.w	r9, #0
 8013774:	f04f 0000 	mov.w	r0, #0
 8013778:	f04f 0100 	mov.w	r1, #0
 801377c:	da81      	bge.n	8013682 <__ieee754_pow+0x3a>
 801377e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013782:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013786:	e77c      	b.n	8013682 <__ieee754_pow+0x3a>
 8013788:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801378c:	d106      	bne.n	801379c <__ieee754_pow+0x154>
 801378e:	4632      	mov	r2, r6
 8013790:	463b      	mov	r3, r7
 8013792:	4630      	mov	r0, r6
 8013794:	4639      	mov	r1, r7
 8013796:	f7ec ff5f 	bl	8000658 <__aeabi_dmul>
 801379a:	e772      	b.n	8013682 <__ieee754_pow+0x3a>
 801379c:	4a51      	ldr	r2, [pc, #324]	@ (80138e4 <__ieee754_pow+0x29c>)
 801379e:	4591      	cmp	r9, r2
 80137a0:	d109      	bne.n	80137b6 <__ieee754_pow+0x16e>
 80137a2:	2d00      	cmp	r5, #0
 80137a4:	db07      	blt.n	80137b6 <__ieee754_pow+0x16e>
 80137a6:	ec47 6b10 	vmov	d0, r6, r7
 80137aa:	b011      	add	sp, #68	@ 0x44
 80137ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b0:	f7ff bda8 	b.w	8013304 <__ieee754_sqrt>
 80137b4:	2400      	movs	r4, #0
 80137b6:	ec47 6b10 	vmov	d0, r6, r7
 80137ba:	9302      	str	r3, [sp, #8]
 80137bc:	f000 fe20 	bl	8014400 <fabs>
 80137c0:	9b02      	ldr	r3, [sp, #8]
 80137c2:	ec51 0b10 	vmov	r0, r1, d0
 80137c6:	bb53      	cbnz	r3, 801381e <__ieee754_pow+0x1d6>
 80137c8:	4b44      	ldr	r3, [pc, #272]	@ (80138dc <__ieee754_pow+0x294>)
 80137ca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d002      	beq.n	80137d8 <__ieee754_pow+0x190>
 80137d2:	f1b8 0f00 	cmp.w	r8, #0
 80137d6:	d122      	bne.n	801381e <__ieee754_pow+0x1d6>
 80137d8:	f1b9 0f00 	cmp.w	r9, #0
 80137dc:	da05      	bge.n	80137ea <__ieee754_pow+0x1a2>
 80137de:	4602      	mov	r2, r0
 80137e0:	460b      	mov	r3, r1
 80137e2:	2000      	movs	r0, #0
 80137e4:	493d      	ldr	r1, [pc, #244]	@ (80138dc <__ieee754_pow+0x294>)
 80137e6:	f7ed f861 	bl	80008ac <__aeabi_ddiv>
 80137ea:	2d00      	cmp	r5, #0
 80137ec:	f6bf af49 	bge.w	8013682 <__ieee754_pow+0x3a>
 80137f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80137f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80137f8:	ea58 0804 	orrs.w	r8, r8, r4
 80137fc:	d108      	bne.n	8013810 <__ieee754_pow+0x1c8>
 80137fe:	4602      	mov	r2, r0
 8013800:	460b      	mov	r3, r1
 8013802:	4610      	mov	r0, r2
 8013804:	4619      	mov	r1, r3
 8013806:	f7ec fd6f 	bl	80002e8 <__aeabi_dsub>
 801380a:	4602      	mov	r2, r0
 801380c:	460b      	mov	r3, r1
 801380e:	e794      	b.n	801373a <__ieee754_pow+0xf2>
 8013810:	2c01      	cmp	r4, #1
 8013812:	f47f af36 	bne.w	8013682 <__ieee754_pow+0x3a>
 8013816:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801381a:	4619      	mov	r1, r3
 801381c:	e731      	b.n	8013682 <__ieee754_pow+0x3a>
 801381e:	0feb      	lsrs	r3, r5, #31
 8013820:	3b01      	subs	r3, #1
 8013822:	ea53 0204 	orrs.w	r2, r3, r4
 8013826:	d102      	bne.n	801382e <__ieee754_pow+0x1e6>
 8013828:	4632      	mov	r2, r6
 801382a:	463b      	mov	r3, r7
 801382c:	e7e9      	b.n	8013802 <__ieee754_pow+0x1ba>
 801382e:	3c01      	subs	r4, #1
 8013830:	431c      	orrs	r4, r3
 8013832:	d016      	beq.n	8013862 <__ieee754_pow+0x21a>
 8013834:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80138c0 <__ieee754_pow+0x278>
 8013838:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801383c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013840:	f240 8112 	bls.w	8013a68 <__ieee754_pow+0x420>
 8013844:	4b28      	ldr	r3, [pc, #160]	@ (80138e8 <__ieee754_pow+0x2a0>)
 8013846:	459a      	cmp	sl, r3
 8013848:	4b25      	ldr	r3, [pc, #148]	@ (80138e0 <__ieee754_pow+0x298>)
 801384a:	d916      	bls.n	801387a <__ieee754_pow+0x232>
 801384c:	4598      	cmp	r8, r3
 801384e:	d80b      	bhi.n	8013868 <__ieee754_pow+0x220>
 8013850:	f1b9 0f00 	cmp.w	r9, #0
 8013854:	da0b      	bge.n	801386e <__ieee754_pow+0x226>
 8013856:	2000      	movs	r0, #0
 8013858:	b011      	add	sp, #68	@ 0x44
 801385a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801385e:	f000 be8b 	b.w	8014578 <__math_oflow>
 8013862:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80138c8 <__ieee754_pow+0x280>
 8013866:	e7e7      	b.n	8013838 <__ieee754_pow+0x1f0>
 8013868:	f1b9 0f00 	cmp.w	r9, #0
 801386c:	dcf3      	bgt.n	8013856 <__ieee754_pow+0x20e>
 801386e:	2000      	movs	r0, #0
 8013870:	b011      	add	sp, #68	@ 0x44
 8013872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013876:	f000 be77 	b.w	8014568 <__math_uflow>
 801387a:	4598      	cmp	r8, r3
 801387c:	d20c      	bcs.n	8013898 <__ieee754_pow+0x250>
 801387e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013882:	2200      	movs	r2, #0
 8013884:	2300      	movs	r3, #0
 8013886:	f7ed f959 	bl	8000b3c <__aeabi_dcmplt>
 801388a:	3800      	subs	r0, #0
 801388c:	bf18      	it	ne
 801388e:	2001      	movne	r0, #1
 8013890:	f1b9 0f00 	cmp.w	r9, #0
 8013894:	daec      	bge.n	8013870 <__ieee754_pow+0x228>
 8013896:	e7df      	b.n	8013858 <__ieee754_pow+0x210>
 8013898:	4b10      	ldr	r3, [pc, #64]	@ (80138dc <__ieee754_pow+0x294>)
 801389a:	4598      	cmp	r8, r3
 801389c:	f04f 0200 	mov.w	r2, #0
 80138a0:	d924      	bls.n	80138ec <__ieee754_pow+0x2a4>
 80138a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138a6:	2300      	movs	r3, #0
 80138a8:	f7ed f948 	bl	8000b3c <__aeabi_dcmplt>
 80138ac:	3800      	subs	r0, #0
 80138ae:	bf18      	it	ne
 80138b0:	2001      	movne	r0, #1
 80138b2:	f1b9 0f00 	cmp.w	r9, #0
 80138b6:	dccf      	bgt.n	8013858 <__ieee754_pow+0x210>
 80138b8:	e7da      	b.n	8013870 <__ieee754_pow+0x228>
 80138ba:	bf00      	nop
 80138bc:	f3af 8000 	nop.w
 80138c0:	00000000 	.word	0x00000000
 80138c4:	3ff00000 	.word	0x3ff00000
 80138c8:	00000000 	.word	0x00000000
 80138cc:	bff00000 	.word	0xbff00000
 80138d0:	fff00000 	.word	0xfff00000
 80138d4:	7ff00000 	.word	0x7ff00000
 80138d8:	433fffff 	.word	0x433fffff
 80138dc:	3ff00000 	.word	0x3ff00000
 80138e0:	3fefffff 	.word	0x3fefffff
 80138e4:	3fe00000 	.word	0x3fe00000
 80138e8:	43f00000 	.word	0x43f00000
 80138ec:	4b5a      	ldr	r3, [pc, #360]	@ (8013a58 <__ieee754_pow+0x410>)
 80138ee:	f7ec fcfb 	bl	80002e8 <__aeabi_dsub>
 80138f2:	a351      	add	r3, pc, #324	@ (adr r3, 8013a38 <__ieee754_pow+0x3f0>)
 80138f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f8:	4604      	mov	r4, r0
 80138fa:	460d      	mov	r5, r1
 80138fc:	f7ec feac 	bl	8000658 <__aeabi_dmul>
 8013900:	a34f      	add	r3, pc, #316	@ (adr r3, 8013a40 <__ieee754_pow+0x3f8>)
 8013902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013906:	4606      	mov	r6, r0
 8013908:	460f      	mov	r7, r1
 801390a:	4620      	mov	r0, r4
 801390c:	4629      	mov	r1, r5
 801390e:	f7ec fea3 	bl	8000658 <__aeabi_dmul>
 8013912:	4b52      	ldr	r3, [pc, #328]	@ (8013a5c <__ieee754_pow+0x414>)
 8013914:	4682      	mov	sl, r0
 8013916:	468b      	mov	fp, r1
 8013918:	2200      	movs	r2, #0
 801391a:	4620      	mov	r0, r4
 801391c:	4629      	mov	r1, r5
 801391e:	f7ec fe9b 	bl	8000658 <__aeabi_dmul>
 8013922:	4602      	mov	r2, r0
 8013924:	460b      	mov	r3, r1
 8013926:	a148      	add	r1, pc, #288	@ (adr r1, 8013a48 <__ieee754_pow+0x400>)
 8013928:	e9d1 0100 	ldrd	r0, r1, [r1]
 801392c:	f7ec fcdc 	bl	80002e8 <__aeabi_dsub>
 8013930:	4622      	mov	r2, r4
 8013932:	462b      	mov	r3, r5
 8013934:	f7ec fe90 	bl	8000658 <__aeabi_dmul>
 8013938:	4602      	mov	r2, r0
 801393a:	460b      	mov	r3, r1
 801393c:	2000      	movs	r0, #0
 801393e:	4948      	ldr	r1, [pc, #288]	@ (8013a60 <__ieee754_pow+0x418>)
 8013940:	f7ec fcd2 	bl	80002e8 <__aeabi_dsub>
 8013944:	4622      	mov	r2, r4
 8013946:	4680      	mov	r8, r0
 8013948:	4689      	mov	r9, r1
 801394a:	462b      	mov	r3, r5
 801394c:	4620      	mov	r0, r4
 801394e:	4629      	mov	r1, r5
 8013950:	f7ec fe82 	bl	8000658 <__aeabi_dmul>
 8013954:	4602      	mov	r2, r0
 8013956:	460b      	mov	r3, r1
 8013958:	4640      	mov	r0, r8
 801395a:	4649      	mov	r1, r9
 801395c:	f7ec fe7c 	bl	8000658 <__aeabi_dmul>
 8013960:	a33b      	add	r3, pc, #236	@ (adr r3, 8013a50 <__ieee754_pow+0x408>)
 8013962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013966:	f7ec fe77 	bl	8000658 <__aeabi_dmul>
 801396a:	4602      	mov	r2, r0
 801396c:	460b      	mov	r3, r1
 801396e:	4650      	mov	r0, sl
 8013970:	4659      	mov	r1, fp
 8013972:	f7ec fcb9 	bl	80002e8 <__aeabi_dsub>
 8013976:	4602      	mov	r2, r0
 8013978:	460b      	mov	r3, r1
 801397a:	4680      	mov	r8, r0
 801397c:	4689      	mov	r9, r1
 801397e:	4630      	mov	r0, r6
 8013980:	4639      	mov	r1, r7
 8013982:	f7ec fcb3 	bl	80002ec <__adddf3>
 8013986:	2400      	movs	r4, #0
 8013988:	4632      	mov	r2, r6
 801398a:	463b      	mov	r3, r7
 801398c:	4620      	mov	r0, r4
 801398e:	460d      	mov	r5, r1
 8013990:	f7ec fcaa 	bl	80002e8 <__aeabi_dsub>
 8013994:	4602      	mov	r2, r0
 8013996:	460b      	mov	r3, r1
 8013998:	4640      	mov	r0, r8
 801399a:	4649      	mov	r1, r9
 801399c:	f7ec fca4 	bl	80002e8 <__aeabi_dsub>
 80139a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80139a8:	2300      	movs	r3, #0
 80139aa:	9304      	str	r3, [sp, #16]
 80139ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80139b0:	4606      	mov	r6, r0
 80139b2:	460f      	mov	r7, r1
 80139b4:	4652      	mov	r2, sl
 80139b6:	465b      	mov	r3, fp
 80139b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139bc:	f7ec fc94 	bl	80002e8 <__aeabi_dsub>
 80139c0:	4622      	mov	r2, r4
 80139c2:	462b      	mov	r3, r5
 80139c4:	f7ec fe48 	bl	8000658 <__aeabi_dmul>
 80139c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139cc:	4680      	mov	r8, r0
 80139ce:	4689      	mov	r9, r1
 80139d0:	4630      	mov	r0, r6
 80139d2:	4639      	mov	r1, r7
 80139d4:	f7ec fe40 	bl	8000658 <__aeabi_dmul>
 80139d8:	4602      	mov	r2, r0
 80139da:	460b      	mov	r3, r1
 80139dc:	4640      	mov	r0, r8
 80139de:	4649      	mov	r1, r9
 80139e0:	f7ec fc84 	bl	80002ec <__adddf3>
 80139e4:	4652      	mov	r2, sl
 80139e6:	465b      	mov	r3, fp
 80139e8:	4606      	mov	r6, r0
 80139ea:	460f      	mov	r7, r1
 80139ec:	4620      	mov	r0, r4
 80139ee:	4629      	mov	r1, r5
 80139f0:	f7ec fe32 	bl	8000658 <__aeabi_dmul>
 80139f4:	460b      	mov	r3, r1
 80139f6:	4602      	mov	r2, r0
 80139f8:	4680      	mov	r8, r0
 80139fa:	4689      	mov	r9, r1
 80139fc:	4630      	mov	r0, r6
 80139fe:	4639      	mov	r1, r7
 8013a00:	f7ec fc74 	bl	80002ec <__adddf3>
 8013a04:	4b17      	ldr	r3, [pc, #92]	@ (8013a64 <__ieee754_pow+0x41c>)
 8013a06:	4299      	cmp	r1, r3
 8013a08:	4604      	mov	r4, r0
 8013a0a:	460d      	mov	r5, r1
 8013a0c:	468a      	mov	sl, r1
 8013a0e:	468b      	mov	fp, r1
 8013a10:	f340 82ef 	ble.w	8013ff2 <__ieee754_pow+0x9aa>
 8013a14:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013a18:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013a1c:	4303      	orrs	r3, r0
 8013a1e:	f000 81e8 	beq.w	8013df2 <__ieee754_pow+0x7aa>
 8013a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a26:	2200      	movs	r2, #0
 8013a28:	2300      	movs	r3, #0
 8013a2a:	f7ed f887 	bl	8000b3c <__aeabi_dcmplt>
 8013a2e:	3800      	subs	r0, #0
 8013a30:	bf18      	it	ne
 8013a32:	2001      	movne	r0, #1
 8013a34:	e710      	b.n	8013858 <__ieee754_pow+0x210>
 8013a36:	bf00      	nop
 8013a38:	60000000 	.word	0x60000000
 8013a3c:	3ff71547 	.word	0x3ff71547
 8013a40:	f85ddf44 	.word	0xf85ddf44
 8013a44:	3e54ae0b 	.word	0x3e54ae0b
 8013a48:	55555555 	.word	0x55555555
 8013a4c:	3fd55555 	.word	0x3fd55555
 8013a50:	652b82fe 	.word	0x652b82fe
 8013a54:	3ff71547 	.word	0x3ff71547
 8013a58:	3ff00000 	.word	0x3ff00000
 8013a5c:	3fd00000 	.word	0x3fd00000
 8013a60:	3fe00000 	.word	0x3fe00000
 8013a64:	408fffff 	.word	0x408fffff
 8013a68:	4bd5      	ldr	r3, [pc, #852]	@ (8013dc0 <__ieee754_pow+0x778>)
 8013a6a:	402b      	ands	r3, r5
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	b92b      	cbnz	r3, 8013a7c <__ieee754_pow+0x434>
 8013a70:	4bd4      	ldr	r3, [pc, #848]	@ (8013dc4 <__ieee754_pow+0x77c>)
 8013a72:	f7ec fdf1 	bl	8000658 <__aeabi_dmul>
 8013a76:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8013a7a:	468b      	mov	fp, r1
 8013a7c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013a80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013a84:	4413      	add	r3, r2
 8013a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a88:	4bcf      	ldr	r3, [pc, #828]	@ (8013dc8 <__ieee754_pow+0x780>)
 8013a8a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013a8e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013a92:	459b      	cmp	fp, r3
 8013a94:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013a98:	dd08      	ble.n	8013aac <__ieee754_pow+0x464>
 8013a9a:	4bcc      	ldr	r3, [pc, #816]	@ (8013dcc <__ieee754_pow+0x784>)
 8013a9c:	459b      	cmp	fp, r3
 8013a9e:	f340 81a5 	ble.w	8013dec <__ieee754_pow+0x7a4>
 8013aa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013aa8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013aac:	f04f 0a00 	mov.w	sl, #0
 8013ab0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013ab4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ab6:	4bc6      	ldr	r3, [pc, #792]	@ (8013dd0 <__ieee754_pow+0x788>)
 8013ab8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013abc:	ed93 7b00 	vldr	d7, [r3]
 8013ac0:	4629      	mov	r1, r5
 8013ac2:	ec53 2b17 	vmov	r2, r3, d7
 8013ac6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013aca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013ace:	f7ec fc0b 	bl	80002e8 <__aeabi_dsub>
 8013ad2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	460f      	mov	r7, r1
 8013ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ade:	f7ec fc05 	bl	80002ec <__adddf3>
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	460b      	mov	r3, r1
 8013ae6:	2000      	movs	r0, #0
 8013ae8:	49ba      	ldr	r1, [pc, #744]	@ (8013dd4 <__ieee754_pow+0x78c>)
 8013aea:	f7ec fedf 	bl	80008ac <__aeabi_ddiv>
 8013aee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013af2:	4602      	mov	r2, r0
 8013af4:	460b      	mov	r3, r1
 8013af6:	4630      	mov	r0, r6
 8013af8:	4639      	mov	r1, r7
 8013afa:	f7ec fdad 	bl	8000658 <__aeabi_dmul>
 8013afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013b06:	106d      	asrs	r5, r5, #1
 8013b08:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013b0c:	f04f 0b00 	mov.w	fp, #0
 8013b10:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013b14:	4661      	mov	r1, ip
 8013b16:	2200      	movs	r2, #0
 8013b18:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013b1c:	4658      	mov	r0, fp
 8013b1e:	46e1      	mov	r9, ip
 8013b20:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013b24:	4614      	mov	r4, r2
 8013b26:	461d      	mov	r5, r3
 8013b28:	f7ec fd96 	bl	8000658 <__aeabi_dmul>
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	460b      	mov	r3, r1
 8013b30:	4630      	mov	r0, r6
 8013b32:	4639      	mov	r1, r7
 8013b34:	f7ec fbd8 	bl	80002e8 <__aeabi_dsub>
 8013b38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b3c:	4606      	mov	r6, r0
 8013b3e:	460f      	mov	r7, r1
 8013b40:	4620      	mov	r0, r4
 8013b42:	4629      	mov	r1, r5
 8013b44:	f7ec fbd0 	bl	80002e8 <__aeabi_dsub>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	460b      	mov	r3, r1
 8013b4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013b50:	f7ec fbca 	bl	80002e8 <__aeabi_dsub>
 8013b54:	465a      	mov	r2, fp
 8013b56:	464b      	mov	r3, r9
 8013b58:	f7ec fd7e 	bl	8000658 <__aeabi_dmul>
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	460b      	mov	r3, r1
 8013b60:	4630      	mov	r0, r6
 8013b62:	4639      	mov	r1, r7
 8013b64:	f7ec fbc0 	bl	80002e8 <__aeabi_dsub>
 8013b68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013b6c:	f7ec fd74 	bl	8000658 <__aeabi_dmul>
 8013b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b78:	4610      	mov	r0, r2
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	f7ec fd6c 	bl	8000658 <__aeabi_dmul>
 8013b80:	a37d      	add	r3, pc, #500	@ (adr r3, 8013d78 <__ieee754_pow+0x730>)
 8013b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b86:	4604      	mov	r4, r0
 8013b88:	460d      	mov	r5, r1
 8013b8a:	f7ec fd65 	bl	8000658 <__aeabi_dmul>
 8013b8e:	a37c      	add	r3, pc, #496	@ (adr r3, 8013d80 <__ieee754_pow+0x738>)
 8013b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b94:	f7ec fbaa 	bl	80002ec <__adddf3>
 8013b98:	4622      	mov	r2, r4
 8013b9a:	462b      	mov	r3, r5
 8013b9c:	f7ec fd5c 	bl	8000658 <__aeabi_dmul>
 8013ba0:	a379      	add	r3, pc, #484	@ (adr r3, 8013d88 <__ieee754_pow+0x740>)
 8013ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba6:	f7ec fba1 	bl	80002ec <__adddf3>
 8013baa:	4622      	mov	r2, r4
 8013bac:	462b      	mov	r3, r5
 8013bae:	f7ec fd53 	bl	8000658 <__aeabi_dmul>
 8013bb2:	a377      	add	r3, pc, #476	@ (adr r3, 8013d90 <__ieee754_pow+0x748>)
 8013bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb8:	f7ec fb98 	bl	80002ec <__adddf3>
 8013bbc:	4622      	mov	r2, r4
 8013bbe:	462b      	mov	r3, r5
 8013bc0:	f7ec fd4a 	bl	8000658 <__aeabi_dmul>
 8013bc4:	a374      	add	r3, pc, #464	@ (adr r3, 8013d98 <__ieee754_pow+0x750>)
 8013bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bca:	f7ec fb8f 	bl	80002ec <__adddf3>
 8013bce:	4622      	mov	r2, r4
 8013bd0:	462b      	mov	r3, r5
 8013bd2:	f7ec fd41 	bl	8000658 <__aeabi_dmul>
 8013bd6:	a372      	add	r3, pc, #456	@ (adr r3, 8013da0 <__ieee754_pow+0x758>)
 8013bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bdc:	f7ec fb86 	bl	80002ec <__adddf3>
 8013be0:	4622      	mov	r2, r4
 8013be2:	4606      	mov	r6, r0
 8013be4:	460f      	mov	r7, r1
 8013be6:	462b      	mov	r3, r5
 8013be8:	4620      	mov	r0, r4
 8013bea:	4629      	mov	r1, r5
 8013bec:	f7ec fd34 	bl	8000658 <__aeabi_dmul>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	460b      	mov	r3, r1
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	4639      	mov	r1, r7
 8013bf8:	f7ec fd2e 	bl	8000658 <__aeabi_dmul>
 8013bfc:	465a      	mov	r2, fp
 8013bfe:	4604      	mov	r4, r0
 8013c00:	460d      	mov	r5, r1
 8013c02:	464b      	mov	r3, r9
 8013c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c08:	f7ec fb70 	bl	80002ec <__adddf3>
 8013c0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c10:	f7ec fd22 	bl	8000658 <__aeabi_dmul>
 8013c14:	4622      	mov	r2, r4
 8013c16:	462b      	mov	r3, r5
 8013c18:	f7ec fb68 	bl	80002ec <__adddf3>
 8013c1c:	465a      	mov	r2, fp
 8013c1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013c22:	464b      	mov	r3, r9
 8013c24:	4658      	mov	r0, fp
 8013c26:	4649      	mov	r1, r9
 8013c28:	f7ec fd16 	bl	8000658 <__aeabi_dmul>
 8013c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8013dd8 <__ieee754_pow+0x790>)
 8013c2e:	2200      	movs	r2, #0
 8013c30:	4606      	mov	r6, r0
 8013c32:	460f      	mov	r7, r1
 8013c34:	f7ec fb5a 	bl	80002ec <__adddf3>
 8013c38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c3c:	f7ec fb56 	bl	80002ec <__adddf3>
 8013c40:	46d8      	mov	r8, fp
 8013c42:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013c46:	460d      	mov	r5, r1
 8013c48:	465a      	mov	r2, fp
 8013c4a:	460b      	mov	r3, r1
 8013c4c:	4640      	mov	r0, r8
 8013c4e:	4649      	mov	r1, r9
 8013c50:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013c54:	f7ec fd00 	bl	8000658 <__aeabi_dmul>
 8013c58:	465c      	mov	r4, fp
 8013c5a:	4680      	mov	r8, r0
 8013c5c:	4689      	mov	r9, r1
 8013c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8013dd8 <__ieee754_pow+0x790>)
 8013c60:	2200      	movs	r2, #0
 8013c62:	4620      	mov	r0, r4
 8013c64:	4629      	mov	r1, r5
 8013c66:	f7ec fb3f 	bl	80002e8 <__aeabi_dsub>
 8013c6a:	4632      	mov	r2, r6
 8013c6c:	463b      	mov	r3, r7
 8013c6e:	f7ec fb3b 	bl	80002e8 <__aeabi_dsub>
 8013c72:	4602      	mov	r2, r0
 8013c74:	460b      	mov	r3, r1
 8013c76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013c7a:	f7ec fb35 	bl	80002e8 <__aeabi_dsub>
 8013c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c82:	f7ec fce9 	bl	8000658 <__aeabi_dmul>
 8013c86:	4622      	mov	r2, r4
 8013c88:	4606      	mov	r6, r0
 8013c8a:	460f      	mov	r7, r1
 8013c8c:	462b      	mov	r3, r5
 8013c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c92:	f7ec fce1 	bl	8000658 <__aeabi_dmul>
 8013c96:	4602      	mov	r2, r0
 8013c98:	460b      	mov	r3, r1
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	4639      	mov	r1, r7
 8013c9e:	f7ec fb25 	bl	80002ec <__adddf3>
 8013ca2:	4606      	mov	r6, r0
 8013ca4:	460f      	mov	r7, r1
 8013ca6:	4602      	mov	r2, r0
 8013ca8:	460b      	mov	r3, r1
 8013caa:	4640      	mov	r0, r8
 8013cac:	4649      	mov	r1, r9
 8013cae:	f7ec fb1d 	bl	80002ec <__adddf3>
 8013cb2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013cb6:	a33c      	add	r3, pc, #240	@ (adr r3, 8013da8 <__ieee754_pow+0x760>)
 8013cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbc:	4658      	mov	r0, fp
 8013cbe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013cc2:	460d      	mov	r5, r1
 8013cc4:	f7ec fcc8 	bl	8000658 <__aeabi_dmul>
 8013cc8:	465c      	mov	r4, fp
 8013cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013cce:	4642      	mov	r2, r8
 8013cd0:	464b      	mov	r3, r9
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	4629      	mov	r1, r5
 8013cd6:	f7ec fb07 	bl	80002e8 <__aeabi_dsub>
 8013cda:	4602      	mov	r2, r0
 8013cdc:	460b      	mov	r3, r1
 8013cde:	4630      	mov	r0, r6
 8013ce0:	4639      	mov	r1, r7
 8013ce2:	f7ec fb01 	bl	80002e8 <__aeabi_dsub>
 8013ce6:	a332      	add	r3, pc, #200	@ (adr r3, 8013db0 <__ieee754_pow+0x768>)
 8013ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cec:	f7ec fcb4 	bl	8000658 <__aeabi_dmul>
 8013cf0:	a331      	add	r3, pc, #196	@ (adr r3, 8013db8 <__ieee754_pow+0x770>)
 8013cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf6:	4606      	mov	r6, r0
 8013cf8:	460f      	mov	r7, r1
 8013cfa:	4620      	mov	r0, r4
 8013cfc:	4629      	mov	r1, r5
 8013cfe:	f7ec fcab 	bl	8000658 <__aeabi_dmul>
 8013d02:	4602      	mov	r2, r0
 8013d04:	460b      	mov	r3, r1
 8013d06:	4630      	mov	r0, r6
 8013d08:	4639      	mov	r1, r7
 8013d0a:	f7ec faef 	bl	80002ec <__adddf3>
 8013d0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013d10:	4b32      	ldr	r3, [pc, #200]	@ (8013ddc <__ieee754_pow+0x794>)
 8013d12:	4413      	add	r3, r2
 8013d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d18:	f7ec fae8 	bl	80002ec <__adddf3>
 8013d1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013d20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013d22:	f7ec fc2f 	bl	8000584 <__aeabi_i2d>
 8013d26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013d28:	4b2d      	ldr	r3, [pc, #180]	@ (8013de0 <__ieee754_pow+0x798>)
 8013d2a:	4413      	add	r3, r2
 8013d2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d30:	4606      	mov	r6, r0
 8013d32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d36:	460f      	mov	r7, r1
 8013d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d3c:	f7ec fad6 	bl	80002ec <__adddf3>
 8013d40:	4642      	mov	r2, r8
 8013d42:	464b      	mov	r3, r9
 8013d44:	f7ec fad2 	bl	80002ec <__adddf3>
 8013d48:	4632      	mov	r2, r6
 8013d4a:	463b      	mov	r3, r7
 8013d4c:	f7ec face 	bl	80002ec <__adddf3>
 8013d50:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013d54:	4632      	mov	r2, r6
 8013d56:	463b      	mov	r3, r7
 8013d58:	4658      	mov	r0, fp
 8013d5a:	460d      	mov	r5, r1
 8013d5c:	f7ec fac4 	bl	80002e8 <__aeabi_dsub>
 8013d60:	4642      	mov	r2, r8
 8013d62:	464b      	mov	r3, r9
 8013d64:	f7ec fac0 	bl	80002e8 <__aeabi_dsub>
 8013d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d6c:	f7ec fabc 	bl	80002e8 <__aeabi_dsub>
 8013d70:	465c      	mov	r4, fp
 8013d72:	4602      	mov	r2, r0
 8013d74:	e036      	b.n	8013de4 <__ieee754_pow+0x79c>
 8013d76:	bf00      	nop
 8013d78:	4a454eef 	.word	0x4a454eef
 8013d7c:	3fca7e28 	.word	0x3fca7e28
 8013d80:	93c9db65 	.word	0x93c9db65
 8013d84:	3fcd864a 	.word	0x3fcd864a
 8013d88:	a91d4101 	.word	0xa91d4101
 8013d8c:	3fd17460 	.word	0x3fd17460
 8013d90:	518f264d 	.word	0x518f264d
 8013d94:	3fd55555 	.word	0x3fd55555
 8013d98:	db6fabff 	.word	0xdb6fabff
 8013d9c:	3fdb6db6 	.word	0x3fdb6db6
 8013da0:	33333303 	.word	0x33333303
 8013da4:	3fe33333 	.word	0x3fe33333
 8013da8:	e0000000 	.word	0xe0000000
 8013dac:	3feec709 	.word	0x3feec709
 8013db0:	dc3a03fd 	.word	0xdc3a03fd
 8013db4:	3feec709 	.word	0x3feec709
 8013db8:	145b01f5 	.word	0x145b01f5
 8013dbc:	be3e2fe0 	.word	0xbe3e2fe0
 8013dc0:	7ff00000 	.word	0x7ff00000
 8013dc4:	43400000 	.word	0x43400000
 8013dc8:	0003988e 	.word	0x0003988e
 8013dcc:	000bb679 	.word	0x000bb679
 8013dd0:	08018560 	.word	0x08018560
 8013dd4:	3ff00000 	.word	0x3ff00000
 8013dd8:	40080000 	.word	0x40080000
 8013ddc:	08018540 	.word	0x08018540
 8013de0:	08018550 	.word	0x08018550
 8013de4:	460b      	mov	r3, r1
 8013de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013dea:	e5d7      	b.n	801399c <__ieee754_pow+0x354>
 8013dec:	f04f 0a01 	mov.w	sl, #1
 8013df0:	e65e      	b.n	8013ab0 <__ieee754_pow+0x468>
 8013df2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80140c4 <__ieee754_pow+0xa7c>)
 8013df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df8:	4630      	mov	r0, r6
 8013dfa:	4639      	mov	r1, r7
 8013dfc:	f7ec fa76 	bl	80002ec <__adddf3>
 8013e00:	4642      	mov	r2, r8
 8013e02:	e9cd 0100 	strd	r0, r1, [sp]
 8013e06:	464b      	mov	r3, r9
 8013e08:	4620      	mov	r0, r4
 8013e0a:	4629      	mov	r1, r5
 8013e0c:	f7ec fa6c 	bl	80002e8 <__aeabi_dsub>
 8013e10:	4602      	mov	r2, r0
 8013e12:	460b      	mov	r3, r1
 8013e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e18:	f7ec feae 	bl	8000b78 <__aeabi_dcmpgt>
 8013e1c:	2800      	cmp	r0, #0
 8013e1e:	f47f ae00 	bne.w	8013a22 <__ieee754_pow+0x3da>
 8013e22:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013e26:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013e2a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013e2e:	fa43 fa0a 	asr.w	sl, r3, sl
 8013e32:	44da      	add	sl, fp
 8013e34:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013e38:	489d      	ldr	r0, [pc, #628]	@ (80140b0 <__ieee754_pow+0xa68>)
 8013e3a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013e3e:	4108      	asrs	r0, r1
 8013e40:	ea00 030a 	and.w	r3, r0, sl
 8013e44:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013e48:	f1c1 0114 	rsb	r1, r1, #20
 8013e4c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013e50:	fa4a fa01 	asr.w	sl, sl, r1
 8013e54:	f1bb 0f00 	cmp.w	fp, #0
 8013e58:	4640      	mov	r0, r8
 8013e5a:	4649      	mov	r1, r9
 8013e5c:	f04f 0200 	mov.w	r2, #0
 8013e60:	bfb8      	it	lt
 8013e62:	f1ca 0a00 	rsblt	sl, sl, #0
 8013e66:	f7ec fa3f 	bl	80002e8 <__aeabi_dsub>
 8013e6a:	4680      	mov	r8, r0
 8013e6c:	4689      	mov	r9, r1
 8013e6e:	4632      	mov	r2, r6
 8013e70:	463b      	mov	r3, r7
 8013e72:	4640      	mov	r0, r8
 8013e74:	4649      	mov	r1, r9
 8013e76:	f7ec fa39 	bl	80002ec <__adddf3>
 8013e7a:	2400      	movs	r4, #0
 8013e7c:	a37c      	add	r3, pc, #496	@ (adr r3, 8014070 <__ieee754_pow+0xa28>)
 8013e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e82:	4620      	mov	r0, r4
 8013e84:	460d      	mov	r5, r1
 8013e86:	f7ec fbe7 	bl	8000658 <__aeabi_dmul>
 8013e8a:	4642      	mov	r2, r8
 8013e8c:	e9cd 0100 	strd	r0, r1, [sp]
 8013e90:	464b      	mov	r3, r9
 8013e92:	4620      	mov	r0, r4
 8013e94:	4629      	mov	r1, r5
 8013e96:	f7ec fa27 	bl	80002e8 <__aeabi_dsub>
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	4639      	mov	r1, r7
 8013ea2:	f7ec fa21 	bl	80002e8 <__aeabi_dsub>
 8013ea6:	a374      	add	r3, pc, #464	@ (adr r3, 8014078 <__ieee754_pow+0xa30>)
 8013ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eac:	f7ec fbd4 	bl	8000658 <__aeabi_dmul>
 8013eb0:	a373      	add	r3, pc, #460	@ (adr r3, 8014080 <__ieee754_pow+0xa38>)
 8013eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb6:	4680      	mov	r8, r0
 8013eb8:	4689      	mov	r9, r1
 8013eba:	4620      	mov	r0, r4
 8013ebc:	4629      	mov	r1, r5
 8013ebe:	f7ec fbcb 	bl	8000658 <__aeabi_dmul>
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	4640      	mov	r0, r8
 8013ec8:	4649      	mov	r1, r9
 8013eca:	f7ec fa0f 	bl	80002ec <__adddf3>
 8013ece:	4604      	mov	r4, r0
 8013ed0:	460d      	mov	r5, r1
 8013ed2:	4602      	mov	r2, r0
 8013ed4:	460b      	mov	r3, r1
 8013ed6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013eda:	f7ec fa07 	bl	80002ec <__adddf3>
 8013ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ee2:	4680      	mov	r8, r0
 8013ee4:	4689      	mov	r9, r1
 8013ee6:	f7ec f9ff 	bl	80002e8 <__aeabi_dsub>
 8013eea:	4602      	mov	r2, r0
 8013eec:	460b      	mov	r3, r1
 8013eee:	4620      	mov	r0, r4
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	f7ec f9f9 	bl	80002e8 <__aeabi_dsub>
 8013ef6:	4642      	mov	r2, r8
 8013ef8:	4606      	mov	r6, r0
 8013efa:	460f      	mov	r7, r1
 8013efc:	464b      	mov	r3, r9
 8013efe:	4640      	mov	r0, r8
 8013f00:	4649      	mov	r1, r9
 8013f02:	f7ec fba9 	bl	8000658 <__aeabi_dmul>
 8013f06:	a360      	add	r3, pc, #384	@ (adr r3, 8014088 <__ieee754_pow+0xa40>)
 8013f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	460d      	mov	r5, r1
 8013f10:	f7ec fba2 	bl	8000658 <__aeabi_dmul>
 8013f14:	a35e      	add	r3, pc, #376	@ (adr r3, 8014090 <__ieee754_pow+0xa48>)
 8013f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1a:	f7ec f9e5 	bl	80002e8 <__aeabi_dsub>
 8013f1e:	4622      	mov	r2, r4
 8013f20:	462b      	mov	r3, r5
 8013f22:	f7ec fb99 	bl	8000658 <__aeabi_dmul>
 8013f26:	a35c      	add	r3, pc, #368	@ (adr r3, 8014098 <__ieee754_pow+0xa50>)
 8013f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f2c:	f7ec f9de 	bl	80002ec <__adddf3>
 8013f30:	4622      	mov	r2, r4
 8013f32:	462b      	mov	r3, r5
 8013f34:	f7ec fb90 	bl	8000658 <__aeabi_dmul>
 8013f38:	a359      	add	r3, pc, #356	@ (adr r3, 80140a0 <__ieee754_pow+0xa58>)
 8013f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f3e:	f7ec f9d3 	bl	80002e8 <__aeabi_dsub>
 8013f42:	4622      	mov	r2, r4
 8013f44:	462b      	mov	r3, r5
 8013f46:	f7ec fb87 	bl	8000658 <__aeabi_dmul>
 8013f4a:	a357      	add	r3, pc, #348	@ (adr r3, 80140a8 <__ieee754_pow+0xa60>)
 8013f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f50:	f7ec f9cc 	bl	80002ec <__adddf3>
 8013f54:	4622      	mov	r2, r4
 8013f56:	462b      	mov	r3, r5
 8013f58:	f7ec fb7e 	bl	8000658 <__aeabi_dmul>
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	460b      	mov	r3, r1
 8013f60:	4640      	mov	r0, r8
 8013f62:	4649      	mov	r1, r9
 8013f64:	f7ec f9c0 	bl	80002e8 <__aeabi_dsub>
 8013f68:	4604      	mov	r4, r0
 8013f6a:	460d      	mov	r5, r1
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	460b      	mov	r3, r1
 8013f70:	4640      	mov	r0, r8
 8013f72:	4649      	mov	r1, r9
 8013f74:	f7ec fb70 	bl	8000658 <__aeabi_dmul>
 8013f78:	2200      	movs	r2, #0
 8013f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8013f7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013f82:	4620      	mov	r0, r4
 8013f84:	4629      	mov	r1, r5
 8013f86:	f7ec f9af 	bl	80002e8 <__aeabi_dsub>
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f92:	f7ec fc8b 	bl	80008ac <__aeabi_ddiv>
 8013f96:	4632      	mov	r2, r6
 8013f98:	4604      	mov	r4, r0
 8013f9a:	460d      	mov	r5, r1
 8013f9c:	463b      	mov	r3, r7
 8013f9e:	4640      	mov	r0, r8
 8013fa0:	4649      	mov	r1, r9
 8013fa2:	f7ec fb59 	bl	8000658 <__aeabi_dmul>
 8013fa6:	4632      	mov	r2, r6
 8013fa8:	463b      	mov	r3, r7
 8013faa:	f7ec f99f 	bl	80002ec <__adddf3>
 8013fae:	4602      	mov	r2, r0
 8013fb0:	460b      	mov	r3, r1
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	4629      	mov	r1, r5
 8013fb6:	f7ec f997 	bl	80002e8 <__aeabi_dsub>
 8013fba:	4642      	mov	r2, r8
 8013fbc:	464b      	mov	r3, r9
 8013fbe:	f7ec f993 	bl	80002e8 <__aeabi_dsub>
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	493b      	ldr	r1, [pc, #236]	@ (80140b4 <__ieee754_pow+0xa6c>)
 8013fc8:	2000      	movs	r0, #0
 8013fca:	f7ec f98d 	bl	80002e8 <__aeabi_dsub>
 8013fce:	ec41 0b10 	vmov	d0, r0, r1
 8013fd2:	ee10 3a90 	vmov	r3, s1
 8013fd6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013fde:	da30      	bge.n	8014042 <__ieee754_pow+0x9fa>
 8013fe0:	4650      	mov	r0, sl
 8013fe2:	f000 fa15 	bl	8014410 <scalbn>
 8013fe6:	ec51 0b10 	vmov	r0, r1, d0
 8013fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013fee:	f7ff bbd2 	b.w	8013796 <__ieee754_pow+0x14e>
 8013ff2:	4c31      	ldr	r4, [pc, #196]	@ (80140b8 <__ieee754_pow+0xa70>)
 8013ff4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013ff8:	42a3      	cmp	r3, r4
 8013ffa:	d91a      	bls.n	8014032 <__ieee754_pow+0x9ea>
 8013ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80140bc <__ieee754_pow+0xa74>)
 8013ffe:	440b      	add	r3, r1
 8014000:	4303      	orrs	r3, r0
 8014002:	d009      	beq.n	8014018 <__ieee754_pow+0x9d0>
 8014004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014008:	2200      	movs	r2, #0
 801400a:	2300      	movs	r3, #0
 801400c:	f7ec fd96 	bl	8000b3c <__aeabi_dcmplt>
 8014010:	3800      	subs	r0, #0
 8014012:	bf18      	it	ne
 8014014:	2001      	movne	r0, #1
 8014016:	e42b      	b.n	8013870 <__ieee754_pow+0x228>
 8014018:	4642      	mov	r2, r8
 801401a:	464b      	mov	r3, r9
 801401c:	f7ec f964 	bl	80002e8 <__aeabi_dsub>
 8014020:	4632      	mov	r2, r6
 8014022:	463b      	mov	r3, r7
 8014024:	f7ec fd9e 	bl	8000b64 <__aeabi_dcmpge>
 8014028:	2800      	cmp	r0, #0
 801402a:	d1eb      	bne.n	8014004 <__ieee754_pow+0x9bc>
 801402c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80140cc <__ieee754_pow+0xa84>
 8014030:	e6f7      	b.n	8013e22 <__ieee754_pow+0x7da>
 8014032:	469a      	mov	sl, r3
 8014034:	4b22      	ldr	r3, [pc, #136]	@ (80140c0 <__ieee754_pow+0xa78>)
 8014036:	459a      	cmp	sl, r3
 8014038:	f63f aef3 	bhi.w	8013e22 <__ieee754_pow+0x7da>
 801403c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014040:	e715      	b.n	8013e6e <__ieee754_pow+0x826>
 8014042:	ec51 0b10 	vmov	r0, r1, d0
 8014046:	4619      	mov	r1, r3
 8014048:	e7cf      	b.n	8013fea <__ieee754_pow+0x9a2>
 801404a:	491a      	ldr	r1, [pc, #104]	@ (80140b4 <__ieee754_pow+0xa6c>)
 801404c:	2000      	movs	r0, #0
 801404e:	f7ff bb18 	b.w	8013682 <__ieee754_pow+0x3a>
 8014052:	2000      	movs	r0, #0
 8014054:	2100      	movs	r1, #0
 8014056:	f7ff bb14 	b.w	8013682 <__ieee754_pow+0x3a>
 801405a:	4630      	mov	r0, r6
 801405c:	4639      	mov	r1, r7
 801405e:	f7ff bb10 	b.w	8013682 <__ieee754_pow+0x3a>
 8014062:	460c      	mov	r4, r1
 8014064:	f7ff bb5e 	b.w	8013724 <__ieee754_pow+0xdc>
 8014068:	2400      	movs	r4, #0
 801406a:	f7ff bb49 	b.w	8013700 <__ieee754_pow+0xb8>
 801406e:	bf00      	nop
 8014070:	00000000 	.word	0x00000000
 8014074:	3fe62e43 	.word	0x3fe62e43
 8014078:	fefa39ef 	.word	0xfefa39ef
 801407c:	3fe62e42 	.word	0x3fe62e42
 8014080:	0ca86c39 	.word	0x0ca86c39
 8014084:	be205c61 	.word	0xbe205c61
 8014088:	72bea4d0 	.word	0x72bea4d0
 801408c:	3e663769 	.word	0x3e663769
 8014090:	c5d26bf1 	.word	0xc5d26bf1
 8014094:	3ebbbd41 	.word	0x3ebbbd41
 8014098:	af25de2c 	.word	0xaf25de2c
 801409c:	3f11566a 	.word	0x3f11566a
 80140a0:	16bebd93 	.word	0x16bebd93
 80140a4:	3f66c16c 	.word	0x3f66c16c
 80140a8:	5555553e 	.word	0x5555553e
 80140ac:	3fc55555 	.word	0x3fc55555
 80140b0:	fff00000 	.word	0xfff00000
 80140b4:	3ff00000 	.word	0x3ff00000
 80140b8:	4090cbff 	.word	0x4090cbff
 80140bc:	3f6f3400 	.word	0x3f6f3400
 80140c0:	3fe00000 	.word	0x3fe00000
 80140c4:	652b82fe 	.word	0x652b82fe
 80140c8:	3c971547 	.word	0x3c971547
 80140cc:	4090cc00 	.word	0x4090cc00

080140d0 <atan>:
 80140d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	ec55 4b10 	vmov	r4, r5, d0
 80140d8:	4bbf      	ldr	r3, [pc, #764]	@ (80143d8 <atan+0x308>)
 80140da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80140de:	429e      	cmp	r6, r3
 80140e0:	46ab      	mov	fp, r5
 80140e2:	d918      	bls.n	8014116 <atan+0x46>
 80140e4:	4bbd      	ldr	r3, [pc, #756]	@ (80143dc <atan+0x30c>)
 80140e6:	429e      	cmp	r6, r3
 80140e8:	d801      	bhi.n	80140ee <atan+0x1e>
 80140ea:	d109      	bne.n	8014100 <atan+0x30>
 80140ec:	b144      	cbz	r4, 8014100 <atan+0x30>
 80140ee:	4622      	mov	r2, r4
 80140f0:	462b      	mov	r3, r5
 80140f2:	4620      	mov	r0, r4
 80140f4:	4629      	mov	r1, r5
 80140f6:	f7ec f8f9 	bl	80002ec <__adddf3>
 80140fa:	4604      	mov	r4, r0
 80140fc:	460d      	mov	r5, r1
 80140fe:	e006      	b.n	801410e <atan+0x3e>
 8014100:	f1bb 0f00 	cmp.w	fp, #0
 8014104:	f340 812b 	ble.w	801435e <atan+0x28e>
 8014108:	a597      	add	r5, pc, #604	@ (adr r5, 8014368 <atan+0x298>)
 801410a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801410e:	ec45 4b10 	vmov	d0, r4, r5
 8014112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014116:	4bb2      	ldr	r3, [pc, #712]	@ (80143e0 <atan+0x310>)
 8014118:	429e      	cmp	r6, r3
 801411a:	d813      	bhi.n	8014144 <atan+0x74>
 801411c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014120:	429e      	cmp	r6, r3
 8014122:	d80c      	bhi.n	801413e <atan+0x6e>
 8014124:	a392      	add	r3, pc, #584	@ (adr r3, 8014370 <atan+0x2a0>)
 8014126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412a:	4620      	mov	r0, r4
 801412c:	4629      	mov	r1, r5
 801412e:	f7ec f8dd 	bl	80002ec <__adddf3>
 8014132:	4bac      	ldr	r3, [pc, #688]	@ (80143e4 <atan+0x314>)
 8014134:	2200      	movs	r2, #0
 8014136:	f7ec fd1f 	bl	8000b78 <__aeabi_dcmpgt>
 801413a:	2800      	cmp	r0, #0
 801413c:	d1e7      	bne.n	801410e <atan+0x3e>
 801413e:	f04f 3aff 	mov.w	sl, #4294967295
 8014142:	e029      	b.n	8014198 <atan+0xc8>
 8014144:	f000 f95c 	bl	8014400 <fabs>
 8014148:	4ba7      	ldr	r3, [pc, #668]	@ (80143e8 <atan+0x318>)
 801414a:	429e      	cmp	r6, r3
 801414c:	ec55 4b10 	vmov	r4, r5, d0
 8014150:	f200 80bc 	bhi.w	80142cc <atan+0x1fc>
 8014154:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014158:	429e      	cmp	r6, r3
 801415a:	f200 809e 	bhi.w	801429a <atan+0x1ca>
 801415e:	4622      	mov	r2, r4
 8014160:	462b      	mov	r3, r5
 8014162:	4620      	mov	r0, r4
 8014164:	4629      	mov	r1, r5
 8014166:	f7ec f8c1 	bl	80002ec <__adddf3>
 801416a:	4b9e      	ldr	r3, [pc, #632]	@ (80143e4 <atan+0x314>)
 801416c:	2200      	movs	r2, #0
 801416e:	f7ec f8bb 	bl	80002e8 <__aeabi_dsub>
 8014172:	2200      	movs	r2, #0
 8014174:	4606      	mov	r6, r0
 8014176:	460f      	mov	r7, r1
 8014178:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801417c:	4620      	mov	r0, r4
 801417e:	4629      	mov	r1, r5
 8014180:	f7ec f8b4 	bl	80002ec <__adddf3>
 8014184:	4602      	mov	r2, r0
 8014186:	460b      	mov	r3, r1
 8014188:	4630      	mov	r0, r6
 801418a:	4639      	mov	r1, r7
 801418c:	f7ec fb8e 	bl	80008ac <__aeabi_ddiv>
 8014190:	f04f 0a00 	mov.w	sl, #0
 8014194:	4604      	mov	r4, r0
 8014196:	460d      	mov	r5, r1
 8014198:	4622      	mov	r2, r4
 801419a:	462b      	mov	r3, r5
 801419c:	4620      	mov	r0, r4
 801419e:	4629      	mov	r1, r5
 80141a0:	f7ec fa5a 	bl	8000658 <__aeabi_dmul>
 80141a4:	4602      	mov	r2, r0
 80141a6:	460b      	mov	r3, r1
 80141a8:	4680      	mov	r8, r0
 80141aa:	4689      	mov	r9, r1
 80141ac:	f7ec fa54 	bl	8000658 <__aeabi_dmul>
 80141b0:	a371      	add	r3, pc, #452	@ (adr r3, 8014378 <atan+0x2a8>)
 80141b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b6:	4606      	mov	r6, r0
 80141b8:	460f      	mov	r7, r1
 80141ba:	f7ec fa4d 	bl	8000658 <__aeabi_dmul>
 80141be:	a370      	add	r3, pc, #448	@ (adr r3, 8014380 <atan+0x2b0>)
 80141c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c4:	f7ec f892 	bl	80002ec <__adddf3>
 80141c8:	4632      	mov	r2, r6
 80141ca:	463b      	mov	r3, r7
 80141cc:	f7ec fa44 	bl	8000658 <__aeabi_dmul>
 80141d0:	a36d      	add	r3, pc, #436	@ (adr r3, 8014388 <atan+0x2b8>)
 80141d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d6:	f7ec f889 	bl	80002ec <__adddf3>
 80141da:	4632      	mov	r2, r6
 80141dc:	463b      	mov	r3, r7
 80141de:	f7ec fa3b 	bl	8000658 <__aeabi_dmul>
 80141e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8014390 <atan+0x2c0>)
 80141e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e8:	f7ec f880 	bl	80002ec <__adddf3>
 80141ec:	4632      	mov	r2, r6
 80141ee:	463b      	mov	r3, r7
 80141f0:	f7ec fa32 	bl	8000658 <__aeabi_dmul>
 80141f4:	a368      	add	r3, pc, #416	@ (adr r3, 8014398 <atan+0x2c8>)
 80141f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141fa:	f7ec f877 	bl	80002ec <__adddf3>
 80141fe:	4632      	mov	r2, r6
 8014200:	463b      	mov	r3, r7
 8014202:	f7ec fa29 	bl	8000658 <__aeabi_dmul>
 8014206:	a366      	add	r3, pc, #408	@ (adr r3, 80143a0 <atan+0x2d0>)
 8014208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420c:	f7ec f86e 	bl	80002ec <__adddf3>
 8014210:	4642      	mov	r2, r8
 8014212:	464b      	mov	r3, r9
 8014214:	f7ec fa20 	bl	8000658 <__aeabi_dmul>
 8014218:	a363      	add	r3, pc, #396	@ (adr r3, 80143a8 <atan+0x2d8>)
 801421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421e:	4680      	mov	r8, r0
 8014220:	4689      	mov	r9, r1
 8014222:	4630      	mov	r0, r6
 8014224:	4639      	mov	r1, r7
 8014226:	f7ec fa17 	bl	8000658 <__aeabi_dmul>
 801422a:	a361      	add	r3, pc, #388	@ (adr r3, 80143b0 <atan+0x2e0>)
 801422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014230:	f7ec f85a 	bl	80002e8 <__aeabi_dsub>
 8014234:	4632      	mov	r2, r6
 8014236:	463b      	mov	r3, r7
 8014238:	f7ec fa0e 	bl	8000658 <__aeabi_dmul>
 801423c:	a35e      	add	r3, pc, #376	@ (adr r3, 80143b8 <atan+0x2e8>)
 801423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014242:	f7ec f851 	bl	80002e8 <__aeabi_dsub>
 8014246:	4632      	mov	r2, r6
 8014248:	463b      	mov	r3, r7
 801424a:	f7ec fa05 	bl	8000658 <__aeabi_dmul>
 801424e:	a35c      	add	r3, pc, #368	@ (adr r3, 80143c0 <atan+0x2f0>)
 8014250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014254:	f7ec f848 	bl	80002e8 <__aeabi_dsub>
 8014258:	4632      	mov	r2, r6
 801425a:	463b      	mov	r3, r7
 801425c:	f7ec f9fc 	bl	8000658 <__aeabi_dmul>
 8014260:	a359      	add	r3, pc, #356	@ (adr r3, 80143c8 <atan+0x2f8>)
 8014262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014266:	f7ec f83f 	bl	80002e8 <__aeabi_dsub>
 801426a:	4632      	mov	r2, r6
 801426c:	463b      	mov	r3, r7
 801426e:	f7ec f9f3 	bl	8000658 <__aeabi_dmul>
 8014272:	4602      	mov	r2, r0
 8014274:	460b      	mov	r3, r1
 8014276:	4640      	mov	r0, r8
 8014278:	4649      	mov	r1, r9
 801427a:	f7ec f837 	bl	80002ec <__adddf3>
 801427e:	4622      	mov	r2, r4
 8014280:	462b      	mov	r3, r5
 8014282:	f7ec f9e9 	bl	8000658 <__aeabi_dmul>
 8014286:	f1ba 3fff 	cmp.w	sl, #4294967295
 801428a:	4602      	mov	r2, r0
 801428c:	460b      	mov	r3, r1
 801428e:	d148      	bne.n	8014322 <atan+0x252>
 8014290:	4620      	mov	r0, r4
 8014292:	4629      	mov	r1, r5
 8014294:	f7ec f828 	bl	80002e8 <__aeabi_dsub>
 8014298:	e72f      	b.n	80140fa <atan+0x2a>
 801429a:	4b52      	ldr	r3, [pc, #328]	@ (80143e4 <atan+0x314>)
 801429c:	2200      	movs	r2, #0
 801429e:	4620      	mov	r0, r4
 80142a0:	4629      	mov	r1, r5
 80142a2:	f7ec f821 	bl	80002e8 <__aeabi_dsub>
 80142a6:	4b4f      	ldr	r3, [pc, #316]	@ (80143e4 <atan+0x314>)
 80142a8:	4606      	mov	r6, r0
 80142aa:	460f      	mov	r7, r1
 80142ac:	2200      	movs	r2, #0
 80142ae:	4620      	mov	r0, r4
 80142b0:	4629      	mov	r1, r5
 80142b2:	f7ec f81b 	bl	80002ec <__adddf3>
 80142b6:	4602      	mov	r2, r0
 80142b8:	460b      	mov	r3, r1
 80142ba:	4630      	mov	r0, r6
 80142bc:	4639      	mov	r1, r7
 80142be:	f7ec faf5 	bl	80008ac <__aeabi_ddiv>
 80142c2:	f04f 0a01 	mov.w	sl, #1
 80142c6:	4604      	mov	r4, r0
 80142c8:	460d      	mov	r5, r1
 80142ca:	e765      	b.n	8014198 <atan+0xc8>
 80142cc:	4b47      	ldr	r3, [pc, #284]	@ (80143ec <atan+0x31c>)
 80142ce:	429e      	cmp	r6, r3
 80142d0:	d21c      	bcs.n	801430c <atan+0x23c>
 80142d2:	4b47      	ldr	r3, [pc, #284]	@ (80143f0 <atan+0x320>)
 80142d4:	2200      	movs	r2, #0
 80142d6:	4620      	mov	r0, r4
 80142d8:	4629      	mov	r1, r5
 80142da:	f7ec f805 	bl	80002e8 <__aeabi_dsub>
 80142de:	4b44      	ldr	r3, [pc, #272]	@ (80143f0 <atan+0x320>)
 80142e0:	4606      	mov	r6, r0
 80142e2:	460f      	mov	r7, r1
 80142e4:	2200      	movs	r2, #0
 80142e6:	4620      	mov	r0, r4
 80142e8:	4629      	mov	r1, r5
 80142ea:	f7ec f9b5 	bl	8000658 <__aeabi_dmul>
 80142ee:	4b3d      	ldr	r3, [pc, #244]	@ (80143e4 <atan+0x314>)
 80142f0:	2200      	movs	r2, #0
 80142f2:	f7eb fffb 	bl	80002ec <__adddf3>
 80142f6:	4602      	mov	r2, r0
 80142f8:	460b      	mov	r3, r1
 80142fa:	4630      	mov	r0, r6
 80142fc:	4639      	mov	r1, r7
 80142fe:	f7ec fad5 	bl	80008ac <__aeabi_ddiv>
 8014302:	f04f 0a02 	mov.w	sl, #2
 8014306:	4604      	mov	r4, r0
 8014308:	460d      	mov	r5, r1
 801430a:	e745      	b.n	8014198 <atan+0xc8>
 801430c:	4622      	mov	r2, r4
 801430e:	462b      	mov	r3, r5
 8014310:	4938      	ldr	r1, [pc, #224]	@ (80143f4 <atan+0x324>)
 8014312:	2000      	movs	r0, #0
 8014314:	f7ec faca 	bl	80008ac <__aeabi_ddiv>
 8014318:	f04f 0a03 	mov.w	sl, #3
 801431c:	4604      	mov	r4, r0
 801431e:	460d      	mov	r5, r1
 8014320:	e73a      	b.n	8014198 <atan+0xc8>
 8014322:	4b35      	ldr	r3, [pc, #212]	@ (80143f8 <atan+0x328>)
 8014324:	4e35      	ldr	r6, [pc, #212]	@ (80143fc <atan+0x32c>)
 8014326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432e:	f7eb ffdb 	bl	80002e8 <__aeabi_dsub>
 8014332:	4622      	mov	r2, r4
 8014334:	462b      	mov	r3, r5
 8014336:	f7eb ffd7 	bl	80002e8 <__aeabi_dsub>
 801433a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801433e:	4602      	mov	r2, r0
 8014340:	460b      	mov	r3, r1
 8014342:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014346:	f7eb ffcf 	bl	80002e8 <__aeabi_dsub>
 801434a:	f1bb 0f00 	cmp.w	fp, #0
 801434e:	4604      	mov	r4, r0
 8014350:	460d      	mov	r5, r1
 8014352:	f6bf aedc 	bge.w	801410e <atan+0x3e>
 8014356:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801435a:	461d      	mov	r5, r3
 801435c:	e6d7      	b.n	801410e <atan+0x3e>
 801435e:	a51c      	add	r5, pc, #112	@ (adr r5, 80143d0 <atan+0x300>)
 8014360:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014364:	e6d3      	b.n	801410e <atan+0x3e>
 8014366:	bf00      	nop
 8014368:	54442d18 	.word	0x54442d18
 801436c:	3ff921fb 	.word	0x3ff921fb
 8014370:	8800759c 	.word	0x8800759c
 8014374:	7e37e43c 	.word	0x7e37e43c
 8014378:	e322da11 	.word	0xe322da11
 801437c:	3f90ad3a 	.word	0x3f90ad3a
 8014380:	24760deb 	.word	0x24760deb
 8014384:	3fa97b4b 	.word	0x3fa97b4b
 8014388:	a0d03d51 	.word	0xa0d03d51
 801438c:	3fb10d66 	.word	0x3fb10d66
 8014390:	c54c206e 	.word	0xc54c206e
 8014394:	3fb745cd 	.word	0x3fb745cd
 8014398:	920083ff 	.word	0x920083ff
 801439c:	3fc24924 	.word	0x3fc24924
 80143a0:	5555550d 	.word	0x5555550d
 80143a4:	3fd55555 	.word	0x3fd55555
 80143a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80143ac:	bfa2b444 	.word	0xbfa2b444
 80143b0:	52defd9a 	.word	0x52defd9a
 80143b4:	3fadde2d 	.word	0x3fadde2d
 80143b8:	af749a6d 	.word	0xaf749a6d
 80143bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80143c0:	fe231671 	.word	0xfe231671
 80143c4:	3fbc71c6 	.word	0x3fbc71c6
 80143c8:	9998ebc4 	.word	0x9998ebc4
 80143cc:	3fc99999 	.word	0x3fc99999
 80143d0:	54442d18 	.word	0x54442d18
 80143d4:	bff921fb 	.word	0xbff921fb
 80143d8:	440fffff 	.word	0x440fffff
 80143dc:	7ff00000 	.word	0x7ff00000
 80143e0:	3fdbffff 	.word	0x3fdbffff
 80143e4:	3ff00000 	.word	0x3ff00000
 80143e8:	3ff2ffff 	.word	0x3ff2ffff
 80143ec:	40038000 	.word	0x40038000
 80143f0:	3ff80000 	.word	0x3ff80000
 80143f4:	bff00000 	.word	0xbff00000
 80143f8:	08018570 	.word	0x08018570
 80143fc:	08018590 	.word	0x08018590

08014400 <fabs>:
 8014400:	ec51 0b10 	vmov	r0, r1, d0
 8014404:	4602      	mov	r2, r0
 8014406:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801440a:	ec43 2b10 	vmov	d0, r2, r3
 801440e:	4770      	bx	lr

08014410 <scalbn>:
 8014410:	b570      	push	{r4, r5, r6, lr}
 8014412:	ec55 4b10 	vmov	r4, r5, d0
 8014416:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801441a:	4606      	mov	r6, r0
 801441c:	462b      	mov	r3, r5
 801441e:	b991      	cbnz	r1, 8014446 <scalbn+0x36>
 8014420:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014424:	4323      	orrs	r3, r4
 8014426:	d03d      	beq.n	80144a4 <scalbn+0x94>
 8014428:	4b35      	ldr	r3, [pc, #212]	@ (8014500 <scalbn+0xf0>)
 801442a:	4620      	mov	r0, r4
 801442c:	4629      	mov	r1, r5
 801442e:	2200      	movs	r2, #0
 8014430:	f7ec f912 	bl	8000658 <__aeabi_dmul>
 8014434:	4b33      	ldr	r3, [pc, #204]	@ (8014504 <scalbn+0xf4>)
 8014436:	429e      	cmp	r6, r3
 8014438:	4604      	mov	r4, r0
 801443a:	460d      	mov	r5, r1
 801443c:	da0f      	bge.n	801445e <scalbn+0x4e>
 801443e:	a328      	add	r3, pc, #160	@ (adr r3, 80144e0 <scalbn+0xd0>)
 8014440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014444:	e01e      	b.n	8014484 <scalbn+0x74>
 8014446:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801444a:	4291      	cmp	r1, r2
 801444c:	d10b      	bne.n	8014466 <scalbn+0x56>
 801444e:	4622      	mov	r2, r4
 8014450:	4620      	mov	r0, r4
 8014452:	4629      	mov	r1, r5
 8014454:	f7eb ff4a 	bl	80002ec <__adddf3>
 8014458:	4604      	mov	r4, r0
 801445a:	460d      	mov	r5, r1
 801445c:	e022      	b.n	80144a4 <scalbn+0x94>
 801445e:	460b      	mov	r3, r1
 8014460:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014464:	3936      	subs	r1, #54	@ 0x36
 8014466:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801446a:	4296      	cmp	r6, r2
 801446c:	dd0d      	ble.n	801448a <scalbn+0x7a>
 801446e:	2d00      	cmp	r5, #0
 8014470:	a11d      	add	r1, pc, #116	@ (adr r1, 80144e8 <scalbn+0xd8>)
 8014472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014476:	da02      	bge.n	801447e <scalbn+0x6e>
 8014478:	a11d      	add	r1, pc, #116	@ (adr r1, 80144f0 <scalbn+0xe0>)
 801447a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801447e:	a31a      	add	r3, pc, #104	@ (adr r3, 80144e8 <scalbn+0xd8>)
 8014480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014484:	f7ec f8e8 	bl	8000658 <__aeabi_dmul>
 8014488:	e7e6      	b.n	8014458 <scalbn+0x48>
 801448a:	1872      	adds	r2, r6, r1
 801448c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014490:	428a      	cmp	r2, r1
 8014492:	dcec      	bgt.n	801446e <scalbn+0x5e>
 8014494:	2a00      	cmp	r2, #0
 8014496:	dd08      	ble.n	80144aa <scalbn+0x9a>
 8014498:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801449c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80144a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80144a4:	ec45 4b10 	vmov	d0, r4, r5
 80144a8:	bd70      	pop	{r4, r5, r6, pc}
 80144aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80144ae:	da08      	bge.n	80144c2 <scalbn+0xb2>
 80144b0:	2d00      	cmp	r5, #0
 80144b2:	a10b      	add	r1, pc, #44	@ (adr r1, 80144e0 <scalbn+0xd0>)
 80144b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144b8:	dac1      	bge.n	801443e <scalbn+0x2e>
 80144ba:	a10f      	add	r1, pc, #60	@ (adr r1, 80144f8 <scalbn+0xe8>)
 80144bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144c0:	e7bd      	b.n	801443e <scalbn+0x2e>
 80144c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80144c6:	3236      	adds	r2, #54	@ 0x36
 80144c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80144cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80144d0:	4620      	mov	r0, r4
 80144d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014508 <scalbn+0xf8>)
 80144d4:	4629      	mov	r1, r5
 80144d6:	2200      	movs	r2, #0
 80144d8:	e7d4      	b.n	8014484 <scalbn+0x74>
 80144da:	bf00      	nop
 80144dc:	f3af 8000 	nop.w
 80144e0:	c2f8f359 	.word	0xc2f8f359
 80144e4:	01a56e1f 	.word	0x01a56e1f
 80144e8:	8800759c 	.word	0x8800759c
 80144ec:	7e37e43c 	.word	0x7e37e43c
 80144f0:	8800759c 	.word	0x8800759c
 80144f4:	fe37e43c 	.word	0xfe37e43c
 80144f8:	c2f8f359 	.word	0xc2f8f359
 80144fc:	81a56e1f 	.word	0x81a56e1f
 8014500:	43500000 	.word	0x43500000
 8014504:	ffff3cb0 	.word	0xffff3cb0
 8014508:	3c900000 	.word	0x3c900000

0801450c <with_errno>:
 801450c:	b510      	push	{r4, lr}
 801450e:	ed2d 8b02 	vpush	{d8}
 8014512:	eeb0 8a40 	vmov.f32	s16, s0
 8014516:	eef0 8a60 	vmov.f32	s17, s1
 801451a:	4604      	mov	r4, r0
 801451c:	f000 ff0c 	bl	8015338 <__errno>
 8014520:	eeb0 0a48 	vmov.f32	s0, s16
 8014524:	eef0 0a68 	vmov.f32	s1, s17
 8014528:	ecbd 8b02 	vpop	{d8}
 801452c:	6004      	str	r4, [r0, #0]
 801452e:	bd10      	pop	{r4, pc}

08014530 <xflow>:
 8014530:	4603      	mov	r3, r0
 8014532:	b507      	push	{r0, r1, r2, lr}
 8014534:	ec51 0b10 	vmov	r0, r1, d0
 8014538:	b183      	cbz	r3, 801455c <xflow+0x2c>
 801453a:	4602      	mov	r2, r0
 801453c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014540:	e9cd 2300 	strd	r2, r3, [sp]
 8014544:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014548:	f7ec f886 	bl	8000658 <__aeabi_dmul>
 801454c:	ec41 0b10 	vmov	d0, r0, r1
 8014550:	2022      	movs	r0, #34	@ 0x22
 8014552:	b003      	add	sp, #12
 8014554:	f85d eb04 	ldr.w	lr, [sp], #4
 8014558:	f7ff bfd8 	b.w	801450c <with_errno>
 801455c:	4602      	mov	r2, r0
 801455e:	460b      	mov	r3, r1
 8014560:	e7ee      	b.n	8014540 <xflow+0x10>
 8014562:	0000      	movs	r0, r0
 8014564:	0000      	movs	r0, r0
	...

08014568 <__math_uflow>:
 8014568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014570 <__math_uflow+0x8>
 801456c:	f7ff bfe0 	b.w	8014530 <xflow>
 8014570:	00000000 	.word	0x00000000
 8014574:	10000000 	.word	0x10000000

08014578 <__math_oflow>:
 8014578:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014580 <__math_oflow+0x8>
 801457c:	f7ff bfd8 	b.w	8014530 <xflow>
 8014580:	00000000 	.word	0x00000000
 8014584:	70000000 	.word	0x70000000

08014588 <abort>:
 8014588:	b508      	push	{r3, lr}
 801458a:	2006      	movs	r0, #6
 801458c:	f000 fe5e 	bl	801524c <raise>
 8014590:	2001      	movs	r0, #1
 8014592:	f7f9 fd53 	bl	800e03c <_exit>
	...

08014598 <malloc>:
 8014598:	4b02      	ldr	r3, [pc, #8]	@ (80145a4 <malloc+0xc>)
 801459a:	4601      	mov	r1, r0
 801459c:	6818      	ldr	r0, [r3, #0]
 801459e:	f000 b82d 	b.w	80145fc <_malloc_r>
 80145a2:	bf00      	nop
 80145a4:	2000003c 	.word	0x2000003c

080145a8 <free>:
 80145a8:	4b02      	ldr	r3, [pc, #8]	@ (80145b4 <free+0xc>)
 80145aa:	4601      	mov	r1, r0
 80145ac:	6818      	ldr	r0, [r3, #0]
 80145ae:	f001 bd4b 	b.w	8016048 <_free_r>
 80145b2:	bf00      	nop
 80145b4:	2000003c 	.word	0x2000003c

080145b8 <sbrk_aligned>:
 80145b8:	b570      	push	{r4, r5, r6, lr}
 80145ba:	4e0f      	ldr	r6, [pc, #60]	@ (80145f8 <sbrk_aligned+0x40>)
 80145bc:	460c      	mov	r4, r1
 80145be:	6831      	ldr	r1, [r6, #0]
 80145c0:	4605      	mov	r5, r0
 80145c2:	b911      	cbnz	r1, 80145ca <sbrk_aligned+0x12>
 80145c4:	f000 fe96 	bl	80152f4 <_sbrk_r>
 80145c8:	6030      	str	r0, [r6, #0]
 80145ca:	4621      	mov	r1, r4
 80145cc:	4628      	mov	r0, r5
 80145ce:	f000 fe91 	bl	80152f4 <_sbrk_r>
 80145d2:	1c43      	adds	r3, r0, #1
 80145d4:	d103      	bne.n	80145de <sbrk_aligned+0x26>
 80145d6:	f04f 34ff 	mov.w	r4, #4294967295
 80145da:	4620      	mov	r0, r4
 80145dc:	bd70      	pop	{r4, r5, r6, pc}
 80145de:	1cc4      	adds	r4, r0, #3
 80145e0:	f024 0403 	bic.w	r4, r4, #3
 80145e4:	42a0      	cmp	r0, r4
 80145e6:	d0f8      	beq.n	80145da <sbrk_aligned+0x22>
 80145e8:	1a21      	subs	r1, r4, r0
 80145ea:	4628      	mov	r0, r5
 80145ec:	f000 fe82 	bl	80152f4 <_sbrk_r>
 80145f0:	3001      	adds	r0, #1
 80145f2:	d1f2      	bne.n	80145da <sbrk_aligned+0x22>
 80145f4:	e7ef      	b.n	80145d6 <sbrk_aligned+0x1e>
 80145f6:	bf00      	nop
 80145f8:	20000598 	.word	0x20000598

080145fc <_malloc_r>:
 80145fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014600:	1ccd      	adds	r5, r1, #3
 8014602:	f025 0503 	bic.w	r5, r5, #3
 8014606:	3508      	adds	r5, #8
 8014608:	2d0c      	cmp	r5, #12
 801460a:	bf38      	it	cc
 801460c:	250c      	movcc	r5, #12
 801460e:	2d00      	cmp	r5, #0
 8014610:	4606      	mov	r6, r0
 8014612:	db01      	blt.n	8014618 <_malloc_r+0x1c>
 8014614:	42a9      	cmp	r1, r5
 8014616:	d904      	bls.n	8014622 <_malloc_r+0x26>
 8014618:	230c      	movs	r3, #12
 801461a:	6033      	str	r3, [r6, #0]
 801461c:	2000      	movs	r0, #0
 801461e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014622:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80146f8 <_malloc_r+0xfc>
 8014626:	f000 f869 	bl	80146fc <__malloc_lock>
 801462a:	f8d8 3000 	ldr.w	r3, [r8]
 801462e:	461c      	mov	r4, r3
 8014630:	bb44      	cbnz	r4, 8014684 <_malloc_r+0x88>
 8014632:	4629      	mov	r1, r5
 8014634:	4630      	mov	r0, r6
 8014636:	f7ff ffbf 	bl	80145b8 <sbrk_aligned>
 801463a:	1c43      	adds	r3, r0, #1
 801463c:	4604      	mov	r4, r0
 801463e:	d158      	bne.n	80146f2 <_malloc_r+0xf6>
 8014640:	f8d8 4000 	ldr.w	r4, [r8]
 8014644:	4627      	mov	r7, r4
 8014646:	2f00      	cmp	r7, #0
 8014648:	d143      	bne.n	80146d2 <_malloc_r+0xd6>
 801464a:	2c00      	cmp	r4, #0
 801464c:	d04b      	beq.n	80146e6 <_malloc_r+0xea>
 801464e:	6823      	ldr	r3, [r4, #0]
 8014650:	4639      	mov	r1, r7
 8014652:	4630      	mov	r0, r6
 8014654:	eb04 0903 	add.w	r9, r4, r3
 8014658:	f000 fe4c 	bl	80152f4 <_sbrk_r>
 801465c:	4581      	cmp	r9, r0
 801465e:	d142      	bne.n	80146e6 <_malloc_r+0xea>
 8014660:	6821      	ldr	r1, [r4, #0]
 8014662:	1a6d      	subs	r5, r5, r1
 8014664:	4629      	mov	r1, r5
 8014666:	4630      	mov	r0, r6
 8014668:	f7ff ffa6 	bl	80145b8 <sbrk_aligned>
 801466c:	3001      	adds	r0, #1
 801466e:	d03a      	beq.n	80146e6 <_malloc_r+0xea>
 8014670:	6823      	ldr	r3, [r4, #0]
 8014672:	442b      	add	r3, r5
 8014674:	6023      	str	r3, [r4, #0]
 8014676:	f8d8 3000 	ldr.w	r3, [r8]
 801467a:	685a      	ldr	r2, [r3, #4]
 801467c:	bb62      	cbnz	r2, 80146d8 <_malloc_r+0xdc>
 801467e:	f8c8 7000 	str.w	r7, [r8]
 8014682:	e00f      	b.n	80146a4 <_malloc_r+0xa8>
 8014684:	6822      	ldr	r2, [r4, #0]
 8014686:	1b52      	subs	r2, r2, r5
 8014688:	d420      	bmi.n	80146cc <_malloc_r+0xd0>
 801468a:	2a0b      	cmp	r2, #11
 801468c:	d917      	bls.n	80146be <_malloc_r+0xc2>
 801468e:	1961      	adds	r1, r4, r5
 8014690:	42a3      	cmp	r3, r4
 8014692:	6025      	str	r5, [r4, #0]
 8014694:	bf18      	it	ne
 8014696:	6059      	strne	r1, [r3, #4]
 8014698:	6863      	ldr	r3, [r4, #4]
 801469a:	bf08      	it	eq
 801469c:	f8c8 1000 	streq.w	r1, [r8]
 80146a0:	5162      	str	r2, [r4, r5]
 80146a2:	604b      	str	r3, [r1, #4]
 80146a4:	4630      	mov	r0, r6
 80146a6:	f000 f82f 	bl	8014708 <__malloc_unlock>
 80146aa:	f104 000b 	add.w	r0, r4, #11
 80146ae:	1d23      	adds	r3, r4, #4
 80146b0:	f020 0007 	bic.w	r0, r0, #7
 80146b4:	1ac2      	subs	r2, r0, r3
 80146b6:	bf1c      	itt	ne
 80146b8:	1a1b      	subne	r3, r3, r0
 80146ba:	50a3      	strne	r3, [r4, r2]
 80146bc:	e7af      	b.n	801461e <_malloc_r+0x22>
 80146be:	6862      	ldr	r2, [r4, #4]
 80146c0:	42a3      	cmp	r3, r4
 80146c2:	bf0c      	ite	eq
 80146c4:	f8c8 2000 	streq.w	r2, [r8]
 80146c8:	605a      	strne	r2, [r3, #4]
 80146ca:	e7eb      	b.n	80146a4 <_malloc_r+0xa8>
 80146cc:	4623      	mov	r3, r4
 80146ce:	6864      	ldr	r4, [r4, #4]
 80146d0:	e7ae      	b.n	8014630 <_malloc_r+0x34>
 80146d2:	463c      	mov	r4, r7
 80146d4:	687f      	ldr	r7, [r7, #4]
 80146d6:	e7b6      	b.n	8014646 <_malloc_r+0x4a>
 80146d8:	461a      	mov	r2, r3
 80146da:	685b      	ldr	r3, [r3, #4]
 80146dc:	42a3      	cmp	r3, r4
 80146de:	d1fb      	bne.n	80146d8 <_malloc_r+0xdc>
 80146e0:	2300      	movs	r3, #0
 80146e2:	6053      	str	r3, [r2, #4]
 80146e4:	e7de      	b.n	80146a4 <_malloc_r+0xa8>
 80146e6:	230c      	movs	r3, #12
 80146e8:	6033      	str	r3, [r6, #0]
 80146ea:	4630      	mov	r0, r6
 80146ec:	f000 f80c 	bl	8014708 <__malloc_unlock>
 80146f0:	e794      	b.n	801461c <_malloc_r+0x20>
 80146f2:	6005      	str	r5, [r0, #0]
 80146f4:	e7d6      	b.n	80146a4 <_malloc_r+0xa8>
 80146f6:	bf00      	nop
 80146f8:	2000059c 	.word	0x2000059c

080146fc <__malloc_lock>:
 80146fc:	4801      	ldr	r0, [pc, #4]	@ (8014704 <__malloc_lock+0x8>)
 80146fe:	f000 be46 	b.w	801538e <__retarget_lock_acquire_recursive>
 8014702:	bf00      	nop
 8014704:	200006e0 	.word	0x200006e0

08014708 <__malloc_unlock>:
 8014708:	4801      	ldr	r0, [pc, #4]	@ (8014710 <__malloc_unlock+0x8>)
 801470a:	f000 be41 	b.w	8015390 <__retarget_lock_release_recursive>
 801470e:	bf00      	nop
 8014710:	200006e0 	.word	0x200006e0

08014714 <__cxa_atexit>:
 8014714:	b510      	push	{r4, lr}
 8014716:	4604      	mov	r4, r0
 8014718:	4804      	ldr	r0, [pc, #16]	@ (801472c <__cxa_atexit+0x18>)
 801471a:	4613      	mov	r3, r2
 801471c:	b120      	cbz	r0, 8014728 <__cxa_atexit+0x14>
 801471e:	460a      	mov	r2, r1
 8014720:	2002      	movs	r0, #2
 8014722:	4621      	mov	r1, r4
 8014724:	f3af 8000 	nop.w
 8014728:	bd10      	pop	{r4, pc}
 801472a:	bf00      	nop
 801472c:	00000000 	.word	0x00000000

08014730 <__cvt>:
 8014730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014734:	ec57 6b10 	vmov	r6, r7, d0
 8014738:	2f00      	cmp	r7, #0
 801473a:	460c      	mov	r4, r1
 801473c:	4619      	mov	r1, r3
 801473e:	463b      	mov	r3, r7
 8014740:	bfbb      	ittet	lt
 8014742:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014746:	461f      	movlt	r7, r3
 8014748:	2300      	movge	r3, #0
 801474a:	232d      	movlt	r3, #45	@ 0x2d
 801474c:	700b      	strb	r3, [r1, #0]
 801474e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014750:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014754:	4691      	mov	r9, r2
 8014756:	f023 0820 	bic.w	r8, r3, #32
 801475a:	bfbc      	itt	lt
 801475c:	4632      	movlt	r2, r6
 801475e:	4616      	movlt	r6, r2
 8014760:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014764:	d005      	beq.n	8014772 <__cvt+0x42>
 8014766:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801476a:	d100      	bne.n	801476e <__cvt+0x3e>
 801476c:	3401      	adds	r4, #1
 801476e:	2102      	movs	r1, #2
 8014770:	e000      	b.n	8014774 <__cvt+0x44>
 8014772:	2103      	movs	r1, #3
 8014774:	ab03      	add	r3, sp, #12
 8014776:	9301      	str	r3, [sp, #4]
 8014778:	ab02      	add	r3, sp, #8
 801477a:	9300      	str	r3, [sp, #0]
 801477c:	ec47 6b10 	vmov	d0, r6, r7
 8014780:	4653      	mov	r3, sl
 8014782:	4622      	mov	r2, r4
 8014784:	f000 fe9c 	bl	80154c0 <_dtoa_r>
 8014788:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801478c:	4605      	mov	r5, r0
 801478e:	d119      	bne.n	80147c4 <__cvt+0x94>
 8014790:	f019 0f01 	tst.w	r9, #1
 8014794:	d00e      	beq.n	80147b4 <__cvt+0x84>
 8014796:	eb00 0904 	add.w	r9, r0, r4
 801479a:	2200      	movs	r2, #0
 801479c:	2300      	movs	r3, #0
 801479e:	4630      	mov	r0, r6
 80147a0:	4639      	mov	r1, r7
 80147a2:	f7ec f9c1 	bl	8000b28 <__aeabi_dcmpeq>
 80147a6:	b108      	cbz	r0, 80147ac <__cvt+0x7c>
 80147a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80147ac:	2230      	movs	r2, #48	@ 0x30
 80147ae:	9b03      	ldr	r3, [sp, #12]
 80147b0:	454b      	cmp	r3, r9
 80147b2:	d31e      	bcc.n	80147f2 <__cvt+0xc2>
 80147b4:	9b03      	ldr	r3, [sp, #12]
 80147b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80147b8:	1b5b      	subs	r3, r3, r5
 80147ba:	4628      	mov	r0, r5
 80147bc:	6013      	str	r3, [r2, #0]
 80147be:	b004      	add	sp, #16
 80147c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80147c8:	eb00 0904 	add.w	r9, r0, r4
 80147cc:	d1e5      	bne.n	801479a <__cvt+0x6a>
 80147ce:	7803      	ldrb	r3, [r0, #0]
 80147d0:	2b30      	cmp	r3, #48	@ 0x30
 80147d2:	d10a      	bne.n	80147ea <__cvt+0xba>
 80147d4:	2200      	movs	r2, #0
 80147d6:	2300      	movs	r3, #0
 80147d8:	4630      	mov	r0, r6
 80147da:	4639      	mov	r1, r7
 80147dc:	f7ec f9a4 	bl	8000b28 <__aeabi_dcmpeq>
 80147e0:	b918      	cbnz	r0, 80147ea <__cvt+0xba>
 80147e2:	f1c4 0401 	rsb	r4, r4, #1
 80147e6:	f8ca 4000 	str.w	r4, [sl]
 80147ea:	f8da 3000 	ldr.w	r3, [sl]
 80147ee:	4499      	add	r9, r3
 80147f0:	e7d3      	b.n	801479a <__cvt+0x6a>
 80147f2:	1c59      	adds	r1, r3, #1
 80147f4:	9103      	str	r1, [sp, #12]
 80147f6:	701a      	strb	r2, [r3, #0]
 80147f8:	e7d9      	b.n	80147ae <__cvt+0x7e>

080147fa <__exponent>:
 80147fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147fc:	2900      	cmp	r1, #0
 80147fe:	bfba      	itte	lt
 8014800:	4249      	neglt	r1, r1
 8014802:	232d      	movlt	r3, #45	@ 0x2d
 8014804:	232b      	movge	r3, #43	@ 0x2b
 8014806:	2909      	cmp	r1, #9
 8014808:	7002      	strb	r2, [r0, #0]
 801480a:	7043      	strb	r3, [r0, #1]
 801480c:	dd29      	ble.n	8014862 <__exponent+0x68>
 801480e:	f10d 0307 	add.w	r3, sp, #7
 8014812:	461d      	mov	r5, r3
 8014814:	270a      	movs	r7, #10
 8014816:	461a      	mov	r2, r3
 8014818:	fbb1 f6f7 	udiv	r6, r1, r7
 801481c:	fb07 1416 	mls	r4, r7, r6, r1
 8014820:	3430      	adds	r4, #48	@ 0x30
 8014822:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014826:	460c      	mov	r4, r1
 8014828:	2c63      	cmp	r4, #99	@ 0x63
 801482a:	f103 33ff 	add.w	r3, r3, #4294967295
 801482e:	4631      	mov	r1, r6
 8014830:	dcf1      	bgt.n	8014816 <__exponent+0x1c>
 8014832:	3130      	adds	r1, #48	@ 0x30
 8014834:	1e94      	subs	r4, r2, #2
 8014836:	f803 1c01 	strb.w	r1, [r3, #-1]
 801483a:	1c41      	adds	r1, r0, #1
 801483c:	4623      	mov	r3, r4
 801483e:	42ab      	cmp	r3, r5
 8014840:	d30a      	bcc.n	8014858 <__exponent+0x5e>
 8014842:	f10d 0309 	add.w	r3, sp, #9
 8014846:	1a9b      	subs	r3, r3, r2
 8014848:	42ac      	cmp	r4, r5
 801484a:	bf88      	it	hi
 801484c:	2300      	movhi	r3, #0
 801484e:	3302      	adds	r3, #2
 8014850:	4403      	add	r3, r0
 8014852:	1a18      	subs	r0, r3, r0
 8014854:	b003      	add	sp, #12
 8014856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014858:	f813 6b01 	ldrb.w	r6, [r3], #1
 801485c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014860:	e7ed      	b.n	801483e <__exponent+0x44>
 8014862:	2330      	movs	r3, #48	@ 0x30
 8014864:	3130      	adds	r1, #48	@ 0x30
 8014866:	7083      	strb	r3, [r0, #2]
 8014868:	70c1      	strb	r1, [r0, #3]
 801486a:	1d03      	adds	r3, r0, #4
 801486c:	e7f1      	b.n	8014852 <__exponent+0x58>
	...

08014870 <_printf_float>:
 8014870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014874:	b08d      	sub	sp, #52	@ 0x34
 8014876:	460c      	mov	r4, r1
 8014878:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801487c:	4616      	mov	r6, r2
 801487e:	461f      	mov	r7, r3
 8014880:	4605      	mov	r5, r0
 8014882:	f000 fceb 	bl	801525c <_localeconv_r>
 8014886:	6803      	ldr	r3, [r0, #0]
 8014888:	9304      	str	r3, [sp, #16]
 801488a:	4618      	mov	r0, r3
 801488c:	f7eb fd20 	bl	80002d0 <strlen>
 8014890:	2300      	movs	r3, #0
 8014892:	930a      	str	r3, [sp, #40]	@ 0x28
 8014894:	f8d8 3000 	ldr.w	r3, [r8]
 8014898:	9005      	str	r0, [sp, #20]
 801489a:	3307      	adds	r3, #7
 801489c:	f023 0307 	bic.w	r3, r3, #7
 80148a0:	f103 0208 	add.w	r2, r3, #8
 80148a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80148a8:	f8d4 b000 	ldr.w	fp, [r4]
 80148ac:	f8c8 2000 	str.w	r2, [r8]
 80148b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80148b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80148b8:	9307      	str	r3, [sp, #28]
 80148ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80148be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80148c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80148c6:	4b9c      	ldr	r3, [pc, #624]	@ (8014b38 <_printf_float+0x2c8>)
 80148c8:	f04f 32ff 	mov.w	r2, #4294967295
 80148cc:	f7ec f95e 	bl	8000b8c <__aeabi_dcmpun>
 80148d0:	bb70      	cbnz	r0, 8014930 <_printf_float+0xc0>
 80148d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80148d6:	4b98      	ldr	r3, [pc, #608]	@ (8014b38 <_printf_float+0x2c8>)
 80148d8:	f04f 32ff 	mov.w	r2, #4294967295
 80148dc:	f7ec f938 	bl	8000b50 <__aeabi_dcmple>
 80148e0:	bb30      	cbnz	r0, 8014930 <_printf_float+0xc0>
 80148e2:	2200      	movs	r2, #0
 80148e4:	2300      	movs	r3, #0
 80148e6:	4640      	mov	r0, r8
 80148e8:	4649      	mov	r1, r9
 80148ea:	f7ec f927 	bl	8000b3c <__aeabi_dcmplt>
 80148ee:	b110      	cbz	r0, 80148f6 <_printf_float+0x86>
 80148f0:	232d      	movs	r3, #45	@ 0x2d
 80148f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80148f6:	4a91      	ldr	r2, [pc, #580]	@ (8014b3c <_printf_float+0x2cc>)
 80148f8:	4b91      	ldr	r3, [pc, #580]	@ (8014b40 <_printf_float+0x2d0>)
 80148fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80148fe:	bf94      	ite	ls
 8014900:	4690      	movls	r8, r2
 8014902:	4698      	movhi	r8, r3
 8014904:	2303      	movs	r3, #3
 8014906:	6123      	str	r3, [r4, #16]
 8014908:	f02b 0304 	bic.w	r3, fp, #4
 801490c:	6023      	str	r3, [r4, #0]
 801490e:	f04f 0900 	mov.w	r9, #0
 8014912:	9700      	str	r7, [sp, #0]
 8014914:	4633      	mov	r3, r6
 8014916:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014918:	4621      	mov	r1, r4
 801491a:	4628      	mov	r0, r5
 801491c:	f000 f9d2 	bl	8014cc4 <_printf_common>
 8014920:	3001      	adds	r0, #1
 8014922:	f040 808d 	bne.w	8014a40 <_printf_float+0x1d0>
 8014926:	f04f 30ff 	mov.w	r0, #4294967295
 801492a:	b00d      	add	sp, #52	@ 0x34
 801492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014930:	4642      	mov	r2, r8
 8014932:	464b      	mov	r3, r9
 8014934:	4640      	mov	r0, r8
 8014936:	4649      	mov	r1, r9
 8014938:	f7ec f928 	bl	8000b8c <__aeabi_dcmpun>
 801493c:	b140      	cbz	r0, 8014950 <_printf_float+0xe0>
 801493e:	464b      	mov	r3, r9
 8014940:	2b00      	cmp	r3, #0
 8014942:	bfbc      	itt	lt
 8014944:	232d      	movlt	r3, #45	@ 0x2d
 8014946:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801494a:	4a7e      	ldr	r2, [pc, #504]	@ (8014b44 <_printf_float+0x2d4>)
 801494c:	4b7e      	ldr	r3, [pc, #504]	@ (8014b48 <_printf_float+0x2d8>)
 801494e:	e7d4      	b.n	80148fa <_printf_float+0x8a>
 8014950:	6863      	ldr	r3, [r4, #4]
 8014952:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014956:	9206      	str	r2, [sp, #24]
 8014958:	1c5a      	adds	r2, r3, #1
 801495a:	d13b      	bne.n	80149d4 <_printf_float+0x164>
 801495c:	2306      	movs	r3, #6
 801495e:	6063      	str	r3, [r4, #4]
 8014960:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014964:	2300      	movs	r3, #0
 8014966:	6022      	str	r2, [r4, #0]
 8014968:	9303      	str	r3, [sp, #12]
 801496a:	ab0a      	add	r3, sp, #40	@ 0x28
 801496c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014970:	ab09      	add	r3, sp, #36	@ 0x24
 8014972:	9300      	str	r3, [sp, #0]
 8014974:	6861      	ldr	r1, [r4, #4]
 8014976:	ec49 8b10 	vmov	d0, r8, r9
 801497a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801497e:	4628      	mov	r0, r5
 8014980:	f7ff fed6 	bl	8014730 <__cvt>
 8014984:	9b06      	ldr	r3, [sp, #24]
 8014986:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014988:	2b47      	cmp	r3, #71	@ 0x47
 801498a:	4680      	mov	r8, r0
 801498c:	d129      	bne.n	80149e2 <_printf_float+0x172>
 801498e:	1cc8      	adds	r0, r1, #3
 8014990:	db02      	blt.n	8014998 <_printf_float+0x128>
 8014992:	6863      	ldr	r3, [r4, #4]
 8014994:	4299      	cmp	r1, r3
 8014996:	dd41      	ble.n	8014a1c <_printf_float+0x1ac>
 8014998:	f1aa 0a02 	sub.w	sl, sl, #2
 801499c:	fa5f fa8a 	uxtb.w	sl, sl
 80149a0:	3901      	subs	r1, #1
 80149a2:	4652      	mov	r2, sl
 80149a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80149a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80149aa:	f7ff ff26 	bl	80147fa <__exponent>
 80149ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80149b0:	1813      	adds	r3, r2, r0
 80149b2:	2a01      	cmp	r2, #1
 80149b4:	4681      	mov	r9, r0
 80149b6:	6123      	str	r3, [r4, #16]
 80149b8:	dc02      	bgt.n	80149c0 <_printf_float+0x150>
 80149ba:	6822      	ldr	r2, [r4, #0]
 80149bc:	07d2      	lsls	r2, r2, #31
 80149be:	d501      	bpl.n	80149c4 <_printf_float+0x154>
 80149c0:	3301      	adds	r3, #1
 80149c2:	6123      	str	r3, [r4, #16]
 80149c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d0a2      	beq.n	8014912 <_printf_float+0xa2>
 80149cc:	232d      	movs	r3, #45	@ 0x2d
 80149ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80149d2:	e79e      	b.n	8014912 <_printf_float+0xa2>
 80149d4:	9a06      	ldr	r2, [sp, #24]
 80149d6:	2a47      	cmp	r2, #71	@ 0x47
 80149d8:	d1c2      	bne.n	8014960 <_printf_float+0xf0>
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d1c0      	bne.n	8014960 <_printf_float+0xf0>
 80149de:	2301      	movs	r3, #1
 80149e0:	e7bd      	b.n	801495e <_printf_float+0xee>
 80149e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80149e6:	d9db      	bls.n	80149a0 <_printf_float+0x130>
 80149e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80149ec:	d118      	bne.n	8014a20 <_printf_float+0x1b0>
 80149ee:	2900      	cmp	r1, #0
 80149f0:	6863      	ldr	r3, [r4, #4]
 80149f2:	dd0b      	ble.n	8014a0c <_printf_float+0x19c>
 80149f4:	6121      	str	r1, [r4, #16]
 80149f6:	b913      	cbnz	r3, 80149fe <_printf_float+0x18e>
 80149f8:	6822      	ldr	r2, [r4, #0]
 80149fa:	07d0      	lsls	r0, r2, #31
 80149fc:	d502      	bpl.n	8014a04 <_printf_float+0x194>
 80149fe:	3301      	adds	r3, #1
 8014a00:	440b      	add	r3, r1
 8014a02:	6123      	str	r3, [r4, #16]
 8014a04:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014a06:	f04f 0900 	mov.w	r9, #0
 8014a0a:	e7db      	b.n	80149c4 <_printf_float+0x154>
 8014a0c:	b913      	cbnz	r3, 8014a14 <_printf_float+0x1a4>
 8014a0e:	6822      	ldr	r2, [r4, #0]
 8014a10:	07d2      	lsls	r2, r2, #31
 8014a12:	d501      	bpl.n	8014a18 <_printf_float+0x1a8>
 8014a14:	3302      	adds	r3, #2
 8014a16:	e7f4      	b.n	8014a02 <_printf_float+0x192>
 8014a18:	2301      	movs	r3, #1
 8014a1a:	e7f2      	b.n	8014a02 <_printf_float+0x192>
 8014a1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014a22:	4299      	cmp	r1, r3
 8014a24:	db05      	blt.n	8014a32 <_printf_float+0x1c2>
 8014a26:	6823      	ldr	r3, [r4, #0]
 8014a28:	6121      	str	r1, [r4, #16]
 8014a2a:	07d8      	lsls	r0, r3, #31
 8014a2c:	d5ea      	bpl.n	8014a04 <_printf_float+0x194>
 8014a2e:	1c4b      	adds	r3, r1, #1
 8014a30:	e7e7      	b.n	8014a02 <_printf_float+0x192>
 8014a32:	2900      	cmp	r1, #0
 8014a34:	bfd4      	ite	le
 8014a36:	f1c1 0202 	rsble	r2, r1, #2
 8014a3a:	2201      	movgt	r2, #1
 8014a3c:	4413      	add	r3, r2
 8014a3e:	e7e0      	b.n	8014a02 <_printf_float+0x192>
 8014a40:	6823      	ldr	r3, [r4, #0]
 8014a42:	055a      	lsls	r2, r3, #21
 8014a44:	d407      	bmi.n	8014a56 <_printf_float+0x1e6>
 8014a46:	6923      	ldr	r3, [r4, #16]
 8014a48:	4642      	mov	r2, r8
 8014a4a:	4631      	mov	r1, r6
 8014a4c:	4628      	mov	r0, r5
 8014a4e:	47b8      	blx	r7
 8014a50:	3001      	adds	r0, #1
 8014a52:	d12b      	bne.n	8014aac <_printf_float+0x23c>
 8014a54:	e767      	b.n	8014926 <_printf_float+0xb6>
 8014a56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014a5a:	f240 80dd 	bls.w	8014c18 <_printf_float+0x3a8>
 8014a5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014a62:	2200      	movs	r2, #0
 8014a64:	2300      	movs	r3, #0
 8014a66:	f7ec f85f 	bl	8000b28 <__aeabi_dcmpeq>
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	d033      	beq.n	8014ad6 <_printf_float+0x266>
 8014a6e:	4a37      	ldr	r2, [pc, #220]	@ (8014b4c <_printf_float+0x2dc>)
 8014a70:	2301      	movs	r3, #1
 8014a72:	4631      	mov	r1, r6
 8014a74:	4628      	mov	r0, r5
 8014a76:	47b8      	blx	r7
 8014a78:	3001      	adds	r0, #1
 8014a7a:	f43f af54 	beq.w	8014926 <_printf_float+0xb6>
 8014a7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014a82:	4543      	cmp	r3, r8
 8014a84:	db02      	blt.n	8014a8c <_printf_float+0x21c>
 8014a86:	6823      	ldr	r3, [r4, #0]
 8014a88:	07d8      	lsls	r0, r3, #31
 8014a8a:	d50f      	bpl.n	8014aac <_printf_float+0x23c>
 8014a8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a90:	4631      	mov	r1, r6
 8014a92:	4628      	mov	r0, r5
 8014a94:	47b8      	blx	r7
 8014a96:	3001      	adds	r0, #1
 8014a98:	f43f af45 	beq.w	8014926 <_printf_float+0xb6>
 8014a9c:	f04f 0900 	mov.w	r9, #0
 8014aa0:	f108 38ff 	add.w	r8, r8, #4294967295
 8014aa4:	f104 0a1a 	add.w	sl, r4, #26
 8014aa8:	45c8      	cmp	r8, r9
 8014aaa:	dc09      	bgt.n	8014ac0 <_printf_float+0x250>
 8014aac:	6823      	ldr	r3, [r4, #0]
 8014aae:	079b      	lsls	r3, r3, #30
 8014ab0:	f100 8103 	bmi.w	8014cba <_printf_float+0x44a>
 8014ab4:	68e0      	ldr	r0, [r4, #12]
 8014ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ab8:	4298      	cmp	r0, r3
 8014aba:	bfb8      	it	lt
 8014abc:	4618      	movlt	r0, r3
 8014abe:	e734      	b.n	801492a <_printf_float+0xba>
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	4652      	mov	r2, sl
 8014ac4:	4631      	mov	r1, r6
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	47b8      	blx	r7
 8014aca:	3001      	adds	r0, #1
 8014acc:	f43f af2b 	beq.w	8014926 <_printf_float+0xb6>
 8014ad0:	f109 0901 	add.w	r9, r9, #1
 8014ad4:	e7e8      	b.n	8014aa8 <_printf_float+0x238>
 8014ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	dc39      	bgt.n	8014b50 <_printf_float+0x2e0>
 8014adc:	4a1b      	ldr	r2, [pc, #108]	@ (8014b4c <_printf_float+0x2dc>)
 8014ade:	2301      	movs	r3, #1
 8014ae0:	4631      	mov	r1, r6
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	47b8      	blx	r7
 8014ae6:	3001      	adds	r0, #1
 8014ae8:	f43f af1d 	beq.w	8014926 <_printf_float+0xb6>
 8014aec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014af0:	ea59 0303 	orrs.w	r3, r9, r3
 8014af4:	d102      	bne.n	8014afc <_printf_float+0x28c>
 8014af6:	6823      	ldr	r3, [r4, #0]
 8014af8:	07d9      	lsls	r1, r3, #31
 8014afa:	d5d7      	bpl.n	8014aac <_printf_float+0x23c>
 8014afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b00:	4631      	mov	r1, r6
 8014b02:	4628      	mov	r0, r5
 8014b04:	47b8      	blx	r7
 8014b06:	3001      	adds	r0, #1
 8014b08:	f43f af0d 	beq.w	8014926 <_printf_float+0xb6>
 8014b0c:	f04f 0a00 	mov.w	sl, #0
 8014b10:	f104 0b1a 	add.w	fp, r4, #26
 8014b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b16:	425b      	negs	r3, r3
 8014b18:	4553      	cmp	r3, sl
 8014b1a:	dc01      	bgt.n	8014b20 <_printf_float+0x2b0>
 8014b1c:	464b      	mov	r3, r9
 8014b1e:	e793      	b.n	8014a48 <_printf_float+0x1d8>
 8014b20:	2301      	movs	r3, #1
 8014b22:	465a      	mov	r2, fp
 8014b24:	4631      	mov	r1, r6
 8014b26:	4628      	mov	r0, r5
 8014b28:	47b8      	blx	r7
 8014b2a:	3001      	adds	r0, #1
 8014b2c:	f43f aefb 	beq.w	8014926 <_printf_float+0xb6>
 8014b30:	f10a 0a01 	add.w	sl, sl, #1
 8014b34:	e7ee      	b.n	8014b14 <_printf_float+0x2a4>
 8014b36:	bf00      	nop
 8014b38:	7fefffff 	.word	0x7fefffff
 8014b3c:	080185b0 	.word	0x080185b0
 8014b40:	080185b4 	.word	0x080185b4
 8014b44:	080185b8 	.word	0x080185b8
 8014b48:	080185bc 	.word	0x080185bc
 8014b4c:	080185c0 	.word	0x080185c0
 8014b50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014b52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014b56:	4553      	cmp	r3, sl
 8014b58:	bfa8      	it	ge
 8014b5a:	4653      	movge	r3, sl
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	4699      	mov	r9, r3
 8014b60:	dc36      	bgt.n	8014bd0 <_printf_float+0x360>
 8014b62:	f04f 0b00 	mov.w	fp, #0
 8014b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014b6a:	f104 021a 	add.w	r2, r4, #26
 8014b6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014b70:	9306      	str	r3, [sp, #24]
 8014b72:	eba3 0309 	sub.w	r3, r3, r9
 8014b76:	455b      	cmp	r3, fp
 8014b78:	dc31      	bgt.n	8014bde <_printf_float+0x36e>
 8014b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b7c:	459a      	cmp	sl, r3
 8014b7e:	dc3a      	bgt.n	8014bf6 <_printf_float+0x386>
 8014b80:	6823      	ldr	r3, [r4, #0]
 8014b82:	07da      	lsls	r2, r3, #31
 8014b84:	d437      	bmi.n	8014bf6 <_printf_float+0x386>
 8014b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b88:	ebaa 0903 	sub.w	r9, sl, r3
 8014b8c:	9b06      	ldr	r3, [sp, #24]
 8014b8e:	ebaa 0303 	sub.w	r3, sl, r3
 8014b92:	4599      	cmp	r9, r3
 8014b94:	bfa8      	it	ge
 8014b96:	4699      	movge	r9, r3
 8014b98:	f1b9 0f00 	cmp.w	r9, #0
 8014b9c:	dc33      	bgt.n	8014c06 <_printf_float+0x396>
 8014b9e:	f04f 0800 	mov.w	r8, #0
 8014ba2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014ba6:	f104 0b1a 	add.w	fp, r4, #26
 8014baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bac:	ebaa 0303 	sub.w	r3, sl, r3
 8014bb0:	eba3 0309 	sub.w	r3, r3, r9
 8014bb4:	4543      	cmp	r3, r8
 8014bb6:	f77f af79 	ble.w	8014aac <_printf_float+0x23c>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	465a      	mov	r2, fp
 8014bbe:	4631      	mov	r1, r6
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	47b8      	blx	r7
 8014bc4:	3001      	adds	r0, #1
 8014bc6:	f43f aeae 	beq.w	8014926 <_printf_float+0xb6>
 8014bca:	f108 0801 	add.w	r8, r8, #1
 8014bce:	e7ec      	b.n	8014baa <_printf_float+0x33a>
 8014bd0:	4642      	mov	r2, r8
 8014bd2:	4631      	mov	r1, r6
 8014bd4:	4628      	mov	r0, r5
 8014bd6:	47b8      	blx	r7
 8014bd8:	3001      	adds	r0, #1
 8014bda:	d1c2      	bne.n	8014b62 <_printf_float+0x2f2>
 8014bdc:	e6a3      	b.n	8014926 <_printf_float+0xb6>
 8014bde:	2301      	movs	r3, #1
 8014be0:	4631      	mov	r1, r6
 8014be2:	4628      	mov	r0, r5
 8014be4:	9206      	str	r2, [sp, #24]
 8014be6:	47b8      	blx	r7
 8014be8:	3001      	adds	r0, #1
 8014bea:	f43f ae9c 	beq.w	8014926 <_printf_float+0xb6>
 8014bee:	9a06      	ldr	r2, [sp, #24]
 8014bf0:	f10b 0b01 	add.w	fp, fp, #1
 8014bf4:	e7bb      	b.n	8014b6e <_printf_float+0x2fe>
 8014bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bfa:	4631      	mov	r1, r6
 8014bfc:	4628      	mov	r0, r5
 8014bfe:	47b8      	blx	r7
 8014c00:	3001      	adds	r0, #1
 8014c02:	d1c0      	bne.n	8014b86 <_printf_float+0x316>
 8014c04:	e68f      	b.n	8014926 <_printf_float+0xb6>
 8014c06:	9a06      	ldr	r2, [sp, #24]
 8014c08:	464b      	mov	r3, r9
 8014c0a:	4442      	add	r2, r8
 8014c0c:	4631      	mov	r1, r6
 8014c0e:	4628      	mov	r0, r5
 8014c10:	47b8      	blx	r7
 8014c12:	3001      	adds	r0, #1
 8014c14:	d1c3      	bne.n	8014b9e <_printf_float+0x32e>
 8014c16:	e686      	b.n	8014926 <_printf_float+0xb6>
 8014c18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014c1c:	f1ba 0f01 	cmp.w	sl, #1
 8014c20:	dc01      	bgt.n	8014c26 <_printf_float+0x3b6>
 8014c22:	07db      	lsls	r3, r3, #31
 8014c24:	d536      	bpl.n	8014c94 <_printf_float+0x424>
 8014c26:	2301      	movs	r3, #1
 8014c28:	4642      	mov	r2, r8
 8014c2a:	4631      	mov	r1, r6
 8014c2c:	4628      	mov	r0, r5
 8014c2e:	47b8      	blx	r7
 8014c30:	3001      	adds	r0, #1
 8014c32:	f43f ae78 	beq.w	8014926 <_printf_float+0xb6>
 8014c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c3a:	4631      	mov	r1, r6
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	47b8      	blx	r7
 8014c40:	3001      	adds	r0, #1
 8014c42:	f43f ae70 	beq.w	8014926 <_printf_float+0xb6>
 8014c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c52:	f7eb ff69 	bl	8000b28 <__aeabi_dcmpeq>
 8014c56:	b9c0      	cbnz	r0, 8014c8a <_printf_float+0x41a>
 8014c58:	4653      	mov	r3, sl
 8014c5a:	f108 0201 	add.w	r2, r8, #1
 8014c5e:	4631      	mov	r1, r6
 8014c60:	4628      	mov	r0, r5
 8014c62:	47b8      	blx	r7
 8014c64:	3001      	adds	r0, #1
 8014c66:	d10c      	bne.n	8014c82 <_printf_float+0x412>
 8014c68:	e65d      	b.n	8014926 <_printf_float+0xb6>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	465a      	mov	r2, fp
 8014c6e:	4631      	mov	r1, r6
 8014c70:	4628      	mov	r0, r5
 8014c72:	47b8      	blx	r7
 8014c74:	3001      	adds	r0, #1
 8014c76:	f43f ae56 	beq.w	8014926 <_printf_float+0xb6>
 8014c7a:	f108 0801 	add.w	r8, r8, #1
 8014c7e:	45d0      	cmp	r8, sl
 8014c80:	dbf3      	blt.n	8014c6a <_printf_float+0x3fa>
 8014c82:	464b      	mov	r3, r9
 8014c84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014c88:	e6df      	b.n	8014a4a <_printf_float+0x1da>
 8014c8a:	f04f 0800 	mov.w	r8, #0
 8014c8e:	f104 0b1a 	add.w	fp, r4, #26
 8014c92:	e7f4      	b.n	8014c7e <_printf_float+0x40e>
 8014c94:	2301      	movs	r3, #1
 8014c96:	4642      	mov	r2, r8
 8014c98:	e7e1      	b.n	8014c5e <_printf_float+0x3ee>
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	464a      	mov	r2, r9
 8014c9e:	4631      	mov	r1, r6
 8014ca0:	4628      	mov	r0, r5
 8014ca2:	47b8      	blx	r7
 8014ca4:	3001      	adds	r0, #1
 8014ca6:	f43f ae3e 	beq.w	8014926 <_printf_float+0xb6>
 8014caa:	f108 0801 	add.w	r8, r8, #1
 8014cae:	68e3      	ldr	r3, [r4, #12]
 8014cb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014cb2:	1a5b      	subs	r3, r3, r1
 8014cb4:	4543      	cmp	r3, r8
 8014cb6:	dcf0      	bgt.n	8014c9a <_printf_float+0x42a>
 8014cb8:	e6fc      	b.n	8014ab4 <_printf_float+0x244>
 8014cba:	f04f 0800 	mov.w	r8, #0
 8014cbe:	f104 0919 	add.w	r9, r4, #25
 8014cc2:	e7f4      	b.n	8014cae <_printf_float+0x43e>

08014cc4 <_printf_common>:
 8014cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cc8:	4616      	mov	r6, r2
 8014cca:	4698      	mov	r8, r3
 8014ccc:	688a      	ldr	r2, [r1, #8]
 8014cce:	690b      	ldr	r3, [r1, #16]
 8014cd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014cd4:	4293      	cmp	r3, r2
 8014cd6:	bfb8      	it	lt
 8014cd8:	4613      	movlt	r3, r2
 8014cda:	6033      	str	r3, [r6, #0]
 8014cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014ce0:	4607      	mov	r7, r0
 8014ce2:	460c      	mov	r4, r1
 8014ce4:	b10a      	cbz	r2, 8014cea <_printf_common+0x26>
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	6033      	str	r3, [r6, #0]
 8014cea:	6823      	ldr	r3, [r4, #0]
 8014cec:	0699      	lsls	r1, r3, #26
 8014cee:	bf42      	ittt	mi
 8014cf0:	6833      	ldrmi	r3, [r6, #0]
 8014cf2:	3302      	addmi	r3, #2
 8014cf4:	6033      	strmi	r3, [r6, #0]
 8014cf6:	6825      	ldr	r5, [r4, #0]
 8014cf8:	f015 0506 	ands.w	r5, r5, #6
 8014cfc:	d106      	bne.n	8014d0c <_printf_common+0x48>
 8014cfe:	f104 0a19 	add.w	sl, r4, #25
 8014d02:	68e3      	ldr	r3, [r4, #12]
 8014d04:	6832      	ldr	r2, [r6, #0]
 8014d06:	1a9b      	subs	r3, r3, r2
 8014d08:	42ab      	cmp	r3, r5
 8014d0a:	dc26      	bgt.n	8014d5a <_printf_common+0x96>
 8014d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014d10:	6822      	ldr	r2, [r4, #0]
 8014d12:	3b00      	subs	r3, #0
 8014d14:	bf18      	it	ne
 8014d16:	2301      	movne	r3, #1
 8014d18:	0692      	lsls	r2, r2, #26
 8014d1a:	d42b      	bmi.n	8014d74 <_printf_common+0xb0>
 8014d1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014d20:	4641      	mov	r1, r8
 8014d22:	4638      	mov	r0, r7
 8014d24:	47c8      	blx	r9
 8014d26:	3001      	adds	r0, #1
 8014d28:	d01e      	beq.n	8014d68 <_printf_common+0xa4>
 8014d2a:	6823      	ldr	r3, [r4, #0]
 8014d2c:	6922      	ldr	r2, [r4, #16]
 8014d2e:	f003 0306 	and.w	r3, r3, #6
 8014d32:	2b04      	cmp	r3, #4
 8014d34:	bf02      	ittt	eq
 8014d36:	68e5      	ldreq	r5, [r4, #12]
 8014d38:	6833      	ldreq	r3, [r6, #0]
 8014d3a:	1aed      	subeq	r5, r5, r3
 8014d3c:	68a3      	ldr	r3, [r4, #8]
 8014d3e:	bf0c      	ite	eq
 8014d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014d44:	2500      	movne	r5, #0
 8014d46:	4293      	cmp	r3, r2
 8014d48:	bfc4      	itt	gt
 8014d4a:	1a9b      	subgt	r3, r3, r2
 8014d4c:	18ed      	addgt	r5, r5, r3
 8014d4e:	2600      	movs	r6, #0
 8014d50:	341a      	adds	r4, #26
 8014d52:	42b5      	cmp	r5, r6
 8014d54:	d11a      	bne.n	8014d8c <_printf_common+0xc8>
 8014d56:	2000      	movs	r0, #0
 8014d58:	e008      	b.n	8014d6c <_printf_common+0xa8>
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	4652      	mov	r2, sl
 8014d5e:	4641      	mov	r1, r8
 8014d60:	4638      	mov	r0, r7
 8014d62:	47c8      	blx	r9
 8014d64:	3001      	adds	r0, #1
 8014d66:	d103      	bne.n	8014d70 <_printf_common+0xac>
 8014d68:	f04f 30ff 	mov.w	r0, #4294967295
 8014d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d70:	3501      	adds	r5, #1
 8014d72:	e7c6      	b.n	8014d02 <_printf_common+0x3e>
 8014d74:	18e1      	adds	r1, r4, r3
 8014d76:	1c5a      	adds	r2, r3, #1
 8014d78:	2030      	movs	r0, #48	@ 0x30
 8014d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014d7e:	4422      	add	r2, r4
 8014d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014d84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014d88:	3302      	adds	r3, #2
 8014d8a:	e7c7      	b.n	8014d1c <_printf_common+0x58>
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	4622      	mov	r2, r4
 8014d90:	4641      	mov	r1, r8
 8014d92:	4638      	mov	r0, r7
 8014d94:	47c8      	blx	r9
 8014d96:	3001      	adds	r0, #1
 8014d98:	d0e6      	beq.n	8014d68 <_printf_common+0xa4>
 8014d9a:	3601      	adds	r6, #1
 8014d9c:	e7d9      	b.n	8014d52 <_printf_common+0x8e>
	...

08014da0 <_printf_i>:
 8014da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014da4:	7e0f      	ldrb	r7, [r1, #24]
 8014da6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014da8:	2f78      	cmp	r7, #120	@ 0x78
 8014daa:	4691      	mov	r9, r2
 8014dac:	4680      	mov	r8, r0
 8014dae:	460c      	mov	r4, r1
 8014db0:	469a      	mov	sl, r3
 8014db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014db6:	d807      	bhi.n	8014dc8 <_printf_i+0x28>
 8014db8:	2f62      	cmp	r7, #98	@ 0x62
 8014dba:	d80a      	bhi.n	8014dd2 <_printf_i+0x32>
 8014dbc:	2f00      	cmp	r7, #0
 8014dbe:	f000 80d2 	beq.w	8014f66 <_printf_i+0x1c6>
 8014dc2:	2f58      	cmp	r7, #88	@ 0x58
 8014dc4:	f000 80b9 	beq.w	8014f3a <_printf_i+0x19a>
 8014dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014dd0:	e03a      	b.n	8014e48 <_printf_i+0xa8>
 8014dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014dd6:	2b15      	cmp	r3, #21
 8014dd8:	d8f6      	bhi.n	8014dc8 <_printf_i+0x28>
 8014dda:	a101      	add	r1, pc, #4	@ (adr r1, 8014de0 <_printf_i+0x40>)
 8014ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014de0:	08014e39 	.word	0x08014e39
 8014de4:	08014e4d 	.word	0x08014e4d
 8014de8:	08014dc9 	.word	0x08014dc9
 8014dec:	08014dc9 	.word	0x08014dc9
 8014df0:	08014dc9 	.word	0x08014dc9
 8014df4:	08014dc9 	.word	0x08014dc9
 8014df8:	08014e4d 	.word	0x08014e4d
 8014dfc:	08014dc9 	.word	0x08014dc9
 8014e00:	08014dc9 	.word	0x08014dc9
 8014e04:	08014dc9 	.word	0x08014dc9
 8014e08:	08014dc9 	.word	0x08014dc9
 8014e0c:	08014f4d 	.word	0x08014f4d
 8014e10:	08014e77 	.word	0x08014e77
 8014e14:	08014f07 	.word	0x08014f07
 8014e18:	08014dc9 	.word	0x08014dc9
 8014e1c:	08014dc9 	.word	0x08014dc9
 8014e20:	08014f6f 	.word	0x08014f6f
 8014e24:	08014dc9 	.word	0x08014dc9
 8014e28:	08014e77 	.word	0x08014e77
 8014e2c:	08014dc9 	.word	0x08014dc9
 8014e30:	08014dc9 	.word	0x08014dc9
 8014e34:	08014f0f 	.word	0x08014f0f
 8014e38:	6833      	ldr	r3, [r6, #0]
 8014e3a:	1d1a      	adds	r2, r3, #4
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	6032      	str	r2, [r6, #0]
 8014e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014e48:	2301      	movs	r3, #1
 8014e4a:	e09d      	b.n	8014f88 <_printf_i+0x1e8>
 8014e4c:	6833      	ldr	r3, [r6, #0]
 8014e4e:	6820      	ldr	r0, [r4, #0]
 8014e50:	1d19      	adds	r1, r3, #4
 8014e52:	6031      	str	r1, [r6, #0]
 8014e54:	0606      	lsls	r6, r0, #24
 8014e56:	d501      	bpl.n	8014e5c <_printf_i+0xbc>
 8014e58:	681d      	ldr	r5, [r3, #0]
 8014e5a:	e003      	b.n	8014e64 <_printf_i+0xc4>
 8014e5c:	0645      	lsls	r5, r0, #25
 8014e5e:	d5fb      	bpl.n	8014e58 <_printf_i+0xb8>
 8014e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014e64:	2d00      	cmp	r5, #0
 8014e66:	da03      	bge.n	8014e70 <_printf_i+0xd0>
 8014e68:	232d      	movs	r3, #45	@ 0x2d
 8014e6a:	426d      	negs	r5, r5
 8014e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014e70:	4859      	ldr	r0, [pc, #356]	@ (8014fd8 <_printf_i+0x238>)
 8014e72:	230a      	movs	r3, #10
 8014e74:	e011      	b.n	8014e9a <_printf_i+0xfa>
 8014e76:	6821      	ldr	r1, [r4, #0]
 8014e78:	6833      	ldr	r3, [r6, #0]
 8014e7a:	0608      	lsls	r0, r1, #24
 8014e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014e80:	d402      	bmi.n	8014e88 <_printf_i+0xe8>
 8014e82:	0649      	lsls	r1, r1, #25
 8014e84:	bf48      	it	mi
 8014e86:	b2ad      	uxthmi	r5, r5
 8014e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8014e8a:	4853      	ldr	r0, [pc, #332]	@ (8014fd8 <_printf_i+0x238>)
 8014e8c:	6033      	str	r3, [r6, #0]
 8014e8e:	bf14      	ite	ne
 8014e90:	230a      	movne	r3, #10
 8014e92:	2308      	moveq	r3, #8
 8014e94:	2100      	movs	r1, #0
 8014e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014e9a:	6866      	ldr	r6, [r4, #4]
 8014e9c:	60a6      	str	r6, [r4, #8]
 8014e9e:	2e00      	cmp	r6, #0
 8014ea0:	bfa2      	ittt	ge
 8014ea2:	6821      	ldrge	r1, [r4, #0]
 8014ea4:	f021 0104 	bicge.w	r1, r1, #4
 8014ea8:	6021      	strge	r1, [r4, #0]
 8014eaa:	b90d      	cbnz	r5, 8014eb0 <_printf_i+0x110>
 8014eac:	2e00      	cmp	r6, #0
 8014eae:	d04b      	beq.n	8014f48 <_printf_i+0x1a8>
 8014eb0:	4616      	mov	r6, r2
 8014eb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8014eb6:	fb03 5711 	mls	r7, r3, r1, r5
 8014eba:	5dc7      	ldrb	r7, [r0, r7]
 8014ebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014ec0:	462f      	mov	r7, r5
 8014ec2:	42bb      	cmp	r3, r7
 8014ec4:	460d      	mov	r5, r1
 8014ec6:	d9f4      	bls.n	8014eb2 <_printf_i+0x112>
 8014ec8:	2b08      	cmp	r3, #8
 8014eca:	d10b      	bne.n	8014ee4 <_printf_i+0x144>
 8014ecc:	6823      	ldr	r3, [r4, #0]
 8014ece:	07df      	lsls	r7, r3, #31
 8014ed0:	d508      	bpl.n	8014ee4 <_printf_i+0x144>
 8014ed2:	6923      	ldr	r3, [r4, #16]
 8014ed4:	6861      	ldr	r1, [r4, #4]
 8014ed6:	4299      	cmp	r1, r3
 8014ed8:	bfde      	ittt	le
 8014eda:	2330      	movle	r3, #48	@ 0x30
 8014edc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014ee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014ee4:	1b92      	subs	r2, r2, r6
 8014ee6:	6122      	str	r2, [r4, #16]
 8014ee8:	f8cd a000 	str.w	sl, [sp]
 8014eec:	464b      	mov	r3, r9
 8014eee:	aa03      	add	r2, sp, #12
 8014ef0:	4621      	mov	r1, r4
 8014ef2:	4640      	mov	r0, r8
 8014ef4:	f7ff fee6 	bl	8014cc4 <_printf_common>
 8014ef8:	3001      	adds	r0, #1
 8014efa:	d14a      	bne.n	8014f92 <_printf_i+0x1f2>
 8014efc:	f04f 30ff 	mov.w	r0, #4294967295
 8014f00:	b004      	add	sp, #16
 8014f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f06:	6823      	ldr	r3, [r4, #0]
 8014f08:	f043 0320 	orr.w	r3, r3, #32
 8014f0c:	6023      	str	r3, [r4, #0]
 8014f0e:	4833      	ldr	r0, [pc, #204]	@ (8014fdc <_printf_i+0x23c>)
 8014f10:	2778      	movs	r7, #120	@ 0x78
 8014f12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014f16:	6823      	ldr	r3, [r4, #0]
 8014f18:	6831      	ldr	r1, [r6, #0]
 8014f1a:	061f      	lsls	r7, r3, #24
 8014f1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014f20:	d402      	bmi.n	8014f28 <_printf_i+0x188>
 8014f22:	065f      	lsls	r7, r3, #25
 8014f24:	bf48      	it	mi
 8014f26:	b2ad      	uxthmi	r5, r5
 8014f28:	6031      	str	r1, [r6, #0]
 8014f2a:	07d9      	lsls	r1, r3, #31
 8014f2c:	bf44      	itt	mi
 8014f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8014f32:	6023      	strmi	r3, [r4, #0]
 8014f34:	b11d      	cbz	r5, 8014f3e <_printf_i+0x19e>
 8014f36:	2310      	movs	r3, #16
 8014f38:	e7ac      	b.n	8014e94 <_printf_i+0xf4>
 8014f3a:	4827      	ldr	r0, [pc, #156]	@ (8014fd8 <_printf_i+0x238>)
 8014f3c:	e7e9      	b.n	8014f12 <_printf_i+0x172>
 8014f3e:	6823      	ldr	r3, [r4, #0]
 8014f40:	f023 0320 	bic.w	r3, r3, #32
 8014f44:	6023      	str	r3, [r4, #0]
 8014f46:	e7f6      	b.n	8014f36 <_printf_i+0x196>
 8014f48:	4616      	mov	r6, r2
 8014f4a:	e7bd      	b.n	8014ec8 <_printf_i+0x128>
 8014f4c:	6833      	ldr	r3, [r6, #0]
 8014f4e:	6825      	ldr	r5, [r4, #0]
 8014f50:	6961      	ldr	r1, [r4, #20]
 8014f52:	1d18      	adds	r0, r3, #4
 8014f54:	6030      	str	r0, [r6, #0]
 8014f56:	062e      	lsls	r6, r5, #24
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	d501      	bpl.n	8014f60 <_printf_i+0x1c0>
 8014f5c:	6019      	str	r1, [r3, #0]
 8014f5e:	e002      	b.n	8014f66 <_printf_i+0x1c6>
 8014f60:	0668      	lsls	r0, r5, #25
 8014f62:	d5fb      	bpl.n	8014f5c <_printf_i+0x1bc>
 8014f64:	8019      	strh	r1, [r3, #0]
 8014f66:	2300      	movs	r3, #0
 8014f68:	6123      	str	r3, [r4, #16]
 8014f6a:	4616      	mov	r6, r2
 8014f6c:	e7bc      	b.n	8014ee8 <_printf_i+0x148>
 8014f6e:	6833      	ldr	r3, [r6, #0]
 8014f70:	1d1a      	adds	r2, r3, #4
 8014f72:	6032      	str	r2, [r6, #0]
 8014f74:	681e      	ldr	r6, [r3, #0]
 8014f76:	6862      	ldr	r2, [r4, #4]
 8014f78:	2100      	movs	r1, #0
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	f7eb f958 	bl	8000230 <memchr>
 8014f80:	b108      	cbz	r0, 8014f86 <_printf_i+0x1e6>
 8014f82:	1b80      	subs	r0, r0, r6
 8014f84:	6060      	str	r0, [r4, #4]
 8014f86:	6863      	ldr	r3, [r4, #4]
 8014f88:	6123      	str	r3, [r4, #16]
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014f90:	e7aa      	b.n	8014ee8 <_printf_i+0x148>
 8014f92:	6923      	ldr	r3, [r4, #16]
 8014f94:	4632      	mov	r2, r6
 8014f96:	4649      	mov	r1, r9
 8014f98:	4640      	mov	r0, r8
 8014f9a:	47d0      	blx	sl
 8014f9c:	3001      	adds	r0, #1
 8014f9e:	d0ad      	beq.n	8014efc <_printf_i+0x15c>
 8014fa0:	6823      	ldr	r3, [r4, #0]
 8014fa2:	079b      	lsls	r3, r3, #30
 8014fa4:	d413      	bmi.n	8014fce <_printf_i+0x22e>
 8014fa6:	68e0      	ldr	r0, [r4, #12]
 8014fa8:	9b03      	ldr	r3, [sp, #12]
 8014faa:	4298      	cmp	r0, r3
 8014fac:	bfb8      	it	lt
 8014fae:	4618      	movlt	r0, r3
 8014fb0:	e7a6      	b.n	8014f00 <_printf_i+0x160>
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	4632      	mov	r2, r6
 8014fb6:	4649      	mov	r1, r9
 8014fb8:	4640      	mov	r0, r8
 8014fba:	47d0      	blx	sl
 8014fbc:	3001      	adds	r0, #1
 8014fbe:	d09d      	beq.n	8014efc <_printf_i+0x15c>
 8014fc0:	3501      	adds	r5, #1
 8014fc2:	68e3      	ldr	r3, [r4, #12]
 8014fc4:	9903      	ldr	r1, [sp, #12]
 8014fc6:	1a5b      	subs	r3, r3, r1
 8014fc8:	42ab      	cmp	r3, r5
 8014fca:	dcf2      	bgt.n	8014fb2 <_printf_i+0x212>
 8014fcc:	e7eb      	b.n	8014fa6 <_printf_i+0x206>
 8014fce:	2500      	movs	r5, #0
 8014fd0:	f104 0619 	add.w	r6, r4, #25
 8014fd4:	e7f5      	b.n	8014fc2 <_printf_i+0x222>
 8014fd6:	bf00      	nop
 8014fd8:	080185c2 	.word	0x080185c2
 8014fdc:	080185d3 	.word	0x080185d3

08014fe0 <std>:
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	b510      	push	{r4, lr}
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8014fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014fee:	6083      	str	r3, [r0, #8]
 8014ff0:	8181      	strh	r1, [r0, #12]
 8014ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8014ff4:	81c2      	strh	r2, [r0, #14]
 8014ff6:	6183      	str	r3, [r0, #24]
 8014ff8:	4619      	mov	r1, r3
 8014ffa:	2208      	movs	r2, #8
 8014ffc:	305c      	adds	r0, #92	@ 0x5c
 8014ffe:	f000 f8f4 	bl	80151ea <memset>
 8015002:	4b0d      	ldr	r3, [pc, #52]	@ (8015038 <std+0x58>)
 8015004:	6263      	str	r3, [r4, #36]	@ 0x24
 8015006:	4b0d      	ldr	r3, [pc, #52]	@ (801503c <std+0x5c>)
 8015008:	62a3      	str	r3, [r4, #40]	@ 0x28
 801500a:	4b0d      	ldr	r3, [pc, #52]	@ (8015040 <std+0x60>)
 801500c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801500e:	4b0d      	ldr	r3, [pc, #52]	@ (8015044 <std+0x64>)
 8015010:	6323      	str	r3, [r4, #48]	@ 0x30
 8015012:	4b0d      	ldr	r3, [pc, #52]	@ (8015048 <std+0x68>)
 8015014:	6224      	str	r4, [r4, #32]
 8015016:	429c      	cmp	r4, r3
 8015018:	d006      	beq.n	8015028 <std+0x48>
 801501a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801501e:	4294      	cmp	r4, r2
 8015020:	d002      	beq.n	8015028 <std+0x48>
 8015022:	33d0      	adds	r3, #208	@ 0xd0
 8015024:	429c      	cmp	r4, r3
 8015026:	d105      	bne.n	8015034 <std+0x54>
 8015028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015030:	f000 b9ac 	b.w	801538c <__retarget_lock_init_recursive>
 8015034:	bd10      	pop	{r4, pc}
 8015036:	bf00      	nop
 8015038:	08015165 	.word	0x08015165
 801503c:	08015187 	.word	0x08015187
 8015040:	080151bf 	.word	0x080151bf
 8015044:	080151e3 	.word	0x080151e3
 8015048:	200005a0 	.word	0x200005a0

0801504c <stdio_exit_handler>:
 801504c:	4a02      	ldr	r2, [pc, #8]	@ (8015058 <stdio_exit_handler+0xc>)
 801504e:	4903      	ldr	r1, [pc, #12]	@ (801505c <stdio_exit_handler+0x10>)
 8015050:	4803      	ldr	r0, [pc, #12]	@ (8015060 <stdio_exit_handler+0x14>)
 8015052:	f000 b869 	b.w	8015128 <_fwalk_sglue>
 8015056:	bf00      	nop
 8015058:	20000030 	.word	0x20000030
 801505c:	080168e9 	.word	0x080168e9
 8015060:	20000040 	.word	0x20000040

08015064 <cleanup_stdio>:
 8015064:	6841      	ldr	r1, [r0, #4]
 8015066:	4b0c      	ldr	r3, [pc, #48]	@ (8015098 <cleanup_stdio+0x34>)
 8015068:	4299      	cmp	r1, r3
 801506a:	b510      	push	{r4, lr}
 801506c:	4604      	mov	r4, r0
 801506e:	d001      	beq.n	8015074 <cleanup_stdio+0x10>
 8015070:	f001 fc3a 	bl	80168e8 <_fflush_r>
 8015074:	68a1      	ldr	r1, [r4, #8]
 8015076:	4b09      	ldr	r3, [pc, #36]	@ (801509c <cleanup_stdio+0x38>)
 8015078:	4299      	cmp	r1, r3
 801507a:	d002      	beq.n	8015082 <cleanup_stdio+0x1e>
 801507c:	4620      	mov	r0, r4
 801507e:	f001 fc33 	bl	80168e8 <_fflush_r>
 8015082:	68e1      	ldr	r1, [r4, #12]
 8015084:	4b06      	ldr	r3, [pc, #24]	@ (80150a0 <cleanup_stdio+0x3c>)
 8015086:	4299      	cmp	r1, r3
 8015088:	d004      	beq.n	8015094 <cleanup_stdio+0x30>
 801508a:	4620      	mov	r0, r4
 801508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015090:	f001 bc2a 	b.w	80168e8 <_fflush_r>
 8015094:	bd10      	pop	{r4, pc}
 8015096:	bf00      	nop
 8015098:	200005a0 	.word	0x200005a0
 801509c:	20000608 	.word	0x20000608
 80150a0:	20000670 	.word	0x20000670

080150a4 <global_stdio_init.part.0>:
 80150a4:	b510      	push	{r4, lr}
 80150a6:	4b0b      	ldr	r3, [pc, #44]	@ (80150d4 <global_stdio_init.part.0+0x30>)
 80150a8:	4c0b      	ldr	r4, [pc, #44]	@ (80150d8 <global_stdio_init.part.0+0x34>)
 80150aa:	4a0c      	ldr	r2, [pc, #48]	@ (80150dc <global_stdio_init.part.0+0x38>)
 80150ac:	601a      	str	r2, [r3, #0]
 80150ae:	4620      	mov	r0, r4
 80150b0:	2200      	movs	r2, #0
 80150b2:	2104      	movs	r1, #4
 80150b4:	f7ff ff94 	bl	8014fe0 <std>
 80150b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80150bc:	2201      	movs	r2, #1
 80150be:	2109      	movs	r1, #9
 80150c0:	f7ff ff8e 	bl	8014fe0 <std>
 80150c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80150c8:	2202      	movs	r2, #2
 80150ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150ce:	2112      	movs	r1, #18
 80150d0:	f7ff bf86 	b.w	8014fe0 <std>
 80150d4:	200006d8 	.word	0x200006d8
 80150d8:	200005a0 	.word	0x200005a0
 80150dc:	0801504d 	.word	0x0801504d

080150e0 <__sfp_lock_acquire>:
 80150e0:	4801      	ldr	r0, [pc, #4]	@ (80150e8 <__sfp_lock_acquire+0x8>)
 80150e2:	f000 b954 	b.w	801538e <__retarget_lock_acquire_recursive>
 80150e6:	bf00      	nop
 80150e8:	200006e1 	.word	0x200006e1

080150ec <__sfp_lock_release>:
 80150ec:	4801      	ldr	r0, [pc, #4]	@ (80150f4 <__sfp_lock_release+0x8>)
 80150ee:	f000 b94f 	b.w	8015390 <__retarget_lock_release_recursive>
 80150f2:	bf00      	nop
 80150f4:	200006e1 	.word	0x200006e1

080150f8 <__sinit>:
 80150f8:	b510      	push	{r4, lr}
 80150fa:	4604      	mov	r4, r0
 80150fc:	f7ff fff0 	bl	80150e0 <__sfp_lock_acquire>
 8015100:	6a23      	ldr	r3, [r4, #32]
 8015102:	b11b      	cbz	r3, 801510c <__sinit+0x14>
 8015104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015108:	f7ff bff0 	b.w	80150ec <__sfp_lock_release>
 801510c:	4b04      	ldr	r3, [pc, #16]	@ (8015120 <__sinit+0x28>)
 801510e:	6223      	str	r3, [r4, #32]
 8015110:	4b04      	ldr	r3, [pc, #16]	@ (8015124 <__sinit+0x2c>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d1f5      	bne.n	8015104 <__sinit+0xc>
 8015118:	f7ff ffc4 	bl	80150a4 <global_stdio_init.part.0>
 801511c:	e7f2      	b.n	8015104 <__sinit+0xc>
 801511e:	bf00      	nop
 8015120:	08015065 	.word	0x08015065
 8015124:	200006d8 	.word	0x200006d8

08015128 <_fwalk_sglue>:
 8015128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801512c:	4607      	mov	r7, r0
 801512e:	4688      	mov	r8, r1
 8015130:	4614      	mov	r4, r2
 8015132:	2600      	movs	r6, #0
 8015134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015138:	f1b9 0901 	subs.w	r9, r9, #1
 801513c:	d505      	bpl.n	801514a <_fwalk_sglue+0x22>
 801513e:	6824      	ldr	r4, [r4, #0]
 8015140:	2c00      	cmp	r4, #0
 8015142:	d1f7      	bne.n	8015134 <_fwalk_sglue+0xc>
 8015144:	4630      	mov	r0, r6
 8015146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801514a:	89ab      	ldrh	r3, [r5, #12]
 801514c:	2b01      	cmp	r3, #1
 801514e:	d907      	bls.n	8015160 <_fwalk_sglue+0x38>
 8015150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015154:	3301      	adds	r3, #1
 8015156:	d003      	beq.n	8015160 <_fwalk_sglue+0x38>
 8015158:	4629      	mov	r1, r5
 801515a:	4638      	mov	r0, r7
 801515c:	47c0      	blx	r8
 801515e:	4306      	orrs	r6, r0
 8015160:	3568      	adds	r5, #104	@ 0x68
 8015162:	e7e9      	b.n	8015138 <_fwalk_sglue+0x10>

08015164 <__sread>:
 8015164:	b510      	push	{r4, lr}
 8015166:	460c      	mov	r4, r1
 8015168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801516c:	f000 f89c 	bl	80152a8 <_read_r>
 8015170:	2800      	cmp	r0, #0
 8015172:	bfab      	itete	ge
 8015174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015176:	89a3      	ldrhlt	r3, [r4, #12]
 8015178:	181b      	addge	r3, r3, r0
 801517a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801517e:	bfac      	ite	ge
 8015180:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015182:	81a3      	strhlt	r3, [r4, #12]
 8015184:	bd10      	pop	{r4, pc}

08015186 <__swrite>:
 8015186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801518a:	461f      	mov	r7, r3
 801518c:	898b      	ldrh	r3, [r1, #12]
 801518e:	05db      	lsls	r3, r3, #23
 8015190:	4605      	mov	r5, r0
 8015192:	460c      	mov	r4, r1
 8015194:	4616      	mov	r6, r2
 8015196:	d505      	bpl.n	80151a4 <__swrite+0x1e>
 8015198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801519c:	2302      	movs	r3, #2
 801519e:	2200      	movs	r2, #0
 80151a0:	f000 f870 	bl	8015284 <_lseek_r>
 80151a4:	89a3      	ldrh	r3, [r4, #12]
 80151a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80151ae:	81a3      	strh	r3, [r4, #12]
 80151b0:	4632      	mov	r2, r6
 80151b2:	463b      	mov	r3, r7
 80151b4:	4628      	mov	r0, r5
 80151b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151ba:	f000 b8ab 	b.w	8015314 <_write_r>

080151be <__sseek>:
 80151be:	b510      	push	{r4, lr}
 80151c0:	460c      	mov	r4, r1
 80151c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151c6:	f000 f85d 	bl	8015284 <_lseek_r>
 80151ca:	1c43      	adds	r3, r0, #1
 80151cc:	89a3      	ldrh	r3, [r4, #12]
 80151ce:	bf15      	itete	ne
 80151d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80151d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80151d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80151da:	81a3      	strheq	r3, [r4, #12]
 80151dc:	bf18      	it	ne
 80151de:	81a3      	strhne	r3, [r4, #12]
 80151e0:	bd10      	pop	{r4, pc}

080151e2 <__sclose>:
 80151e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151e6:	f000 b83d 	b.w	8015264 <_close_r>

080151ea <memset>:
 80151ea:	4402      	add	r2, r0
 80151ec:	4603      	mov	r3, r0
 80151ee:	4293      	cmp	r3, r2
 80151f0:	d100      	bne.n	80151f4 <memset+0xa>
 80151f2:	4770      	bx	lr
 80151f4:	f803 1b01 	strb.w	r1, [r3], #1
 80151f8:	e7f9      	b.n	80151ee <memset+0x4>

080151fa <_raise_r>:
 80151fa:	291f      	cmp	r1, #31
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	4605      	mov	r5, r0
 8015200:	460c      	mov	r4, r1
 8015202:	d904      	bls.n	801520e <_raise_r+0x14>
 8015204:	2316      	movs	r3, #22
 8015206:	6003      	str	r3, [r0, #0]
 8015208:	f04f 30ff 	mov.w	r0, #4294967295
 801520c:	bd38      	pop	{r3, r4, r5, pc}
 801520e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015210:	b112      	cbz	r2, 8015218 <_raise_r+0x1e>
 8015212:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015216:	b94b      	cbnz	r3, 801522c <_raise_r+0x32>
 8015218:	4628      	mov	r0, r5
 801521a:	f000 f869 	bl	80152f0 <_getpid_r>
 801521e:	4622      	mov	r2, r4
 8015220:	4601      	mov	r1, r0
 8015222:	4628      	mov	r0, r5
 8015224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015228:	f000 b850 	b.w	80152cc <_kill_r>
 801522c:	2b01      	cmp	r3, #1
 801522e:	d00a      	beq.n	8015246 <_raise_r+0x4c>
 8015230:	1c59      	adds	r1, r3, #1
 8015232:	d103      	bne.n	801523c <_raise_r+0x42>
 8015234:	2316      	movs	r3, #22
 8015236:	6003      	str	r3, [r0, #0]
 8015238:	2001      	movs	r0, #1
 801523a:	e7e7      	b.n	801520c <_raise_r+0x12>
 801523c:	2100      	movs	r1, #0
 801523e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015242:	4620      	mov	r0, r4
 8015244:	4798      	blx	r3
 8015246:	2000      	movs	r0, #0
 8015248:	e7e0      	b.n	801520c <_raise_r+0x12>
	...

0801524c <raise>:
 801524c:	4b02      	ldr	r3, [pc, #8]	@ (8015258 <raise+0xc>)
 801524e:	4601      	mov	r1, r0
 8015250:	6818      	ldr	r0, [r3, #0]
 8015252:	f7ff bfd2 	b.w	80151fa <_raise_r>
 8015256:	bf00      	nop
 8015258:	2000003c 	.word	0x2000003c

0801525c <_localeconv_r>:
 801525c:	4800      	ldr	r0, [pc, #0]	@ (8015260 <_localeconv_r+0x4>)
 801525e:	4770      	bx	lr
 8015260:	2000017c 	.word	0x2000017c

08015264 <_close_r>:
 8015264:	b538      	push	{r3, r4, r5, lr}
 8015266:	4d06      	ldr	r5, [pc, #24]	@ (8015280 <_close_r+0x1c>)
 8015268:	2300      	movs	r3, #0
 801526a:	4604      	mov	r4, r0
 801526c:	4608      	mov	r0, r1
 801526e:	602b      	str	r3, [r5, #0]
 8015270:	f7f8 ff28 	bl	800e0c4 <_close>
 8015274:	1c43      	adds	r3, r0, #1
 8015276:	d102      	bne.n	801527e <_close_r+0x1a>
 8015278:	682b      	ldr	r3, [r5, #0]
 801527a:	b103      	cbz	r3, 801527e <_close_r+0x1a>
 801527c:	6023      	str	r3, [r4, #0]
 801527e:	bd38      	pop	{r3, r4, r5, pc}
 8015280:	200006dc 	.word	0x200006dc

08015284 <_lseek_r>:
 8015284:	b538      	push	{r3, r4, r5, lr}
 8015286:	4d07      	ldr	r5, [pc, #28]	@ (80152a4 <_lseek_r+0x20>)
 8015288:	4604      	mov	r4, r0
 801528a:	4608      	mov	r0, r1
 801528c:	4611      	mov	r1, r2
 801528e:	2200      	movs	r2, #0
 8015290:	602a      	str	r2, [r5, #0]
 8015292:	461a      	mov	r2, r3
 8015294:	f7f8 ff3d 	bl	800e112 <_lseek>
 8015298:	1c43      	adds	r3, r0, #1
 801529a:	d102      	bne.n	80152a2 <_lseek_r+0x1e>
 801529c:	682b      	ldr	r3, [r5, #0]
 801529e:	b103      	cbz	r3, 80152a2 <_lseek_r+0x1e>
 80152a0:	6023      	str	r3, [r4, #0]
 80152a2:	bd38      	pop	{r3, r4, r5, pc}
 80152a4:	200006dc 	.word	0x200006dc

080152a8 <_read_r>:
 80152a8:	b538      	push	{r3, r4, r5, lr}
 80152aa:	4d07      	ldr	r5, [pc, #28]	@ (80152c8 <_read_r+0x20>)
 80152ac:	4604      	mov	r4, r0
 80152ae:	4608      	mov	r0, r1
 80152b0:	4611      	mov	r1, r2
 80152b2:	2200      	movs	r2, #0
 80152b4:	602a      	str	r2, [r5, #0]
 80152b6:	461a      	mov	r2, r3
 80152b8:	f7f8 fecb 	bl	800e052 <_read>
 80152bc:	1c43      	adds	r3, r0, #1
 80152be:	d102      	bne.n	80152c6 <_read_r+0x1e>
 80152c0:	682b      	ldr	r3, [r5, #0]
 80152c2:	b103      	cbz	r3, 80152c6 <_read_r+0x1e>
 80152c4:	6023      	str	r3, [r4, #0]
 80152c6:	bd38      	pop	{r3, r4, r5, pc}
 80152c8:	200006dc 	.word	0x200006dc

080152cc <_kill_r>:
 80152cc:	b538      	push	{r3, r4, r5, lr}
 80152ce:	4d07      	ldr	r5, [pc, #28]	@ (80152ec <_kill_r+0x20>)
 80152d0:	2300      	movs	r3, #0
 80152d2:	4604      	mov	r4, r0
 80152d4:	4608      	mov	r0, r1
 80152d6:	4611      	mov	r1, r2
 80152d8:	602b      	str	r3, [r5, #0]
 80152da:	f7f8 fe9f 	bl	800e01c <_kill>
 80152de:	1c43      	adds	r3, r0, #1
 80152e0:	d102      	bne.n	80152e8 <_kill_r+0x1c>
 80152e2:	682b      	ldr	r3, [r5, #0]
 80152e4:	b103      	cbz	r3, 80152e8 <_kill_r+0x1c>
 80152e6:	6023      	str	r3, [r4, #0]
 80152e8:	bd38      	pop	{r3, r4, r5, pc}
 80152ea:	bf00      	nop
 80152ec:	200006dc 	.word	0x200006dc

080152f0 <_getpid_r>:
 80152f0:	f7f8 be8c 	b.w	800e00c <_getpid>

080152f4 <_sbrk_r>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	4d06      	ldr	r5, [pc, #24]	@ (8015310 <_sbrk_r+0x1c>)
 80152f8:	2300      	movs	r3, #0
 80152fa:	4604      	mov	r4, r0
 80152fc:	4608      	mov	r0, r1
 80152fe:	602b      	str	r3, [r5, #0]
 8015300:	f7f8 ff14 	bl	800e12c <_sbrk>
 8015304:	1c43      	adds	r3, r0, #1
 8015306:	d102      	bne.n	801530e <_sbrk_r+0x1a>
 8015308:	682b      	ldr	r3, [r5, #0]
 801530a:	b103      	cbz	r3, 801530e <_sbrk_r+0x1a>
 801530c:	6023      	str	r3, [r4, #0]
 801530e:	bd38      	pop	{r3, r4, r5, pc}
 8015310:	200006dc 	.word	0x200006dc

08015314 <_write_r>:
 8015314:	b538      	push	{r3, r4, r5, lr}
 8015316:	4d07      	ldr	r5, [pc, #28]	@ (8015334 <_write_r+0x20>)
 8015318:	4604      	mov	r4, r0
 801531a:	4608      	mov	r0, r1
 801531c:	4611      	mov	r1, r2
 801531e:	2200      	movs	r2, #0
 8015320:	602a      	str	r2, [r5, #0]
 8015322:	461a      	mov	r2, r3
 8015324:	f7f8 feb2 	bl	800e08c <_write>
 8015328:	1c43      	adds	r3, r0, #1
 801532a:	d102      	bne.n	8015332 <_write_r+0x1e>
 801532c:	682b      	ldr	r3, [r5, #0]
 801532e:	b103      	cbz	r3, 8015332 <_write_r+0x1e>
 8015330:	6023      	str	r3, [r4, #0]
 8015332:	bd38      	pop	{r3, r4, r5, pc}
 8015334:	200006dc 	.word	0x200006dc

08015338 <__errno>:
 8015338:	4b01      	ldr	r3, [pc, #4]	@ (8015340 <__errno+0x8>)
 801533a:	6818      	ldr	r0, [r3, #0]
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop
 8015340:	2000003c 	.word	0x2000003c

08015344 <__libc_init_array>:
 8015344:	b570      	push	{r4, r5, r6, lr}
 8015346:	4d0d      	ldr	r5, [pc, #52]	@ (801537c <__libc_init_array+0x38>)
 8015348:	4c0d      	ldr	r4, [pc, #52]	@ (8015380 <__libc_init_array+0x3c>)
 801534a:	1b64      	subs	r4, r4, r5
 801534c:	10a4      	asrs	r4, r4, #2
 801534e:	2600      	movs	r6, #0
 8015350:	42a6      	cmp	r6, r4
 8015352:	d109      	bne.n	8015368 <__libc_init_array+0x24>
 8015354:	4d0b      	ldr	r5, [pc, #44]	@ (8015384 <__libc_init_array+0x40>)
 8015356:	4c0c      	ldr	r4, [pc, #48]	@ (8015388 <__libc_init_array+0x44>)
 8015358:	f001 fdb2 	bl	8016ec0 <_init>
 801535c:	1b64      	subs	r4, r4, r5
 801535e:	10a4      	asrs	r4, r4, #2
 8015360:	2600      	movs	r6, #0
 8015362:	42a6      	cmp	r6, r4
 8015364:	d105      	bne.n	8015372 <__libc_init_array+0x2e>
 8015366:	bd70      	pop	{r4, r5, r6, pc}
 8015368:	f855 3b04 	ldr.w	r3, [r5], #4
 801536c:	4798      	blx	r3
 801536e:	3601      	adds	r6, #1
 8015370:	e7ee      	b.n	8015350 <__libc_init_array+0xc>
 8015372:	f855 3b04 	ldr.w	r3, [r5], #4
 8015376:	4798      	blx	r3
 8015378:	3601      	adds	r6, #1
 801537a:	e7f2      	b.n	8015362 <__libc_init_array+0x1e>
 801537c:	0801a91c 	.word	0x0801a91c
 8015380:	0801a91c 	.word	0x0801a91c
 8015384:	0801a91c 	.word	0x0801a91c
 8015388:	0801a928 	.word	0x0801a928

0801538c <__retarget_lock_init_recursive>:
 801538c:	4770      	bx	lr

0801538e <__retarget_lock_acquire_recursive>:
 801538e:	4770      	bx	lr

08015390 <__retarget_lock_release_recursive>:
 8015390:	4770      	bx	lr

08015392 <memcpy>:
 8015392:	440a      	add	r2, r1
 8015394:	4291      	cmp	r1, r2
 8015396:	f100 33ff 	add.w	r3, r0, #4294967295
 801539a:	d100      	bne.n	801539e <memcpy+0xc>
 801539c:	4770      	bx	lr
 801539e:	b510      	push	{r4, lr}
 80153a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80153a8:	4291      	cmp	r1, r2
 80153aa:	d1f9      	bne.n	80153a0 <memcpy+0xe>
 80153ac:	bd10      	pop	{r4, pc}

080153ae <quorem>:
 80153ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b2:	6903      	ldr	r3, [r0, #16]
 80153b4:	690c      	ldr	r4, [r1, #16]
 80153b6:	42a3      	cmp	r3, r4
 80153b8:	4607      	mov	r7, r0
 80153ba:	db7e      	blt.n	80154ba <quorem+0x10c>
 80153bc:	3c01      	subs	r4, #1
 80153be:	f101 0814 	add.w	r8, r1, #20
 80153c2:	00a3      	lsls	r3, r4, #2
 80153c4:	f100 0514 	add.w	r5, r0, #20
 80153c8:	9300      	str	r3, [sp, #0]
 80153ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80153ce:	9301      	str	r3, [sp, #4]
 80153d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80153d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80153d8:	3301      	adds	r3, #1
 80153da:	429a      	cmp	r2, r3
 80153dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80153e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80153e4:	d32e      	bcc.n	8015444 <quorem+0x96>
 80153e6:	f04f 0a00 	mov.w	sl, #0
 80153ea:	46c4      	mov	ip, r8
 80153ec:	46ae      	mov	lr, r5
 80153ee:	46d3      	mov	fp, sl
 80153f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80153f4:	b298      	uxth	r0, r3
 80153f6:	fb06 a000 	mla	r0, r6, r0, sl
 80153fa:	0c02      	lsrs	r2, r0, #16
 80153fc:	0c1b      	lsrs	r3, r3, #16
 80153fe:	fb06 2303 	mla	r3, r6, r3, r2
 8015402:	f8de 2000 	ldr.w	r2, [lr]
 8015406:	b280      	uxth	r0, r0
 8015408:	b292      	uxth	r2, r2
 801540a:	1a12      	subs	r2, r2, r0
 801540c:	445a      	add	r2, fp
 801540e:	f8de 0000 	ldr.w	r0, [lr]
 8015412:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015416:	b29b      	uxth	r3, r3
 8015418:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801541c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015420:	b292      	uxth	r2, r2
 8015422:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015426:	45e1      	cmp	r9, ip
 8015428:	f84e 2b04 	str.w	r2, [lr], #4
 801542c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015430:	d2de      	bcs.n	80153f0 <quorem+0x42>
 8015432:	9b00      	ldr	r3, [sp, #0]
 8015434:	58eb      	ldr	r3, [r5, r3]
 8015436:	b92b      	cbnz	r3, 8015444 <quorem+0x96>
 8015438:	9b01      	ldr	r3, [sp, #4]
 801543a:	3b04      	subs	r3, #4
 801543c:	429d      	cmp	r5, r3
 801543e:	461a      	mov	r2, r3
 8015440:	d32f      	bcc.n	80154a2 <quorem+0xf4>
 8015442:	613c      	str	r4, [r7, #16]
 8015444:	4638      	mov	r0, r7
 8015446:	f001 f8c3 	bl	80165d0 <__mcmp>
 801544a:	2800      	cmp	r0, #0
 801544c:	db25      	blt.n	801549a <quorem+0xec>
 801544e:	4629      	mov	r1, r5
 8015450:	2000      	movs	r0, #0
 8015452:	f858 2b04 	ldr.w	r2, [r8], #4
 8015456:	f8d1 c000 	ldr.w	ip, [r1]
 801545a:	fa1f fe82 	uxth.w	lr, r2
 801545e:	fa1f f38c 	uxth.w	r3, ip
 8015462:	eba3 030e 	sub.w	r3, r3, lr
 8015466:	4403      	add	r3, r0
 8015468:	0c12      	lsrs	r2, r2, #16
 801546a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801546e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015472:	b29b      	uxth	r3, r3
 8015474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015478:	45c1      	cmp	r9, r8
 801547a:	f841 3b04 	str.w	r3, [r1], #4
 801547e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015482:	d2e6      	bcs.n	8015452 <quorem+0xa4>
 8015484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015488:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801548c:	b922      	cbnz	r2, 8015498 <quorem+0xea>
 801548e:	3b04      	subs	r3, #4
 8015490:	429d      	cmp	r5, r3
 8015492:	461a      	mov	r2, r3
 8015494:	d30b      	bcc.n	80154ae <quorem+0x100>
 8015496:	613c      	str	r4, [r7, #16]
 8015498:	3601      	adds	r6, #1
 801549a:	4630      	mov	r0, r6
 801549c:	b003      	add	sp, #12
 801549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154a2:	6812      	ldr	r2, [r2, #0]
 80154a4:	3b04      	subs	r3, #4
 80154a6:	2a00      	cmp	r2, #0
 80154a8:	d1cb      	bne.n	8015442 <quorem+0x94>
 80154aa:	3c01      	subs	r4, #1
 80154ac:	e7c6      	b.n	801543c <quorem+0x8e>
 80154ae:	6812      	ldr	r2, [r2, #0]
 80154b0:	3b04      	subs	r3, #4
 80154b2:	2a00      	cmp	r2, #0
 80154b4:	d1ef      	bne.n	8015496 <quorem+0xe8>
 80154b6:	3c01      	subs	r4, #1
 80154b8:	e7ea      	b.n	8015490 <quorem+0xe2>
 80154ba:	2000      	movs	r0, #0
 80154bc:	e7ee      	b.n	801549c <quorem+0xee>
	...

080154c0 <_dtoa_r>:
 80154c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c4:	69c7      	ldr	r7, [r0, #28]
 80154c6:	b099      	sub	sp, #100	@ 0x64
 80154c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80154cc:	ec55 4b10 	vmov	r4, r5, d0
 80154d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80154d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80154d4:	4683      	mov	fp, r0
 80154d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80154d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80154da:	b97f      	cbnz	r7, 80154fc <_dtoa_r+0x3c>
 80154dc:	2010      	movs	r0, #16
 80154de:	f7ff f85b 	bl	8014598 <malloc>
 80154e2:	4602      	mov	r2, r0
 80154e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80154e8:	b920      	cbnz	r0, 80154f4 <_dtoa_r+0x34>
 80154ea:	4ba7      	ldr	r3, [pc, #668]	@ (8015788 <_dtoa_r+0x2c8>)
 80154ec:	21ef      	movs	r1, #239	@ 0xef
 80154ee:	48a7      	ldr	r0, [pc, #668]	@ (801578c <_dtoa_r+0x2cc>)
 80154f0:	f001 fa22 	bl	8016938 <__assert_func>
 80154f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80154f8:	6007      	str	r7, [r0, #0]
 80154fa:	60c7      	str	r7, [r0, #12]
 80154fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015500:	6819      	ldr	r1, [r3, #0]
 8015502:	b159      	cbz	r1, 801551c <_dtoa_r+0x5c>
 8015504:	685a      	ldr	r2, [r3, #4]
 8015506:	604a      	str	r2, [r1, #4]
 8015508:	2301      	movs	r3, #1
 801550a:	4093      	lsls	r3, r2
 801550c:	608b      	str	r3, [r1, #8]
 801550e:	4658      	mov	r0, fp
 8015510:	f000 fe24 	bl	801615c <_Bfree>
 8015514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015518:	2200      	movs	r2, #0
 801551a:	601a      	str	r2, [r3, #0]
 801551c:	1e2b      	subs	r3, r5, #0
 801551e:	bfb9      	ittee	lt
 8015520:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015524:	9303      	strlt	r3, [sp, #12]
 8015526:	2300      	movge	r3, #0
 8015528:	6033      	strge	r3, [r6, #0]
 801552a:	9f03      	ldr	r7, [sp, #12]
 801552c:	4b98      	ldr	r3, [pc, #608]	@ (8015790 <_dtoa_r+0x2d0>)
 801552e:	bfbc      	itt	lt
 8015530:	2201      	movlt	r2, #1
 8015532:	6032      	strlt	r2, [r6, #0]
 8015534:	43bb      	bics	r3, r7
 8015536:	d112      	bne.n	801555e <_dtoa_r+0x9e>
 8015538:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801553a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801553e:	6013      	str	r3, [r2, #0]
 8015540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015544:	4323      	orrs	r3, r4
 8015546:	f000 854d 	beq.w	8015fe4 <_dtoa_r+0xb24>
 801554a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801554c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80157a4 <_dtoa_r+0x2e4>
 8015550:	2b00      	cmp	r3, #0
 8015552:	f000 854f 	beq.w	8015ff4 <_dtoa_r+0xb34>
 8015556:	f10a 0303 	add.w	r3, sl, #3
 801555a:	f000 bd49 	b.w	8015ff0 <_dtoa_r+0xb30>
 801555e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015562:	2200      	movs	r2, #0
 8015564:	ec51 0b17 	vmov	r0, r1, d7
 8015568:	2300      	movs	r3, #0
 801556a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801556e:	f7eb fadb 	bl	8000b28 <__aeabi_dcmpeq>
 8015572:	4680      	mov	r8, r0
 8015574:	b158      	cbz	r0, 801558e <_dtoa_r+0xce>
 8015576:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015578:	2301      	movs	r3, #1
 801557a:	6013      	str	r3, [r2, #0]
 801557c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801557e:	b113      	cbz	r3, 8015586 <_dtoa_r+0xc6>
 8015580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015582:	4b84      	ldr	r3, [pc, #528]	@ (8015794 <_dtoa_r+0x2d4>)
 8015584:	6013      	str	r3, [r2, #0]
 8015586:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80157a8 <_dtoa_r+0x2e8>
 801558a:	f000 bd33 	b.w	8015ff4 <_dtoa_r+0xb34>
 801558e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015592:	aa16      	add	r2, sp, #88	@ 0x58
 8015594:	a917      	add	r1, sp, #92	@ 0x5c
 8015596:	4658      	mov	r0, fp
 8015598:	f001 f8ca 	bl	8016730 <__d2b>
 801559c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80155a0:	4681      	mov	r9, r0
 80155a2:	2e00      	cmp	r6, #0
 80155a4:	d077      	beq.n	8015696 <_dtoa_r+0x1d6>
 80155a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80155ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80155b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80155b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80155bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80155c0:	4619      	mov	r1, r3
 80155c2:	2200      	movs	r2, #0
 80155c4:	4b74      	ldr	r3, [pc, #464]	@ (8015798 <_dtoa_r+0x2d8>)
 80155c6:	f7ea fe8f 	bl	80002e8 <__aeabi_dsub>
 80155ca:	a369      	add	r3, pc, #420	@ (adr r3, 8015770 <_dtoa_r+0x2b0>)
 80155cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d0:	f7eb f842 	bl	8000658 <__aeabi_dmul>
 80155d4:	a368      	add	r3, pc, #416	@ (adr r3, 8015778 <_dtoa_r+0x2b8>)
 80155d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155da:	f7ea fe87 	bl	80002ec <__adddf3>
 80155de:	4604      	mov	r4, r0
 80155e0:	4630      	mov	r0, r6
 80155e2:	460d      	mov	r5, r1
 80155e4:	f7ea ffce 	bl	8000584 <__aeabi_i2d>
 80155e8:	a365      	add	r3, pc, #404	@ (adr r3, 8015780 <_dtoa_r+0x2c0>)
 80155ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ee:	f7eb f833 	bl	8000658 <__aeabi_dmul>
 80155f2:	4602      	mov	r2, r0
 80155f4:	460b      	mov	r3, r1
 80155f6:	4620      	mov	r0, r4
 80155f8:	4629      	mov	r1, r5
 80155fa:	f7ea fe77 	bl	80002ec <__adddf3>
 80155fe:	4604      	mov	r4, r0
 8015600:	460d      	mov	r5, r1
 8015602:	f7eb fad9 	bl	8000bb8 <__aeabi_d2iz>
 8015606:	2200      	movs	r2, #0
 8015608:	4607      	mov	r7, r0
 801560a:	2300      	movs	r3, #0
 801560c:	4620      	mov	r0, r4
 801560e:	4629      	mov	r1, r5
 8015610:	f7eb fa94 	bl	8000b3c <__aeabi_dcmplt>
 8015614:	b140      	cbz	r0, 8015628 <_dtoa_r+0x168>
 8015616:	4638      	mov	r0, r7
 8015618:	f7ea ffb4 	bl	8000584 <__aeabi_i2d>
 801561c:	4622      	mov	r2, r4
 801561e:	462b      	mov	r3, r5
 8015620:	f7eb fa82 	bl	8000b28 <__aeabi_dcmpeq>
 8015624:	b900      	cbnz	r0, 8015628 <_dtoa_r+0x168>
 8015626:	3f01      	subs	r7, #1
 8015628:	2f16      	cmp	r7, #22
 801562a:	d851      	bhi.n	80156d0 <_dtoa_r+0x210>
 801562c:	4b5b      	ldr	r3, [pc, #364]	@ (801579c <_dtoa_r+0x2dc>)
 801562e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801563a:	f7eb fa7f 	bl	8000b3c <__aeabi_dcmplt>
 801563e:	2800      	cmp	r0, #0
 8015640:	d048      	beq.n	80156d4 <_dtoa_r+0x214>
 8015642:	3f01      	subs	r7, #1
 8015644:	2300      	movs	r3, #0
 8015646:	9312      	str	r3, [sp, #72]	@ 0x48
 8015648:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801564a:	1b9b      	subs	r3, r3, r6
 801564c:	1e5a      	subs	r2, r3, #1
 801564e:	bf44      	itt	mi
 8015650:	f1c3 0801 	rsbmi	r8, r3, #1
 8015654:	2300      	movmi	r3, #0
 8015656:	9208      	str	r2, [sp, #32]
 8015658:	bf54      	ite	pl
 801565a:	f04f 0800 	movpl.w	r8, #0
 801565e:	9308      	strmi	r3, [sp, #32]
 8015660:	2f00      	cmp	r7, #0
 8015662:	db39      	blt.n	80156d8 <_dtoa_r+0x218>
 8015664:	9b08      	ldr	r3, [sp, #32]
 8015666:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015668:	443b      	add	r3, r7
 801566a:	9308      	str	r3, [sp, #32]
 801566c:	2300      	movs	r3, #0
 801566e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015672:	2b09      	cmp	r3, #9
 8015674:	d864      	bhi.n	8015740 <_dtoa_r+0x280>
 8015676:	2b05      	cmp	r3, #5
 8015678:	bfc4      	itt	gt
 801567a:	3b04      	subgt	r3, #4
 801567c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801567e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015680:	f1a3 0302 	sub.w	r3, r3, #2
 8015684:	bfcc      	ite	gt
 8015686:	2400      	movgt	r4, #0
 8015688:	2401      	movle	r4, #1
 801568a:	2b03      	cmp	r3, #3
 801568c:	d863      	bhi.n	8015756 <_dtoa_r+0x296>
 801568e:	e8df f003 	tbb	[pc, r3]
 8015692:	372a      	.short	0x372a
 8015694:	5535      	.short	0x5535
 8015696:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801569a:	441e      	add	r6, r3
 801569c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80156a0:	2b20      	cmp	r3, #32
 80156a2:	bfc1      	itttt	gt
 80156a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80156a8:	409f      	lslgt	r7, r3
 80156aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80156ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80156b2:	bfd6      	itet	le
 80156b4:	f1c3 0320 	rsble	r3, r3, #32
 80156b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80156bc:	fa04 f003 	lslle.w	r0, r4, r3
 80156c0:	f7ea ff50 	bl	8000564 <__aeabi_ui2d>
 80156c4:	2201      	movs	r2, #1
 80156c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80156ca:	3e01      	subs	r6, #1
 80156cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80156ce:	e777      	b.n	80155c0 <_dtoa_r+0x100>
 80156d0:	2301      	movs	r3, #1
 80156d2:	e7b8      	b.n	8015646 <_dtoa_r+0x186>
 80156d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80156d6:	e7b7      	b.n	8015648 <_dtoa_r+0x188>
 80156d8:	427b      	negs	r3, r7
 80156da:	930a      	str	r3, [sp, #40]	@ 0x28
 80156dc:	2300      	movs	r3, #0
 80156de:	eba8 0807 	sub.w	r8, r8, r7
 80156e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80156e4:	e7c4      	b.n	8015670 <_dtoa_r+0x1b0>
 80156e6:	2300      	movs	r3, #0
 80156e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80156ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	dc35      	bgt.n	801575c <_dtoa_r+0x29c>
 80156f0:	2301      	movs	r3, #1
 80156f2:	9300      	str	r3, [sp, #0]
 80156f4:	9307      	str	r3, [sp, #28]
 80156f6:	461a      	mov	r2, r3
 80156f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80156fa:	e00b      	b.n	8015714 <_dtoa_r+0x254>
 80156fc:	2301      	movs	r3, #1
 80156fe:	e7f3      	b.n	80156e8 <_dtoa_r+0x228>
 8015700:	2300      	movs	r3, #0
 8015702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015706:	18fb      	adds	r3, r7, r3
 8015708:	9300      	str	r3, [sp, #0]
 801570a:	3301      	adds	r3, #1
 801570c:	2b01      	cmp	r3, #1
 801570e:	9307      	str	r3, [sp, #28]
 8015710:	bfb8      	it	lt
 8015712:	2301      	movlt	r3, #1
 8015714:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015718:	2100      	movs	r1, #0
 801571a:	2204      	movs	r2, #4
 801571c:	f102 0514 	add.w	r5, r2, #20
 8015720:	429d      	cmp	r5, r3
 8015722:	d91f      	bls.n	8015764 <_dtoa_r+0x2a4>
 8015724:	6041      	str	r1, [r0, #4]
 8015726:	4658      	mov	r0, fp
 8015728:	f000 fcd8 	bl	80160dc <_Balloc>
 801572c:	4682      	mov	sl, r0
 801572e:	2800      	cmp	r0, #0
 8015730:	d13c      	bne.n	80157ac <_dtoa_r+0x2ec>
 8015732:	4b1b      	ldr	r3, [pc, #108]	@ (80157a0 <_dtoa_r+0x2e0>)
 8015734:	4602      	mov	r2, r0
 8015736:	f240 11af 	movw	r1, #431	@ 0x1af
 801573a:	e6d8      	b.n	80154ee <_dtoa_r+0x2e>
 801573c:	2301      	movs	r3, #1
 801573e:	e7e0      	b.n	8015702 <_dtoa_r+0x242>
 8015740:	2401      	movs	r4, #1
 8015742:	2300      	movs	r3, #0
 8015744:	9309      	str	r3, [sp, #36]	@ 0x24
 8015746:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015748:	f04f 33ff 	mov.w	r3, #4294967295
 801574c:	9300      	str	r3, [sp, #0]
 801574e:	9307      	str	r3, [sp, #28]
 8015750:	2200      	movs	r2, #0
 8015752:	2312      	movs	r3, #18
 8015754:	e7d0      	b.n	80156f8 <_dtoa_r+0x238>
 8015756:	2301      	movs	r3, #1
 8015758:	930b      	str	r3, [sp, #44]	@ 0x2c
 801575a:	e7f5      	b.n	8015748 <_dtoa_r+0x288>
 801575c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	9307      	str	r3, [sp, #28]
 8015762:	e7d7      	b.n	8015714 <_dtoa_r+0x254>
 8015764:	3101      	adds	r1, #1
 8015766:	0052      	lsls	r2, r2, #1
 8015768:	e7d8      	b.n	801571c <_dtoa_r+0x25c>
 801576a:	bf00      	nop
 801576c:	f3af 8000 	nop.w
 8015770:	636f4361 	.word	0x636f4361
 8015774:	3fd287a7 	.word	0x3fd287a7
 8015778:	8b60c8b3 	.word	0x8b60c8b3
 801577c:	3fc68a28 	.word	0x3fc68a28
 8015780:	509f79fb 	.word	0x509f79fb
 8015784:	3fd34413 	.word	0x3fd34413
 8015788:	080185f1 	.word	0x080185f1
 801578c:	08018608 	.word	0x08018608
 8015790:	7ff00000 	.word	0x7ff00000
 8015794:	080185c1 	.word	0x080185c1
 8015798:	3ff80000 	.word	0x3ff80000
 801579c:	08018700 	.word	0x08018700
 80157a0:	08018660 	.word	0x08018660
 80157a4:	080185ed 	.word	0x080185ed
 80157a8:	080185c0 	.word	0x080185c0
 80157ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80157b0:	6018      	str	r0, [r3, #0]
 80157b2:	9b07      	ldr	r3, [sp, #28]
 80157b4:	2b0e      	cmp	r3, #14
 80157b6:	f200 80a4 	bhi.w	8015902 <_dtoa_r+0x442>
 80157ba:	2c00      	cmp	r4, #0
 80157bc:	f000 80a1 	beq.w	8015902 <_dtoa_r+0x442>
 80157c0:	2f00      	cmp	r7, #0
 80157c2:	dd33      	ble.n	801582c <_dtoa_r+0x36c>
 80157c4:	4bad      	ldr	r3, [pc, #692]	@ (8015a7c <_dtoa_r+0x5bc>)
 80157c6:	f007 020f 	and.w	r2, r7, #15
 80157ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80157ce:	ed93 7b00 	vldr	d7, [r3]
 80157d2:	05f8      	lsls	r0, r7, #23
 80157d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80157d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80157dc:	d516      	bpl.n	801580c <_dtoa_r+0x34c>
 80157de:	4ba8      	ldr	r3, [pc, #672]	@ (8015a80 <_dtoa_r+0x5c0>)
 80157e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80157e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80157e8:	f7eb f860 	bl	80008ac <__aeabi_ddiv>
 80157ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157f0:	f004 040f 	and.w	r4, r4, #15
 80157f4:	2603      	movs	r6, #3
 80157f6:	4da2      	ldr	r5, [pc, #648]	@ (8015a80 <_dtoa_r+0x5c0>)
 80157f8:	b954      	cbnz	r4, 8015810 <_dtoa_r+0x350>
 80157fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015802:	f7eb f853 	bl	80008ac <__aeabi_ddiv>
 8015806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801580a:	e028      	b.n	801585e <_dtoa_r+0x39e>
 801580c:	2602      	movs	r6, #2
 801580e:	e7f2      	b.n	80157f6 <_dtoa_r+0x336>
 8015810:	07e1      	lsls	r1, r4, #31
 8015812:	d508      	bpl.n	8015826 <_dtoa_r+0x366>
 8015814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015818:	e9d5 2300 	ldrd	r2, r3, [r5]
 801581c:	f7ea ff1c 	bl	8000658 <__aeabi_dmul>
 8015820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015824:	3601      	adds	r6, #1
 8015826:	1064      	asrs	r4, r4, #1
 8015828:	3508      	adds	r5, #8
 801582a:	e7e5      	b.n	80157f8 <_dtoa_r+0x338>
 801582c:	f000 80d2 	beq.w	80159d4 <_dtoa_r+0x514>
 8015830:	427c      	negs	r4, r7
 8015832:	4b92      	ldr	r3, [pc, #584]	@ (8015a7c <_dtoa_r+0x5bc>)
 8015834:	4d92      	ldr	r5, [pc, #584]	@ (8015a80 <_dtoa_r+0x5c0>)
 8015836:	f004 020f 	and.w	r2, r4, #15
 801583a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015846:	f7ea ff07 	bl	8000658 <__aeabi_dmul>
 801584a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801584e:	1124      	asrs	r4, r4, #4
 8015850:	2300      	movs	r3, #0
 8015852:	2602      	movs	r6, #2
 8015854:	2c00      	cmp	r4, #0
 8015856:	f040 80b2 	bne.w	80159be <_dtoa_r+0x4fe>
 801585a:	2b00      	cmp	r3, #0
 801585c:	d1d3      	bne.n	8015806 <_dtoa_r+0x346>
 801585e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015860:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015864:	2b00      	cmp	r3, #0
 8015866:	f000 80b7 	beq.w	80159d8 <_dtoa_r+0x518>
 801586a:	4b86      	ldr	r3, [pc, #536]	@ (8015a84 <_dtoa_r+0x5c4>)
 801586c:	2200      	movs	r2, #0
 801586e:	4620      	mov	r0, r4
 8015870:	4629      	mov	r1, r5
 8015872:	f7eb f963 	bl	8000b3c <__aeabi_dcmplt>
 8015876:	2800      	cmp	r0, #0
 8015878:	f000 80ae 	beq.w	80159d8 <_dtoa_r+0x518>
 801587c:	9b07      	ldr	r3, [sp, #28]
 801587e:	2b00      	cmp	r3, #0
 8015880:	f000 80aa 	beq.w	80159d8 <_dtoa_r+0x518>
 8015884:	9b00      	ldr	r3, [sp, #0]
 8015886:	2b00      	cmp	r3, #0
 8015888:	dd37      	ble.n	80158fa <_dtoa_r+0x43a>
 801588a:	1e7b      	subs	r3, r7, #1
 801588c:	9304      	str	r3, [sp, #16]
 801588e:	4620      	mov	r0, r4
 8015890:	4b7d      	ldr	r3, [pc, #500]	@ (8015a88 <_dtoa_r+0x5c8>)
 8015892:	2200      	movs	r2, #0
 8015894:	4629      	mov	r1, r5
 8015896:	f7ea fedf 	bl	8000658 <__aeabi_dmul>
 801589a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801589e:	9c00      	ldr	r4, [sp, #0]
 80158a0:	3601      	adds	r6, #1
 80158a2:	4630      	mov	r0, r6
 80158a4:	f7ea fe6e 	bl	8000584 <__aeabi_i2d>
 80158a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80158ac:	f7ea fed4 	bl	8000658 <__aeabi_dmul>
 80158b0:	4b76      	ldr	r3, [pc, #472]	@ (8015a8c <_dtoa_r+0x5cc>)
 80158b2:	2200      	movs	r2, #0
 80158b4:	f7ea fd1a 	bl	80002ec <__adddf3>
 80158b8:	4605      	mov	r5, r0
 80158ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80158be:	2c00      	cmp	r4, #0
 80158c0:	f040 808d 	bne.w	80159de <_dtoa_r+0x51e>
 80158c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158c8:	4b71      	ldr	r3, [pc, #452]	@ (8015a90 <_dtoa_r+0x5d0>)
 80158ca:	2200      	movs	r2, #0
 80158cc:	f7ea fd0c 	bl	80002e8 <__aeabi_dsub>
 80158d0:	4602      	mov	r2, r0
 80158d2:	460b      	mov	r3, r1
 80158d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80158d8:	462a      	mov	r2, r5
 80158da:	4633      	mov	r3, r6
 80158dc:	f7eb f94c 	bl	8000b78 <__aeabi_dcmpgt>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	f040 828b 	bne.w	8015dfc <_dtoa_r+0x93c>
 80158e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158ea:	462a      	mov	r2, r5
 80158ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80158f0:	f7eb f924 	bl	8000b3c <__aeabi_dcmplt>
 80158f4:	2800      	cmp	r0, #0
 80158f6:	f040 8128 	bne.w	8015b4a <_dtoa_r+0x68a>
 80158fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80158fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015902:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015904:	2b00      	cmp	r3, #0
 8015906:	f2c0 815a 	blt.w	8015bbe <_dtoa_r+0x6fe>
 801590a:	2f0e      	cmp	r7, #14
 801590c:	f300 8157 	bgt.w	8015bbe <_dtoa_r+0x6fe>
 8015910:	4b5a      	ldr	r3, [pc, #360]	@ (8015a7c <_dtoa_r+0x5bc>)
 8015912:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015916:	ed93 7b00 	vldr	d7, [r3]
 801591a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801591c:	2b00      	cmp	r3, #0
 801591e:	ed8d 7b00 	vstr	d7, [sp]
 8015922:	da03      	bge.n	801592c <_dtoa_r+0x46c>
 8015924:	9b07      	ldr	r3, [sp, #28]
 8015926:	2b00      	cmp	r3, #0
 8015928:	f340 8101 	ble.w	8015b2e <_dtoa_r+0x66e>
 801592c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015930:	4656      	mov	r6, sl
 8015932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015936:	4620      	mov	r0, r4
 8015938:	4629      	mov	r1, r5
 801593a:	f7ea ffb7 	bl	80008ac <__aeabi_ddiv>
 801593e:	f7eb f93b 	bl	8000bb8 <__aeabi_d2iz>
 8015942:	4680      	mov	r8, r0
 8015944:	f7ea fe1e 	bl	8000584 <__aeabi_i2d>
 8015948:	e9dd 2300 	ldrd	r2, r3, [sp]
 801594c:	f7ea fe84 	bl	8000658 <__aeabi_dmul>
 8015950:	4602      	mov	r2, r0
 8015952:	460b      	mov	r3, r1
 8015954:	4620      	mov	r0, r4
 8015956:	4629      	mov	r1, r5
 8015958:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801595c:	f7ea fcc4 	bl	80002e8 <__aeabi_dsub>
 8015960:	f806 4b01 	strb.w	r4, [r6], #1
 8015964:	9d07      	ldr	r5, [sp, #28]
 8015966:	eba6 040a 	sub.w	r4, r6, sl
 801596a:	42a5      	cmp	r5, r4
 801596c:	4602      	mov	r2, r0
 801596e:	460b      	mov	r3, r1
 8015970:	f040 8117 	bne.w	8015ba2 <_dtoa_r+0x6e2>
 8015974:	f7ea fcba 	bl	80002ec <__adddf3>
 8015978:	e9dd 2300 	ldrd	r2, r3, [sp]
 801597c:	4604      	mov	r4, r0
 801597e:	460d      	mov	r5, r1
 8015980:	f7eb f8fa 	bl	8000b78 <__aeabi_dcmpgt>
 8015984:	2800      	cmp	r0, #0
 8015986:	f040 80f9 	bne.w	8015b7c <_dtoa_r+0x6bc>
 801598a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801598e:	4620      	mov	r0, r4
 8015990:	4629      	mov	r1, r5
 8015992:	f7eb f8c9 	bl	8000b28 <__aeabi_dcmpeq>
 8015996:	b118      	cbz	r0, 80159a0 <_dtoa_r+0x4e0>
 8015998:	f018 0f01 	tst.w	r8, #1
 801599c:	f040 80ee 	bne.w	8015b7c <_dtoa_r+0x6bc>
 80159a0:	4649      	mov	r1, r9
 80159a2:	4658      	mov	r0, fp
 80159a4:	f000 fbda 	bl	801615c <_Bfree>
 80159a8:	2300      	movs	r3, #0
 80159aa:	7033      	strb	r3, [r6, #0]
 80159ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80159ae:	3701      	adds	r7, #1
 80159b0:	601f      	str	r7, [r3, #0]
 80159b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	f000 831d 	beq.w	8015ff4 <_dtoa_r+0xb34>
 80159ba:	601e      	str	r6, [r3, #0]
 80159bc:	e31a      	b.n	8015ff4 <_dtoa_r+0xb34>
 80159be:	07e2      	lsls	r2, r4, #31
 80159c0:	d505      	bpl.n	80159ce <_dtoa_r+0x50e>
 80159c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80159c6:	f7ea fe47 	bl	8000658 <__aeabi_dmul>
 80159ca:	3601      	adds	r6, #1
 80159cc:	2301      	movs	r3, #1
 80159ce:	1064      	asrs	r4, r4, #1
 80159d0:	3508      	adds	r5, #8
 80159d2:	e73f      	b.n	8015854 <_dtoa_r+0x394>
 80159d4:	2602      	movs	r6, #2
 80159d6:	e742      	b.n	801585e <_dtoa_r+0x39e>
 80159d8:	9c07      	ldr	r4, [sp, #28]
 80159da:	9704      	str	r7, [sp, #16]
 80159dc:	e761      	b.n	80158a2 <_dtoa_r+0x3e2>
 80159de:	4b27      	ldr	r3, [pc, #156]	@ (8015a7c <_dtoa_r+0x5bc>)
 80159e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80159e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80159e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80159ea:	4454      	add	r4, sl
 80159ec:	2900      	cmp	r1, #0
 80159ee:	d053      	beq.n	8015a98 <_dtoa_r+0x5d8>
 80159f0:	4928      	ldr	r1, [pc, #160]	@ (8015a94 <_dtoa_r+0x5d4>)
 80159f2:	2000      	movs	r0, #0
 80159f4:	f7ea ff5a 	bl	80008ac <__aeabi_ddiv>
 80159f8:	4633      	mov	r3, r6
 80159fa:	462a      	mov	r2, r5
 80159fc:	f7ea fc74 	bl	80002e8 <__aeabi_dsub>
 8015a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015a04:	4656      	mov	r6, sl
 8015a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a0a:	f7eb f8d5 	bl	8000bb8 <__aeabi_d2iz>
 8015a0e:	4605      	mov	r5, r0
 8015a10:	f7ea fdb8 	bl	8000584 <__aeabi_i2d>
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a1c:	f7ea fc64 	bl	80002e8 <__aeabi_dsub>
 8015a20:	3530      	adds	r5, #48	@ 0x30
 8015a22:	4602      	mov	r2, r0
 8015a24:	460b      	mov	r3, r1
 8015a26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015a2a:	f806 5b01 	strb.w	r5, [r6], #1
 8015a2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015a32:	f7eb f883 	bl	8000b3c <__aeabi_dcmplt>
 8015a36:	2800      	cmp	r0, #0
 8015a38:	d171      	bne.n	8015b1e <_dtoa_r+0x65e>
 8015a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015a3e:	4911      	ldr	r1, [pc, #68]	@ (8015a84 <_dtoa_r+0x5c4>)
 8015a40:	2000      	movs	r0, #0
 8015a42:	f7ea fc51 	bl	80002e8 <__aeabi_dsub>
 8015a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015a4a:	f7eb f877 	bl	8000b3c <__aeabi_dcmplt>
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	f040 8095 	bne.w	8015b7e <_dtoa_r+0x6be>
 8015a54:	42a6      	cmp	r6, r4
 8015a56:	f43f af50 	beq.w	80158fa <_dtoa_r+0x43a>
 8015a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8015a88 <_dtoa_r+0x5c8>)
 8015a60:	2200      	movs	r2, #0
 8015a62:	f7ea fdf9 	bl	8000658 <__aeabi_dmul>
 8015a66:	4b08      	ldr	r3, [pc, #32]	@ (8015a88 <_dtoa_r+0x5c8>)
 8015a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a72:	f7ea fdf1 	bl	8000658 <__aeabi_dmul>
 8015a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a7a:	e7c4      	b.n	8015a06 <_dtoa_r+0x546>
 8015a7c:	08018700 	.word	0x08018700
 8015a80:	080186d8 	.word	0x080186d8
 8015a84:	3ff00000 	.word	0x3ff00000
 8015a88:	40240000 	.word	0x40240000
 8015a8c:	401c0000 	.word	0x401c0000
 8015a90:	40140000 	.word	0x40140000
 8015a94:	3fe00000 	.word	0x3fe00000
 8015a98:	4631      	mov	r1, r6
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	f7ea fddc 	bl	8000658 <__aeabi_dmul>
 8015aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015aa4:	9415      	str	r4, [sp, #84]	@ 0x54
 8015aa6:	4656      	mov	r6, sl
 8015aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015aac:	f7eb f884 	bl	8000bb8 <__aeabi_d2iz>
 8015ab0:	4605      	mov	r5, r0
 8015ab2:	f7ea fd67 	bl	8000584 <__aeabi_i2d>
 8015ab6:	4602      	mov	r2, r0
 8015ab8:	460b      	mov	r3, r1
 8015aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015abe:	f7ea fc13 	bl	80002e8 <__aeabi_dsub>
 8015ac2:	3530      	adds	r5, #48	@ 0x30
 8015ac4:	f806 5b01 	strb.w	r5, [r6], #1
 8015ac8:	4602      	mov	r2, r0
 8015aca:	460b      	mov	r3, r1
 8015acc:	42a6      	cmp	r6, r4
 8015ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015ad2:	f04f 0200 	mov.w	r2, #0
 8015ad6:	d124      	bne.n	8015b22 <_dtoa_r+0x662>
 8015ad8:	4bac      	ldr	r3, [pc, #688]	@ (8015d8c <_dtoa_r+0x8cc>)
 8015ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015ade:	f7ea fc05 	bl	80002ec <__adddf3>
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	460b      	mov	r3, r1
 8015ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015aea:	f7eb f845 	bl	8000b78 <__aeabi_dcmpgt>
 8015aee:	2800      	cmp	r0, #0
 8015af0:	d145      	bne.n	8015b7e <_dtoa_r+0x6be>
 8015af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015af6:	49a5      	ldr	r1, [pc, #660]	@ (8015d8c <_dtoa_r+0x8cc>)
 8015af8:	2000      	movs	r0, #0
 8015afa:	f7ea fbf5 	bl	80002e8 <__aeabi_dsub>
 8015afe:	4602      	mov	r2, r0
 8015b00:	460b      	mov	r3, r1
 8015b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b06:	f7eb f819 	bl	8000b3c <__aeabi_dcmplt>
 8015b0a:	2800      	cmp	r0, #0
 8015b0c:	f43f aef5 	beq.w	80158fa <_dtoa_r+0x43a>
 8015b10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015b12:	1e73      	subs	r3, r6, #1
 8015b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8015b16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015b1a:	2b30      	cmp	r3, #48	@ 0x30
 8015b1c:	d0f8      	beq.n	8015b10 <_dtoa_r+0x650>
 8015b1e:	9f04      	ldr	r7, [sp, #16]
 8015b20:	e73e      	b.n	80159a0 <_dtoa_r+0x4e0>
 8015b22:	4b9b      	ldr	r3, [pc, #620]	@ (8015d90 <_dtoa_r+0x8d0>)
 8015b24:	f7ea fd98 	bl	8000658 <__aeabi_dmul>
 8015b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b2c:	e7bc      	b.n	8015aa8 <_dtoa_r+0x5e8>
 8015b2e:	d10c      	bne.n	8015b4a <_dtoa_r+0x68a>
 8015b30:	4b98      	ldr	r3, [pc, #608]	@ (8015d94 <_dtoa_r+0x8d4>)
 8015b32:	2200      	movs	r2, #0
 8015b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b38:	f7ea fd8e 	bl	8000658 <__aeabi_dmul>
 8015b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b40:	f7eb f810 	bl	8000b64 <__aeabi_dcmpge>
 8015b44:	2800      	cmp	r0, #0
 8015b46:	f000 8157 	beq.w	8015df8 <_dtoa_r+0x938>
 8015b4a:	2400      	movs	r4, #0
 8015b4c:	4625      	mov	r5, r4
 8015b4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b50:	43db      	mvns	r3, r3
 8015b52:	9304      	str	r3, [sp, #16]
 8015b54:	4656      	mov	r6, sl
 8015b56:	2700      	movs	r7, #0
 8015b58:	4621      	mov	r1, r4
 8015b5a:	4658      	mov	r0, fp
 8015b5c:	f000 fafe 	bl	801615c <_Bfree>
 8015b60:	2d00      	cmp	r5, #0
 8015b62:	d0dc      	beq.n	8015b1e <_dtoa_r+0x65e>
 8015b64:	b12f      	cbz	r7, 8015b72 <_dtoa_r+0x6b2>
 8015b66:	42af      	cmp	r7, r5
 8015b68:	d003      	beq.n	8015b72 <_dtoa_r+0x6b2>
 8015b6a:	4639      	mov	r1, r7
 8015b6c:	4658      	mov	r0, fp
 8015b6e:	f000 faf5 	bl	801615c <_Bfree>
 8015b72:	4629      	mov	r1, r5
 8015b74:	4658      	mov	r0, fp
 8015b76:	f000 faf1 	bl	801615c <_Bfree>
 8015b7a:	e7d0      	b.n	8015b1e <_dtoa_r+0x65e>
 8015b7c:	9704      	str	r7, [sp, #16]
 8015b7e:	4633      	mov	r3, r6
 8015b80:	461e      	mov	r6, r3
 8015b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015b86:	2a39      	cmp	r2, #57	@ 0x39
 8015b88:	d107      	bne.n	8015b9a <_dtoa_r+0x6da>
 8015b8a:	459a      	cmp	sl, r3
 8015b8c:	d1f8      	bne.n	8015b80 <_dtoa_r+0x6c0>
 8015b8e:	9a04      	ldr	r2, [sp, #16]
 8015b90:	3201      	adds	r2, #1
 8015b92:	9204      	str	r2, [sp, #16]
 8015b94:	2230      	movs	r2, #48	@ 0x30
 8015b96:	f88a 2000 	strb.w	r2, [sl]
 8015b9a:	781a      	ldrb	r2, [r3, #0]
 8015b9c:	3201      	adds	r2, #1
 8015b9e:	701a      	strb	r2, [r3, #0]
 8015ba0:	e7bd      	b.n	8015b1e <_dtoa_r+0x65e>
 8015ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8015d90 <_dtoa_r+0x8d0>)
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	f7ea fd57 	bl	8000658 <__aeabi_dmul>
 8015baa:	2200      	movs	r2, #0
 8015bac:	2300      	movs	r3, #0
 8015bae:	4604      	mov	r4, r0
 8015bb0:	460d      	mov	r5, r1
 8015bb2:	f7ea ffb9 	bl	8000b28 <__aeabi_dcmpeq>
 8015bb6:	2800      	cmp	r0, #0
 8015bb8:	f43f aebb 	beq.w	8015932 <_dtoa_r+0x472>
 8015bbc:	e6f0      	b.n	80159a0 <_dtoa_r+0x4e0>
 8015bbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015bc0:	2a00      	cmp	r2, #0
 8015bc2:	f000 80db 	beq.w	8015d7c <_dtoa_r+0x8bc>
 8015bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015bc8:	2a01      	cmp	r2, #1
 8015bca:	f300 80bf 	bgt.w	8015d4c <_dtoa_r+0x88c>
 8015bce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015bd0:	2a00      	cmp	r2, #0
 8015bd2:	f000 80b7 	beq.w	8015d44 <_dtoa_r+0x884>
 8015bd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015bda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015bdc:	4646      	mov	r6, r8
 8015bde:	9a08      	ldr	r2, [sp, #32]
 8015be0:	2101      	movs	r1, #1
 8015be2:	441a      	add	r2, r3
 8015be4:	4658      	mov	r0, fp
 8015be6:	4498      	add	r8, r3
 8015be8:	9208      	str	r2, [sp, #32]
 8015bea:	f000 fb6b 	bl	80162c4 <__i2b>
 8015bee:	4605      	mov	r5, r0
 8015bf0:	b15e      	cbz	r6, 8015c0a <_dtoa_r+0x74a>
 8015bf2:	9b08      	ldr	r3, [sp, #32]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	dd08      	ble.n	8015c0a <_dtoa_r+0x74a>
 8015bf8:	42b3      	cmp	r3, r6
 8015bfa:	9a08      	ldr	r2, [sp, #32]
 8015bfc:	bfa8      	it	ge
 8015bfe:	4633      	movge	r3, r6
 8015c00:	eba8 0803 	sub.w	r8, r8, r3
 8015c04:	1af6      	subs	r6, r6, r3
 8015c06:	1ad3      	subs	r3, r2, r3
 8015c08:	9308      	str	r3, [sp, #32]
 8015c0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c0c:	b1f3      	cbz	r3, 8015c4c <_dtoa_r+0x78c>
 8015c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	f000 80b7 	beq.w	8015d84 <_dtoa_r+0x8c4>
 8015c16:	b18c      	cbz	r4, 8015c3c <_dtoa_r+0x77c>
 8015c18:	4629      	mov	r1, r5
 8015c1a:	4622      	mov	r2, r4
 8015c1c:	4658      	mov	r0, fp
 8015c1e:	f000 fc11 	bl	8016444 <__pow5mult>
 8015c22:	464a      	mov	r2, r9
 8015c24:	4601      	mov	r1, r0
 8015c26:	4605      	mov	r5, r0
 8015c28:	4658      	mov	r0, fp
 8015c2a:	f000 fb61 	bl	80162f0 <__multiply>
 8015c2e:	4649      	mov	r1, r9
 8015c30:	9004      	str	r0, [sp, #16]
 8015c32:	4658      	mov	r0, fp
 8015c34:	f000 fa92 	bl	801615c <_Bfree>
 8015c38:	9b04      	ldr	r3, [sp, #16]
 8015c3a:	4699      	mov	r9, r3
 8015c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c3e:	1b1a      	subs	r2, r3, r4
 8015c40:	d004      	beq.n	8015c4c <_dtoa_r+0x78c>
 8015c42:	4649      	mov	r1, r9
 8015c44:	4658      	mov	r0, fp
 8015c46:	f000 fbfd 	bl	8016444 <__pow5mult>
 8015c4a:	4681      	mov	r9, r0
 8015c4c:	2101      	movs	r1, #1
 8015c4e:	4658      	mov	r0, fp
 8015c50:	f000 fb38 	bl	80162c4 <__i2b>
 8015c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c56:	4604      	mov	r4, r0
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	f000 81cf 	beq.w	8015ffc <_dtoa_r+0xb3c>
 8015c5e:	461a      	mov	r2, r3
 8015c60:	4601      	mov	r1, r0
 8015c62:	4658      	mov	r0, fp
 8015c64:	f000 fbee 	bl	8016444 <__pow5mult>
 8015c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c6a:	2b01      	cmp	r3, #1
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	f300 8095 	bgt.w	8015d9c <_dtoa_r+0x8dc>
 8015c72:	9b02      	ldr	r3, [sp, #8]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	f040 8087 	bne.w	8015d88 <_dtoa_r+0x8c8>
 8015c7a:	9b03      	ldr	r3, [sp, #12]
 8015c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	f040 8089 	bne.w	8015d98 <_dtoa_r+0x8d8>
 8015c86:	9b03      	ldr	r3, [sp, #12]
 8015c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015c8c:	0d1b      	lsrs	r3, r3, #20
 8015c8e:	051b      	lsls	r3, r3, #20
 8015c90:	b12b      	cbz	r3, 8015c9e <_dtoa_r+0x7de>
 8015c92:	9b08      	ldr	r3, [sp, #32]
 8015c94:	3301      	adds	r3, #1
 8015c96:	9308      	str	r3, [sp, #32]
 8015c98:	f108 0801 	add.w	r8, r8, #1
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	f000 81b0 	beq.w	8016008 <_dtoa_r+0xb48>
 8015ca8:	6923      	ldr	r3, [r4, #16]
 8015caa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015cae:	6918      	ldr	r0, [r3, #16]
 8015cb0:	f000 fabc 	bl	801622c <__hi0bits>
 8015cb4:	f1c0 0020 	rsb	r0, r0, #32
 8015cb8:	9b08      	ldr	r3, [sp, #32]
 8015cba:	4418      	add	r0, r3
 8015cbc:	f010 001f 	ands.w	r0, r0, #31
 8015cc0:	d077      	beq.n	8015db2 <_dtoa_r+0x8f2>
 8015cc2:	f1c0 0320 	rsb	r3, r0, #32
 8015cc6:	2b04      	cmp	r3, #4
 8015cc8:	dd6b      	ble.n	8015da2 <_dtoa_r+0x8e2>
 8015cca:	9b08      	ldr	r3, [sp, #32]
 8015ccc:	f1c0 001c 	rsb	r0, r0, #28
 8015cd0:	4403      	add	r3, r0
 8015cd2:	4480      	add	r8, r0
 8015cd4:	4406      	add	r6, r0
 8015cd6:	9308      	str	r3, [sp, #32]
 8015cd8:	f1b8 0f00 	cmp.w	r8, #0
 8015cdc:	dd05      	ble.n	8015cea <_dtoa_r+0x82a>
 8015cde:	4649      	mov	r1, r9
 8015ce0:	4642      	mov	r2, r8
 8015ce2:	4658      	mov	r0, fp
 8015ce4:	f000 fc08 	bl	80164f8 <__lshift>
 8015ce8:	4681      	mov	r9, r0
 8015cea:	9b08      	ldr	r3, [sp, #32]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	dd05      	ble.n	8015cfc <_dtoa_r+0x83c>
 8015cf0:	4621      	mov	r1, r4
 8015cf2:	461a      	mov	r2, r3
 8015cf4:	4658      	mov	r0, fp
 8015cf6:	f000 fbff 	bl	80164f8 <__lshift>
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d059      	beq.n	8015db6 <_dtoa_r+0x8f6>
 8015d02:	4621      	mov	r1, r4
 8015d04:	4648      	mov	r0, r9
 8015d06:	f000 fc63 	bl	80165d0 <__mcmp>
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	da53      	bge.n	8015db6 <_dtoa_r+0x8f6>
 8015d0e:	1e7b      	subs	r3, r7, #1
 8015d10:	9304      	str	r3, [sp, #16]
 8015d12:	4649      	mov	r1, r9
 8015d14:	2300      	movs	r3, #0
 8015d16:	220a      	movs	r2, #10
 8015d18:	4658      	mov	r0, fp
 8015d1a:	f000 fa41 	bl	80161a0 <__multadd>
 8015d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015d20:	4681      	mov	r9, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	f000 8172 	beq.w	801600c <_dtoa_r+0xb4c>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	4629      	mov	r1, r5
 8015d2c:	220a      	movs	r2, #10
 8015d2e:	4658      	mov	r0, fp
 8015d30:	f000 fa36 	bl	80161a0 <__multadd>
 8015d34:	9b00      	ldr	r3, [sp, #0]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	4605      	mov	r5, r0
 8015d3a:	dc67      	bgt.n	8015e0c <_dtoa_r+0x94c>
 8015d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d3e:	2b02      	cmp	r3, #2
 8015d40:	dc41      	bgt.n	8015dc6 <_dtoa_r+0x906>
 8015d42:	e063      	b.n	8015e0c <_dtoa_r+0x94c>
 8015d44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015d46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015d4a:	e746      	b.n	8015bda <_dtoa_r+0x71a>
 8015d4c:	9b07      	ldr	r3, [sp, #28]
 8015d4e:	1e5c      	subs	r4, r3, #1
 8015d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d52:	42a3      	cmp	r3, r4
 8015d54:	bfbf      	itttt	lt
 8015d56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015d58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015d5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015d5c:	1ae3      	sublt	r3, r4, r3
 8015d5e:	bfb4      	ite	lt
 8015d60:	18d2      	addlt	r2, r2, r3
 8015d62:	1b1c      	subge	r4, r3, r4
 8015d64:	9b07      	ldr	r3, [sp, #28]
 8015d66:	bfbc      	itt	lt
 8015d68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015d6a:	2400      	movlt	r4, #0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	bfb5      	itete	lt
 8015d70:	eba8 0603 	sublt.w	r6, r8, r3
 8015d74:	9b07      	ldrge	r3, [sp, #28]
 8015d76:	2300      	movlt	r3, #0
 8015d78:	4646      	movge	r6, r8
 8015d7a:	e730      	b.n	8015bde <_dtoa_r+0x71e>
 8015d7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015d7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015d80:	4646      	mov	r6, r8
 8015d82:	e735      	b.n	8015bf0 <_dtoa_r+0x730>
 8015d84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015d86:	e75c      	b.n	8015c42 <_dtoa_r+0x782>
 8015d88:	2300      	movs	r3, #0
 8015d8a:	e788      	b.n	8015c9e <_dtoa_r+0x7de>
 8015d8c:	3fe00000 	.word	0x3fe00000
 8015d90:	40240000 	.word	0x40240000
 8015d94:	40140000 	.word	0x40140000
 8015d98:	9b02      	ldr	r3, [sp, #8]
 8015d9a:	e780      	b.n	8015c9e <_dtoa_r+0x7de>
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015da0:	e782      	b.n	8015ca8 <_dtoa_r+0x7e8>
 8015da2:	d099      	beq.n	8015cd8 <_dtoa_r+0x818>
 8015da4:	9a08      	ldr	r2, [sp, #32]
 8015da6:	331c      	adds	r3, #28
 8015da8:	441a      	add	r2, r3
 8015daa:	4498      	add	r8, r3
 8015dac:	441e      	add	r6, r3
 8015dae:	9208      	str	r2, [sp, #32]
 8015db0:	e792      	b.n	8015cd8 <_dtoa_r+0x818>
 8015db2:	4603      	mov	r3, r0
 8015db4:	e7f6      	b.n	8015da4 <_dtoa_r+0x8e4>
 8015db6:	9b07      	ldr	r3, [sp, #28]
 8015db8:	9704      	str	r7, [sp, #16]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	dc20      	bgt.n	8015e00 <_dtoa_r+0x940>
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015dc2:	2b02      	cmp	r3, #2
 8015dc4:	dd1e      	ble.n	8015e04 <_dtoa_r+0x944>
 8015dc6:	9b00      	ldr	r3, [sp, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	f47f aec0 	bne.w	8015b4e <_dtoa_r+0x68e>
 8015dce:	4621      	mov	r1, r4
 8015dd0:	2205      	movs	r2, #5
 8015dd2:	4658      	mov	r0, fp
 8015dd4:	f000 f9e4 	bl	80161a0 <__multadd>
 8015dd8:	4601      	mov	r1, r0
 8015dda:	4604      	mov	r4, r0
 8015ddc:	4648      	mov	r0, r9
 8015dde:	f000 fbf7 	bl	80165d0 <__mcmp>
 8015de2:	2800      	cmp	r0, #0
 8015de4:	f77f aeb3 	ble.w	8015b4e <_dtoa_r+0x68e>
 8015de8:	4656      	mov	r6, sl
 8015dea:	2331      	movs	r3, #49	@ 0x31
 8015dec:	f806 3b01 	strb.w	r3, [r6], #1
 8015df0:	9b04      	ldr	r3, [sp, #16]
 8015df2:	3301      	adds	r3, #1
 8015df4:	9304      	str	r3, [sp, #16]
 8015df6:	e6ae      	b.n	8015b56 <_dtoa_r+0x696>
 8015df8:	9c07      	ldr	r4, [sp, #28]
 8015dfa:	9704      	str	r7, [sp, #16]
 8015dfc:	4625      	mov	r5, r4
 8015dfe:	e7f3      	b.n	8015de8 <_dtoa_r+0x928>
 8015e00:	9b07      	ldr	r3, [sp, #28]
 8015e02:	9300      	str	r3, [sp, #0]
 8015e04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	f000 8104 	beq.w	8016014 <_dtoa_r+0xb54>
 8015e0c:	2e00      	cmp	r6, #0
 8015e0e:	dd05      	ble.n	8015e1c <_dtoa_r+0x95c>
 8015e10:	4629      	mov	r1, r5
 8015e12:	4632      	mov	r2, r6
 8015e14:	4658      	mov	r0, fp
 8015e16:	f000 fb6f 	bl	80164f8 <__lshift>
 8015e1a:	4605      	mov	r5, r0
 8015e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d05a      	beq.n	8015ed8 <_dtoa_r+0xa18>
 8015e22:	6869      	ldr	r1, [r5, #4]
 8015e24:	4658      	mov	r0, fp
 8015e26:	f000 f959 	bl	80160dc <_Balloc>
 8015e2a:	4606      	mov	r6, r0
 8015e2c:	b928      	cbnz	r0, 8015e3a <_dtoa_r+0x97a>
 8015e2e:	4b84      	ldr	r3, [pc, #528]	@ (8016040 <_dtoa_r+0xb80>)
 8015e30:	4602      	mov	r2, r0
 8015e32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015e36:	f7ff bb5a 	b.w	80154ee <_dtoa_r+0x2e>
 8015e3a:	692a      	ldr	r2, [r5, #16]
 8015e3c:	3202      	adds	r2, #2
 8015e3e:	0092      	lsls	r2, r2, #2
 8015e40:	f105 010c 	add.w	r1, r5, #12
 8015e44:	300c      	adds	r0, #12
 8015e46:	f7ff faa4 	bl	8015392 <memcpy>
 8015e4a:	2201      	movs	r2, #1
 8015e4c:	4631      	mov	r1, r6
 8015e4e:	4658      	mov	r0, fp
 8015e50:	f000 fb52 	bl	80164f8 <__lshift>
 8015e54:	f10a 0301 	add.w	r3, sl, #1
 8015e58:	9307      	str	r3, [sp, #28]
 8015e5a:	9b00      	ldr	r3, [sp, #0]
 8015e5c:	4453      	add	r3, sl
 8015e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e60:	9b02      	ldr	r3, [sp, #8]
 8015e62:	f003 0301 	and.w	r3, r3, #1
 8015e66:	462f      	mov	r7, r5
 8015e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e6a:	4605      	mov	r5, r0
 8015e6c:	9b07      	ldr	r3, [sp, #28]
 8015e6e:	4621      	mov	r1, r4
 8015e70:	3b01      	subs	r3, #1
 8015e72:	4648      	mov	r0, r9
 8015e74:	9300      	str	r3, [sp, #0]
 8015e76:	f7ff fa9a 	bl	80153ae <quorem>
 8015e7a:	4639      	mov	r1, r7
 8015e7c:	9002      	str	r0, [sp, #8]
 8015e7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015e82:	4648      	mov	r0, r9
 8015e84:	f000 fba4 	bl	80165d0 <__mcmp>
 8015e88:	462a      	mov	r2, r5
 8015e8a:	9008      	str	r0, [sp, #32]
 8015e8c:	4621      	mov	r1, r4
 8015e8e:	4658      	mov	r0, fp
 8015e90:	f000 fbba 	bl	8016608 <__mdiff>
 8015e94:	68c2      	ldr	r2, [r0, #12]
 8015e96:	4606      	mov	r6, r0
 8015e98:	bb02      	cbnz	r2, 8015edc <_dtoa_r+0xa1c>
 8015e9a:	4601      	mov	r1, r0
 8015e9c:	4648      	mov	r0, r9
 8015e9e:	f000 fb97 	bl	80165d0 <__mcmp>
 8015ea2:	4602      	mov	r2, r0
 8015ea4:	4631      	mov	r1, r6
 8015ea6:	4658      	mov	r0, fp
 8015ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8015eaa:	f000 f957 	bl	801615c <_Bfree>
 8015eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015eb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015eb2:	9e07      	ldr	r6, [sp, #28]
 8015eb4:	ea43 0102 	orr.w	r1, r3, r2
 8015eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015eba:	4319      	orrs	r1, r3
 8015ebc:	d110      	bne.n	8015ee0 <_dtoa_r+0xa20>
 8015ebe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015ec2:	d029      	beq.n	8015f18 <_dtoa_r+0xa58>
 8015ec4:	9b08      	ldr	r3, [sp, #32]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	dd02      	ble.n	8015ed0 <_dtoa_r+0xa10>
 8015eca:	9b02      	ldr	r3, [sp, #8]
 8015ecc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015ed0:	9b00      	ldr	r3, [sp, #0]
 8015ed2:	f883 8000 	strb.w	r8, [r3]
 8015ed6:	e63f      	b.n	8015b58 <_dtoa_r+0x698>
 8015ed8:	4628      	mov	r0, r5
 8015eda:	e7bb      	b.n	8015e54 <_dtoa_r+0x994>
 8015edc:	2201      	movs	r2, #1
 8015ede:	e7e1      	b.n	8015ea4 <_dtoa_r+0x9e4>
 8015ee0:	9b08      	ldr	r3, [sp, #32]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	db04      	blt.n	8015ef0 <_dtoa_r+0xa30>
 8015ee6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015ee8:	430b      	orrs	r3, r1
 8015eea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015eec:	430b      	orrs	r3, r1
 8015eee:	d120      	bne.n	8015f32 <_dtoa_r+0xa72>
 8015ef0:	2a00      	cmp	r2, #0
 8015ef2:	dded      	ble.n	8015ed0 <_dtoa_r+0xa10>
 8015ef4:	4649      	mov	r1, r9
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	4658      	mov	r0, fp
 8015efa:	f000 fafd 	bl	80164f8 <__lshift>
 8015efe:	4621      	mov	r1, r4
 8015f00:	4681      	mov	r9, r0
 8015f02:	f000 fb65 	bl	80165d0 <__mcmp>
 8015f06:	2800      	cmp	r0, #0
 8015f08:	dc03      	bgt.n	8015f12 <_dtoa_r+0xa52>
 8015f0a:	d1e1      	bne.n	8015ed0 <_dtoa_r+0xa10>
 8015f0c:	f018 0f01 	tst.w	r8, #1
 8015f10:	d0de      	beq.n	8015ed0 <_dtoa_r+0xa10>
 8015f12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015f16:	d1d8      	bne.n	8015eca <_dtoa_r+0xa0a>
 8015f18:	9a00      	ldr	r2, [sp, #0]
 8015f1a:	2339      	movs	r3, #57	@ 0x39
 8015f1c:	7013      	strb	r3, [r2, #0]
 8015f1e:	4633      	mov	r3, r6
 8015f20:	461e      	mov	r6, r3
 8015f22:	3b01      	subs	r3, #1
 8015f24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015f28:	2a39      	cmp	r2, #57	@ 0x39
 8015f2a:	d052      	beq.n	8015fd2 <_dtoa_r+0xb12>
 8015f2c:	3201      	adds	r2, #1
 8015f2e:	701a      	strb	r2, [r3, #0]
 8015f30:	e612      	b.n	8015b58 <_dtoa_r+0x698>
 8015f32:	2a00      	cmp	r2, #0
 8015f34:	dd07      	ble.n	8015f46 <_dtoa_r+0xa86>
 8015f36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015f3a:	d0ed      	beq.n	8015f18 <_dtoa_r+0xa58>
 8015f3c:	9a00      	ldr	r2, [sp, #0]
 8015f3e:	f108 0301 	add.w	r3, r8, #1
 8015f42:	7013      	strb	r3, [r2, #0]
 8015f44:	e608      	b.n	8015b58 <_dtoa_r+0x698>
 8015f46:	9b07      	ldr	r3, [sp, #28]
 8015f48:	9a07      	ldr	r2, [sp, #28]
 8015f4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015f50:	4293      	cmp	r3, r2
 8015f52:	d028      	beq.n	8015fa6 <_dtoa_r+0xae6>
 8015f54:	4649      	mov	r1, r9
 8015f56:	2300      	movs	r3, #0
 8015f58:	220a      	movs	r2, #10
 8015f5a:	4658      	mov	r0, fp
 8015f5c:	f000 f920 	bl	80161a0 <__multadd>
 8015f60:	42af      	cmp	r7, r5
 8015f62:	4681      	mov	r9, r0
 8015f64:	f04f 0300 	mov.w	r3, #0
 8015f68:	f04f 020a 	mov.w	r2, #10
 8015f6c:	4639      	mov	r1, r7
 8015f6e:	4658      	mov	r0, fp
 8015f70:	d107      	bne.n	8015f82 <_dtoa_r+0xac2>
 8015f72:	f000 f915 	bl	80161a0 <__multadd>
 8015f76:	4607      	mov	r7, r0
 8015f78:	4605      	mov	r5, r0
 8015f7a:	9b07      	ldr	r3, [sp, #28]
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	9307      	str	r3, [sp, #28]
 8015f80:	e774      	b.n	8015e6c <_dtoa_r+0x9ac>
 8015f82:	f000 f90d 	bl	80161a0 <__multadd>
 8015f86:	4629      	mov	r1, r5
 8015f88:	4607      	mov	r7, r0
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	220a      	movs	r2, #10
 8015f8e:	4658      	mov	r0, fp
 8015f90:	f000 f906 	bl	80161a0 <__multadd>
 8015f94:	4605      	mov	r5, r0
 8015f96:	e7f0      	b.n	8015f7a <_dtoa_r+0xaba>
 8015f98:	9b00      	ldr	r3, [sp, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	bfcc      	ite	gt
 8015f9e:	461e      	movgt	r6, r3
 8015fa0:	2601      	movle	r6, #1
 8015fa2:	4456      	add	r6, sl
 8015fa4:	2700      	movs	r7, #0
 8015fa6:	4649      	mov	r1, r9
 8015fa8:	2201      	movs	r2, #1
 8015faa:	4658      	mov	r0, fp
 8015fac:	f000 faa4 	bl	80164f8 <__lshift>
 8015fb0:	4621      	mov	r1, r4
 8015fb2:	4681      	mov	r9, r0
 8015fb4:	f000 fb0c 	bl	80165d0 <__mcmp>
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	dcb0      	bgt.n	8015f1e <_dtoa_r+0xa5e>
 8015fbc:	d102      	bne.n	8015fc4 <_dtoa_r+0xb04>
 8015fbe:	f018 0f01 	tst.w	r8, #1
 8015fc2:	d1ac      	bne.n	8015f1e <_dtoa_r+0xa5e>
 8015fc4:	4633      	mov	r3, r6
 8015fc6:	461e      	mov	r6, r3
 8015fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015fcc:	2a30      	cmp	r2, #48	@ 0x30
 8015fce:	d0fa      	beq.n	8015fc6 <_dtoa_r+0xb06>
 8015fd0:	e5c2      	b.n	8015b58 <_dtoa_r+0x698>
 8015fd2:	459a      	cmp	sl, r3
 8015fd4:	d1a4      	bne.n	8015f20 <_dtoa_r+0xa60>
 8015fd6:	9b04      	ldr	r3, [sp, #16]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	9304      	str	r3, [sp, #16]
 8015fdc:	2331      	movs	r3, #49	@ 0x31
 8015fde:	f88a 3000 	strb.w	r3, [sl]
 8015fe2:	e5b9      	b.n	8015b58 <_dtoa_r+0x698>
 8015fe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015fe6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8016044 <_dtoa_r+0xb84>
 8015fea:	b11b      	cbz	r3, 8015ff4 <_dtoa_r+0xb34>
 8015fec:	f10a 0308 	add.w	r3, sl, #8
 8015ff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015ff2:	6013      	str	r3, [r2, #0]
 8015ff4:	4650      	mov	r0, sl
 8015ff6:	b019      	add	sp, #100	@ 0x64
 8015ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ffe:	2b01      	cmp	r3, #1
 8016000:	f77f ae37 	ble.w	8015c72 <_dtoa_r+0x7b2>
 8016004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016006:	930a      	str	r3, [sp, #40]	@ 0x28
 8016008:	2001      	movs	r0, #1
 801600a:	e655      	b.n	8015cb8 <_dtoa_r+0x7f8>
 801600c:	9b00      	ldr	r3, [sp, #0]
 801600e:	2b00      	cmp	r3, #0
 8016010:	f77f aed6 	ble.w	8015dc0 <_dtoa_r+0x900>
 8016014:	4656      	mov	r6, sl
 8016016:	4621      	mov	r1, r4
 8016018:	4648      	mov	r0, r9
 801601a:	f7ff f9c8 	bl	80153ae <quorem>
 801601e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016022:	f806 8b01 	strb.w	r8, [r6], #1
 8016026:	9b00      	ldr	r3, [sp, #0]
 8016028:	eba6 020a 	sub.w	r2, r6, sl
 801602c:	4293      	cmp	r3, r2
 801602e:	ddb3      	ble.n	8015f98 <_dtoa_r+0xad8>
 8016030:	4649      	mov	r1, r9
 8016032:	2300      	movs	r3, #0
 8016034:	220a      	movs	r2, #10
 8016036:	4658      	mov	r0, fp
 8016038:	f000 f8b2 	bl	80161a0 <__multadd>
 801603c:	4681      	mov	r9, r0
 801603e:	e7ea      	b.n	8016016 <_dtoa_r+0xb56>
 8016040:	08018660 	.word	0x08018660
 8016044:	080185e4 	.word	0x080185e4

08016048 <_free_r>:
 8016048:	b538      	push	{r3, r4, r5, lr}
 801604a:	4605      	mov	r5, r0
 801604c:	2900      	cmp	r1, #0
 801604e:	d041      	beq.n	80160d4 <_free_r+0x8c>
 8016050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016054:	1f0c      	subs	r4, r1, #4
 8016056:	2b00      	cmp	r3, #0
 8016058:	bfb8      	it	lt
 801605a:	18e4      	addlt	r4, r4, r3
 801605c:	f7fe fb4e 	bl	80146fc <__malloc_lock>
 8016060:	4a1d      	ldr	r2, [pc, #116]	@ (80160d8 <_free_r+0x90>)
 8016062:	6813      	ldr	r3, [r2, #0]
 8016064:	b933      	cbnz	r3, 8016074 <_free_r+0x2c>
 8016066:	6063      	str	r3, [r4, #4]
 8016068:	6014      	str	r4, [r2, #0]
 801606a:	4628      	mov	r0, r5
 801606c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016070:	f7fe bb4a 	b.w	8014708 <__malloc_unlock>
 8016074:	42a3      	cmp	r3, r4
 8016076:	d908      	bls.n	801608a <_free_r+0x42>
 8016078:	6820      	ldr	r0, [r4, #0]
 801607a:	1821      	adds	r1, r4, r0
 801607c:	428b      	cmp	r3, r1
 801607e:	bf01      	itttt	eq
 8016080:	6819      	ldreq	r1, [r3, #0]
 8016082:	685b      	ldreq	r3, [r3, #4]
 8016084:	1809      	addeq	r1, r1, r0
 8016086:	6021      	streq	r1, [r4, #0]
 8016088:	e7ed      	b.n	8016066 <_free_r+0x1e>
 801608a:	461a      	mov	r2, r3
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	b10b      	cbz	r3, 8016094 <_free_r+0x4c>
 8016090:	42a3      	cmp	r3, r4
 8016092:	d9fa      	bls.n	801608a <_free_r+0x42>
 8016094:	6811      	ldr	r1, [r2, #0]
 8016096:	1850      	adds	r0, r2, r1
 8016098:	42a0      	cmp	r0, r4
 801609a:	d10b      	bne.n	80160b4 <_free_r+0x6c>
 801609c:	6820      	ldr	r0, [r4, #0]
 801609e:	4401      	add	r1, r0
 80160a0:	1850      	adds	r0, r2, r1
 80160a2:	4283      	cmp	r3, r0
 80160a4:	6011      	str	r1, [r2, #0]
 80160a6:	d1e0      	bne.n	801606a <_free_r+0x22>
 80160a8:	6818      	ldr	r0, [r3, #0]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	6053      	str	r3, [r2, #4]
 80160ae:	4408      	add	r0, r1
 80160b0:	6010      	str	r0, [r2, #0]
 80160b2:	e7da      	b.n	801606a <_free_r+0x22>
 80160b4:	d902      	bls.n	80160bc <_free_r+0x74>
 80160b6:	230c      	movs	r3, #12
 80160b8:	602b      	str	r3, [r5, #0]
 80160ba:	e7d6      	b.n	801606a <_free_r+0x22>
 80160bc:	6820      	ldr	r0, [r4, #0]
 80160be:	1821      	adds	r1, r4, r0
 80160c0:	428b      	cmp	r3, r1
 80160c2:	bf04      	itt	eq
 80160c4:	6819      	ldreq	r1, [r3, #0]
 80160c6:	685b      	ldreq	r3, [r3, #4]
 80160c8:	6063      	str	r3, [r4, #4]
 80160ca:	bf04      	itt	eq
 80160cc:	1809      	addeq	r1, r1, r0
 80160ce:	6021      	streq	r1, [r4, #0]
 80160d0:	6054      	str	r4, [r2, #4]
 80160d2:	e7ca      	b.n	801606a <_free_r+0x22>
 80160d4:	bd38      	pop	{r3, r4, r5, pc}
 80160d6:	bf00      	nop
 80160d8:	2000059c 	.word	0x2000059c

080160dc <_Balloc>:
 80160dc:	b570      	push	{r4, r5, r6, lr}
 80160de:	69c6      	ldr	r6, [r0, #28]
 80160e0:	4604      	mov	r4, r0
 80160e2:	460d      	mov	r5, r1
 80160e4:	b976      	cbnz	r6, 8016104 <_Balloc+0x28>
 80160e6:	2010      	movs	r0, #16
 80160e8:	f7fe fa56 	bl	8014598 <malloc>
 80160ec:	4602      	mov	r2, r0
 80160ee:	61e0      	str	r0, [r4, #28]
 80160f0:	b920      	cbnz	r0, 80160fc <_Balloc+0x20>
 80160f2:	4b18      	ldr	r3, [pc, #96]	@ (8016154 <_Balloc+0x78>)
 80160f4:	4818      	ldr	r0, [pc, #96]	@ (8016158 <_Balloc+0x7c>)
 80160f6:	216b      	movs	r1, #107	@ 0x6b
 80160f8:	f000 fc1e 	bl	8016938 <__assert_func>
 80160fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016100:	6006      	str	r6, [r0, #0]
 8016102:	60c6      	str	r6, [r0, #12]
 8016104:	69e6      	ldr	r6, [r4, #28]
 8016106:	68f3      	ldr	r3, [r6, #12]
 8016108:	b183      	cbz	r3, 801612c <_Balloc+0x50>
 801610a:	69e3      	ldr	r3, [r4, #28]
 801610c:	68db      	ldr	r3, [r3, #12]
 801610e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016112:	b9b8      	cbnz	r0, 8016144 <_Balloc+0x68>
 8016114:	2101      	movs	r1, #1
 8016116:	fa01 f605 	lsl.w	r6, r1, r5
 801611a:	1d72      	adds	r2, r6, #5
 801611c:	0092      	lsls	r2, r2, #2
 801611e:	4620      	mov	r0, r4
 8016120:	f000 fc28 	bl	8016974 <_calloc_r>
 8016124:	b160      	cbz	r0, 8016140 <_Balloc+0x64>
 8016126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801612a:	e00e      	b.n	801614a <_Balloc+0x6e>
 801612c:	2221      	movs	r2, #33	@ 0x21
 801612e:	2104      	movs	r1, #4
 8016130:	4620      	mov	r0, r4
 8016132:	f000 fc1f 	bl	8016974 <_calloc_r>
 8016136:	69e3      	ldr	r3, [r4, #28]
 8016138:	60f0      	str	r0, [r6, #12]
 801613a:	68db      	ldr	r3, [r3, #12]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1e4      	bne.n	801610a <_Balloc+0x2e>
 8016140:	2000      	movs	r0, #0
 8016142:	bd70      	pop	{r4, r5, r6, pc}
 8016144:	6802      	ldr	r2, [r0, #0]
 8016146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801614a:	2300      	movs	r3, #0
 801614c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016150:	e7f7      	b.n	8016142 <_Balloc+0x66>
 8016152:	bf00      	nop
 8016154:	080185f1 	.word	0x080185f1
 8016158:	08018671 	.word	0x08018671

0801615c <_Bfree>:
 801615c:	b570      	push	{r4, r5, r6, lr}
 801615e:	69c6      	ldr	r6, [r0, #28]
 8016160:	4605      	mov	r5, r0
 8016162:	460c      	mov	r4, r1
 8016164:	b976      	cbnz	r6, 8016184 <_Bfree+0x28>
 8016166:	2010      	movs	r0, #16
 8016168:	f7fe fa16 	bl	8014598 <malloc>
 801616c:	4602      	mov	r2, r0
 801616e:	61e8      	str	r0, [r5, #28]
 8016170:	b920      	cbnz	r0, 801617c <_Bfree+0x20>
 8016172:	4b09      	ldr	r3, [pc, #36]	@ (8016198 <_Bfree+0x3c>)
 8016174:	4809      	ldr	r0, [pc, #36]	@ (801619c <_Bfree+0x40>)
 8016176:	218f      	movs	r1, #143	@ 0x8f
 8016178:	f000 fbde 	bl	8016938 <__assert_func>
 801617c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016180:	6006      	str	r6, [r0, #0]
 8016182:	60c6      	str	r6, [r0, #12]
 8016184:	b13c      	cbz	r4, 8016196 <_Bfree+0x3a>
 8016186:	69eb      	ldr	r3, [r5, #28]
 8016188:	6862      	ldr	r2, [r4, #4]
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016190:	6021      	str	r1, [r4, #0]
 8016192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016196:	bd70      	pop	{r4, r5, r6, pc}
 8016198:	080185f1 	.word	0x080185f1
 801619c:	08018671 	.word	0x08018671

080161a0 <__multadd>:
 80161a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a4:	690d      	ldr	r5, [r1, #16]
 80161a6:	4607      	mov	r7, r0
 80161a8:	460c      	mov	r4, r1
 80161aa:	461e      	mov	r6, r3
 80161ac:	f101 0c14 	add.w	ip, r1, #20
 80161b0:	2000      	movs	r0, #0
 80161b2:	f8dc 3000 	ldr.w	r3, [ip]
 80161b6:	b299      	uxth	r1, r3
 80161b8:	fb02 6101 	mla	r1, r2, r1, r6
 80161bc:	0c1e      	lsrs	r6, r3, #16
 80161be:	0c0b      	lsrs	r3, r1, #16
 80161c0:	fb02 3306 	mla	r3, r2, r6, r3
 80161c4:	b289      	uxth	r1, r1
 80161c6:	3001      	adds	r0, #1
 80161c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80161cc:	4285      	cmp	r5, r0
 80161ce:	f84c 1b04 	str.w	r1, [ip], #4
 80161d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80161d6:	dcec      	bgt.n	80161b2 <__multadd+0x12>
 80161d8:	b30e      	cbz	r6, 801621e <__multadd+0x7e>
 80161da:	68a3      	ldr	r3, [r4, #8]
 80161dc:	42ab      	cmp	r3, r5
 80161de:	dc19      	bgt.n	8016214 <__multadd+0x74>
 80161e0:	6861      	ldr	r1, [r4, #4]
 80161e2:	4638      	mov	r0, r7
 80161e4:	3101      	adds	r1, #1
 80161e6:	f7ff ff79 	bl	80160dc <_Balloc>
 80161ea:	4680      	mov	r8, r0
 80161ec:	b928      	cbnz	r0, 80161fa <__multadd+0x5a>
 80161ee:	4602      	mov	r2, r0
 80161f0:	4b0c      	ldr	r3, [pc, #48]	@ (8016224 <__multadd+0x84>)
 80161f2:	480d      	ldr	r0, [pc, #52]	@ (8016228 <__multadd+0x88>)
 80161f4:	21ba      	movs	r1, #186	@ 0xba
 80161f6:	f000 fb9f 	bl	8016938 <__assert_func>
 80161fa:	6922      	ldr	r2, [r4, #16]
 80161fc:	3202      	adds	r2, #2
 80161fe:	f104 010c 	add.w	r1, r4, #12
 8016202:	0092      	lsls	r2, r2, #2
 8016204:	300c      	adds	r0, #12
 8016206:	f7ff f8c4 	bl	8015392 <memcpy>
 801620a:	4621      	mov	r1, r4
 801620c:	4638      	mov	r0, r7
 801620e:	f7ff ffa5 	bl	801615c <_Bfree>
 8016212:	4644      	mov	r4, r8
 8016214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016218:	3501      	adds	r5, #1
 801621a:	615e      	str	r6, [r3, #20]
 801621c:	6125      	str	r5, [r4, #16]
 801621e:	4620      	mov	r0, r4
 8016220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016224:	08018660 	.word	0x08018660
 8016228:	08018671 	.word	0x08018671

0801622c <__hi0bits>:
 801622c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016230:	4603      	mov	r3, r0
 8016232:	bf36      	itet	cc
 8016234:	0403      	lslcc	r3, r0, #16
 8016236:	2000      	movcs	r0, #0
 8016238:	2010      	movcc	r0, #16
 801623a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801623e:	bf3c      	itt	cc
 8016240:	021b      	lslcc	r3, r3, #8
 8016242:	3008      	addcc	r0, #8
 8016244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016248:	bf3c      	itt	cc
 801624a:	011b      	lslcc	r3, r3, #4
 801624c:	3004      	addcc	r0, #4
 801624e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016252:	bf3c      	itt	cc
 8016254:	009b      	lslcc	r3, r3, #2
 8016256:	3002      	addcc	r0, #2
 8016258:	2b00      	cmp	r3, #0
 801625a:	db05      	blt.n	8016268 <__hi0bits+0x3c>
 801625c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016260:	f100 0001 	add.w	r0, r0, #1
 8016264:	bf08      	it	eq
 8016266:	2020      	moveq	r0, #32
 8016268:	4770      	bx	lr

0801626a <__lo0bits>:
 801626a:	6803      	ldr	r3, [r0, #0]
 801626c:	4602      	mov	r2, r0
 801626e:	f013 0007 	ands.w	r0, r3, #7
 8016272:	d00b      	beq.n	801628c <__lo0bits+0x22>
 8016274:	07d9      	lsls	r1, r3, #31
 8016276:	d421      	bmi.n	80162bc <__lo0bits+0x52>
 8016278:	0798      	lsls	r0, r3, #30
 801627a:	bf49      	itett	mi
 801627c:	085b      	lsrmi	r3, r3, #1
 801627e:	089b      	lsrpl	r3, r3, #2
 8016280:	2001      	movmi	r0, #1
 8016282:	6013      	strmi	r3, [r2, #0]
 8016284:	bf5c      	itt	pl
 8016286:	6013      	strpl	r3, [r2, #0]
 8016288:	2002      	movpl	r0, #2
 801628a:	4770      	bx	lr
 801628c:	b299      	uxth	r1, r3
 801628e:	b909      	cbnz	r1, 8016294 <__lo0bits+0x2a>
 8016290:	0c1b      	lsrs	r3, r3, #16
 8016292:	2010      	movs	r0, #16
 8016294:	b2d9      	uxtb	r1, r3
 8016296:	b909      	cbnz	r1, 801629c <__lo0bits+0x32>
 8016298:	3008      	adds	r0, #8
 801629a:	0a1b      	lsrs	r3, r3, #8
 801629c:	0719      	lsls	r1, r3, #28
 801629e:	bf04      	itt	eq
 80162a0:	091b      	lsreq	r3, r3, #4
 80162a2:	3004      	addeq	r0, #4
 80162a4:	0799      	lsls	r1, r3, #30
 80162a6:	bf04      	itt	eq
 80162a8:	089b      	lsreq	r3, r3, #2
 80162aa:	3002      	addeq	r0, #2
 80162ac:	07d9      	lsls	r1, r3, #31
 80162ae:	d403      	bmi.n	80162b8 <__lo0bits+0x4e>
 80162b0:	085b      	lsrs	r3, r3, #1
 80162b2:	f100 0001 	add.w	r0, r0, #1
 80162b6:	d003      	beq.n	80162c0 <__lo0bits+0x56>
 80162b8:	6013      	str	r3, [r2, #0]
 80162ba:	4770      	bx	lr
 80162bc:	2000      	movs	r0, #0
 80162be:	4770      	bx	lr
 80162c0:	2020      	movs	r0, #32
 80162c2:	4770      	bx	lr

080162c4 <__i2b>:
 80162c4:	b510      	push	{r4, lr}
 80162c6:	460c      	mov	r4, r1
 80162c8:	2101      	movs	r1, #1
 80162ca:	f7ff ff07 	bl	80160dc <_Balloc>
 80162ce:	4602      	mov	r2, r0
 80162d0:	b928      	cbnz	r0, 80162de <__i2b+0x1a>
 80162d2:	4b05      	ldr	r3, [pc, #20]	@ (80162e8 <__i2b+0x24>)
 80162d4:	4805      	ldr	r0, [pc, #20]	@ (80162ec <__i2b+0x28>)
 80162d6:	f240 1145 	movw	r1, #325	@ 0x145
 80162da:	f000 fb2d 	bl	8016938 <__assert_func>
 80162de:	2301      	movs	r3, #1
 80162e0:	6144      	str	r4, [r0, #20]
 80162e2:	6103      	str	r3, [r0, #16]
 80162e4:	bd10      	pop	{r4, pc}
 80162e6:	bf00      	nop
 80162e8:	08018660 	.word	0x08018660
 80162ec:	08018671 	.word	0x08018671

080162f0 <__multiply>:
 80162f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f4:	4614      	mov	r4, r2
 80162f6:	690a      	ldr	r2, [r1, #16]
 80162f8:	6923      	ldr	r3, [r4, #16]
 80162fa:	429a      	cmp	r2, r3
 80162fc:	bfa8      	it	ge
 80162fe:	4623      	movge	r3, r4
 8016300:	460f      	mov	r7, r1
 8016302:	bfa4      	itt	ge
 8016304:	460c      	movge	r4, r1
 8016306:	461f      	movge	r7, r3
 8016308:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801630c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016310:	68a3      	ldr	r3, [r4, #8]
 8016312:	6861      	ldr	r1, [r4, #4]
 8016314:	eb0a 0609 	add.w	r6, sl, r9
 8016318:	42b3      	cmp	r3, r6
 801631a:	b085      	sub	sp, #20
 801631c:	bfb8      	it	lt
 801631e:	3101      	addlt	r1, #1
 8016320:	f7ff fedc 	bl	80160dc <_Balloc>
 8016324:	b930      	cbnz	r0, 8016334 <__multiply+0x44>
 8016326:	4602      	mov	r2, r0
 8016328:	4b44      	ldr	r3, [pc, #272]	@ (801643c <__multiply+0x14c>)
 801632a:	4845      	ldr	r0, [pc, #276]	@ (8016440 <__multiply+0x150>)
 801632c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016330:	f000 fb02 	bl	8016938 <__assert_func>
 8016334:	f100 0514 	add.w	r5, r0, #20
 8016338:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801633c:	462b      	mov	r3, r5
 801633e:	2200      	movs	r2, #0
 8016340:	4543      	cmp	r3, r8
 8016342:	d321      	bcc.n	8016388 <__multiply+0x98>
 8016344:	f107 0114 	add.w	r1, r7, #20
 8016348:	f104 0214 	add.w	r2, r4, #20
 801634c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016350:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016354:	9302      	str	r3, [sp, #8]
 8016356:	1b13      	subs	r3, r2, r4
 8016358:	3b15      	subs	r3, #21
 801635a:	f023 0303 	bic.w	r3, r3, #3
 801635e:	3304      	adds	r3, #4
 8016360:	f104 0715 	add.w	r7, r4, #21
 8016364:	42ba      	cmp	r2, r7
 8016366:	bf38      	it	cc
 8016368:	2304      	movcc	r3, #4
 801636a:	9301      	str	r3, [sp, #4]
 801636c:	9b02      	ldr	r3, [sp, #8]
 801636e:	9103      	str	r1, [sp, #12]
 8016370:	428b      	cmp	r3, r1
 8016372:	d80c      	bhi.n	801638e <__multiply+0x9e>
 8016374:	2e00      	cmp	r6, #0
 8016376:	dd03      	ble.n	8016380 <__multiply+0x90>
 8016378:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801637c:	2b00      	cmp	r3, #0
 801637e:	d05b      	beq.n	8016438 <__multiply+0x148>
 8016380:	6106      	str	r6, [r0, #16]
 8016382:	b005      	add	sp, #20
 8016384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016388:	f843 2b04 	str.w	r2, [r3], #4
 801638c:	e7d8      	b.n	8016340 <__multiply+0x50>
 801638e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016392:	f1ba 0f00 	cmp.w	sl, #0
 8016396:	d024      	beq.n	80163e2 <__multiply+0xf2>
 8016398:	f104 0e14 	add.w	lr, r4, #20
 801639c:	46a9      	mov	r9, r5
 801639e:	f04f 0c00 	mov.w	ip, #0
 80163a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80163a6:	f8d9 3000 	ldr.w	r3, [r9]
 80163aa:	fa1f fb87 	uxth.w	fp, r7
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80163b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80163b8:	f8d9 7000 	ldr.w	r7, [r9]
 80163bc:	4463      	add	r3, ip
 80163be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80163c2:	fb0a c70b 	mla	r7, sl, fp, ip
 80163c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80163ca:	b29b      	uxth	r3, r3
 80163cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80163d0:	4572      	cmp	r2, lr
 80163d2:	f849 3b04 	str.w	r3, [r9], #4
 80163d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80163da:	d8e2      	bhi.n	80163a2 <__multiply+0xb2>
 80163dc:	9b01      	ldr	r3, [sp, #4]
 80163de:	f845 c003 	str.w	ip, [r5, r3]
 80163e2:	9b03      	ldr	r3, [sp, #12]
 80163e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80163e8:	3104      	adds	r1, #4
 80163ea:	f1b9 0f00 	cmp.w	r9, #0
 80163ee:	d021      	beq.n	8016434 <__multiply+0x144>
 80163f0:	682b      	ldr	r3, [r5, #0]
 80163f2:	f104 0c14 	add.w	ip, r4, #20
 80163f6:	46ae      	mov	lr, r5
 80163f8:	f04f 0a00 	mov.w	sl, #0
 80163fc:	f8bc b000 	ldrh.w	fp, [ip]
 8016400:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016404:	fb09 770b 	mla	r7, r9, fp, r7
 8016408:	4457      	add	r7, sl
 801640a:	b29b      	uxth	r3, r3
 801640c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016410:	f84e 3b04 	str.w	r3, [lr], #4
 8016414:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801641c:	f8be 3000 	ldrh.w	r3, [lr]
 8016420:	fb09 330a 	mla	r3, r9, sl, r3
 8016424:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016428:	4562      	cmp	r2, ip
 801642a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801642e:	d8e5      	bhi.n	80163fc <__multiply+0x10c>
 8016430:	9f01      	ldr	r7, [sp, #4]
 8016432:	51eb      	str	r3, [r5, r7]
 8016434:	3504      	adds	r5, #4
 8016436:	e799      	b.n	801636c <__multiply+0x7c>
 8016438:	3e01      	subs	r6, #1
 801643a:	e79b      	b.n	8016374 <__multiply+0x84>
 801643c:	08018660 	.word	0x08018660
 8016440:	08018671 	.word	0x08018671

08016444 <__pow5mult>:
 8016444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016448:	4615      	mov	r5, r2
 801644a:	f012 0203 	ands.w	r2, r2, #3
 801644e:	4607      	mov	r7, r0
 8016450:	460e      	mov	r6, r1
 8016452:	d007      	beq.n	8016464 <__pow5mult+0x20>
 8016454:	4c25      	ldr	r4, [pc, #148]	@ (80164ec <__pow5mult+0xa8>)
 8016456:	3a01      	subs	r2, #1
 8016458:	2300      	movs	r3, #0
 801645a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801645e:	f7ff fe9f 	bl	80161a0 <__multadd>
 8016462:	4606      	mov	r6, r0
 8016464:	10ad      	asrs	r5, r5, #2
 8016466:	d03d      	beq.n	80164e4 <__pow5mult+0xa0>
 8016468:	69fc      	ldr	r4, [r7, #28]
 801646a:	b97c      	cbnz	r4, 801648c <__pow5mult+0x48>
 801646c:	2010      	movs	r0, #16
 801646e:	f7fe f893 	bl	8014598 <malloc>
 8016472:	4602      	mov	r2, r0
 8016474:	61f8      	str	r0, [r7, #28]
 8016476:	b928      	cbnz	r0, 8016484 <__pow5mult+0x40>
 8016478:	4b1d      	ldr	r3, [pc, #116]	@ (80164f0 <__pow5mult+0xac>)
 801647a:	481e      	ldr	r0, [pc, #120]	@ (80164f4 <__pow5mult+0xb0>)
 801647c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016480:	f000 fa5a 	bl	8016938 <__assert_func>
 8016484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016488:	6004      	str	r4, [r0, #0]
 801648a:	60c4      	str	r4, [r0, #12]
 801648c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016494:	b94c      	cbnz	r4, 80164aa <__pow5mult+0x66>
 8016496:	f240 2171 	movw	r1, #625	@ 0x271
 801649a:	4638      	mov	r0, r7
 801649c:	f7ff ff12 	bl	80162c4 <__i2b>
 80164a0:	2300      	movs	r3, #0
 80164a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80164a6:	4604      	mov	r4, r0
 80164a8:	6003      	str	r3, [r0, #0]
 80164aa:	f04f 0900 	mov.w	r9, #0
 80164ae:	07eb      	lsls	r3, r5, #31
 80164b0:	d50a      	bpl.n	80164c8 <__pow5mult+0x84>
 80164b2:	4631      	mov	r1, r6
 80164b4:	4622      	mov	r2, r4
 80164b6:	4638      	mov	r0, r7
 80164b8:	f7ff ff1a 	bl	80162f0 <__multiply>
 80164bc:	4631      	mov	r1, r6
 80164be:	4680      	mov	r8, r0
 80164c0:	4638      	mov	r0, r7
 80164c2:	f7ff fe4b 	bl	801615c <_Bfree>
 80164c6:	4646      	mov	r6, r8
 80164c8:	106d      	asrs	r5, r5, #1
 80164ca:	d00b      	beq.n	80164e4 <__pow5mult+0xa0>
 80164cc:	6820      	ldr	r0, [r4, #0]
 80164ce:	b938      	cbnz	r0, 80164e0 <__pow5mult+0x9c>
 80164d0:	4622      	mov	r2, r4
 80164d2:	4621      	mov	r1, r4
 80164d4:	4638      	mov	r0, r7
 80164d6:	f7ff ff0b 	bl	80162f0 <__multiply>
 80164da:	6020      	str	r0, [r4, #0]
 80164dc:	f8c0 9000 	str.w	r9, [r0]
 80164e0:	4604      	mov	r4, r0
 80164e2:	e7e4      	b.n	80164ae <__pow5mult+0x6a>
 80164e4:	4630      	mov	r0, r6
 80164e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164ea:	bf00      	nop
 80164ec:	080186cc 	.word	0x080186cc
 80164f0:	080185f1 	.word	0x080185f1
 80164f4:	08018671 	.word	0x08018671

080164f8 <__lshift>:
 80164f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164fc:	460c      	mov	r4, r1
 80164fe:	6849      	ldr	r1, [r1, #4]
 8016500:	6923      	ldr	r3, [r4, #16]
 8016502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016506:	68a3      	ldr	r3, [r4, #8]
 8016508:	4607      	mov	r7, r0
 801650a:	4691      	mov	r9, r2
 801650c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016510:	f108 0601 	add.w	r6, r8, #1
 8016514:	42b3      	cmp	r3, r6
 8016516:	db0b      	blt.n	8016530 <__lshift+0x38>
 8016518:	4638      	mov	r0, r7
 801651a:	f7ff fddf 	bl	80160dc <_Balloc>
 801651e:	4605      	mov	r5, r0
 8016520:	b948      	cbnz	r0, 8016536 <__lshift+0x3e>
 8016522:	4602      	mov	r2, r0
 8016524:	4b28      	ldr	r3, [pc, #160]	@ (80165c8 <__lshift+0xd0>)
 8016526:	4829      	ldr	r0, [pc, #164]	@ (80165cc <__lshift+0xd4>)
 8016528:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801652c:	f000 fa04 	bl	8016938 <__assert_func>
 8016530:	3101      	adds	r1, #1
 8016532:	005b      	lsls	r3, r3, #1
 8016534:	e7ee      	b.n	8016514 <__lshift+0x1c>
 8016536:	2300      	movs	r3, #0
 8016538:	f100 0114 	add.w	r1, r0, #20
 801653c:	f100 0210 	add.w	r2, r0, #16
 8016540:	4618      	mov	r0, r3
 8016542:	4553      	cmp	r3, sl
 8016544:	db33      	blt.n	80165ae <__lshift+0xb6>
 8016546:	6920      	ldr	r0, [r4, #16]
 8016548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801654c:	f104 0314 	add.w	r3, r4, #20
 8016550:	f019 091f 	ands.w	r9, r9, #31
 8016554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016558:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801655c:	d02b      	beq.n	80165b6 <__lshift+0xbe>
 801655e:	f1c9 0e20 	rsb	lr, r9, #32
 8016562:	468a      	mov	sl, r1
 8016564:	2200      	movs	r2, #0
 8016566:	6818      	ldr	r0, [r3, #0]
 8016568:	fa00 f009 	lsl.w	r0, r0, r9
 801656c:	4310      	orrs	r0, r2
 801656e:	f84a 0b04 	str.w	r0, [sl], #4
 8016572:	f853 2b04 	ldr.w	r2, [r3], #4
 8016576:	459c      	cmp	ip, r3
 8016578:	fa22 f20e 	lsr.w	r2, r2, lr
 801657c:	d8f3      	bhi.n	8016566 <__lshift+0x6e>
 801657e:	ebac 0304 	sub.w	r3, ip, r4
 8016582:	3b15      	subs	r3, #21
 8016584:	f023 0303 	bic.w	r3, r3, #3
 8016588:	3304      	adds	r3, #4
 801658a:	f104 0015 	add.w	r0, r4, #21
 801658e:	4584      	cmp	ip, r0
 8016590:	bf38      	it	cc
 8016592:	2304      	movcc	r3, #4
 8016594:	50ca      	str	r2, [r1, r3]
 8016596:	b10a      	cbz	r2, 801659c <__lshift+0xa4>
 8016598:	f108 0602 	add.w	r6, r8, #2
 801659c:	3e01      	subs	r6, #1
 801659e:	4638      	mov	r0, r7
 80165a0:	612e      	str	r6, [r5, #16]
 80165a2:	4621      	mov	r1, r4
 80165a4:	f7ff fdda 	bl	801615c <_Bfree>
 80165a8:	4628      	mov	r0, r5
 80165aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80165b2:	3301      	adds	r3, #1
 80165b4:	e7c5      	b.n	8016542 <__lshift+0x4a>
 80165b6:	3904      	subs	r1, #4
 80165b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80165bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80165c0:	459c      	cmp	ip, r3
 80165c2:	d8f9      	bhi.n	80165b8 <__lshift+0xc0>
 80165c4:	e7ea      	b.n	801659c <__lshift+0xa4>
 80165c6:	bf00      	nop
 80165c8:	08018660 	.word	0x08018660
 80165cc:	08018671 	.word	0x08018671

080165d0 <__mcmp>:
 80165d0:	690a      	ldr	r2, [r1, #16]
 80165d2:	4603      	mov	r3, r0
 80165d4:	6900      	ldr	r0, [r0, #16]
 80165d6:	1a80      	subs	r0, r0, r2
 80165d8:	b530      	push	{r4, r5, lr}
 80165da:	d10e      	bne.n	80165fa <__mcmp+0x2a>
 80165dc:	3314      	adds	r3, #20
 80165de:	3114      	adds	r1, #20
 80165e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80165e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80165e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80165ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80165f0:	4295      	cmp	r5, r2
 80165f2:	d003      	beq.n	80165fc <__mcmp+0x2c>
 80165f4:	d205      	bcs.n	8016602 <__mcmp+0x32>
 80165f6:	f04f 30ff 	mov.w	r0, #4294967295
 80165fa:	bd30      	pop	{r4, r5, pc}
 80165fc:	42a3      	cmp	r3, r4
 80165fe:	d3f3      	bcc.n	80165e8 <__mcmp+0x18>
 8016600:	e7fb      	b.n	80165fa <__mcmp+0x2a>
 8016602:	2001      	movs	r0, #1
 8016604:	e7f9      	b.n	80165fa <__mcmp+0x2a>
	...

08016608 <__mdiff>:
 8016608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801660c:	4689      	mov	r9, r1
 801660e:	4606      	mov	r6, r0
 8016610:	4611      	mov	r1, r2
 8016612:	4648      	mov	r0, r9
 8016614:	4614      	mov	r4, r2
 8016616:	f7ff ffdb 	bl	80165d0 <__mcmp>
 801661a:	1e05      	subs	r5, r0, #0
 801661c:	d112      	bne.n	8016644 <__mdiff+0x3c>
 801661e:	4629      	mov	r1, r5
 8016620:	4630      	mov	r0, r6
 8016622:	f7ff fd5b 	bl	80160dc <_Balloc>
 8016626:	4602      	mov	r2, r0
 8016628:	b928      	cbnz	r0, 8016636 <__mdiff+0x2e>
 801662a:	4b3f      	ldr	r3, [pc, #252]	@ (8016728 <__mdiff+0x120>)
 801662c:	f240 2137 	movw	r1, #567	@ 0x237
 8016630:	483e      	ldr	r0, [pc, #248]	@ (801672c <__mdiff+0x124>)
 8016632:	f000 f981 	bl	8016938 <__assert_func>
 8016636:	2301      	movs	r3, #1
 8016638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801663c:	4610      	mov	r0, r2
 801663e:	b003      	add	sp, #12
 8016640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016644:	bfbc      	itt	lt
 8016646:	464b      	movlt	r3, r9
 8016648:	46a1      	movlt	r9, r4
 801664a:	4630      	mov	r0, r6
 801664c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016650:	bfba      	itte	lt
 8016652:	461c      	movlt	r4, r3
 8016654:	2501      	movlt	r5, #1
 8016656:	2500      	movge	r5, #0
 8016658:	f7ff fd40 	bl	80160dc <_Balloc>
 801665c:	4602      	mov	r2, r0
 801665e:	b918      	cbnz	r0, 8016668 <__mdiff+0x60>
 8016660:	4b31      	ldr	r3, [pc, #196]	@ (8016728 <__mdiff+0x120>)
 8016662:	f240 2145 	movw	r1, #581	@ 0x245
 8016666:	e7e3      	b.n	8016630 <__mdiff+0x28>
 8016668:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801666c:	6926      	ldr	r6, [r4, #16]
 801666e:	60c5      	str	r5, [r0, #12]
 8016670:	f109 0310 	add.w	r3, r9, #16
 8016674:	f109 0514 	add.w	r5, r9, #20
 8016678:	f104 0e14 	add.w	lr, r4, #20
 801667c:	f100 0b14 	add.w	fp, r0, #20
 8016680:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016684:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016688:	9301      	str	r3, [sp, #4]
 801668a:	46d9      	mov	r9, fp
 801668c:	f04f 0c00 	mov.w	ip, #0
 8016690:	9b01      	ldr	r3, [sp, #4]
 8016692:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016696:	f853 af04 	ldr.w	sl, [r3, #4]!
 801669a:	9301      	str	r3, [sp, #4]
 801669c:	fa1f f38a 	uxth.w	r3, sl
 80166a0:	4619      	mov	r1, r3
 80166a2:	b283      	uxth	r3, r0
 80166a4:	1acb      	subs	r3, r1, r3
 80166a6:	0c00      	lsrs	r0, r0, #16
 80166a8:	4463      	add	r3, ip
 80166aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80166ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80166b8:	4576      	cmp	r6, lr
 80166ba:	f849 3b04 	str.w	r3, [r9], #4
 80166be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80166c2:	d8e5      	bhi.n	8016690 <__mdiff+0x88>
 80166c4:	1b33      	subs	r3, r6, r4
 80166c6:	3b15      	subs	r3, #21
 80166c8:	f023 0303 	bic.w	r3, r3, #3
 80166cc:	3415      	adds	r4, #21
 80166ce:	3304      	adds	r3, #4
 80166d0:	42a6      	cmp	r6, r4
 80166d2:	bf38      	it	cc
 80166d4:	2304      	movcc	r3, #4
 80166d6:	441d      	add	r5, r3
 80166d8:	445b      	add	r3, fp
 80166da:	461e      	mov	r6, r3
 80166dc:	462c      	mov	r4, r5
 80166de:	4544      	cmp	r4, r8
 80166e0:	d30e      	bcc.n	8016700 <__mdiff+0xf8>
 80166e2:	f108 0103 	add.w	r1, r8, #3
 80166e6:	1b49      	subs	r1, r1, r5
 80166e8:	f021 0103 	bic.w	r1, r1, #3
 80166ec:	3d03      	subs	r5, #3
 80166ee:	45a8      	cmp	r8, r5
 80166f0:	bf38      	it	cc
 80166f2:	2100      	movcc	r1, #0
 80166f4:	440b      	add	r3, r1
 80166f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80166fa:	b191      	cbz	r1, 8016722 <__mdiff+0x11a>
 80166fc:	6117      	str	r7, [r2, #16]
 80166fe:	e79d      	b.n	801663c <__mdiff+0x34>
 8016700:	f854 1b04 	ldr.w	r1, [r4], #4
 8016704:	46e6      	mov	lr, ip
 8016706:	0c08      	lsrs	r0, r1, #16
 8016708:	fa1c fc81 	uxtah	ip, ip, r1
 801670c:	4471      	add	r1, lr
 801670e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016712:	b289      	uxth	r1, r1
 8016714:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016718:	f846 1b04 	str.w	r1, [r6], #4
 801671c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016720:	e7dd      	b.n	80166de <__mdiff+0xd6>
 8016722:	3f01      	subs	r7, #1
 8016724:	e7e7      	b.n	80166f6 <__mdiff+0xee>
 8016726:	bf00      	nop
 8016728:	08018660 	.word	0x08018660
 801672c:	08018671 	.word	0x08018671

08016730 <__d2b>:
 8016730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016734:	460f      	mov	r7, r1
 8016736:	2101      	movs	r1, #1
 8016738:	ec59 8b10 	vmov	r8, r9, d0
 801673c:	4616      	mov	r6, r2
 801673e:	f7ff fccd 	bl	80160dc <_Balloc>
 8016742:	4604      	mov	r4, r0
 8016744:	b930      	cbnz	r0, 8016754 <__d2b+0x24>
 8016746:	4602      	mov	r2, r0
 8016748:	4b23      	ldr	r3, [pc, #140]	@ (80167d8 <__d2b+0xa8>)
 801674a:	4824      	ldr	r0, [pc, #144]	@ (80167dc <__d2b+0xac>)
 801674c:	f240 310f 	movw	r1, #783	@ 0x30f
 8016750:	f000 f8f2 	bl	8016938 <__assert_func>
 8016754:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801675c:	b10d      	cbz	r5, 8016762 <__d2b+0x32>
 801675e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016762:	9301      	str	r3, [sp, #4]
 8016764:	f1b8 0300 	subs.w	r3, r8, #0
 8016768:	d023      	beq.n	80167b2 <__d2b+0x82>
 801676a:	4668      	mov	r0, sp
 801676c:	9300      	str	r3, [sp, #0]
 801676e:	f7ff fd7c 	bl	801626a <__lo0bits>
 8016772:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016776:	b1d0      	cbz	r0, 80167ae <__d2b+0x7e>
 8016778:	f1c0 0320 	rsb	r3, r0, #32
 801677c:	fa02 f303 	lsl.w	r3, r2, r3
 8016780:	430b      	orrs	r3, r1
 8016782:	40c2      	lsrs	r2, r0
 8016784:	6163      	str	r3, [r4, #20]
 8016786:	9201      	str	r2, [sp, #4]
 8016788:	9b01      	ldr	r3, [sp, #4]
 801678a:	61a3      	str	r3, [r4, #24]
 801678c:	2b00      	cmp	r3, #0
 801678e:	bf0c      	ite	eq
 8016790:	2201      	moveq	r2, #1
 8016792:	2202      	movne	r2, #2
 8016794:	6122      	str	r2, [r4, #16]
 8016796:	b1a5      	cbz	r5, 80167c2 <__d2b+0x92>
 8016798:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801679c:	4405      	add	r5, r0
 801679e:	603d      	str	r5, [r7, #0]
 80167a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80167a4:	6030      	str	r0, [r6, #0]
 80167a6:	4620      	mov	r0, r4
 80167a8:	b003      	add	sp, #12
 80167aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167ae:	6161      	str	r1, [r4, #20]
 80167b0:	e7ea      	b.n	8016788 <__d2b+0x58>
 80167b2:	a801      	add	r0, sp, #4
 80167b4:	f7ff fd59 	bl	801626a <__lo0bits>
 80167b8:	9b01      	ldr	r3, [sp, #4]
 80167ba:	6163      	str	r3, [r4, #20]
 80167bc:	3020      	adds	r0, #32
 80167be:	2201      	movs	r2, #1
 80167c0:	e7e8      	b.n	8016794 <__d2b+0x64>
 80167c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80167c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80167ca:	6038      	str	r0, [r7, #0]
 80167cc:	6918      	ldr	r0, [r3, #16]
 80167ce:	f7ff fd2d 	bl	801622c <__hi0bits>
 80167d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80167d6:	e7e5      	b.n	80167a4 <__d2b+0x74>
 80167d8:	08018660 	.word	0x08018660
 80167dc:	08018671 	.word	0x08018671

080167e0 <__sflush_r>:
 80167e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80167e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e8:	0716      	lsls	r6, r2, #28
 80167ea:	4605      	mov	r5, r0
 80167ec:	460c      	mov	r4, r1
 80167ee:	d454      	bmi.n	801689a <__sflush_r+0xba>
 80167f0:	684b      	ldr	r3, [r1, #4]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	dc02      	bgt.n	80167fc <__sflush_r+0x1c>
 80167f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	dd48      	ble.n	801688e <__sflush_r+0xae>
 80167fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80167fe:	2e00      	cmp	r6, #0
 8016800:	d045      	beq.n	801688e <__sflush_r+0xae>
 8016802:	2300      	movs	r3, #0
 8016804:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016808:	682f      	ldr	r7, [r5, #0]
 801680a:	6a21      	ldr	r1, [r4, #32]
 801680c:	602b      	str	r3, [r5, #0]
 801680e:	d030      	beq.n	8016872 <__sflush_r+0x92>
 8016810:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016812:	89a3      	ldrh	r3, [r4, #12]
 8016814:	0759      	lsls	r1, r3, #29
 8016816:	d505      	bpl.n	8016824 <__sflush_r+0x44>
 8016818:	6863      	ldr	r3, [r4, #4]
 801681a:	1ad2      	subs	r2, r2, r3
 801681c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801681e:	b10b      	cbz	r3, 8016824 <__sflush_r+0x44>
 8016820:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016822:	1ad2      	subs	r2, r2, r3
 8016824:	2300      	movs	r3, #0
 8016826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016828:	6a21      	ldr	r1, [r4, #32]
 801682a:	4628      	mov	r0, r5
 801682c:	47b0      	blx	r6
 801682e:	1c43      	adds	r3, r0, #1
 8016830:	89a3      	ldrh	r3, [r4, #12]
 8016832:	d106      	bne.n	8016842 <__sflush_r+0x62>
 8016834:	6829      	ldr	r1, [r5, #0]
 8016836:	291d      	cmp	r1, #29
 8016838:	d82b      	bhi.n	8016892 <__sflush_r+0xb2>
 801683a:	4a2a      	ldr	r2, [pc, #168]	@ (80168e4 <__sflush_r+0x104>)
 801683c:	410a      	asrs	r2, r1
 801683e:	07d6      	lsls	r6, r2, #31
 8016840:	d427      	bmi.n	8016892 <__sflush_r+0xb2>
 8016842:	2200      	movs	r2, #0
 8016844:	6062      	str	r2, [r4, #4]
 8016846:	04d9      	lsls	r1, r3, #19
 8016848:	6922      	ldr	r2, [r4, #16]
 801684a:	6022      	str	r2, [r4, #0]
 801684c:	d504      	bpl.n	8016858 <__sflush_r+0x78>
 801684e:	1c42      	adds	r2, r0, #1
 8016850:	d101      	bne.n	8016856 <__sflush_r+0x76>
 8016852:	682b      	ldr	r3, [r5, #0]
 8016854:	b903      	cbnz	r3, 8016858 <__sflush_r+0x78>
 8016856:	6560      	str	r0, [r4, #84]	@ 0x54
 8016858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801685a:	602f      	str	r7, [r5, #0]
 801685c:	b1b9      	cbz	r1, 801688e <__sflush_r+0xae>
 801685e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016862:	4299      	cmp	r1, r3
 8016864:	d002      	beq.n	801686c <__sflush_r+0x8c>
 8016866:	4628      	mov	r0, r5
 8016868:	f7ff fbee 	bl	8016048 <_free_r>
 801686c:	2300      	movs	r3, #0
 801686e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016870:	e00d      	b.n	801688e <__sflush_r+0xae>
 8016872:	2301      	movs	r3, #1
 8016874:	4628      	mov	r0, r5
 8016876:	47b0      	blx	r6
 8016878:	4602      	mov	r2, r0
 801687a:	1c50      	adds	r0, r2, #1
 801687c:	d1c9      	bne.n	8016812 <__sflush_r+0x32>
 801687e:	682b      	ldr	r3, [r5, #0]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d0c6      	beq.n	8016812 <__sflush_r+0x32>
 8016884:	2b1d      	cmp	r3, #29
 8016886:	d001      	beq.n	801688c <__sflush_r+0xac>
 8016888:	2b16      	cmp	r3, #22
 801688a:	d11e      	bne.n	80168ca <__sflush_r+0xea>
 801688c:	602f      	str	r7, [r5, #0]
 801688e:	2000      	movs	r0, #0
 8016890:	e022      	b.n	80168d8 <__sflush_r+0xf8>
 8016892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016896:	b21b      	sxth	r3, r3
 8016898:	e01b      	b.n	80168d2 <__sflush_r+0xf2>
 801689a:	690f      	ldr	r7, [r1, #16]
 801689c:	2f00      	cmp	r7, #0
 801689e:	d0f6      	beq.n	801688e <__sflush_r+0xae>
 80168a0:	0793      	lsls	r3, r2, #30
 80168a2:	680e      	ldr	r6, [r1, #0]
 80168a4:	bf08      	it	eq
 80168a6:	694b      	ldreq	r3, [r1, #20]
 80168a8:	600f      	str	r7, [r1, #0]
 80168aa:	bf18      	it	ne
 80168ac:	2300      	movne	r3, #0
 80168ae:	eba6 0807 	sub.w	r8, r6, r7
 80168b2:	608b      	str	r3, [r1, #8]
 80168b4:	f1b8 0f00 	cmp.w	r8, #0
 80168b8:	dde9      	ble.n	801688e <__sflush_r+0xae>
 80168ba:	6a21      	ldr	r1, [r4, #32]
 80168bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80168be:	4643      	mov	r3, r8
 80168c0:	463a      	mov	r2, r7
 80168c2:	4628      	mov	r0, r5
 80168c4:	47b0      	blx	r6
 80168c6:	2800      	cmp	r0, #0
 80168c8:	dc08      	bgt.n	80168dc <__sflush_r+0xfc>
 80168ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80168d2:	81a3      	strh	r3, [r4, #12]
 80168d4:	f04f 30ff 	mov.w	r0, #4294967295
 80168d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168dc:	4407      	add	r7, r0
 80168de:	eba8 0800 	sub.w	r8, r8, r0
 80168e2:	e7e7      	b.n	80168b4 <__sflush_r+0xd4>
 80168e4:	dfbffffe 	.word	0xdfbffffe

080168e8 <_fflush_r>:
 80168e8:	b538      	push	{r3, r4, r5, lr}
 80168ea:	690b      	ldr	r3, [r1, #16]
 80168ec:	4605      	mov	r5, r0
 80168ee:	460c      	mov	r4, r1
 80168f0:	b913      	cbnz	r3, 80168f8 <_fflush_r+0x10>
 80168f2:	2500      	movs	r5, #0
 80168f4:	4628      	mov	r0, r5
 80168f6:	bd38      	pop	{r3, r4, r5, pc}
 80168f8:	b118      	cbz	r0, 8016902 <_fflush_r+0x1a>
 80168fa:	6a03      	ldr	r3, [r0, #32]
 80168fc:	b90b      	cbnz	r3, 8016902 <_fflush_r+0x1a>
 80168fe:	f7fe fbfb 	bl	80150f8 <__sinit>
 8016902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d0f3      	beq.n	80168f2 <_fflush_r+0xa>
 801690a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801690c:	07d0      	lsls	r0, r2, #31
 801690e:	d404      	bmi.n	801691a <_fflush_r+0x32>
 8016910:	0599      	lsls	r1, r3, #22
 8016912:	d402      	bmi.n	801691a <_fflush_r+0x32>
 8016914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016916:	f7fe fd3a 	bl	801538e <__retarget_lock_acquire_recursive>
 801691a:	4628      	mov	r0, r5
 801691c:	4621      	mov	r1, r4
 801691e:	f7ff ff5f 	bl	80167e0 <__sflush_r>
 8016922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016924:	07da      	lsls	r2, r3, #31
 8016926:	4605      	mov	r5, r0
 8016928:	d4e4      	bmi.n	80168f4 <_fflush_r+0xc>
 801692a:	89a3      	ldrh	r3, [r4, #12]
 801692c:	059b      	lsls	r3, r3, #22
 801692e:	d4e1      	bmi.n	80168f4 <_fflush_r+0xc>
 8016930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016932:	f7fe fd2d 	bl	8015390 <__retarget_lock_release_recursive>
 8016936:	e7dd      	b.n	80168f4 <_fflush_r+0xc>

08016938 <__assert_func>:
 8016938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801693a:	4614      	mov	r4, r2
 801693c:	461a      	mov	r2, r3
 801693e:	4b09      	ldr	r3, [pc, #36]	@ (8016964 <__assert_func+0x2c>)
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	4605      	mov	r5, r0
 8016944:	68d8      	ldr	r0, [r3, #12]
 8016946:	b954      	cbnz	r4, 801695e <__assert_func+0x26>
 8016948:	4b07      	ldr	r3, [pc, #28]	@ (8016968 <__assert_func+0x30>)
 801694a:	461c      	mov	r4, r3
 801694c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016950:	9100      	str	r1, [sp, #0]
 8016952:	462b      	mov	r3, r5
 8016954:	4905      	ldr	r1, [pc, #20]	@ (801696c <__assert_func+0x34>)
 8016956:	f000 f841 	bl	80169dc <fiprintf>
 801695a:	f7fd fe15 	bl	8014588 <abort>
 801695e:	4b04      	ldr	r3, [pc, #16]	@ (8016970 <__assert_func+0x38>)
 8016960:	e7f4      	b.n	801694c <__assert_func+0x14>
 8016962:	bf00      	nop
 8016964:	2000003c 	.word	0x2000003c
 8016968:	0801880d 	.word	0x0801880d
 801696c:	080187df 	.word	0x080187df
 8016970:	080187d2 	.word	0x080187d2

08016974 <_calloc_r>:
 8016974:	b570      	push	{r4, r5, r6, lr}
 8016976:	fba1 5402 	umull	r5, r4, r1, r2
 801697a:	b93c      	cbnz	r4, 801698c <_calloc_r+0x18>
 801697c:	4629      	mov	r1, r5
 801697e:	f7fd fe3d 	bl	80145fc <_malloc_r>
 8016982:	4606      	mov	r6, r0
 8016984:	b928      	cbnz	r0, 8016992 <_calloc_r+0x1e>
 8016986:	2600      	movs	r6, #0
 8016988:	4630      	mov	r0, r6
 801698a:	bd70      	pop	{r4, r5, r6, pc}
 801698c:	220c      	movs	r2, #12
 801698e:	6002      	str	r2, [r0, #0]
 8016990:	e7f9      	b.n	8016986 <_calloc_r+0x12>
 8016992:	462a      	mov	r2, r5
 8016994:	4621      	mov	r1, r4
 8016996:	f7fe fc28 	bl	80151ea <memset>
 801699a:	e7f5      	b.n	8016988 <_calloc_r+0x14>

0801699c <__ascii_mbtowc>:
 801699c:	b082      	sub	sp, #8
 801699e:	b901      	cbnz	r1, 80169a2 <__ascii_mbtowc+0x6>
 80169a0:	a901      	add	r1, sp, #4
 80169a2:	b142      	cbz	r2, 80169b6 <__ascii_mbtowc+0x1a>
 80169a4:	b14b      	cbz	r3, 80169ba <__ascii_mbtowc+0x1e>
 80169a6:	7813      	ldrb	r3, [r2, #0]
 80169a8:	600b      	str	r3, [r1, #0]
 80169aa:	7812      	ldrb	r2, [r2, #0]
 80169ac:	1e10      	subs	r0, r2, #0
 80169ae:	bf18      	it	ne
 80169b0:	2001      	movne	r0, #1
 80169b2:	b002      	add	sp, #8
 80169b4:	4770      	bx	lr
 80169b6:	4610      	mov	r0, r2
 80169b8:	e7fb      	b.n	80169b2 <__ascii_mbtowc+0x16>
 80169ba:	f06f 0001 	mvn.w	r0, #1
 80169be:	e7f8      	b.n	80169b2 <__ascii_mbtowc+0x16>

080169c0 <__ascii_wctomb>:
 80169c0:	4603      	mov	r3, r0
 80169c2:	4608      	mov	r0, r1
 80169c4:	b141      	cbz	r1, 80169d8 <__ascii_wctomb+0x18>
 80169c6:	2aff      	cmp	r2, #255	@ 0xff
 80169c8:	d904      	bls.n	80169d4 <__ascii_wctomb+0x14>
 80169ca:	228a      	movs	r2, #138	@ 0x8a
 80169cc:	601a      	str	r2, [r3, #0]
 80169ce:	f04f 30ff 	mov.w	r0, #4294967295
 80169d2:	4770      	bx	lr
 80169d4:	700a      	strb	r2, [r1, #0]
 80169d6:	2001      	movs	r0, #1
 80169d8:	4770      	bx	lr
	...

080169dc <fiprintf>:
 80169dc:	b40e      	push	{r1, r2, r3}
 80169de:	b503      	push	{r0, r1, lr}
 80169e0:	4601      	mov	r1, r0
 80169e2:	ab03      	add	r3, sp, #12
 80169e4:	4805      	ldr	r0, [pc, #20]	@ (80169fc <fiprintf+0x20>)
 80169e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80169ea:	6800      	ldr	r0, [r0, #0]
 80169ec:	9301      	str	r3, [sp, #4]
 80169ee:	f000 f831 	bl	8016a54 <_vfiprintf_r>
 80169f2:	b002      	add	sp, #8
 80169f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80169f8:	b003      	add	sp, #12
 80169fa:	4770      	bx	lr
 80169fc:	2000003c 	.word	0x2000003c

08016a00 <__sfputc_r>:
 8016a00:	6893      	ldr	r3, [r2, #8]
 8016a02:	3b01      	subs	r3, #1
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	b410      	push	{r4}
 8016a08:	6093      	str	r3, [r2, #8]
 8016a0a:	da08      	bge.n	8016a1e <__sfputc_r+0x1e>
 8016a0c:	6994      	ldr	r4, [r2, #24]
 8016a0e:	42a3      	cmp	r3, r4
 8016a10:	db01      	blt.n	8016a16 <__sfputc_r+0x16>
 8016a12:	290a      	cmp	r1, #10
 8016a14:	d103      	bne.n	8016a1e <__sfputc_r+0x1e>
 8016a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a1a:	f000 b933 	b.w	8016c84 <__swbuf_r>
 8016a1e:	6813      	ldr	r3, [r2, #0]
 8016a20:	1c58      	adds	r0, r3, #1
 8016a22:	6010      	str	r0, [r2, #0]
 8016a24:	7019      	strb	r1, [r3, #0]
 8016a26:	4608      	mov	r0, r1
 8016a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a2c:	4770      	bx	lr

08016a2e <__sfputs_r>:
 8016a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a30:	4606      	mov	r6, r0
 8016a32:	460f      	mov	r7, r1
 8016a34:	4614      	mov	r4, r2
 8016a36:	18d5      	adds	r5, r2, r3
 8016a38:	42ac      	cmp	r4, r5
 8016a3a:	d101      	bne.n	8016a40 <__sfputs_r+0x12>
 8016a3c:	2000      	movs	r0, #0
 8016a3e:	e007      	b.n	8016a50 <__sfputs_r+0x22>
 8016a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a44:	463a      	mov	r2, r7
 8016a46:	4630      	mov	r0, r6
 8016a48:	f7ff ffda 	bl	8016a00 <__sfputc_r>
 8016a4c:	1c43      	adds	r3, r0, #1
 8016a4e:	d1f3      	bne.n	8016a38 <__sfputs_r+0xa>
 8016a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016a54 <_vfiprintf_r>:
 8016a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a58:	460d      	mov	r5, r1
 8016a5a:	b09d      	sub	sp, #116	@ 0x74
 8016a5c:	4614      	mov	r4, r2
 8016a5e:	4698      	mov	r8, r3
 8016a60:	4606      	mov	r6, r0
 8016a62:	b118      	cbz	r0, 8016a6c <_vfiprintf_r+0x18>
 8016a64:	6a03      	ldr	r3, [r0, #32]
 8016a66:	b90b      	cbnz	r3, 8016a6c <_vfiprintf_r+0x18>
 8016a68:	f7fe fb46 	bl	80150f8 <__sinit>
 8016a6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016a6e:	07d9      	lsls	r1, r3, #31
 8016a70:	d405      	bmi.n	8016a7e <_vfiprintf_r+0x2a>
 8016a72:	89ab      	ldrh	r3, [r5, #12]
 8016a74:	059a      	lsls	r2, r3, #22
 8016a76:	d402      	bmi.n	8016a7e <_vfiprintf_r+0x2a>
 8016a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016a7a:	f7fe fc88 	bl	801538e <__retarget_lock_acquire_recursive>
 8016a7e:	89ab      	ldrh	r3, [r5, #12]
 8016a80:	071b      	lsls	r3, r3, #28
 8016a82:	d501      	bpl.n	8016a88 <_vfiprintf_r+0x34>
 8016a84:	692b      	ldr	r3, [r5, #16]
 8016a86:	b99b      	cbnz	r3, 8016ab0 <_vfiprintf_r+0x5c>
 8016a88:	4629      	mov	r1, r5
 8016a8a:	4630      	mov	r0, r6
 8016a8c:	f000 f938 	bl	8016d00 <__swsetup_r>
 8016a90:	b170      	cbz	r0, 8016ab0 <_vfiprintf_r+0x5c>
 8016a92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016a94:	07dc      	lsls	r4, r3, #31
 8016a96:	d504      	bpl.n	8016aa2 <_vfiprintf_r+0x4e>
 8016a98:	f04f 30ff 	mov.w	r0, #4294967295
 8016a9c:	b01d      	add	sp, #116	@ 0x74
 8016a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aa2:	89ab      	ldrh	r3, [r5, #12]
 8016aa4:	0598      	lsls	r0, r3, #22
 8016aa6:	d4f7      	bmi.n	8016a98 <_vfiprintf_r+0x44>
 8016aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016aaa:	f7fe fc71 	bl	8015390 <__retarget_lock_release_recursive>
 8016aae:	e7f3      	b.n	8016a98 <_vfiprintf_r+0x44>
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ab4:	2320      	movs	r3, #32
 8016ab6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8016abe:	2330      	movs	r3, #48	@ 0x30
 8016ac0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016c70 <_vfiprintf_r+0x21c>
 8016ac4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016ac8:	f04f 0901 	mov.w	r9, #1
 8016acc:	4623      	mov	r3, r4
 8016ace:	469a      	mov	sl, r3
 8016ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ad4:	b10a      	cbz	r2, 8016ada <_vfiprintf_r+0x86>
 8016ad6:	2a25      	cmp	r2, #37	@ 0x25
 8016ad8:	d1f9      	bne.n	8016ace <_vfiprintf_r+0x7a>
 8016ada:	ebba 0b04 	subs.w	fp, sl, r4
 8016ade:	d00b      	beq.n	8016af8 <_vfiprintf_r+0xa4>
 8016ae0:	465b      	mov	r3, fp
 8016ae2:	4622      	mov	r2, r4
 8016ae4:	4629      	mov	r1, r5
 8016ae6:	4630      	mov	r0, r6
 8016ae8:	f7ff ffa1 	bl	8016a2e <__sfputs_r>
 8016aec:	3001      	adds	r0, #1
 8016aee:	f000 80a7 	beq.w	8016c40 <_vfiprintf_r+0x1ec>
 8016af2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016af4:	445a      	add	r2, fp
 8016af6:	9209      	str	r2, [sp, #36]	@ 0x24
 8016af8:	f89a 3000 	ldrb.w	r3, [sl]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	f000 809f 	beq.w	8016c40 <_vfiprintf_r+0x1ec>
 8016b02:	2300      	movs	r3, #0
 8016b04:	f04f 32ff 	mov.w	r2, #4294967295
 8016b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b0c:	f10a 0a01 	add.w	sl, sl, #1
 8016b10:	9304      	str	r3, [sp, #16]
 8016b12:	9307      	str	r3, [sp, #28]
 8016b14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016b18:	931a      	str	r3, [sp, #104]	@ 0x68
 8016b1a:	4654      	mov	r4, sl
 8016b1c:	2205      	movs	r2, #5
 8016b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b22:	4853      	ldr	r0, [pc, #332]	@ (8016c70 <_vfiprintf_r+0x21c>)
 8016b24:	f7e9 fb84 	bl	8000230 <memchr>
 8016b28:	9a04      	ldr	r2, [sp, #16]
 8016b2a:	b9d8      	cbnz	r0, 8016b64 <_vfiprintf_r+0x110>
 8016b2c:	06d1      	lsls	r1, r2, #27
 8016b2e:	bf44      	itt	mi
 8016b30:	2320      	movmi	r3, #32
 8016b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b36:	0713      	lsls	r3, r2, #28
 8016b38:	bf44      	itt	mi
 8016b3a:	232b      	movmi	r3, #43	@ 0x2b
 8016b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b40:	f89a 3000 	ldrb.w	r3, [sl]
 8016b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b46:	d015      	beq.n	8016b74 <_vfiprintf_r+0x120>
 8016b48:	9a07      	ldr	r2, [sp, #28]
 8016b4a:	4654      	mov	r4, sl
 8016b4c:	2000      	movs	r0, #0
 8016b4e:	f04f 0c0a 	mov.w	ip, #10
 8016b52:	4621      	mov	r1, r4
 8016b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b58:	3b30      	subs	r3, #48	@ 0x30
 8016b5a:	2b09      	cmp	r3, #9
 8016b5c:	d94b      	bls.n	8016bf6 <_vfiprintf_r+0x1a2>
 8016b5e:	b1b0      	cbz	r0, 8016b8e <_vfiprintf_r+0x13a>
 8016b60:	9207      	str	r2, [sp, #28]
 8016b62:	e014      	b.n	8016b8e <_vfiprintf_r+0x13a>
 8016b64:	eba0 0308 	sub.w	r3, r0, r8
 8016b68:	fa09 f303 	lsl.w	r3, r9, r3
 8016b6c:	4313      	orrs	r3, r2
 8016b6e:	9304      	str	r3, [sp, #16]
 8016b70:	46a2      	mov	sl, r4
 8016b72:	e7d2      	b.n	8016b1a <_vfiprintf_r+0xc6>
 8016b74:	9b03      	ldr	r3, [sp, #12]
 8016b76:	1d19      	adds	r1, r3, #4
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	9103      	str	r1, [sp, #12]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	bfbb      	ittet	lt
 8016b80:	425b      	neglt	r3, r3
 8016b82:	f042 0202 	orrlt.w	r2, r2, #2
 8016b86:	9307      	strge	r3, [sp, #28]
 8016b88:	9307      	strlt	r3, [sp, #28]
 8016b8a:	bfb8      	it	lt
 8016b8c:	9204      	strlt	r2, [sp, #16]
 8016b8e:	7823      	ldrb	r3, [r4, #0]
 8016b90:	2b2e      	cmp	r3, #46	@ 0x2e
 8016b92:	d10a      	bne.n	8016baa <_vfiprintf_r+0x156>
 8016b94:	7863      	ldrb	r3, [r4, #1]
 8016b96:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b98:	d132      	bne.n	8016c00 <_vfiprintf_r+0x1ac>
 8016b9a:	9b03      	ldr	r3, [sp, #12]
 8016b9c:	1d1a      	adds	r2, r3, #4
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	9203      	str	r2, [sp, #12]
 8016ba2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016ba6:	3402      	adds	r4, #2
 8016ba8:	9305      	str	r3, [sp, #20]
 8016baa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016c80 <_vfiprintf_r+0x22c>
 8016bae:	7821      	ldrb	r1, [r4, #0]
 8016bb0:	2203      	movs	r2, #3
 8016bb2:	4650      	mov	r0, sl
 8016bb4:	f7e9 fb3c 	bl	8000230 <memchr>
 8016bb8:	b138      	cbz	r0, 8016bca <_vfiprintf_r+0x176>
 8016bba:	9b04      	ldr	r3, [sp, #16]
 8016bbc:	eba0 000a 	sub.w	r0, r0, sl
 8016bc0:	2240      	movs	r2, #64	@ 0x40
 8016bc2:	4082      	lsls	r2, r0
 8016bc4:	4313      	orrs	r3, r2
 8016bc6:	3401      	adds	r4, #1
 8016bc8:	9304      	str	r3, [sp, #16]
 8016bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bce:	4829      	ldr	r0, [pc, #164]	@ (8016c74 <_vfiprintf_r+0x220>)
 8016bd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016bd4:	2206      	movs	r2, #6
 8016bd6:	f7e9 fb2b 	bl	8000230 <memchr>
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	d03f      	beq.n	8016c5e <_vfiprintf_r+0x20a>
 8016bde:	4b26      	ldr	r3, [pc, #152]	@ (8016c78 <_vfiprintf_r+0x224>)
 8016be0:	bb1b      	cbnz	r3, 8016c2a <_vfiprintf_r+0x1d6>
 8016be2:	9b03      	ldr	r3, [sp, #12]
 8016be4:	3307      	adds	r3, #7
 8016be6:	f023 0307 	bic.w	r3, r3, #7
 8016bea:	3308      	adds	r3, #8
 8016bec:	9303      	str	r3, [sp, #12]
 8016bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016bf0:	443b      	add	r3, r7
 8016bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bf4:	e76a      	b.n	8016acc <_vfiprintf_r+0x78>
 8016bf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	2001      	movs	r0, #1
 8016bfe:	e7a8      	b.n	8016b52 <_vfiprintf_r+0xfe>
 8016c00:	2300      	movs	r3, #0
 8016c02:	3401      	adds	r4, #1
 8016c04:	9305      	str	r3, [sp, #20]
 8016c06:	4619      	mov	r1, r3
 8016c08:	f04f 0c0a 	mov.w	ip, #10
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c12:	3a30      	subs	r2, #48	@ 0x30
 8016c14:	2a09      	cmp	r2, #9
 8016c16:	d903      	bls.n	8016c20 <_vfiprintf_r+0x1cc>
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d0c6      	beq.n	8016baa <_vfiprintf_r+0x156>
 8016c1c:	9105      	str	r1, [sp, #20]
 8016c1e:	e7c4      	b.n	8016baa <_vfiprintf_r+0x156>
 8016c20:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c24:	4604      	mov	r4, r0
 8016c26:	2301      	movs	r3, #1
 8016c28:	e7f0      	b.n	8016c0c <_vfiprintf_r+0x1b8>
 8016c2a:	ab03      	add	r3, sp, #12
 8016c2c:	9300      	str	r3, [sp, #0]
 8016c2e:	462a      	mov	r2, r5
 8016c30:	4b12      	ldr	r3, [pc, #72]	@ (8016c7c <_vfiprintf_r+0x228>)
 8016c32:	a904      	add	r1, sp, #16
 8016c34:	4630      	mov	r0, r6
 8016c36:	f7fd fe1b 	bl	8014870 <_printf_float>
 8016c3a:	4607      	mov	r7, r0
 8016c3c:	1c78      	adds	r0, r7, #1
 8016c3e:	d1d6      	bne.n	8016bee <_vfiprintf_r+0x19a>
 8016c40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c42:	07d9      	lsls	r1, r3, #31
 8016c44:	d405      	bmi.n	8016c52 <_vfiprintf_r+0x1fe>
 8016c46:	89ab      	ldrh	r3, [r5, #12]
 8016c48:	059a      	lsls	r2, r3, #22
 8016c4a:	d402      	bmi.n	8016c52 <_vfiprintf_r+0x1fe>
 8016c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c4e:	f7fe fb9f 	bl	8015390 <__retarget_lock_release_recursive>
 8016c52:	89ab      	ldrh	r3, [r5, #12]
 8016c54:	065b      	lsls	r3, r3, #25
 8016c56:	f53f af1f 	bmi.w	8016a98 <_vfiprintf_r+0x44>
 8016c5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016c5c:	e71e      	b.n	8016a9c <_vfiprintf_r+0x48>
 8016c5e:	ab03      	add	r3, sp, #12
 8016c60:	9300      	str	r3, [sp, #0]
 8016c62:	462a      	mov	r2, r5
 8016c64:	4b05      	ldr	r3, [pc, #20]	@ (8016c7c <_vfiprintf_r+0x228>)
 8016c66:	a904      	add	r1, sp, #16
 8016c68:	4630      	mov	r0, r6
 8016c6a:	f7fe f899 	bl	8014da0 <_printf_i>
 8016c6e:	e7e4      	b.n	8016c3a <_vfiprintf_r+0x1e6>
 8016c70:	0801890f 	.word	0x0801890f
 8016c74:	08018919 	.word	0x08018919
 8016c78:	08014871 	.word	0x08014871
 8016c7c:	08016a2f 	.word	0x08016a2f
 8016c80:	08018915 	.word	0x08018915

08016c84 <__swbuf_r>:
 8016c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c86:	460e      	mov	r6, r1
 8016c88:	4614      	mov	r4, r2
 8016c8a:	4605      	mov	r5, r0
 8016c8c:	b118      	cbz	r0, 8016c96 <__swbuf_r+0x12>
 8016c8e:	6a03      	ldr	r3, [r0, #32]
 8016c90:	b90b      	cbnz	r3, 8016c96 <__swbuf_r+0x12>
 8016c92:	f7fe fa31 	bl	80150f8 <__sinit>
 8016c96:	69a3      	ldr	r3, [r4, #24]
 8016c98:	60a3      	str	r3, [r4, #8]
 8016c9a:	89a3      	ldrh	r3, [r4, #12]
 8016c9c:	071a      	lsls	r2, r3, #28
 8016c9e:	d501      	bpl.n	8016ca4 <__swbuf_r+0x20>
 8016ca0:	6923      	ldr	r3, [r4, #16]
 8016ca2:	b943      	cbnz	r3, 8016cb6 <__swbuf_r+0x32>
 8016ca4:	4621      	mov	r1, r4
 8016ca6:	4628      	mov	r0, r5
 8016ca8:	f000 f82a 	bl	8016d00 <__swsetup_r>
 8016cac:	b118      	cbz	r0, 8016cb6 <__swbuf_r+0x32>
 8016cae:	f04f 37ff 	mov.w	r7, #4294967295
 8016cb2:	4638      	mov	r0, r7
 8016cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cb6:	6823      	ldr	r3, [r4, #0]
 8016cb8:	6922      	ldr	r2, [r4, #16]
 8016cba:	1a98      	subs	r0, r3, r2
 8016cbc:	6963      	ldr	r3, [r4, #20]
 8016cbe:	b2f6      	uxtb	r6, r6
 8016cc0:	4283      	cmp	r3, r0
 8016cc2:	4637      	mov	r7, r6
 8016cc4:	dc05      	bgt.n	8016cd2 <__swbuf_r+0x4e>
 8016cc6:	4621      	mov	r1, r4
 8016cc8:	4628      	mov	r0, r5
 8016cca:	f7ff fe0d 	bl	80168e8 <_fflush_r>
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	d1ed      	bne.n	8016cae <__swbuf_r+0x2a>
 8016cd2:	68a3      	ldr	r3, [r4, #8]
 8016cd4:	3b01      	subs	r3, #1
 8016cd6:	60a3      	str	r3, [r4, #8]
 8016cd8:	6823      	ldr	r3, [r4, #0]
 8016cda:	1c5a      	adds	r2, r3, #1
 8016cdc:	6022      	str	r2, [r4, #0]
 8016cde:	701e      	strb	r6, [r3, #0]
 8016ce0:	6962      	ldr	r2, [r4, #20]
 8016ce2:	1c43      	adds	r3, r0, #1
 8016ce4:	429a      	cmp	r2, r3
 8016ce6:	d004      	beq.n	8016cf2 <__swbuf_r+0x6e>
 8016ce8:	89a3      	ldrh	r3, [r4, #12]
 8016cea:	07db      	lsls	r3, r3, #31
 8016cec:	d5e1      	bpl.n	8016cb2 <__swbuf_r+0x2e>
 8016cee:	2e0a      	cmp	r6, #10
 8016cf0:	d1df      	bne.n	8016cb2 <__swbuf_r+0x2e>
 8016cf2:	4621      	mov	r1, r4
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	f7ff fdf7 	bl	80168e8 <_fflush_r>
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	d0d9      	beq.n	8016cb2 <__swbuf_r+0x2e>
 8016cfe:	e7d6      	b.n	8016cae <__swbuf_r+0x2a>

08016d00 <__swsetup_r>:
 8016d00:	b538      	push	{r3, r4, r5, lr}
 8016d02:	4b29      	ldr	r3, [pc, #164]	@ (8016da8 <__swsetup_r+0xa8>)
 8016d04:	4605      	mov	r5, r0
 8016d06:	6818      	ldr	r0, [r3, #0]
 8016d08:	460c      	mov	r4, r1
 8016d0a:	b118      	cbz	r0, 8016d14 <__swsetup_r+0x14>
 8016d0c:	6a03      	ldr	r3, [r0, #32]
 8016d0e:	b90b      	cbnz	r3, 8016d14 <__swsetup_r+0x14>
 8016d10:	f7fe f9f2 	bl	80150f8 <__sinit>
 8016d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d18:	0719      	lsls	r1, r3, #28
 8016d1a:	d422      	bmi.n	8016d62 <__swsetup_r+0x62>
 8016d1c:	06da      	lsls	r2, r3, #27
 8016d1e:	d407      	bmi.n	8016d30 <__swsetup_r+0x30>
 8016d20:	2209      	movs	r2, #9
 8016d22:	602a      	str	r2, [r5, #0]
 8016d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d28:	81a3      	strh	r3, [r4, #12]
 8016d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d2e:	e033      	b.n	8016d98 <__swsetup_r+0x98>
 8016d30:	0758      	lsls	r0, r3, #29
 8016d32:	d512      	bpl.n	8016d5a <__swsetup_r+0x5a>
 8016d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d36:	b141      	cbz	r1, 8016d4a <__swsetup_r+0x4a>
 8016d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016d3c:	4299      	cmp	r1, r3
 8016d3e:	d002      	beq.n	8016d46 <__swsetup_r+0x46>
 8016d40:	4628      	mov	r0, r5
 8016d42:	f7ff f981 	bl	8016048 <_free_r>
 8016d46:	2300      	movs	r3, #0
 8016d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8016d4a:	89a3      	ldrh	r3, [r4, #12]
 8016d4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016d50:	81a3      	strh	r3, [r4, #12]
 8016d52:	2300      	movs	r3, #0
 8016d54:	6063      	str	r3, [r4, #4]
 8016d56:	6923      	ldr	r3, [r4, #16]
 8016d58:	6023      	str	r3, [r4, #0]
 8016d5a:	89a3      	ldrh	r3, [r4, #12]
 8016d5c:	f043 0308 	orr.w	r3, r3, #8
 8016d60:	81a3      	strh	r3, [r4, #12]
 8016d62:	6923      	ldr	r3, [r4, #16]
 8016d64:	b94b      	cbnz	r3, 8016d7a <__swsetup_r+0x7a>
 8016d66:	89a3      	ldrh	r3, [r4, #12]
 8016d68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d70:	d003      	beq.n	8016d7a <__swsetup_r+0x7a>
 8016d72:	4621      	mov	r1, r4
 8016d74:	4628      	mov	r0, r5
 8016d76:	f000 f83f 	bl	8016df8 <__smakebuf_r>
 8016d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d7e:	f013 0201 	ands.w	r2, r3, #1
 8016d82:	d00a      	beq.n	8016d9a <__swsetup_r+0x9a>
 8016d84:	2200      	movs	r2, #0
 8016d86:	60a2      	str	r2, [r4, #8]
 8016d88:	6962      	ldr	r2, [r4, #20]
 8016d8a:	4252      	negs	r2, r2
 8016d8c:	61a2      	str	r2, [r4, #24]
 8016d8e:	6922      	ldr	r2, [r4, #16]
 8016d90:	b942      	cbnz	r2, 8016da4 <__swsetup_r+0xa4>
 8016d92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016d96:	d1c5      	bne.n	8016d24 <__swsetup_r+0x24>
 8016d98:	bd38      	pop	{r3, r4, r5, pc}
 8016d9a:	0799      	lsls	r1, r3, #30
 8016d9c:	bf58      	it	pl
 8016d9e:	6962      	ldrpl	r2, [r4, #20]
 8016da0:	60a2      	str	r2, [r4, #8]
 8016da2:	e7f4      	b.n	8016d8e <__swsetup_r+0x8e>
 8016da4:	2000      	movs	r0, #0
 8016da6:	e7f7      	b.n	8016d98 <__swsetup_r+0x98>
 8016da8:	2000003c 	.word	0x2000003c

08016dac <__swhatbuf_r>:
 8016dac:	b570      	push	{r4, r5, r6, lr}
 8016dae:	460c      	mov	r4, r1
 8016db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016db4:	2900      	cmp	r1, #0
 8016db6:	b096      	sub	sp, #88	@ 0x58
 8016db8:	4615      	mov	r5, r2
 8016dba:	461e      	mov	r6, r3
 8016dbc:	da0d      	bge.n	8016dda <__swhatbuf_r+0x2e>
 8016dbe:	89a3      	ldrh	r3, [r4, #12]
 8016dc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016dc4:	f04f 0100 	mov.w	r1, #0
 8016dc8:	bf14      	ite	ne
 8016dca:	2340      	movne	r3, #64	@ 0x40
 8016dcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016dd0:	2000      	movs	r0, #0
 8016dd2:	6031      	str	r1, [r6, #0]
 8016dd4:	602b      	str	r3, [r5, #0]
 8016dd6:	b016      	add	sp, #88	@ 0x58
 8016dd8:	bd70      	pop	{r4, r5, r6, pc}
 8016dda:	466a      	mov	r2, sp
 8016ddc:	f000 f848 	bl	8016e70 <_fstat_r>
 8016de0:	2800      	cmp	r0, #0
 8016de2:	dbec      	blt.n	8016dbe <__swhatbuf_r+0x12>
 8016de4:	9901      	ldr	r1, [sp, #4]
 8016de6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016dea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016dee:	4259      	negs	r1, r3
 8016df0:	4159      	adcs	r1, r3
 8016df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016df6:	e7eb      	b.n	8016dd0 <__swhatbuf_r+0x24>

08016df8 <__smakebuf_r>:
 8016df8:	898b      	ldrh	r3, [r1, #12]
 8016dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016dfc:	079d      	lsls	r5, r3, #30
 8016dfe:	4606      	mov	r6, r0
 8016e00:	460c      	mov	r4, r1
 8016e02:	d507      	bpl.n	8016e14 <__smakebuf_r+0x1c>
 8016e04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016e08:	6023      	str	r3, [r4, #0]
 8016e0a:	6123      	str	r3, [r4, #16]
 8016e0c:	2301      	movs	r3, #1
 8016e0e:	6163      	str	r3, [r4, #20]
 8016e10:	b003      	add	sp, #12
 8016e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e14:	ab01      	add	r3, sp, #4
 8016e16:	466a      	mov	r2, sp
 8016e18:	f7ff ffc8 	bl	8016dac <__swhatbuf_r>
 8016e1c:	9f00      	ldr	r7, [sp, #0]
 8016e1e:	4605      	mov	r5, r0
 8016e20:	4639      	mov	r1, r7
 8016e22:	4630      	mov	r0, r6
 8016e24:	f7fd fbea 	bl	80145fc <_malloc_r>
 8016e28:	b948      	cbnz	r0, 8016e3e <__smakebuf_r+0x46>
 8016e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e2e:	059a      	lsls	r2, r3, #22
 8016e30:	d4ee      	bmi.n	8016e10 <__smakebuf_r+0x18>
 8016e32:	f023 0303 	bic.w	r3, r3, #3
 8016e36:	f043 0302 	orr.w	r3, r3, #2
 8016e3a:	81a3      	strh	r3, [r4, #12]
 8016e3c:	e7e2      	b.n	8016e04 <__smakebuf_r+0xc>
 8016e3e:	89a3      	ldrh	r3, [r4, #12]
 8016e40:	6020      	str	r0, [r4, #0]
 8016e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e46:	81a3      	strh	r3, [r4, #12]
 8016e48:	9b01      	ldr	r3, [sp, #4]
 8016e4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016e4e:	b15b      	cbz	r3, 8016e68 <__smakebuf_r+0x70>
 8016e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e54:	4630      	mov	r0, r6
 8016e56:	f000 f81d 	bl	8016e94 <_isatty_r>
 8016e5a:	b128      	cbz	r0, 8016e68 <__smakebuf_r+0x70>
 8016e5c:	89a3      	ldrh	r3, [r4, #12]
 8016e5e:	f023 0303 	bic.w	r3, r3, #3
 8016e62:	f043 0301 	orr.w	r3, r3, #1
 8016e66:	81a3      	strh	r3, [r4, #12]
 8016e68:	89a3      	ldrh	r3, [r4, #12]
 8016e6a:	431d      	orrs	r5, r3
 8016e6c:	81a5      	strh	r5, [r4, #12]
 8016e6e:	e7cf      	b.n	8016e10 <__smakebuf_r+0x18>

08016e70 <_fstat_r>:
 8016e70:	b538      	push	{r3, r4, r5, lr}
 8016e72:	4d07      	ldr	r5, [pc, #28]	@ (8016e90 <_fstat_r+0x20>)
 8016e74:	2300      	movs	r3, #0
 8016e76:	4604      	mov	r4, r0
 8016e78:	4608      	mov	r0, r1
 8016e7a:	4611      	mov	r1, r2
 8016e7c:	602b      	str	r3, [r5, #0]
 8016e7e:	f7f7 f92d 	bl	800e0dc <_fstat>
 8016e82:	1c43      	adds	r3, r0, #1
 8016e84:	d102      	bne.n	8016e8c <_fstat_r+0x1c>
 8016e86:	682b      	ldr	r3, [r5, #0]
 8016e88:	b103      	cbz	r3, 8016e8c <_fstat_r+0x1c>
 8016e8a:	6023      	str	r3, [r4, #0]
 8016e8c:	bd38      	pop	{r3, r4, r5, pc}
 8016e8e:	bf00      	nop
 8016e90:	200006dc 	.word	0x200006dc

08016e94 <_isatty_r>:
 8016e94:	b538      	push	{r3, r4, r5, lr}
 8016e96:	4d06      	ldr	r5, [pc, #24]	@ (8016eb0 <_isatty_r+0x1c>)
 8016e98:	2300      	movs	r3, #0
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	4608      	mov	r0, r1
 8016e9e:	602b      	str	r3, [r5, #0]
 8016ea0:	f7f7 f92c 	bl	800e0fc <_isatty>
 8016ea4:	1c43      	adds	r3, r0, #1
 8016ea6:	d102      	bne.n	8016eae <_isatty_r+0x1a>
 8016ea8:	682b      	ldr	r3, [r5, #0]
 8016eaa:	b103      	cbz	r3, 8016eae <_isatty_r+0x1a>
 8016eac:	6023      	str	r3, [r4, #0]
 8016eae:	bd38      	pop	{r3, r4, r5, pc}
 8016eb0:	200006dc 	.word	0x200006dc

08016eb4 <_Unwind_GetDataRelBase>:
 8016eb4:	b508      	push	{r3, lr}
 8016eb6:	f7fd fb67 	bl	8014588 <abort>

08016eba <_Unwind_GetTextRelBase>:
 8016eba:	b508      	push	{r3, lr}
 8016ebc:	f7ff fffa 	bl	8016eb4 <_Unwind_GetDataRelBase>

08016ec0 <_init>:
 8016ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ec2:	bf00      	nop
 8016ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ec6:	bc08      	pop	{r3}
 8016ec8:	469e      	mov	lr, r3
 8016eca:	4770      	bx	lr

08016ecc <_fini>:
 8016ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ece:	bf00      	nop
 8016ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ed2:	bc08      	pop	{r3}
 8016ed4:	469e      	mov	lr, r3
 8016ed6:	4770      	bx	lr
