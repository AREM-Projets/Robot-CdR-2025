
stm32_embase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a48  08016f90  08016f90  00017f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000128c  080189d8  080189d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000d98  08019c64  08019c64  0001ac64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a9fc  0801a9fc  0001c1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801a9fc  0801a9fc  0001b9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa08  0801aa08  0001ba08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801aa0c  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001f8  0801ac04  0001c1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0801ac04  0001c6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d3d8  00000000  00000000  0001c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e87  00000000  00000000  00049600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  0004d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001991  00000000  00000000  0004f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e82  00000000  00000000  00050f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001faaa  00000000  00000000  00079d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e51a6  00000000  00000000  0009982d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e9d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d25c  00000000  00000000  0017ea18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018bc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016f78 	.word	0x08016f78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08016f78 	.word	0x08016f78

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f001 b8f6 	b.w	8001eec <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <selfrel_offset31>:
 8000fd4:	6803      	ldr	r3, [r0, #0]
 8000fd6:	005a      	lsls	r2, r3, #1
 8000fd8:	bf4c      	ite	mi
 8000fda:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000fde:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000fe2:	4418      	add	r0, r3
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <search_EIT_table>:
 8000fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fec:	b349      	cbz	r1, 8001042 <search_EIT_table+0x5a>
 8000fee:	1e4f      	subs	r7, r1, #1
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	4615      	mov	r5, r2
 8000ff4:	463e      	mov	r6, r7
 8000ff6:	f04f 0900 	mov.w	r9, #0
 8000ffa:	eb09 0106 	add.w	r1, r9, r6
 8000ffe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8001002:	1049      	asrs	r1, r1, #1
 8001004:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8001008:	4640      	mov	r0, r8
 800100a:	f7ff ffe3 	bl	8000fd4 <selfrel_offset31>
 800100e:	428f      	cmp	r7, r1
 8001010:	4603      	mov	r3, r0
 8001012:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8001016:	d00f      	beq.n	8001038 <search_EIT_table+0x50>
 8001018:	3008      	adds	r0, #8
 800101a:	42ab      	cmp	r3, r5
 800101c:	4420      	add	r0, r4
 800101e:	d807      	bhi.n	8001030 <search_EIT_table+0x48>
 8001020:	f7ff ffd8 	bl	8000fd4 <selfrel_offset31>
 8001024:	3801      	subs	r0, #1
 8001026:	42a8      	cmp	r0, r5
 8001028:	d208      	bcs.n	800103c <search_EIT_table+0x54>
 800102a:	f101 0901 	add.w	r9, r1, #1
 800102e:	e7e4      	b.n	8000ffa <search_EIT_table+0x12>
 8001030:	4589      	cmp	r9, r1
 8001032:	d006      	beq.n	8001042 <search_EIT_table+0x5a>
 8001034:	1e4e      	subs	r6, r1, #1
 8001036:	e7e0      	b.n	8000ffa <search_EIT_table+0x12>
 8001038:	42ab      	cmp	r3, r5
 800103a:	d8f9      	bhi.n	8001030 <search_EIT_table+0x48>
 800103c:	4640      	mov	r0, r8
 800103e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001042:	f04f 0800 	mov.w	r8, #0
 8001046:	4640      	mov	r0, r8
 8001048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800104c <__gnu_unwind_get_pr_addr>:
 800104c:	2801      	cmp	r0, #1
 800104e:	d007      	beq.n	8001060 <__gnu_unwind_get_pr_addr+0x14>
 8001050:	2802      	cmp	r0, #2
 8001052:	d007      	beq.n	8001064 <__gnu_unwind_get_pr_addr+0x18>
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <__gnu_unwind_get_pr_addr+0x1c>)
 8001056:	2800      	cmp	r0, #0
 8001058:	bf0c      	ite	eq
 800105a:	4618      	moveq	r0, r3
 800105c:	2000      	movne	r0, #0
 800105e:	4770      	bx	lr
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <__gnu_unwind_get_pr_addr+0x20>)
 8001062:	4770      	bx	lr
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <__gnu_unwind_get_pr_addr+0x24>)
 8001066:	4770      	bx	lr
 8001068:	08001715 	.word	0x08001715
 800106c:	08001719 	.word	0x08001719
 8001070:	0800171d 	.word	0x0800171d

08001074 <get_eit_entry>:
 8001074:	b530      	push	{r4, r5, lr}
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <get_eit_entry+0x88>)
 8001078:	b083      	sub	sp, #12
 800107a:	4604      	mov	r4, r0
 800107c:	1e8d      	subs	r5, r1, #2
 800107e:	b31b      	cbz	r3, 80010c8 <get_eit_entry+0x54>
 8001080:	a901      	add	r1, sp, #4
 8001082:	4628      	mov	r0, r5
 8001084:	f3af 8000 	nop.w
 8001088:	b388      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 800108a:	9901      	ldr	r1, [sp, #4]
 800108c:	462a      	mov	r2, r5
 800108e:	f7ff ffab 	bl	8000fe8 <search_EIT_table>
 8001092:	4601      	mov	r1, r0
 8001094:	b358      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 8001096:	f7ff ff9d 	bl	8000fd4 <selfrel_offset31>
 800109a:	684b      	ldr	r3, [r1, #4]
 800109c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d028      	beq.n	80010f4 <get_eit_entry+0x80>
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f101 0004 	add.w	r0, r1, #4
 80010a8:	db1f      	blt.n	80010ea <get_eit_entry+0x76>
 80010aa:	f7ff ff93 	bl	8000fd4 <selfrel_offset31>
 80010ae:	2300      	movs	r3, #0
 80010b0:	6523      	str	r3, [r4, #80]	@ 0x50
 80010b2:	6803      	ldr	r3, [r0, #0]
 80010b4:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0d      	blt.n	80010d6 <get_eit_entry+0x62>
 80010ba:	f7ff ff8b 	bl	8000fd4 <selfrel_offset31>
 80010be:	4603      	mov	r3, r0
 80010c0:	2000      	movs	r0, #0
 80010c2:	6123      	str	r3, [r4, #16]
 80010c4:	b003      	add	sp, #12
 80010c6:	bd30      	pop	{r4, r5, pc}
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <get_eit_entry+0x8c>)
 80010ca:	490e      	ldr	r1, [pc, #56]	@ (8001104 <get_eit_entry+0x90>)
 80010cc:	1ac9      	subs	r1, r1, r3
 80010ce:	10c9      	asrs	r1, r1, #3
 80010d0:	4618      	mov	r0, r3
 80010d2:	9101      	str	r1, [sp, #4]
 80010d4:	e7da      	b.n	800108c <get_eit_entry+0x18>
 80010d6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80010da:	f7ff ffb7 	bl	800104c <__gnu_unwind_get_pr_addr>
 80010de:	4603      	mov	r3, r0
 80010e0:	b128      	cbz	r0, 80010ee <get_eit_entry+0x7a>
 80010e2:	2000      	movs	r0, #0
 80010e4:	6123      	str	r3, [r4, #16]
 80010e6:	b003      	add	sp, #12
 80010e8:	bd30      	pop	{r4, r5, pc}
 80010ea:	2301      	movs	r3, #1
 80010ec:	e7e0      	b.n	80010b0 <get_eit_entry+0x3c>
 80010ee:	2300      	movs	r3, #0
 80010f0:	2009      	movs	r0, #9
 80010f2:	e7e6      	b.n	80010c2 <get_eit_entry+0x4e>
 80010f4:	2300      	movs	r3, #0
 80010f6:	2005      	movs	r0, #5
 80010f8:	e7e3      	b.n	80010c2 <get_eit_entry+0x4e>
 80010fa:	bf00      	nop
 80010fc:	00000000 	.word	0x00000000
 8001100:	08019c64 	.word	0x08019c64
 8001104:	0801a9fc 	.word	0x0801a9fc

08001108 <restore_non_core_regs>:
 8001108:	6803      	ldr	r3, [r0, #0]
 800110a:	07da      	lsls	r2, r3, #31
 800110c:	b510      	push	{r4, lr}
 800110e:	4604      	mov	r4, r0
 8001110:	d406      	bmi.n	8001120 <restore_non_core_regs+0x18>
 8001112:	079b      	lsls	r3, r3, #30
 8001114:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8001118:	d509      	bpl.n	800112e <restore_non_core_regs+0x26>
 800111a:	f000 fc69 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	0759      	lsls	r1, r3, #29
 8001122:	d509      	bpl.n	8001138 <restore_non_core_regs+0x30>
 8001124:	071a      	lsls	r2, r3, #28
 8001126:	d50e      	bpl.n	8001146 <restore_non_core_regs+0x3e>
 8001128:	06db      	lsls	r3, r3, #27
 800112a:	d513      	bpl.n	8001154 <restore_non_core_regs+0x4c>
 800112c:	bd10      	pop	{r4, pc}
 800112e:	f000 fc57 	bl	80019e0 <__gnu_Unwind_Restore_VFP>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	0759      	lsls	r1, r3, #29
 8001136:	d4f5      	bmi.n	8001124 <restore_non_core_regs+0x1c>
 8001138:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800113c:	f000 fc60 	bl	8001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	071a      	lsls	r2, r3, #28
 8001144:	d4f0      	bmi.n	8001128 <restore_non_core_regs+0x20>
 8001146:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800114a:	f000 fc61 	bl	8001a10 <__gnu_Unwind_Restore_WMMXD>
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	06db      	lsls	r3, r3, #27
 8001152:	d4eb      	bmi.n	800112c <restore_non_core_regs+0x24>
 8001154:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800115c:	f000 bc9c 	b.w	8001a98 <__gnu_Unwind_Restore_WMMXC>

08001160 <__gnu_unwind_24bit.constprop.0>:
 8001160:	2009      	movs	r0, #9
 8001162:	4770      	bx	lr

08001164 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001164:	4603      	mov	r3, r0
 8001166:	6800      	ldr	r0, [r0, #0]
 8001168:	b100      	cbz	r0, 800116c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800116a:	4418      	add	r0, r3
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <_Unwind_DebugHook>:
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <unwind_phase2>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	4604      	mov	r4, r0
 8001178:	460e      	mov	r6, r1
 800117a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff ff79 	bl	8001074 <get_eit_entry>
 8001182:	4605      	mov	r5, r0
 8001184:	b988      	cbnz	r0, 80011aa <unwind_phase2+0x36>
 8001186:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001188:	6162      	str	r2, [r4, #20]
 800118a:	6923      	ldr	r3, [r4, #16]
 800118c:	4632      	mov	r2, r6
 800118e:	4621      	mov	r1, r4
 8001190:	2001      	movs	r0, #1
 8001192:	4798      	blx	r3
 8001194:	2808      	cmp	r0, #8
 8001196:	d0f0      	beq.n	800117a <unwind_phase2+0x6>
 8001198:	2807      	cmp	r0, #7
 800119a:	d106      	bne.n	80011aa <unwind_phase2+0x36>
 800119c:	4628      	mov	r0, r5
 800119e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80011a0:	f7ff ffe6 	bl	8001170 <_Unwind_DebugHook>
 80011a4:	1d30      	adds	r0, r6, #4
 80011a6:	f000 fc0f 	bl	80019c8 <__restore_core_regs>
 80011aa:	f013 fa49 	bl	8014640 <abort>
 80011ae:	bf00      	nop

080011b0 <unwind_phase2_forced>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	1d0d      	adds	r5, r1, #4
 80011b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80011ba:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80011be:	4607      	mov	r7, r0
 80011c0:	4614      	mov	r4, r2
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80011c8:	f10d 0c0c 	add.w	ip, sp, #12
 80011cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011e0:	ae02      	add	r6, sp, #8
 80011e2:	f04f 0e00 	mov.w	lr, #0
 80011e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011ea:	f8c6 e000 	str.w	lr, [r6]
 80011ee:	e020      	b.n	8001232 <unwind_phase2_forced+0x82>
 80011f0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011f8:	4631      	mov	r1, r6
 80011fa:	a87a      	add	r0, sp, #488	@ 0x1e8
 80011fc:	f014 f925 	bl	801544a <memcpy>
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	aa7a      	add	r2, sp, #488	@ 0x1e8
 8001204:	4639      	mov	r1, r7
 8001206:	4650      	mov	r0, sl
 8001208:	4798      	blx	r3
 800120a:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 800120c:	6473      	str	r3, [r6, #68]	@ 0x44
 800120e:	4621      	mov	r1, r4
 8001210:	e9cd 6900 	strd	r6, r9, [sp]
 8001214:	4605      	mov	r5, r0
 8001216:	463b      	mov	r3, r7
 8001218:	463a      	mov	r2, r7
 800121a:	2001      	movs	r0, #1
 800121c:	47c0      	blx	r8
 800121e:	4604      	mov	r4, r0
 8001220:	bb18      	cbnz	r0, 800126a <unwind_phase2_forced+0xba>
 8001222:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001226:	a97a      	add	r1, sp, #488	@ 0x1e8
 8001228:	4630      	mov	r0, r6
 800122a:	f014 f90e 	bl	801544a <memcpy>
 800122e:	2d08      	cmp	r5, #8
 8001230:	d119      	bne.n	8001266 <unwind_phase2_forced+0xb6>
 8001232:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001234:	4638      	mov	r0, r7
 8001236:	f7ff ff1d 	bl	8001074 <get_eit_entry>
 800123a:	3409      	adds	r4, #9
 800123c:	fa5f fa84 	uxtb.w	sl, r4
 8001240:	4605      	mov	r5, r0
 8001242:	2800      	cmp	r0, #0
 8001244:	d0d4      	beq.n	80011f0 <unwind_phase2_forced+0x40>
 8001246:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001248:	6473      	str	r3, [r6, #68]	@ 0x44
 800124a:	463a      	mov	r2, r7
 800124c:	e9cd 6900 	strd	r6, r9, [sp]
 8001250:	463b      	mov	r3, r7
 8001252:	f04a 0110 	orr.w	r1, sl, #16
 8001256:	2001      	movs	r0, #1
 8001258:	47c0      	blx	r8
 800125a:	b930      	cbnz	r0, 800126a <unwind_phase2_forced+0xba>
 800125c:	4628      	mov	r0, r5
 800125e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001266:	2d07      	cmp	r5, #7
 8001268:	d005      	beq.n	8001276 <unwind_phase2_forced+0xc6>
 800126a:	2509      	movs	r5, #9
 800126c:	4628      	mov	r0, r5
 800126e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	4620      	mov	r0, r4
 8001278:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800127a:	f7ff ff79 	bl	8001170 <_Unwind_DebugHook>
 800127e:	a803      	add	r0, sp, #12
 8001280:	f000 fba2 	bl	80019c8 <__restore_core_regs>

08001284 <_Unwind_GetCFA>:
 8001284:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001286:	4770      	bx	lr

08001288 <__gnu_Unwind_RaiseException>:
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800128c:	640b      	str	r3, [r1, #64]	@ 0x40
 800128e:	f101 0c04 	add.w	ip, r1, #4
 8001292:	460e      	mov	r6, r1
 8001294:	4605      	mov	r5, r0
 8001296:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800129a:	b0f9      	sub	sp, #484	@ 0x1e4
 800129c:	ac01      	add	r4, sp, #4
 800129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80012b0:	f04f 37ff 	mov.w	r7, #4294967295
 80012b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012b8:	9700      	str	r7, [sp, #0]
 80012ba:	e006      	b.n	80012ca <__gnu_Unwind_RaiseException+0x42>
 80012bc:	692b      	ldr	r3, [r5, #16]
 80012be:	466a      	mov	r2, sp
 80012c0:	4629      	mov	r1, r5
 80012c2:	4798      	blx	r3
 80012c4:	2808      	cmp	r0, #8
 80012c6:	4604      	mov	r4, r0
 80012c8:	d108      	bne.n	80012dc <__gnu_Unwind_RaiseException+0x54>
 80012ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80012cc:	4628      	mov	r0, r5
 80012ce:	f7ff fed1 	bl	8001074 <get_eit_entry>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d0f2      	beq.n	80012bc <__gnu_Unwind_RaiseException+0x34>
 80012d6:	2009      	movs	r0, #9
 80012d8:	b079      	add	sp, #484	@ 0x1e4
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012dc:	4668      	mov	r0, sp
 80012de:	f7ff ff13 	bl	8001108 <restore_non_core_regs>
 80012e2:	2c06      	cmp	r4, #6
 80012e4:	d1f7      	bne.n	80012d6 <__gnu_Unwind_RaiseException+0x4e>
 80012e6:	4631      	mov	r1, r6
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7ff ff43 	bl	8001174 <unwind_phase2>
 80012ee:	bf00      	nop

080012f0 <__gnu_Unwind_ForcedUnwind>:
 80012f0:	60c1      	str	r1, [r0, #12]
 80012f2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012f4:	6182      	str	r2, [r0, #24]
 80012f6:	6419      	str	r1, [r3, #64]	@ 0x40
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	e758      	b.n	80011b0 <unwind_phase2_forced>
 80012fe:	bf00      	nop

08001300 <__gnu_Unwind_Resume>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	68c6      	ldr	r6, [r0, #12]
 8001304:	6943      	ldr	r3, [r0, #20]
 8001306:	640b      	str	r3, [r1, #64]	@ 0x40
 8001308:	b9ae      	cbnz	r6, 8001336 <__gnu_Unwind_Resume+0x36>
 800130a:	6903      	ldr	r3, [r0, #16]
 800130c:	460a      	mov	r2, r1
 800130e:	4604      	mov	r4, r0
 8001310:	460d      	mov	r5, r1
 8001312:	4601      	mov	r1, r0
 8001314:	2002      	movs	r0, #2
 8001316:	4798      	blx	r3
 8001318:	2807      	cmp	r0, #7
 800131a:	d005      	beq.n	8001328 <__gnu_Unwind_Resume+0x28>
 800131c:	2808      	cmp	r0, #8
 800131e:	d10f      	bne.n	8001340 <__gnu_Unwind_Resume+0x40>
 8001320:	4629      	mov	r1, r5
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff ff26 	bl	8001174 <unwind_phase2>
 8001328:	4630      	mov	r0, r6
 800132a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800132c:	f7ff ff20 	bl	8001170 <_Unwind_DebugHook>
 8001330:	1d28      	adds	r0, r5, #4
 8001332:	f000 fb49 	bl	80019c8 <__restore_core_regs>
 8001336:	2201      	movs	r2, #1
 8001338:	f7ff ff3a 	bl	80011b0 <unwind_phase2_forced>
 800133c:	f013 f980 	bl	8014640 <abort>
 8001340:	f013 f97e 	bl	8014640 <abort>

08001344 <__gnu_Unwind_Resume_or_Rethrow>:
 8001344:	68c2      	ldr	r2, [r0, #12]
 8001346:	b11a      	cbz	r2, 8001350 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001348:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800134a:	640a      	str	r2, [r1, #64]	@ 0x40
 800134c:	2200      	movs	r2, #0
 800134e:	e72f      	b.n	80011b0 <unwind_phase2_forced>
 8001350:	e79a      	b.n	8001288 <__gnu_Unwind_RaiseException>
 8001352:	bf00      	nop

08001354 <_Unwind_Complete>:
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <_Unwind_DeleteException>:
 8001358:	6883      	ldr	r3, [r0, #8]
 800135a:	4601      	mov	r1, r0
 800135c:	b10b      	cbz	r3, 8001362 <_Unwind_DeleteException+0xa>
 800135e:	2001      	movs	r0, #1
 8001360:	4718      	bx	r3
 8001362:	4770      	bx	lr

08001364 <_Unwind_VRS_Get>:
 8001364:	2901      	cmp	r1, #1
 8001366:	d010      	beq.n	800138a <_Unwind_VRS_Get+0x26>
 8001368:	d809      	bhi.n	800137e <_Unwind_VRS_Get+0x1a>
 800136a:	b983      	cbnz	r3, 800138e <_Unwind_VRS_Get+0x2a>
 800136c:	2a0f      	cmp	r2, #15
 800136e:	d80e      	bhi.n	800138e <_Unwind_VRS_Get+0x2a>
 8001370:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001374:	4618      	mov	r0, r3
 8001376:	6853      	ldr	r3, [r2, #4]
 8001378:	9a00      	ldr	r2, [sp, #0]
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4770      	bx	lr
 800137e:	3903      	subs	r1, #3
 8001380:	2901      	cmp	r1, #1
 8001382:	bf8c      	ite	hi
 8001384:	2002      	movhi	r0, #2
 8001386:	2001      	movls	r0, #1
 8001388:	4770      	bx	lr
 800138a:	4608      	mov	r0, r1
 800138c:	4770      	bx	lr
 800138e:	2002      	movs	r0, #2
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <_Unwind_GetGR>:
 8001394:	b500      	push	{lr}
 8001396:	b085      	sub	sp, #20
 8001398:	460a      	mov	r2, r1
 800139a:	2300      	movs	r3, #0
 800139c:	a903      	add	r1, sp, #12
 800139e:	9100      	str	r1, [sp, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff ffdf 	bl	8001364 <_Unwind_VRS_Get>
 80013a6:	9803      	ldr	r0, [sp, #12]
 80013a8:	b005      	add	sp, #20
 80013aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ae:	bf00      	nop

080013b0 <_Unwind_VRS_Set>:
 80013b0:	2901      	cmp	r1, #1
 80013b2:	d010      	beq.n	80013d6 <_Unwind_VRS_Set+0x26>
 80013b4:	d809      	bhi.n	80013ca <_Unwind_VRS_Set+0x1a>
 80013b6:	b983      	cbnz	r3, 80013da <_Unwind_VRS_Set+0x2a>
 80013b8:	2a0f      	cmp	r2, #15
 80013ba:	d80e      	bhi.n	80013da <_Unwind_VRS_Set+0x2a>
 80013bc:	9900      	ldr	r1, [sp, #0]
 80013be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80013c2:	6809      	ldr	r1, [r1, #0]
 80013c4:	6051      	str	r1, [r2, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	4770      	bx	lr
 80013ca:	3903      	subs	r1, #3
 80013cc:	2901      	cmp	r1, #1
 80013ce:	bf8c      	ite	hi
 80013d0:	2002      	movhi	r0, #2
 80013d2:	2001      	movls	r0, #1
 80013d4:	4770      	bx	lr
 80013d6:	4608      	mov	r0, r1
 80013d8:	4770      	bx	lr
 80013da:	2002      	movs	r0, #2
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <_Unwind_SetGR>:
 80013e0:	b510      	push	{r4, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	2300      	movs	r3, #0
 80013e6:	ac03      	add	r4, sp, #12
 80013e8:	9203      	str	r2, [sp, #12]
 80013ea:	9400      	str	r4, [sp, #0]
 80013ec:	460a      	mov	r2, r1
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff ffde 	bl	80013b0 <_Unwind_VRS_Set>
 80013f4:	b004      	add	sp, #16
 80013f6:	bd10      	pop	{r4, pc}

080013f8 <__gnu_Unwind_Backtrace>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	f102 0c04 	add.w	ip, r2, #4
 8001402:	4605      	mov	r5, r0
 8001404:	460c      	mov	r4, r1
 8001406:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800140a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800140e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8001412:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001416:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800141a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800141e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001422:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001426:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800142a:	f04f 36ff 	mov.w	r6, #4294967295
 800142e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001432:	9616      	str	r6, [sp, #88]	@ 0x58
 8001434:	e010      	b.n	8001458 <__gnu_Unwind_Backtrace+0x60>
 8001436:	f7ff ffd3 	bl	80013e0 <_Unwind_SetGR>
 800143a:	4621      	mov	r1, r4
 800143c:	a816      	add	r0, sp, #88	@ 0x58
 800143e:	47a8      	blx	r5
 8001440:	4603      	mov	r3, r0
 8001442:	aa16      	add	r2, sp, #88	@ 0x58
 8001444:	4669      	mov	r1, sp
 8001446:	2008      	movs	r0, #8
 8001448:	b983      	cbnz	r3, 800146c <__gnu_Unwind_Backtrace+0x74>
 800144a:	9b04      	ldr	r3, [sp, #16]
 800144c:	4798      	blx	r3
 800144e:	2805      	cmp	r0, #5
 8001450:	4606      	mov	r6, r0
 8001452:	d00c      	beq.n	800146e <__gnu_Unwind_Backtrace+0x76>
 8001454:	2809      	cmp	r0, #9
 8001456:	d009      	beq.n	800146c <__gnu_Unwind_Backtrace+0x74>
 8001458:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800145a:	4668      	mov	r0, sp
 800145c:	f7ff fe0a 	bl	8001074 <get_eit_entry>
 8001460:	4603      	mov	r3, r0
 8001462:	466a      	mov	r2, sp
 8001464:	210c      	movs	r1, #12
 8001466:	a816      	add	r0, sp, #88	@ 0x58
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0e4      	beq.n	8001436 <__gnu_Unwind_Backtrace+0x3e>
 800146c:	2609      	movs	r6, #9
 800146e:	a816      	add	r0, sp, #88	@ 0x58
 8001470:	f7ff fe4a 	bl	8001108 <restore_non_core_regs>
 8001474:	4630      	mov	r0, r6
 8001476:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800147a:	bd70      	pop	{r4, r5, r6, pc}

0800147c <__gnu_unwind_pr_common>:
 800147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001480:	4693      	mov	fp, r2
 8001482:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001484:	b089      	sub	sp, #36	@ 0x24
 8001486:	460d      	mov	r5, r1
 8001488:	f852 1b04 	ldr.w	r1, [r2], #4
 800148c:	9206      	str	r2, [sp, #24]
 800148e:	f000 0c03 	and.w	ip, r0, #3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d079      	beq.n	800158a <__gnu_unwind_pr_common+0x10e>
 8001496:	0c0c      	lsrs	r4, r1, #16
 8001498:	f88d 401d 	strb.w	r4, [sp, #29]
 800149c:	0409      	lsls	r1, r1, #16
 800149e:	b2e4      	uxtb	r4, r4
 80014a0:	9105      	str	r1, [sp, #20]
 80014a2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80014a6:	2102      	movs	r1, #2
 80014a8:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 80014aa:	f88d 101c 	strb.w	r1, [sp, #28]
 80014ae:	f1bc 0f02 	cmp.w	ip, #2
 80014b2:	bf08      	it	eq
 80014b4:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 80014b6:	f017 0701 	ands.w	r7, r7, #1
 80014ba:	d00c      	beq.n	80014d6 <__gnu_unwind_pr_common+0x5a>
 80014bc:	a905      	add	r1, sp, #20
 80014be:	4658      	mov	r0, fp
 80014c0:	f000 fb84 	bl	8001bcc <__gnu_unwind_execute>
 80014c4:	b918      	cbnz	r0, 80014ce <__gnu_unwind_pr_common+0x52>
 80014c6:	2008      	movs	r0, #8
 80014c8:	b009      	add	sp, #36	@ 0x24
 80014ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ce:	2009      	movs	r0, #9
 80014d0:	b009      	add	sp, #36	@ 0x24
 80014d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014d6:	6816      	ldr	r6, [r2, #0]
 80014d8:	2e00      	cmp	r6, #0
 80014da:	d0ef      	beq.n	80014bc <__gnu_unwind_pr_common+0x40>
 80014dc:	f000 0108 	and.w	r1, r0, #8
 80014e0:	9101      	str	r1, [sp, #4]
 80014e2:	46b2      	mov	sl, r6
 80014e4:	9702      	str	r7, [sp, #8]
 80014e6:	4664      	mov	r4, ip
 80014e8:	4699      	mov	r9, r3
 80014ea:	f1b9 0f02 	cmp.w	r9, #2
 80014ee:	d048      	beq.n	8001582 <__gnu_unwind_pr_common+0x106>
 80014f0:	f8b2 a000 	ldrh.w	sl, [r2]
 80014f4:	8856      	ldrh	r6, [r2, #2]
 80014f6:	f102 0804 	add.w	r8, r2, #4
 80014fa:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80014fc:	f026 0301 	bic.w	r3, r6, #1
 8001500:	210f      	movs	r1, #15
 8001502:	4658      	mov	r0, fp
 8001504:	189f      	adds	r7, r3, r2
 8001506:	f7ff ff45 	bl	8001394 <_Unwind_GetGR>
 800150a:	4287      	cmp	r7, r0
 800150c:	d837      	bhi.n	800157e <__gnu_unwind_pr_common+0x102>
 800150e:	f02a 0201 	bic.w	r2, sl, #1
 8001512:	443a      	add	r2, r7
 8001514:	4282      	cmp	r2, r0
 8001516:	bf94      	ite	ls
 8001518:	2200      	movls	r2, #0
 800151a:	2201      	movhi	r2, #1
 800151c:	0073      	lsls	r3, r6, #1
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	f00a 0a01 	and.w	sl, sl, #1
 8001526:	ea43 030a 	orr.w	r3, r3, sl
 800152a:	2b01      	cmp	r3, #1
 800152c:	d047      	beq.n	80015be <__gnu_unwind_pr_common+0x142>
 800152e:	2b02      	cmp	r3, #2
 8001530:	d031      	beq.n	8001596 <__gnu_unwind_pr_common+0x11a>
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1cb      	bne.n	80014ce <__gnu_unwind_pr_common+0x52>
 8001536:	b114      	cbz	r4, 800153e <__gnu_unwind_pr_common+0xc2>
 8001538:	2a00      	cmp	r2, #0
 800153a:	f040 80c9 	bne.w	80016d0 <__gnu_unwind_pr_common+0x254>
 800153e:	f108 0204 	add.w	r2, r8, #4
 8001542:	f8d2 a000 	ldr.w	sl, [r2]
 8001546:	f1ba 0f00 	cmp.w	sl, #0
 800154a:	d1ce      	bne.n	80014ea <__gnu_unwind_pr_common+0x6e>
 800154c:	a905      	add	r1, sp, #20
 800154e:	4658      	mov	r0, fp
 8001550:	9f02      	ldr	r7, [sp, #8]
 8001552:	f000 fb3b 	bl	8001bcc <__gnu_unwind_execute>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1b9      	bne.n	80014ce <__gnu_unwind_pr_common+0x52>
 800155a:	2f00      	cmp	r7, #0
 800155c:	d0b3      	beq.n	80014c6 <__gnu_unwind_pr_common+0x4a>
 800155e:	210f      	movs	r1, #15
 8001560:	4658      	mov	r0, fp
 8001562:	f7ff ff17 	bl	8001394 <_Unwind_GetGR>
 8001566:	210e      	movs	r1, #14
 8001568:	4602      	mov	r2, r0
 800156a:	4658      	mov	r0, fp
 800156c:	f7ff ff38 	bl	80013e0 <_Unwind_SetGR>
 8001570:	4a67      	ldr	r2, [pc, #412]	@ (8001710 <__gnu_unwind_pr_common+0x294>)
 8001572:	210f      	movs	r1, #15
 8001574:	4658      	mov	r0, fp
 8001576:	f7ff ff33 	bl	80013e0 <_Unwind_SetGR>
 800157a:	2007      	movs	r0, #7
 800157c:	e7a8      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 800157e:	2200      	movs	r2, #0
 8001580:	e7cc      	b.n	800151c <__gnu_unwind_pr_common+0xa0>
 8001582:	6856      	ldr	r6, [r2, #4]
 8001584:	f102 0808 	add.w	r8, r2, #8
 8001588:	e7b7      	b.n	80014fa <__gnu_unwind_pr_common+0x7e>
 800158a:	0209      	lsls	r1, r1, #8
 800158c:	9105      	str	r1, [sp, #20]
 800158e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001592:	2103      	movs	r1, #3
 8001594:	e788      	b.n	80014a8 <__gnu_unwind_pr_common+0x2c>
 8001596:	f8d8 6000 	ldr.w	r6, [r8]
 800159a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800159e:	2c00      	cmp	r4, #0
 80015a0:	d144      	bne.n	800162c <__gnu_unwind_pr_common+0x1b0>
 80015a2:	b122      	cbz	r2, 80015ae <__gnu_unwind_pr_common+0x132>
 80015a4:	9a01      	ldr	r2, [sp, #4]
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	d05a      	beq.n	8001660 <__gnu_unwind_pr_common+0x1e4>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d058      	beq.n	8001660 <__gnu_unwind_pr_common+0x1e4>
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	da01      	bge.n	80015b6 <__gnu_unwind_pr_common+0x13a>
 80015b2:	f108 0804 	add.w	r8, r8, #4
 80015b6:	3301      	adds	r3, #1
 80015b8:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 80015bc:	e7c1      	b.n	8001542 <__gnu_unwind_pr_common+0xc6>
 80015be:	b9ec      	cbnz	r4, 80015fc <__gnu_unwind_pr_common+0x180>
 80015c0:	b1ca      	cbz	r2, 80015f6 <__gnu_unwind_pr_common+0x17a>
 80015c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80015c6:	f8d8 2000 	ldr.w	r2, [r8]
 80015ca:	1c99      	adds	r1, r3, #2
 80015cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80015d0:	f43f af7d 	beq.w	80014ce <__gnu_unwind_pr_common+0x52>
 80015d4:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 80015d8:	3301      	adds	r3, #1
 80015da:	9104      	str	r1, [sp, #16]
 80015dc:	f000 808b 	beq.w	80016f6 <__gnu_unwind_pr_common+0x27a>
 80015e0:	f108 0004 	add.w	r0, r8, #4
 80015e4:	f7ff fdbe 	bl	8001164 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015e8:	ab04      	add	r3, sp, #16
 80015ea:	4601      	mov	r1, r0
 80015ec:	4628      	mov	r0, r5
 80015ee:	f011 f88f 	bl	8012710 <__cxa_type_match>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d157      	bne.n	80016a6 <__gnu_unwind_pr_common+0x22a>
 80015f6:	f108 0208 	add.w	r2, r8, #8
 80015fa:	e7a2      	b.n	8001542 <__gnu_unwind_pr_common+0xc6>
 80015fc:	210d      	movs	r1, #13
 80015fe:	4658      	mov	r0, fp
 8001600:	f7ff fec8 	bl	8001394 <_Unwind_GetGR>
 8001604:	6a2b      	ldr	r3, [r5, #32]
 8001606:	4283      	cmp	r3, r0
 8001608:	d1f5      	bne.n	80015f6 <__gnu_unwind_pr_common+0x17a>
 800160a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800160c:	4598      	cmp	r8, r3
 800160e:	d1f2      	bne.n	80015f6 <__gnu_unwind_pr_common+0x17a>
 8001610:	4640      	mov	r0, r8
 8001612:	f7ff fcdf 	bl	8000fd4 <selfrel_offset31>
 8001616:	210f      	movs	r1, #15
 8001618:	4602      	mov	r2, r0
 800161a:	4658      	mov	r0, fp
 800161c:	f7ff fee0 	bl	80013e0 <_Unwind_SetGR>
 8001620:	462a      	mov	r2, r5
 8001622:	2100      	movs	r1, #0
 8001624:	4658      	mov	r0, fp
 8001626:	f7ff fedb 	bl	80013e0 <_Unwind_SetGR>
 800162a:	e7a6      	b.n	800157a <__gnu_unwind_pr_common+0xfe>
 800162c:	210d      	movs	r1, #13
 800162e:	4658      	mov	r0, fp
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	f7ff feaf 	bl	8001394 <_Unwind_GetGR>
 8001636:	6a2a      	ldr	r2, [r5, #32]
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	4282      	cmp	r2, r0
 800163c:	d1b7      	bne.n	80015ae <__gnu_unwind_pr_common+0x132>
 800163e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001640:	4590      	cmp	r8, r2
 8001642:	d1b4      	bne.n	80015ae <__gnu_unwind_pr_common+0x132>
 8001644:	2700      	movs	r7, #0
 8001646:	2204      	movs	r2, #4
 8001648:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800164c:	4442      	add	r2, r8
 800164e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001650:	636a      	str	r2, [r5, #52]	@ 0x34
 8001652:	f8d8 2000 	ldr.w	r2, [r8]
 8001656:	42ba      	cmp	r2, r7
 8001658:	db55      	blt.n	8001706 <__gnu_unwind_pr_common+0x28a>
 800165a:	2201      	movs	r2, #1
 800165c:	9202      	str	r2, [sp, #8]
 800165e:	e7aa      	b.n	80015b6 <__gnu_unwind_pr_common+0x13a>
 8001660:	9403      	str	r4, [sp, #12]
 8001662:	f108 0a04 	add.w	sl, r8, #4
 8001666:	2600      	movs	r6, #0
 8001668:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800166c:	461c      	mov	r4, r3
 800166e:	e00d      	b.n	800168c <__gnu_unwind_pr_common+0x210>
 8001670:	4650      	mov	r0, sl
 8001672:	9704      	str	r7, [sp, #16]
 8001674:	f7ff fd76 	bl	8001164 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001678:	2200      	movs	r2, #0
 800167a:	4601      	mov	r1, r0
 800167c:	ab04      	add	r3, sp, #16
 800167e:	4628      	mov	r0, r5
 8001680:	3601      	adds	r6, #1
 8001682:	f10a 0a04 	add.w	sl, sl, #4
 8001686:	f011 f843 	bl	8012710 <__cxa_type_match>
 800168a:	b9e0      	cbnz	r0, 80016c6 <__gnu_unwind_pr_common+0x24a>
 800168c:	42a6      	cmp	r6, r4
 800168e:	d1ef      	bne.n	8001670 <__gnu_unwind_pr_common+0x1f4>
 8001690:	210d      	movs	r1, #13
 8001692:	4658      	mov	r0, fp
 8001694:	f7ff fe7e 	bl	8001394 <_Unwind_GetGR>
 8001698:	9b04      	ldr	r3, [sp, #16]
 800169a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800169e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 80016a2:	2006      	movs	r0, #6
 80016a4:	e714      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 80016a6:	4604      	mov	r4, r0
 80016a8:	210d      	movs	r1, #13
 80016aa:	4658      	mov	r0, fp
 80016ac:	f7ff fe72 	bl	8001394 <_Unwind_GetGR>
 80016b0:	9e04      	ldr	r6, [sp, #16]
 80016b2:	6228      	str	r0, [r5, #32]
 80016b4:	2c02      	cmp	r4, #2
 80016b6:	bf04      	itt	eq
 80016b8:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 80016ba:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 80016be:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 80016c2:	2006      	movs	r0, #6
 80016c4:	e704      	b.n	80014d0 <__gnu_unwind_pr_common+0x54>
 80016c6:	4623      	mov	r3, r4
 80016c8:	f8d8 6000 	ldr.w	r6, [r8]
 80016cc:	9c03      	ldr	r4, [sp, #12]
 80016ce:	e76e      	b.n	80015ae <__gnu_unwind_pr_common+0x132>
 80016d0:	4640      	mov	r0, r8
 80016d2:	f7ff fc7f 	bl	8000fd4 <selfrel_offset31>
 80016d6:	f108 0204 	add.w	r2, r8, #4
 80016da:	4604      	mov	r4, r0
 80016dc:	63aa      	str	r2, [r5, #56]	@ 0x38
 80016de:	4628      	mov	r0, r5
 80016e0:	f011 f874 	bl	80127cc <__cxa_begin_cleanup>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	f43f aef2 	beq.w	80014ce <__gnu_unwind_pr_common+0x52>
 80016ea:	4622      	mov	r2, r4
 80016ec:	210f      	movs	r1, #15
 80016ee:	4658      	mov	r0, fp
 80016f0:	f7ff fe76 	bl	80013e0 <_Unwind_SetGR>
 80016f4:	e741      	b.n	800157a <__gnu_unwind_pr_common+0xfe>
 80016f6:	460c      	mov	r4, r1
 80016f8:	4658      	mov	r0, fp
 80016fa:	210d      	movs	r1, #13
 80016fc:	f7ff fe4a 	bl	8001394 <_Unwind_GetGR>
 8001700:	4626      	mov	r6, r4
 8001702:	6228      	str	r0, [r5, #32]
 8001704:	e7db      	b.n	80016be <__gnu_unwind_pr_common+0x242>
 8001706:	1c58      	adds	r0, r3, #1
 8001708:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800170c:	e781      	b.n	8001612 <__gnu_unwind_pr_common+0x196>
 800170e:	bf00      	nop
 8001710:	080131a5 	.word	0x080131a5

08001714 <__aeabi_unwind_cpp_pr0>:
 8001714:	2300      	movs	r3, #0
 8001716:	e6b1      	b.n	800147c <__gnu_unwind_pr_common>

08001718 <__aeabi_unwind_cpp_pr1>:
 8001718:	2301      	movs	r3, #1
 800171a:	e6af      	b.n	800147c <__gnu_unwind_pr_common>

0800171c <__aeabi_unwind_cpp_pr2>:
 800171c:	2302      	movs	r3, #2
 800171e:	e6ad      	b.n	800147c <__gnu_unwind_pr_common>

08001720 <_Unwind_VRS_Pop>:
 8001720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001724:	4606      	mov	r6, r0
 8001726:	b0c3      	sub	sp, #268	@ 0x10c
 8001728:	4615      	mov	r5, r2
 800172a:	461c      	mov	r4, r3
 800172c:	2904      	cmp	r1, #4
 800172e:	f200 80d1 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001732:	e8df f001 	tbb	[pc, r1]
 8001736:	51ac      	.short	0x51ac
 8001738:	2acf      	.short	0x2acf
 800173a:	03          	.byte	0x03
 800173b:	00          	.byte	0x00
 800173c:	2c00      	cmp	r4, #0
 800173e:	f040 80c9 	bne.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001742:	2a10      	cmp	r2, #16
 8001744:	f200 80c6 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001748:	6803      	ldr	r3, [r0, #0]
 800174a:	06dc      	lsls	r4, r3, #27
 800174c:	f100 80e7 	bmi.w	800191e <_Unwind_VRS_Pop+0x1fe>
 8001750:	af20      	add	r7, sp, #128	@ 0x80
 8001752:	4638      	mov	r0, r7
 8001754:	f000 f9aa 	bl	8001aac <__gnu_Unwind_Save_WMMXC>
 8001758:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800175a:	4639      	mov	r1, r7
 800175c:	2300      	movs	r3, #0
 800175e:	f04f 0c01 	mov.w	ip, #1
 8001762:	fa0c f203 	lsl.w	r2, ip, r3
 8001766:	422a      	tst	r2, r5
 8001768:	4620      	mov	r0, r4
 800176a:	f103 0301 	add.w	r3, r3, #1
 800176e:	d003      	beq.n	8001778 <_Unwind_VRS_Pop+0x58>
 8001770:	f850 2b04 	ldr.w	r2, [r0], #4
 8001774:	600a      	str	r2, [r1, #0]
 8001776:	4604      	mov	r4, r0
 8001778:	2b04      	cmp	r3, #4
 800177a:	f101 0104 	add.w	r1, r1, #4
 800177e:	d1f0      	bne.n	8001762 <_Unwind_VRS_Pop+0x42>
 8001780:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001782:	4638      	mov	r0, r7
 8001784:	f000 f988 	bl	8001a98 <__gnu_Unwind_Restore_WMMXC>
 8001788:	e099      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800178a:	2c03      	cmp	r4, #3
 800178c:	f040 80a2 	bne.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001790:	b294      	uxth	r4, r2
 8001792:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001796:	2b10      	cmp	r3, #16
 8001798:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800179c:	f200 809a 	bhi.w	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017a0:	6803      	ldr	r3, [r0, #0]
 80017a2:	071f      	lsls	r7, r3, #28
 80017a4:	f100 80c3 	bmi.w	800192e <_Unwind_VRS_Pop+0x20e>
 80017a8:	af20      	add	r7, sp, #128	@ 0x80
 80017aa:	4638      	mov	r0, r7
 80017ac:	f000 f952 	bl	8001a54 <__gnu_Unwind_Save_WMMXD>
 80017b0:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80017b2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80017b6:	b154      	cbz	r4, 80017ce <_Unwind_VRS_Pop+0xae>
 80017b8:	460b      	mov	r3, r1
 80017ba:	1ad0      	subs	r0, r2, r3
 80017bc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80017c0:	00e4      	lsls	r4, r4, #3
 80017c2:	581d      	ldr	r5, [r3, r0]
 80017c4:	f843 5b04 	str.w	r5, [r3], #4
 80017c8:	428b      	cmp	r3, r1
 80017ca:	d1fa      	bne.n	80017c2 <_Unwind_VRS_Pop+0xa2>
 80017cc:	4422      	add	r2, r4
 80017ce:	63b2      	str	r2, [r6, #56]	@ 0x38
 80017d0:	4638      	mov	r0, r7
 80017d2:	f000 f91d 	bl	8001a10 <__gnu_Unwind_Restore_WMMXD>
 80017d6:	e072      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 80017d8:	2c01      	cmp	r4, #1
 80017da:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80017de:	b295      	uxth	r5, r2
 80017e0:	d071      	beq.n	80018c6 <_Unwind_VRS_Pop+0x1a6>
 80017e2:	2c05      	cmp	r4, #5
 80017e4:	d176      	bne.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017e6:	eb08 0905 	add.w	r9, r8, r5
 80017ea:	f1b9 0f20 	cmp.w	r9, #32
 80017ee:	d871      	bhi.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80017f0:	f1b8 0f0f 	cmp.w	r8, #15
 80017f4:	d872      	bhi.n	80018dc <_Unwind_VRS_Pop+0x1bc>
 80017f6:	f1b9 0f10 	cmp.w	r9, #16
 80017fa:	6803      	ldr	r3, [r0, #0]
 80017fc:	f200 809f 	bhi.w	800193e <_Unwind_VRS_Pop+0x21e>
 8001800:	07d9      	lsls	r1, r3, #31
 8001802:	d508      	bpl.n	8001816 <_Unwind_VRS_Pop+0xf6>
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	4630      	mov	r0, r6
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	f840 3b48 	str.w	r3, [r0], #72
 8001812:	f000 f8f1 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 8001816:	af20      	add	r7, sp, #128	@ 0x80
 8001818:	4638      	mov	r0, r7
 800181a:	f000 f8ed 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 800181e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001820:	2d00      	cmp	r5, #0
 8001822:	f000 80b9 	beq.w	8001998 <_Unwind_VRS_Pop+0x278>
 8001826:	006d      	lsls	r5, r5, #1
 8001828:	1e6a      	subs	r2, r5, #1
 800182a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 800182e:	2500      	movs	r5, #0
 8001830:	3201      	adds	r2, #1
 8001832:	3904      	subs	r1, #4
 8001834:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001838:	f853 0b04 	ldr.w	r0, [r3], #4
 800183c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001840:	4293      	cmp	r3, r2
 8001842:	d1f9      	bne.n	8001838 <_Unwind_VRS_Pop+0x118>
 8001844:	2d00      	cmp	r5, #0
 8001846:	f000 80a1 	beq.w	800198c <_Unwind_VRS_Pop+0x26c>
 800184a:	4641      	mov	r1, r8
 800184c:	2910      	cmp	r1, #16
 800184e:	bf38      	it	cc
 8001850:	2110      	movcc	r1, #16
 8001852:	006b      	lsls	r3, r5, #1
 8001854:	3910      	subs	r1, #16
 8001856:	466f      	mov	r7, sp
 8001858:	3b01      	subs	r3, #1
 800185a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800185e:	3301      	adds	r3, #1
 8001860:	3904      	subs	r1, #4
 8001862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001866:	f852 0b04 	ldr.w	r0, [r2], #4
 800186a:	f841 0f04 	str.w	r0, [r1, #4]!
 800186e:	429a      	cmp	r2, r3
 8001870:	d1f9      	bne.n	8001866 <_Unwind_VRS_Pop+0x146>
 8001872:	2c01      	cmp	r4, #1
 8001874:	f000 8088 	beq.w	8001988 <_Unwind_VRS_Pop+0x268>
 8001878:	f1b8 0f0f 	cmp.w	r8, #15
 800187c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800187e:	d802      	bhi.n	8001886 <_Unwind_VRS_Pop+0x166>
 8001880:	a820      	add	r0, sp, #128	@ 0x80
 8001882:	f000 f8b5 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 8001886:	4638      	mov	r0, r7
 8001888:	f000 f8ba 	bl	8001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800188c:	e017      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800188e:	bb0c      	cbnz	r4, 80018d4 <_Unwind_VRS_Pop+0x1b4>
 8001890:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001892:	4623      	mov	r3, r4
 8001894:	fa1f fc82 	uxth.w	ip, r2
 8001898:	2401      	movs	r4, #1
 800189a:	1d37      	adds	r7, r6, #4
 800189c:	fa04 f103 	lsl.w	r1, r4, r3
 80018a0:	ea11 0f0c 	tst.w	r1, ip
 80018a4:	4602      	mov	r2, r0
 80018a6:	d004      	beq.n	80018b2 <_Unwind_VRS_Pop+0x192>
 80018a8:	f852 1b04 	ldr.w	r1, [r2], #4
 80018ac:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 80018b0:	4610      	mov	r0, r2
 80018b2:	3301      	adds	r3, #1
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d1f1      	bne.n	800189c <_Unwind_VRS_Pop+0x17c>
 80018b8:	04ac      	lsls	r4, r5, #18
 80018ba:	d400      	bmi.n	80018be <_Unwind_VRS_Pop+0x19e>
 80018bc:	63b0      	str	r0, [r6, #56]	@ 0x38
 80018be:	2000      	movs	r0, #0
 80018c0:	b043      	add	sp, #268	@ 0x10c
 80018c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018c6:	eb08 0305 	add.w	r3, r8, r5
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d802      	bhi.n	80018d4 <_Unwind_VRS_Pop+0x1b4>
 80018ce:	f1b8 0f10 	cmp.w	r8, #16
 80018d2:	d114      	bne.n	80018fe <_Unwind_VRS_Pop+0x1de>
 80018d4:	2002      	movs	r0, #2
 80018d6:	b043      	add	sp, #268	@ 0x10c
 80018d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d0ee      	beq.n	80018be <_Unwind_VRS_Pop+0x19e>
 80018e0:	6803      	ldr	r3, [r0, #0]
 80018e2:	075a      	lsls	r2, r3, #29
 80018e4:	d45c      	bmi.n	80019a0 <_Unwind_VRS_Pop+0x280>
 80018e6:	466f      	mov	r7, sp
 80018e8:	4638      	mov	r0, r7
 80018ea:	f000 f88d 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ee:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018f0:	006b      	lsls	r3, r5, #1
 80018f2:	f1a8 0110 	sub.w	r1, r8, #16
 80018f6:	3b01      	subs	r3, #1
 80018f8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80018fc:	e7af      	b.n	800185e <_Unwind_VRS_Pop+0x13e>
 80018fe:	6803      	ldr	r3, [r0, #0]
 8001900:	07da      	lsls	r2, r3, #31
 8001902:	d459      	bmi.n	80019b8 <_Unwind_VRS_Pop+0x298>
 8001904:	af20      	add	r7, sp, #128	@ 0x80
 8001906:	4638      	mov	r0, r7
 8001908:	f000 f86e 	bl	80019e8 <__gnu_Unwind_Save_VFP>
 800190c:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800190e:	2d00      	cmp	r5, #0
 8001910:	d189      	bne.n	8001826 <_Unwind_VRS_Pop+0x106>
 8001912:	3304      	adds	r3, #4
 8001914:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001916:	4638      	mov	r0, r7
 8001918:	f000 f862 	bl	80019e0 <__gnu_Unwind_Restore_VFP>
 800191c:	e7cf      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 800191e:	f023 0310 	bic.w	r3, r3, #16
 8001922:	6003      	str	r3, [r0, #0]
 8001924:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8001928:	f000 f8c0 	bl	8001aac <__gnu_Unwind_Save_WMMXC>
 800192c:	e710      	b.n	8001750 <_Unwind_VRS_Pop+0x30>
 800192e:	f023 0308 	bic.w	r3, r3, #8
 8001932:	6003      	str	r3, [r0, #0]
 8001934:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8001938:	f000 f88c 	bl	8001a54 <__gnu_Unwind_Save_WMMXD>
 800193c:	e734      	b.n	80017a8 <_Unwind_VRS_Pop+0x88>
 800193e:	07d9      	lsls	r1, r3, #31
 8001940:	d508      	bpl.n	8001954 <_Unwind_VRS_Pop+0x234>
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	f840 3b48 	str.w	r3, [r0], #72
 800194e:	f000 f853 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 8001952:	6833      	ldr	r3, [r6, #0]
 8001954:	0758      	lsls	r0, r3, #29
 8001956:	d506      	bpl.n	8001966 <_Unwind_VRS_Pop+0x246>
 8001958:	4630      	mov	r0, r6
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	f840 3bd0 	str.w	r3, [r0], #208
 8001962:	f000 f851 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001966:	af20      	add	r7, sp, #128	@ 0x80
 8001968:	4638      	mov	r0, r7
 800196a:	f000 f845 	bl	80019f8 <__gnu_Unwind_Save_VFP_D>
 800196e:	4668      	mov	r0, sp
 8001970:	f000 f84a 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001974:	f1c8 0210 	rsb	r2, r8, #16
 8001978:	0052      	lsls	r2, r2, #1
 800197a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800197c:	f1a9 0510 	sub.w	r5, r9, #16
 8001980:	3a01      	subs	r2, #1
 8001982:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001986:	e753      	b.n	8001830 <_Unwind_VRS_Pop+0x110>
 8001988:	af20      	add	r7, sp, #128	@ 0x80
 800198a:	e7c2      	b.n	8001912 <_Unwind_VRS_Pop+0x1f2>
 800198c:	2c01      	cmp	r4, #1
 800198e:	d0c0      	beq.n	8001912 <_Unwind_VRS_Pop+0x1f2>
 8001990:	f1b8 0f0f 	cmp.w	r8, #15
 8001994:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001996:	d892      	bhi.n	80018be <_Unwind_VRS_Pop+0x19e>
 8001998:	4638      	mov	r0, r7
 800199a:	f000 f829 	bl	80019f0 <__gnu_Unwind_Restore_VFP_D>
 800199e:	e78e      	b.n	80018be <_Unwind_VRS_Pop+0x19e>
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	f840 3bd0 	str.w	r3, [r0], #208
 80019a8:	466f      	mov	r7, sp
 80019aa:	f000 f82d 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80019ae:	4638      	mov	r0, r7
 80019b0:	f000 f82a 	bl	8001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80019b4:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80019b6:	e79b      	b.n	80018f0 <_Unwind_VRS_Pop+0x1d0>
 80019b8:	4630      	mov	r0, r6
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	f840 3b48 	str.w	r3, [r0], #72
 80019c2:	f000 f811 	bl	80019e8 <__gnu_Unwind_Save_VFP>
 80019c6:	e79d      	b.n	8001904 <_Unwind_VRS_Pop+0x1e4>

080019c8 <__restore_core_regs>:
 80019c8:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 80019cc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80019d0:	469c      	mov	ip, r3
 80019d2:	46a6      	mov	lr, r4
 80019d4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80019d8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80019dc:	46e5      	mov	sp, ip
 80019de:	bd00      	pop	{pc}

080019e0 <__gnu_Unwind_Restore_VFP>:
 80019e0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <__gnu_Unwind_Save_VFP>:
 80019e8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop

080019f0 <__gnu_Unwind_Restore_VFP_D>:
 80019f0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <__gnu_Unwind_Save_VFP_D>:
 80019f8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001a00:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001a08:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <__gnu_Unwind_Restore_WMMXD>:
 8001a10:	ecf0 0102 	ldfe	f0, [r0], #8
 8001a14:	ecf0 1102 	ldfe	f1, [r0], #8
 8001a18:	ecf0 2102 	ldfe	f2, [r0], #8
 8001a1c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001a20:	ecf0 4102 	ldfe	f4, [r0], #8
 8001a24:	ecf0 5102 	ldfe	f5, [r0], #8
 8001a28:	ecf0 6102 	ldfe	f6, [r0], #8
 8001a2c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001a30:	ecf0 8102 	ldfp	f0, [r0], #8
 8001a34:	ecf0 9102 	ldfp	f1, [r0], #8
 8001a38:	ecf0 a102 	ldfp	f2, [r0], #8
 8001a3c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a40:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a44:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a48:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a4c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <__gnu_Unwind_Save_WMMXD>:
 8001a54:	ece0 0102 	stfe	f0, [r0], #8
 8001a58:	ece0 1102 	stfe	f1, [r0], #8
 8001a5c:	ece0 2102 	stfe	f2, [r0], #8
 8001a60:	ece0 3102 	stfe	f3, [r0], #8
 8001a64:	ece0 4102 	stfe	f4, [r0], #8
 8001a68:	ece0 5102 	stfe	f5, [r0], #8
 8001a6c:	ece0 6102 	stfe	f6, [r0], #8
 8001a70:	ece0 7102 	stfe	f7, [r0], #8
 8001a74:	ece0 8102 	stfp	f0, [r0], #8
 8001a78:	ece0 9102 	stfp	f1, [r0], #8
 8001a7c:	ece0 a102 	stfp	f2, [r0], #8
 8001a80:	ece0 b102 	stfp	f3, [r0], #8
 8001a84:	ece0 c102 	stfp	f4, [r0], #8
 8001a88:	ece0 d102 	stfp	f5, [r0], #8
 8001a8c:	ece0 e102 	stfp	f6, [r0], #8
 8001a90:	ece0 f102 	stfp	f7, [r0], #8
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <__gnu_Unwind_Restore_WMMXC>:
 8001a98:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a9c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001aa0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001aa4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <__gnu_Unwind_Save_WMMXC>:
 8001aac:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001ab0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001ab4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001ab8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <_Unwind_RaiseException>:
 8001ac0:	46ec      	mov	ip, sp
 8001ac2:	b500      	push	{lr}
 8001ac4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ac8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ad4:	a901      	add	r1, sp, #4
 8001ad6:	f7ff fbd7 	bl	8001288 <__gnu_Unwind_RaiseException>
 8001ada:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ade:	b012      	add	sp, #72	@ 0x48
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop

08001ae4 <_Unwind_Resume>:
 8001ae4:	46ec      	mov	ip, sp
 8001ae6:	b500      	push	{lr}
 8001ae8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001af8:	a901      	add	r1, sp, #4
 8001afa:	f7ff fc01 	bl	8001300 <__gnu_Unwind_Resume>
 8001afe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b02:	b012      	add	sp, #72	@ 0x48
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <_Unwind_Resume_or_Rethrow>:
 8001b08:	46ec      	mov	ip, sp
 8001b0a:	b500      	push	{lr}
 8001b0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b1c:	a901      	add	r1, sp, #4
 8001b1e:	f7ff fc11 	bl	8001344 <__gnu_Unwind_Resume_or_Rethrow>
 8001b22:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b26:	b012      	add	sp, #72	@ 0x48
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <_Unwind_ForcedUnwind>:
 8001b2c:	46ec      	mov	ip, sp
 8001b2e:	b500      	push	{lr}
 8001b30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b40:	ab01      	add	r3, sp, #4
 8001b42:	f7ff fbd5 	bl	80012f0 <__gnu_Unwind_ForcedUnwind>
 8001b46:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b4a:	b012      	add	sp, #72	@ 0x48
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <_Unwind_Backtrace>:
 8001b50:	46ec      	mov	ip, sp
 8001b52:	b500      	push	{lr}
 8001b54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b64:	aa01      	add	r2, sp, #4
 8001b66:	f7ff fc47 	bl	80013f8 <__gnu_Unwind_Backtrace>
 8001b6a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b6e:	b012      	add	sp, #72	@ 0x48
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <next_unwind_byte>:
 8001b74:	7a02      	ldrb	r2, [r0, #8]
 8001b76:	4603      	mov	r3, r0
 8001b78:	b97a      	cbnz	r2, 8001b9a <next_unwind_byte+0x26>
 8001b7a:	7a42      	ldrb	r2, [r0, #9]
 8001b7c:	b1a2      	cbz	r2, 8001ba8 <next_unwind_byte+0x34>
 8001b7e:	6841      	ldr	r1, [r0, #4]
 8001b80:	3a01      	subs	r2, #1
 8001b82:	b410      	push	{r4}
 8001b84:	7242      	strb	r2, [r0, #9]
 8001b86:	6808      	ldr	r0, [r1, #0]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	1d0c      	adds	r4, r1, #4
 8001b8c:	721a      	strb	r2, [r3, #8]
 8001b8e:	0202      	lsls	r2, r0, #8
 8001b90:	605c      	str	r4, [r3, #4]
 8001b92:	0e00      	lsrs	r0, r0, #24
 8001b94:	bc10      	pop	{r4}
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	4770      	bx	lr
 8001b9a:	6800      	ldr	r0, [r0, #0]
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	721a      	strb	r2, [r3, #8]
 8001ba0:	0202      	lsls	r2, r0, #8
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	0e00      	lsrs	r0, r0, #24
 8001ba6:	4770      	bx	lr
 8001ba8:	20b0      	movs	r0, #176	@ 0xb0
 8001baa:	4770      	bx	lr

08001bac <_Unwind_GetGR.constprop.0>:
 8001bac:	b500      	push	{lr}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	aa03      	add	r2, sp, #12
 8001bb4:	9200      	str	r2, [sp, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	220c      	movs	r2, #12
 8001bba:	f7ff fbd3 	bl	8001364 <_Unwind_VRS_Get>
 8001bbe:	9803      	ldr	r0, [sp, #12]
 8001bc0:	b005      	add	sp, #20
 8001bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc6:	bf00      	nop

08001bc8 <unwind_UCB_from_context>:
 8001bc8:	e7f0      	b.n	8001bac <_Unwind_GetGR.constprop.0>
 8001bca:	bf00      	nop

08001bcc <__gnu_unwind_execute>:
 8001bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bd0:	4606      	mov	r6, r0
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	460d      	mov	r5, r1
 8001bd6:	f04f 0800 	mov.w	r8, #0
 8001bda:	4628      	mov	r0, r5
 8001bdc:	f7ff ffca 	bl	8001b74 <next_unwind_byte>
 8001be0:	28b0      	cmp	r0, #176	@ 0xb0
 8001be2:	4604      	mov	r4, r0
 8001be4:	f000 80da 	beq.w	8001d9c <__gnu_unwind_execute+0x1d0>
 8001be8:	0607      	lsls	r7, r0, #24
 8001bea:	d546      	bpl.n	8001c7a <__gnu_unwind_execute+0xae>
 8001bec:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001bf0:	2b80      	cmp	r3, #128	@ 0x80
 8001bf2:	d05e      	beq.n	8001cb2 <__gnu_unwind_execute+0xe6>
 8001bf4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bf6:	d073      	beq.n	8001ce0 <__gnu_unwind_execute+0x114>
 8001bf8:	d81b      	bhi.n	8001c32 <__gnu_unwind_execute+0x66>
 8001bfa:	2b90      	cmp	r3, #144	@ 0x90
 8001bfc:	f000 809b 	beq.w	8001d36 <__gnu_unwind_execute+0x16a>
 8001c00:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c02:	d112      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c04:	43c3      	mvns	r3, r0
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001c0e:	411a      	asrs	r2, r3
 8001c10:	0701      	lsls	r1, r0, #28
 8001c12:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001c16:	d501      	bpl.n	8001c1c <__gnu_unwind_execute+0x50>
 8001c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4630      	mov	r0, r6
 8001c22:	f7ff fd7d 	bl	8001720 <_Unwind_VRS_Pop>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d0d7      	beq.n	8001bda <__gnu_unwind_execute+0xe>
 8001c2a:	2009      	movs	r0, #9
 8001c2c:	b005      	add	sp, #20
 8001c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c34:	d16d      	bne.n	8001d12 <__gnu_unwind_execute+0x146>
 8001c36:	28c6      	cmp	r0, #198	@ 0xc6
 8001c38:	f000 8093 	beq.w	8001d62 <__gnu_unwind_execute+0x196>
 8001c3c:	28c7      	cmp	r0, #199	@ 0xc7
 8001c3e:	f000 80b2 	beq.w	8001da6 <__gnu_unwind_execute+0x1da>
 8001c42:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c48:	f000 80d2 	beq.w	8001df0 <__gnu_unwind_execute+0x224>
 8001c4c:	28c8      	cmp	r0, #200	@ 0xc8
 8001c4e:	f000 80dd 	beq.w	8001e0c <__gnu_unwind_execute+0x240>
 8001c52:	28c9      	cmp	r0, #201	@ 0xc9
 8001c54:	d1e9      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c56:	4628      	mov	r0, r5
 8001c58:	f7ff ff8c 	bl	8001b74 <next_unwind_byte>
 8001c5c:	0302      	lsls	r2, r0, #12
 8001c5e:	f000 000f 	and.w	r0, r0, #15
 8001c62:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c66:	3001      	adds	r0, #1
 8001c68:	4302      	orrs	r2, r0
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff fd56 	bl	8001720 <_Unwind_VRS_Pop>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	d0b0      	beq.n	8001bda <__gnu_unwind_execute+0xe>
 8001c78:	e7d7      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001c7a:	0083      	lsls	r3, r0, #2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	1d1f      	adds	r7, r3, #4
 8001c80:	f10d 090c 	add.w	r9, sp, #12
 8001c84:	2300      	movs	r3, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	f8cd 9000 	str.w	r9, [sp]
 8001c8c:	220d      	movs	r2, #13
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f7ff fb68 	bl	8001364 <_Unwind_VRS_Get>
 8001c94:	9b03      	ldr	r3, [sp, #12]
 8001c96:	f8cd 9000 	str.w	r9, [sp]
 8001c9a:	0660      	lsls	r0, r4, #25
 8001c9c:	bf4c      	ite	mi
 8001c9e:	1bdf      	submi	r7, r3, r7
 8001ca0:	18ff      	addpl	r7, r7, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	220d      	movs	r2, #13
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4630      	mov	r0, r6
 8001caa:	9703      	str	r7, [sp, #12]
 8001cac:	f7ff fb80 	bl	80013b0 <_Unwind_VRS_Set>
 8001cb0:	e793      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f7ff ff5e 	bl	8001b74 <next_unwind_byte>
 8001cb8:	0224      	lsls	r4, r4, #8
 8001cba:	4320      	orrs	r0, r4
 8001cbc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001cc0:	d0b3      	beq.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cc2:	0104      	lsls	r4, r0, #4
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	b2a2      	uxth	r2, r4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff fd28 	bl	8001720 <_Unwind_VRS_Pop>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d1aa      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cd4:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001cd8:	bf18      	it	ne
 8001cda:	f04f 0801 	movne.w	r8, #1
 8001cde:	e77c      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001ce0:	28b1      	cmp	r0, #177	@ 0xb1
 8001ce2:	d051      	beq.n	8001d88 <__gnu_unwind_execute+0x1bc>
 8001ce4:	28b2      	cmp	r0, #178	@ 0xb2
 8001ce6:	f000 80ad 	beq.w	8001e44 <__gnu_unwind_execute+0x278>
 8001cea:	28b3      	cmp	r0, #179	@ 0xb3
 8001cec:	d06d      	beq.n	8001dca <__gnu_unwind_execute+0x1fe>
 8001cee:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001cf2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cf4:	d099      	beq.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001cf6:	f000 0207 	and.w	r2, r0, #7
 8001cfa:	3201      	adds	r2, #1
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001d02:	4619      	mov	r1, r3
 8001d04:	4630      	mov	r0, r6
 8001d06:	f7ff fd0b 	bl	8001720 <_Unwind_VRS_Pop>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	f43f af65 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d10:	e78b      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d12:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001d16:	2bd0      	cmp	r3, #208	@ 0xd0
 8001d18:	d187      	bne.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d1a:	f000 0207 	and.w	r2, r0, #7
 8001d1e:	3201      	adds	r2, #1
 8001d20:	2305      	movs	r3, #5
 8001d22:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001d26:	2101      	movs	r1, #1
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f7ff fcf9 	bl	8001720 <_Unwind_VRS_Pop>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	f43f af53 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d34:	e779      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d36:	f000 030d 	and.w	r3, r0, #13
 8001d3a:	2b0d      	cmp	r3, #13
 8001d3c:	f43f af75 	beq.w	8001c2a <__gnu_unwind_execute+0x5e>
 8001d40:	af03      	add	r7, sp, #12
 8001d42:	2300      	movs	r3, #0
 8001d44:	f000 020f 	and.w	r2, r0, #15
 8001d48:	4619      	mov	r1, r3
 8001d4a:	9700      	str	r7, [sp, #0]
 8001d4c:	4630      	mov	r0, r6
 8001d4e:	f7ff fb09 	bl	8001364 <_Unwind_VRS_Get>
 8001d52:	2300      	movs	r3, #0
 8001d54:	9700      	str	r7, [sp, #0]
 8001d56:	220d      	movs	r2, #13
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f7ff fb28 	bl	80013b0 <_Unwind_VRS_Set>
 8001d60:	e73b      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff ff06 	bl	8001b74 <next_unwind_byte>
 8001d68:	0302      	lsls	r2, r0, #12
 8001d6a:	f000 000f 	and.w	r0, r0, #15
 8001d6e:	3001      	adds	r0, #1
 8001d70:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d74:	2303      	movs	r3, #3
 8001d76:	4302      	orrs	r2, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f7ff fcd0 	bl	8001720 <_Unwind_VRS_Pop>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	f43f af2a 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001d86:	e750      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f7ff fef3 	bl	8001b74 <next_unwind_byte>
 8001d8e:	1e43      	subs	r3, r0, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b0e      	cmp	r3, #14
 8001d94:	4602      	mov	r2, r0
 8001d96:	f67f af41 	bls.w	8001c1c <__gnu_unwind_execute+0x50>
 8001d9a:	e746      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001d9c:	f1b8 0f00 	cmp.w	r8, #0
 8001da0:	d040      	beq.n	8001e24 <__gnu_unwind_execute+0x258>
 8001da2:	2000      	movs	r0, #0
 8001da4:	e742      	b.n	8001c2c <__gnu_unwind_execute+0x60>
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7ff fee4 	bl	8001b74 <next_unwind_byte>
 8001dac:	1e43      	subs	r3, r0, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b0e      	cmp	r3, #14
 8001db2:	4602      	mov	r2, r0
 8001db4:	f63f af39 	bhi.w	8001c2a <__gnu_unwind_execute+0x5e>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2104      	movs	r1, #4
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	f7ff fcaf 	bl	8001720 <_Unwind_VRS_Pop>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	f43f af09 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001dc8:	e72f      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7ff fed2 	bl	8001b74 <next_unwind_byte>
 8001dd0:	0302      	lsls	r2, r0, #12
 8001dd2:	f000 000f 	and.w	r0, r0, #15
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001ddc:	2301      	movs	r3, #1
 8001dde:	4302      	orrs	r2, r0
 8001de0:	4619      	mov	r1, r3
 8001de2:	4630      	mov	r0, r6
 8001de4:	f7ff fc9c 	bl	8001720 <_Unwind_VRS_Pop>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	f43f aef6 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001dee:	e71c      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001df0:	f000 020f 	and.w	r2, r0, #15
 8001df4:	3201      	adds	r2, #1
 8001df6:	2303      	movs	r3, #3
 8001df8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f7ff fc8e 	bl	8001720 <_Unwind_VRS_Pop>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	f43f aee8 	beq.w	8001bda <__gnu_unwind_execute+0xe>
 8001e0a:	e70e      	b.n	8001c2a <__gnu_unwind_execute+0x5e>
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7ff feb1 	bl	8001b74 <next_unwind_byte>
 8001e12:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001e16:	f000 030f 	and.w	r3, r0, #15
 8001e1a:	3210      	adds	r2, #16
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001e22:	e722      	b.n	8001c6a <__gnu_unwind_execute+0x9e>
 8001e24:	ac03      	add	r4, sp, #12
 8001e26:	4643      	mov	r3, r8
 8001e28:	4641      	mov	r1, r8
 8001e2a:	220e      	movs	r2, #14
 8001e2c:	9400      	str	r4, [sp, #0]
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff fa98 	bl	8001364 <_Unwind_VRS_Get>
 8001e34:	9400      	str	r4, [sp, #0]
 8001e36:	4643      	mov	r3, r8
 8001e38:	220f      	movs	r2, #15
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	f7ff fab7 	bl	80013b0 <_Unwind_VRS_Set>
 8001e42:	e7ae      	b.n	8001da2 <__gnu_unwind_execute+0x1d6>
 8001e44:	2300      	movs	r3, #0
 8001e46:	f10d 090c 	add.w	r9, sp, #12
 8001e4a:	220d      	movs	r2, #13
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f8cd 9000 	str.w	r9, [sp]
 8001e52:	4630      	mov	r0, r6
 8001e54:	f7ff fa86 	bl	8001364 <_Unwind_VRS_Get>
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f7ff fe8b 	bl	8001b74 <next_unwind_byte>
 8001e5e:	0602      	lsls	r2, r0, #24
 8001e60:	9c03      	ldr	r4, [sp, #12]
 8001e62:	f04f 0702 	mov.w	r7, #2
 8001e66:	d50b      	bpl.n	8001e80 <__gnu_unwind_execute+0x2b4>
 8001e68:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001e6c:	40b8      	lsls	r0, r7
 8001e6e:	4404      	add	r4, r0
 8001e70:	4628      	mov	r0, r5
 8001e72:	9403      	str	r4, [sp, #12]
 8001e74:	f7ff fe7e 	bl	8001b74 <next_unwind_byte>
 8001e78:	0603      	lsls	r3, r0, #24
 8001e7a:	f107 0707 	add.w	r7, r7, #7
 8001e7e:	d4f3      	bmi.n	8001e68 <__gnu_unwind_execute+0x29c>
 8001e80:	fa00 f207 	lsl.w	r2, r0, r7
 8001e84:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001e88:	4422      	add	r2, r4
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9203      	str	r2, [sp, #12]
 8001e8e:	f8cd 9000 	str.w	r9, [sp]
 8001e92:	220d      	movs	r2, #13
 8001e94:	4619      	mov	r1, r3
 8001e96:	4630      	mov	r0, r6
 8001e98:	f7ff fa8a 	bl	80013b0 <_Unwind_VRS_Set>
 8001e9c:	e69d      	b.n	8001bda <__gnu_unwind_execute+0xe>
 8001e9e:	bf00      	nop

08001ea0 <__gnu_unwind_frame>:
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001ea4:	6853      	ldr	r3, [r2, #4]
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	f04f 0c03 	mov.w	ip, #3
 8001eac:	3208      	adds	r2, #8
 8001eae:	021c      	lsls	r4, r3, #8
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	0e1b      	lsrs	r3, r3, #24
 8001eb4:	a901      	add	r1, sp, #4
 8001eb6:	9401      	str	r4, [sp, #4]
 8001eb8:	9202      	str	r2, [sp, #8]
 8001eba:	f88d c00c 	strb.w	ip, [sp, #12]
 8001ebe:	f88d 300d 	strb.w	r3, [sp, #13]
 8001ec2:	f7ff fe83 	bl	8001bcc <__gnu_unwind_execute>
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop

08001ecc <_Unwind_GetRegionStart>:
 8001ecc:	b508      	push	{r3, lr}
 8001ece:	f7ff fe7b 	bl	8001bc8 <unwind_UCB_from_context>
 8001ed2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001ed4:	bd08      	pop	{r3, pc}
 8001ed6:	bf00      	nop

08001ed8 <_Unwind_GetLanguageSpecificData>:
 8001ed8:	b508      	push	{r3, lr}
 8001eda:	f7ff fe75 	bl	8001bc8 <unwind_UCB_from_context>
 8001ede:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ee0:	79c3      	ldrb	r3, [r0, #7]
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001ee8:	bd08      	pop	{r3, pc}
 8001eea:	bf00      	nop

08001eec <__aeabi_idiv0>:
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop

08001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f0e:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001f10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f12:	2201      	movs	r2, #1
 8001f14:	4619      	mov	r1, r3
 8001f16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f18:	f00c fda4 	bl	800ea64 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001f1c:	4b69      	ldr	r3, [pc, #420]	@ (80020c4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d126      	bne.n	8001f72 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x82>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f24:	2008      	movs	r0, #8
 8001f26:	f010 ffa2 	bl	8012e6e <_Znaj>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e018      	b.n	8001f6a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x7a>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f38:	206c      	movs	r0, #108	@ 0x6c
 8001f3a:	f010 ff87 	bl	8012e4c <_Znwj>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461c      	mov	r4, r3
 8001f42:	2501      	movs	r5, #1
 8001f44:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 fcf0 	bl	8002938 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	dde3      	ble.n	8001f38 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001f70:	e063      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f72:	4b55      	ldr	r3, [pc, #340]	@ (80020c8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d126      	bne.n	8001fc8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd8>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f7a:	2008      	movs	r0, #8
 8001f7c:	f010 ff77 	bl	8012e6e <_Znaj>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	e018      	b.n	8001fc0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd0>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f8e:	206c      	movs	r0, #108	@ 0x6c
 8001f90:	f010 ff5c 	bl	8012e4c <_Znwj>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461c      	mov	r4, r3
 8001f98:	2501      	movs	r5, #1
 8001f9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f000 fd37 	bl	8002a1c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	dde3      	ble.n	8001f8e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9e>
 8001fc6:	e038      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001fc8:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1dc>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d126      	bne.n	800201e <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x12e>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001fd0:	2008      	movs	r0, #8
 8001fd2:	f010 ff4c 	bl	8012e6e <_Znaj>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e018      	b.n	8002016 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x126>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001fe4:	206c      	movs	r0, #108	@ 0x6c
 8001fe6:	f010 ff31 	bl	8012e4c <_Znwj>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461c      	mov	r4, r3
 8001fee:	2501      	movs	r5, #1
 8001ff0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ffe:	4620      	mov	r0, r4
 8002000:	f000 fd7e 	bl	8002b00 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b01      	cmp	r3, #1
 800201a:	dde3      	ble.n	8001fe4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf4>
 800201c:	e00d      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x14a>
	    	}
	    }
	    else
	    {
	    	throw std::runtime_error("Cannot create more than 3 shields");
 800201e:	2008      	movs	r0, #8
 8002020:	f010 fb18 	bl	8012654 <__cxa_allocate_exception>
 8002024:	4603      	mov	r3, r0
 8002026:	461c      	mov	r4, r3
 8002028:	4929      	ldr	r1, [pc, #164]	@ (80020d0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e0>)
 800202a:	4620      	mov	r0, r4
 800202c:	f011 f812 	bl	8013054 <_ZNSt13runtime_errorC1EPKc>
 8002030:	4a28      	ldr	r2, [pc, #160]	@ (80020d4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e4>)
 8002032:	4929      	ldr	r1, [pc, #164]	@ (80020d8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e8>)
 8002034:	4620      	mov	r0, r4
 8002036:	f010 feef 	bl	8012e18 <__cxa_throw>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f84a 	bl	80020e0 <_ZNK14XNucleoIHM02A14initEv>
 800204c:	4603      	mov	r3, r0
 800204e:	f083 0301 	eor.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x184>
	        /*Do nothing*/
	    	throw std::runtime_error("init failed");
 8002058:	2008      	movs	r0, #8
 800205a:	f010 fafb 	bl	8012654 <__cxa_allocate_exception>
 800205e:	4603      	mov	r3, r0
 8002060:	461c      	mov	r4, r3
 8002062:	491e      	ldr	r1, [pc, #120]	@ (80020dc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1ec>)
 8002064:	4620      	mov	r0, r4
 8002066:	f010 fff5 	bl	8013054 <_ZNSt13runtime_errorC1EPKc>
 800206a:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e4>)
 800206c:	491a      	ldr	r1, [pc, #104]	@ (80020d8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1e8>)
 800206e:	4620      	mov	r0, r4
 8002070:	f010 fed2 	bl	8012e18 <__cxa_throw>
	    }
	}
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	e021      	b.n	80020bc <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1cc>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002078:	2d00      	cmp	r5, #0
 800207a:	d003      	beq.n	8002084 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x194>
 800207c:	216c      	movs	r1, #108	@ 0x6c
 800207e:	4620      	mov	r0, r4
 8002080:	f010 fa8c 	bl	801259c <_ZdlPvj>
 8002084:	f010 fb20 	bl	80126c8 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002088:	2d00      	cmp	r5, #0
 800208a:	d003      	beq.n	8002094 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1a4>
 800208c:	216c      	movs	r1, #108	@ 0x6c
 800208e:	4620      	mov	r0, r4
 8002090:	f010 fa84 	bl	801259c <_ZdlPvj>
 8002094:	f010 fb18 	bl	80126c8 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002098:	2d00      	cmp	r5, #0
 800209a:	d003      	beq.n	80020a4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1b4>
 800209c:	216c      	movs	r1, #108	@ 0x6c
 800209e:	4620      	mov	r0, r4
 80020a0:	f010 fa7c 	bl	801259c <_ZdlPvj>
 80020a4:	f010 fb10 	bl	80126c8 <__cxa_end_cleanup>
	    	throw std::runtime_error("Cannot create more than 3 shields");
 80020a8:	4620      	mov	r0, r4
 80020aa:	f010 fae9 	bl	8012680 <__cxa_free_exception>
 80020ae:	f010 fb0b 	bl	80126c8 <__cxa_end_cleanup>
	    	throw std::runtime_error("init failed");
 80020b2:	4620      	mov	r0, r4
 80020b4:	f010 fae4 	bl	8012680 <__cxa_free_exception>
 80020b8:	f010 fb06 	bl	80126c8 <__cxa_end_cleanup>
	}
 80020bc:	4618      	mov	r0, r3
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	200002b0 	.word	0x200002b0
 80020c8:	200002b1 	.word	0x200002b1
 80020cc:	200002b2 	.word	0x200002b2
 80020d0:	08016f90 	.word	0x08016f90
 80020d4:	08012fad 	.word	0x08012fad
 80020d8:	08018564 	.word	0x08018564
 80020dc:	08016fb4 	.word	0x08016fb4

080020e0 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6998      	ldr	r0, [r3, #24]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8b9b      	ldrh	r3, [r3, #28]
 80020f0:	2200      	movs	r2, #0
 80020f2:	4619      	mov	r1, r3
 80020f4:	f00c fcb6 	bl	800ea64 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f00c f957 	bl	800e3ac <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6998      	ldr	r0, [r3, #24]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8b9b      	ldrh	r3, [r3, #28]
 8002106:	2201      	movs	r2, #1
 8002108:	4619      	mov	r1, r3
 800210a:	f00c fcab 	bl	800ea64 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 800210e:	2001      	movs	r0, #1
 8002110:	f00c f94c 	bl	800e3ac <HAL_Delay>



        return init_all_motor_drivers();
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f892 	bl	800223e <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 800211a:	4603      	mov	r3, r0
    }
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
    }
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e040      	b.n	80021cc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4608      	mov	r0, r1
 800216c:	4798      	blx	r3
 800216e:	4603      	mov	r3, r0
 8002170:	2b09      	cmp	r3, #9
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d023      	beq.n	80021c6 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	681d      	ldr	r5, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	33cc      	adds	r3, #204	@ 0xcc
 800219a:	681c      	ldr	r4, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	6819      	ldr	r1, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4608      	mov	r0, r1
 80021bc:	4798      	blx	r3
 80021be:	4603      	mov	r3, r0
 80021c0:	4619      	mov	r1, r3
 80021c2:	4628      	mov	r0, r5
 80021c4:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	ddbb      	ble.n	800214a <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4610      	mov	r0, r2
 80021e8:	4798      	blx	r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e01b      	b.n	800222c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68f9      	ldr	r1, [r7, #12]
 8002216:	4798      	blx	r3
 8002218:	4603      	mov	r3, r0
 800221a:	4619      	mov	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	3204      	adds	r2, #4
 8002222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	3301      	adds	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	dde0      	ble.n	80021f4 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3310      	adds	r3, #16
    }
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bdb0      	pop	{r4, r5, r7, pc}

0800223e <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e022      	b.n	8002292 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3308      	adds	r3, #8
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68f9      	ldr	r1, [r7, #12]
 800226e:	3102      	adds	r1, #2
 8002270:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002274:	4611      	mov	r1, r2
 8002276:	4798      	blx	r3
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf14      	ite	ne
 800227e:	2301      	movne	r3, #1
 8002280:	2300      	moveq	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 8002288:	2300      	movs	r3, #0
 800228a:	e006      	b.n	800229a <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	ddd9      	ble.n	800224c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 8002298:	2301      	movs	r3, #1

    }
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af04      	add	r7, sp, #16
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a44      	ldr	r2, [pc, #272]	@ (80023c8 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 80022b6:	3318      	adds	r3, #24
 80022b8:	4611      	mov	r1, r2
 80022ba:	22b0      	movs	r2, #176	@ 0xb0
 80022bc:	4618      	mov	r0, r3
 80022be:	f013 f8c4 	bl	801544a <memcpy>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4a40      	ldr	r2, [pc, #256]	@ (80023c8 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x124>)
 80022c6:	33c8      	adds	r3, #200	@ 0xc8
 80022c8:	4611      	mov	r1, r2
 80022ca:	22b0      	movs	r2, #176	@ 0xb0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f013 f8bc 	bl	801544a <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80022de:	605a      	str	r2, [r3, #4]

    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 80022e0:	2020      	movs	r0, #32
 80022e2:	f010 fdb3 	bl	8012e4c <_Znwj>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461c      	mov	r4, r3
 80022ea:	2501      	movs	r5, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f103 0118 	add.w	r1, r3, #24
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80022f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80022fa:	9303      	str	r3, [sp, #12]
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4620      	mov	r0, r4
 800230c:	f7ff fdf0 	bl	8001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	609c      	str	r4, [r3, #8]
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002314:	2020      	movs	r0, #32
 8002316:	f010 fd99 	bl	8012e4c <_Znwj>
 800231a:	4603      	mov	r3, r0
 800231c:	461c      	mov	r4, r3
 800231e:	2501      	movs	r5, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f103 0118 	add.w	r1, r3, #24
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800232c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800232e:	9303      	str	r3, [sp, #12]
 8002330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002332:	9302      	str	r3, [sp, #8]
 8002334:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff fdd6 	bl	8001ef0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	60dc      	str	r4, [r3, #12]
    abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fee9 	bl	8002124 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 8002352:	6178      	str	r0, [r7, #20]
    abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fee3 	bl	8002124 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 800235e:	6138      	str	r0, [r7, #16]
    moteurs = new abstractL6470*[NMOTEURS];
 8002360:	2010      	movs	r0, #16
 8002362:	f010 fd84 	bl	8012e6e <_Znaj>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	611a      	str	r2, [r3, #16]

	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		moteurs[front_left] = moteurs_shield_1[left];
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	601a      	str	r2, [r3, #0]
		moteurs[front_right] = moteurs_shield_1[right];
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	3304      	adds	r3, #4
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	6852      	ldr	r2, [r2, #4]
 8002382:	601a      	str	r2, [r3, #0]
		moteurs[back_left] = moteurs_shield_2[left];
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	3308      	adds	r3, #8
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_2[right];
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	330c      	adds	r3, #12
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	6852      	ldr	r2, [r2, #4]
 800239a:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_1[right];
	#endif



}
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	e00f      	b.n	80023c0 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x11c>
    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 80023a0:	2d00      	cmp	r5, #0
 80023a2:	d003      	beq.n	80023ac <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x108>
 80023a4:	2120      	movs	r1, #32
 80023a6:	4620      	mov	r0, r4
 80023a8:	f010 f8f8 	bl	801259c <_ZdlPvj>
 80023ac:	f010 f98c 	bl	80126c8 <__cxa_end_cleanup>
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d003      	beq.n	80023bc <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>
 80023b4:	2120      	movs	r1, #32
 80023b6:	4620      	mov	r0, r4
 80023b8:	f010 f8f0 	bl	801259c <_ZdlPvj>
 80023bc:	f010 f984 	bl	80126c8 <__cxa_end_cleanup>
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bdb0      	pop	{r4, r5, r7, pc}
 80023c8:	08016fc0 	.word	0x08016fc0

080023cc <_ZN11BlocMoteurs11rad_to_stepEf>:

constexpr float RAD_PER_FULL_STEP = (DEG_PER_FULL_STEP*M_PI)/180.0;

float BlocMoteurs::rad_to_step( float rad)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	ed87 0a00 	vstr	s0, [r7]
	return  (rad/RAD_PER_FULL_STEP);
 80023d8:	edd7 7a00 	vldr	s15, [r7]
 80023dc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80023f8 <_ZN11BlocMoteurs11rad_to_stepEf+0x2c>
 80023e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023e4:	eef0 7a66 	vmov.f32	s15, s13
}
 80023e8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	3d00adfd 	.word	0x3d00adfd

080023fc <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b094      	sub	sp, #80	@ 0x50
 8002400:	af00      	add	r7, sp, #0
 8002402:	6178      	str	r0, [r7, #20]
 8002404:	ed87 0a04 	vstr	s0, [r7, #16]
 8002408:	edc7 0a03 	vstr	s1, [r7, #12]
 800240c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002410:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 8002414:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	f107 0210 	add.w	r2, r7, #16
 800241e:	f107 031c 	add.w	r3, r7, #28
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fbdd 	bl	8002be4 <_ZSt3minIfERKT_S2_S2_>
 800242a:	4603      	mov	r3, r0
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 8002430:	4b7f      	ldr	r3, [pc, #508]	@ (8002630 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	f107 0210 	add.w	r2, r7, #16
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fbe9 	bl	8002c16 <_ZSt3maxIfERKT_S2_S2_>
 8002444:	4603      	mov	r3, r0
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 800244a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002450:	f107 020c 	add.w	r2, r7, #12
 8002454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fbc2 	bl	8002be4 <_ZSt3minIfERKT_S2_S2_>
 8002460:	4603      	mov	r3, r0
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 8002466:	4b72      	ldr	r3, [pc, #456]	@ (8002630 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800246a:	f107 020c 	add.w	r2, r7, #12
 800246e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fbce 	bl	8002c16 <_ZSt3maxIfERKT_S2_S2_>
 800247a:	4603      	mov	r3, r0
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 8002480:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002486:	f107 0208 	add.w	r2, r7, #8
 800248a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fba7 	bl	8002be4 <_ZSt3minIfERKT_S2_S2_>
 8002496:	4603      	mov	r3, r0
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 800249c:	4b64      	ldr	r3, [pc, #400]	@ (8002630 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30
 80024a0:	f107 0208 	add.w	r2, r7, #8
 80024a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fbb3 	bl	8002c16 <_ZSt3maxIfERKT_S2_S2_>
 80024b0:	4603      	mov	r3, r0
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 80024b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80024bc:	1d3a      	adds	r2, r7, #4
 80024be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fb8d 	bl	8002be4 <_ZSt3minIfERKT_S2_S2_>
 80024ca:	4603      	mov	r3, r0
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 80024d0:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024d4:	1d3a      	adds	r2, r7, #4
 80024d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fb9a 	bl	8002c16 <_ZSt3maxIfERKT_S2_S2_>
 80024e2:	4603      	mov	r3, r0
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 80024e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	db01      	blt.n	80024fa <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0xfe>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x100>
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 8002500:	edd7 7a03 	vldr	s15, [r7, #12]
 8002504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	bfac      	ite	ge
 800250e:	2301      	movge	r3, #1
 8002510:	2300      	movlt	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f083 0301 	eor.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 800251e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	db01      	blt.n	8002530 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x134>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x136>
 8002530:	2300      	movs	r3, #0
 8002532:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 8002536:	edd7 7a01 	vldr	s15, [r7, #4]
 800253a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	bfac      	ite	ge
 8002544:	2301      	movge	r3, #1
 8002546:	2300      	movlt	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c


    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 8002554:	edd7 7a04 	vldr	s15, [r7, #16]
 8002558:	eeb0 7ae7 	vabs.f32	s14, s15
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002570:	ee17 3a90 	vmov	r3, s15
 8002574:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 8002576:	edd7 7a03 	vldr	s15, [r7, #12]
 800257a:	eeb0 7ae7 	vabs.f32	s14, s15
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002592:	ee17 3a90 	vmov	r3, s15
 8002596:	647b      	str	r3, [r7, #68]	@ 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 8002598:	edd7 7a02 	vldr	s15, [r7, #8]
 800259c:	eeb0 7ae7 	vabs.f32	s14, s15
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b4:	ee17 3a90 	vmov	r3, s15
 80025b8:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 80025ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80025be:	eeb0 7ae7 	vabs.f32	s14, s15
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d6:	ee17 3a90 	vmov	r3, s15
 80025da:	63fb      	str	r3, [r7, #60]	@ 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 80025dc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80025e0:	2300      	movs	r3, #0
 80025e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025e4:	6978      	ldr	r0, [r7, #20]
 80025e6:	f000 f825 	bl	8002634 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 80025ea:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80025ee:	2301      	movs	r3, #1
 80025f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f000 f81e 	bl	8002634 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 80025f8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80025fc:	2302      	movs	r3, #2
 80025fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f000 f817 	bl	8002634 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 8002606:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800260a:	2303      	movs	r3, #3
 800260c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f000 f810 	bl	8002634 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd8f 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fd8a 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002628:	bf00      	nop
 800262a:	3750      	adds	r7, #80	@ 0x50
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	bf800000 	.word	0xbf800000

08002634 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	460b      	mov	r3, r1
 8002644:	71fb      	strb	r3, [r7, #7]
 8002646:	4613      	mov	r3, r2
 8002648:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	79bb      	ldrb	r3, [r7, #6]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	33fc      	adds	r3, #252	@ 0xfc
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	79f9      	ldrb	r1, [r7, #7]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 800267c:	e011      	b.n	80026a2 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4608      	mov	r0, r1
 80026a0:	4798      	blx	r3
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_ZN11BlocMoteurs19commande_step_indivEjN12StepperMotor11direction_tEjS1_jS1_jS1_>:
  * @param  dir_FR direction du moteur avant droite, FWD:sens trigo BWD: sens horaire
  * @param  dir_BL direction du moteur arriere gauche, FWD:sens trigo BWD: sens horaire
  * @param  dir_BR direction du moteur arriere droite, FWD:sens trigo BWD: sens horaire
  */
void BlocMoteurs::commande_step_indiv(unsigned int number_of_step_FL, direction_t dir_FL ,unsigned int number_of_step_FR, direction_t dir_FR,unsigned int number_of_step_BL,  direction_t dir_BL,unsigned int number_of_step_BR, direction_t dir_BR)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	4613      	mov	r3, r2
 80026b8:	71fb      	strb	r3, [r7, #7]
	set_step_moteur(number_of_step_FL, dir_FL, id_moteurs::front_left);
 80026ba:	79fa      	ldrb	r2, [r7, #7]
 80026bc:	2300      	movs	r3, #0
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f822 	bl	800270a <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_FR, dir_FR, id_moteurs::front_right);
 80026c6:	7e3a      	ldrb	r2, [r7, #24]
 80026c8:	2301      	movs	r3, #1
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f81c 	bl	800270a <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_BL, dir_BL, id_moteurs::back_left);
 80026d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026d6:	2302      	movs	r3, #2
 80026d8:	69f9      	ldr	r1, [r7, #28]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f815 	bl	800270a <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
	set_step_moteur(number_of_step_BR, dir_BR, id_moteurs::back_right);
 80026e0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80026e4:	2303      	movs	r3, #3
 80026e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f80e 	bl	800270a <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fd22 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fd1d 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param step , nombre de step
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_step_moteur(unsigned int steps, StepperMotor::direction_t dir, id_moteurs id)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	4611      	mov	r1, r2
 8002716:	461a      	mov	r2, r3
 8002718:	460b      	mov	r3, r1
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	4613      	mov	r3, r2
 800271e:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d013      	beq.n	8002756 <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4c>
    {
        moteurs[id]->prepare_move(dir, steps);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	79bb      	ldrb	r3, [r7, #6]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	79bb      	ldrb	r3, [r7, #6]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	79f9      	ldrb	r1, [r7, #7]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 8002754:	e011      	b.n	800277a <_ZN11BlocMoteurs15set_step_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x70>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	79bb      	ldrb	r3, [r7, #6]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	79bb      	ldrb	r3, [r7, #6]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4608      	mov	r0, r1
 8002778:	4798      	blx	r3
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>:
  * Ainsi, plus de finesse sur le deplacement (finesse != precision) est grande.
  * Un mode haut de microstepping degrade cependant la consommation et le couple effectif du moteur
  * @param  step_mode le mode de microstepping souhaite
  */
bool BlocMoteurs::set_microstepping_mode(step_mode_t step_mode)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	70fb      	strb	r3, [r7, #3]

    initShield1[0].step_sel = step_mode;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
    initShield1[1].step_sel = step_mode;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    initShield2[0].step_sel = step_mode;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    initShield2[0].step_sel = step_mode;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    bool return_value = true;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	e01c      	b.n	80027f2 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x70>
    {
    	if(! moteurs[i]->set_step_mode(step_mode))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3354      	adds	r3, #84	@ 0x54
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	4611      	mov	r1, r2
 80027da:	4798      	blx	r3
 80027dc:	4603      	mov	r3, r0
 80027de:	f083 0301 	eor.w	r3, r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x6a>
    	{
    		return_value = false;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
    for( int i = 0; i < NMOTEURS; i ++)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	dddf      	ble.n	80027b8 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE+0x36>
    	}
    }
    return return_value;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]

}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <_ZN11BlocMoteurs16motors_stop_hardEv>:
  * Le passage a la vitesse a zero ne respecte pas les parametre de deceleration maximale du robot
  * et se realise au mieux des capacites du driver
  * (contrairement a la methode motors_stop_soft)
  */
void BlocMoteurs::motors_stop_hard()
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e014      	b.n	8002854 <_ZN11BlocMoteurs16motors_stop_hardEv+0x38>
	{
		moteurs[i]->prepare_hard_stop();
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4608      	mov	r0, r1
 800284c:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3301      	adds	r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b03      	cmp	r3, #3
 8002858:	dde7      	ble.n	800282a <_ZN11BlocMoteurs16motors_stop_hardEv+0xe>
	}
    shield_1->perform_prepared_actions();
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fc6c 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fc67 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_ZN11BlocMoteurs21set_max_speed_moteursEf>:
  * @brief  Set la vitesse maximale des moteurs
  *
  * @param  radian_par_seconde la valeur maximale de vitesse angulaire en rad/s
  */
void BlocMoteurs::set_max_speed_moteurs(float radian_par_seconde)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	ed87 0a00 	vstr	s0, [r7]
	unsigned int pps = rad_to_step(radian_par_seconde);
 8002888:	ed97 0a00 	vldr	s0, [r7]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fd9d 	bl	80023cc <_ZN11BlocMoteurs11rad_to_stepEf>
 8002892:	eef0 7a40 	vmov.f32	s15, s0
 8002896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800289a:	ee17 3a90 	vmov	r3, s15
 800289e:	60bb      	str	r3, [r7, #8]
	for( int i = 0; i < NMOTEURS; i ++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e013      	b.n	80028ce <_ZN11BlocMoteurs21set_max_speed_moteursEf+0x52>
	{
		moteurs[i]->prepare_set_max_speed(pps);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	33d4      	adds	r3, #212	@ 0xd4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3301      	adds	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	dde8      	ble.n	80028a6 <_ZN11BlocMoteurs21set_max_speed_moteursEf+0x2a>
	}
    shield_1->perform_prepared_actions();
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fc2f 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fc2a 	bl	800213c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
	initShield1[0].maxspeed = pps;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	initShield1[1].maxspeed = pps;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	ee07 3a90 	vmov	s15, r3
 80028fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	initShield2[0].maxspeed = pps;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
	initShield2[1].maxspeed = pps;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
	max_vitesse = pps;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	605a      	str	r2, [r3, #4]
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	80fb      	strh	r3, [r7, #6]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4618      	mov	r0, r3
 800294c:	f00a fa78 	bl	800ce40 <_ZN13abstractL6470C1Ev>
 8002950:	4a27      	ldr	r2, [pc, #156]	@ (80029f0 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	819a      	strh	r2, [r3, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	611a      	str	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8b3a      	ldrh	r2, [r7, #24]
 800296c:	829a      	strh	r2, [r3, #20]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 800297a:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4b1c      	ldr	r3, [pc, #112]	@ (80029f4 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002984:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 800298a:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a1b      	ldr	r2, [pc, #108]	@ (80029fc <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4a1a      	ldr	r2, [pc, #104]	@ (8002a00 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 800299c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 80029b0:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	b2d1      	uxtb	r1, r2
 80029b8:	4a13      	ldr	r2, [pc, #76]	@ (8002a08 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029ba:	7011      	strb	r1, [r2, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80029c0:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80029c6:	2220      	movs	r2, #32
 80029c8:	2100      	movs	r1, #0
 80029ca:	4811      	ldr	r0, [pc, #68]	@ (8002a10 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 80029cc:	f012 fc69 	bl	80152a2 <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80029d0:	2208      	movs	r2, #8
 80029d2:	2100      	movs	r1, #0
 80029d4:	480f      	ldr	r0, [pc, #60]	@ (8002a14 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 80029d6:	f012 fc64 	bl	80152a2 <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80029da:	2208      	movs	r2, #8
 80029dc:	2100      	movs	r1, #0
 80029de:	480e      	ldr	r0, [pc, #56]	@ (8002a18 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 80029e0:	f012 fc5f 	bl	80152a2 <memset>
    }
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	08017550 	.word	0x08017550
 80029f4:	200002b0 	.word	0x200002b0
 80029f8:	08017814 	.word	0x08017814
 80029fc:	08017a08 	.word	0x08017a08
 8002a00:	08017b14 	.word	0x08017b14
 8002a04:	08017b28 	.word	0x08017b28
 8002a08:	20000214 	.word	0x20000214
 8002a0c:	20000215 	.word	0x20000215
 8002a10:	20000218 	.word	0x20000218
 8002a14:	20000238 	.word	0x20000238
 8002a18:	20000240 	.word	0x20000240

08002a1c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	80fb      	strh	r3, [r7, #6]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f00a fa06 	bl	800ce40 <_ZN13abstractL6470C1Ev>
 8002a34:	4a27      	ldr	r2, [pc, #156]	@ (8002ad4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	819a      	strh	r2, [r3, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8b3a      	ldrh	r2, [r7, #24]
 8002a50:	829a      	strh	r2, [r3, #20]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002a68:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002adc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002a6e:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002a94:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	b2d1      	uxtb	r1, r2
 8002a9c:	4a13      	ldr	r2, [pc, #76]	@ (8002aec <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002a9e:	7011      	strb	r1, [r2, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002aaa:	2220      	movs	r2, #32
 8002aac:	2100      	movs	r1, #0
 8002aae:	4811      	ldr	r0, [pc, #68]	@ (8002af4 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002ab0:	f012 fbf7 	bl	80152a2 <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	480f      	ldr	r0, [pc, #60]	@ (8002af8 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002aba:	f012 fbf2 	bl	80152a2 <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002abe:	2208      	movs	r2, #8
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	480e      	ldr	r0, [pc, #56]	@ (8002afc <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002ac4:	f012 fbed 	bl	80152a2 <memset>
    }
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	080172e4 	.word	0x080172e4
 8002ad8:	200002b1 	.word	0x200002b1
 8002adc:	08017b34 	.word	0x08017b34
 8002ae0:	08017d28 	.word	0x08017d28
 8002ae4:	08017e34 	.word	0x08017e34
 8002ae8:	08017e48 	.word	0x08017e48
 8002aec:	20000248 	.word	0x20000248
 8002af0:	20000249 	.word	0x20000249
 8002af4:	2000024c 	.word	0x2000024c
 8002af8:	2000026c 	.word	0x2000026c
 8002afc:	20000274 	.word	0x20000274

08002b00 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	80fb      	strh	r3, [r7, #6]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00a f994 	bl	800ce40 <_ZN13abstractL6470C1Ev>
 8002b18:	4a27      	ldr	r2, [pc, #156]	@ (8002bb8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	819a      	strh	r2, [r3, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8b3a      	ldrh	r2, [r7, #24]
 8002b34:	829a      	strh	r2, [r3, #20]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002b42:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002b4c:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 8002b52:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24
        L6470_Direction = &_L6470_Direction[0];
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28
        L6470_ACT = &_L6470_ACT[0];
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a1a      	ldr	r2, [pc, #104]	@ (8002bcc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 8002b64:	62da      	str	r2, [r3, #44]	@ 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	635a      	str	r2, [r3, #52]	@ 0x34
        prepared_action = PREPARED_NO_ACTION;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        L6470_Id = number_of_devices++;
 8002b78:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	b2d1      	uxtb	r1, r2
 8002b80:	4a13      	ldr	r2, [pc, #76]	@ (8002bd0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002b82:	7011      	strb	r1, [r2, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002b88:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8002b8e:	2220      	movs	r2, #32
 8002b90:	2100      	movs	r1, #0
 8002b92:	4811      	ldr	r0, [pc, #68]	@ (8002bd8 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002b94:	f012 fb85 	bl	80152a2 <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002b98:	2208      	movs	r2, #8
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	480f      	ldr	r0, [pc, #60]	@ (8002bdc <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 8002b9e:	f012 fb80 	bl	80152a2 <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	480e      	ldr	r0, [pc, #56]	@ (8002be0 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002ba8:	f012 fb7b 	bl	80152a2 <memset>
    }
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	08017078 	.word	0x08017078
 8002bbc:	200002b2 	.word	0x200002b2
 8002bc0:	08017e54 	.word	0x08017e54
 8002bc4:	08018048 	.word	0x08018048
 8002bc8:	08018154 	.word	0x08018154
 8002bcc:	08018168 	.word	0x08018168
 8002bd0:	2000027c 	.word	0x2000027c
 8002bd4:	2000027d 	.word	0x2000027d
 8002bd8:	20000280 	.word	0x20000280
 8002bdc:	200002a0 	.word	0x200002a0
 8002be0:	200002a8 	.word	0x200002a8

08002be4 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	ed93 7a00 	vldr	s14, [r3]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	d501      	bpl.n	8002c08 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	e000      	b.n	8002c0a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002c08:	687b      	ldr	r3, [r7, #4]
    }
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	ed93 7a00 	vldr	s14, [r3]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	d501      	bpl.n	8002c3a <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	e000      	b.n	8002c3c <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002c3a:	687b      	ldr	r3, [r7, #4]
    }
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	4a05      	ldr	r2, [pc, #20]	@ (8002c68 <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f00a f901 	bl	800ce60 <_ZN13abstractL6470D1Ev>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	08017078 	.word	0x08017078

08002c6c <_ZN5L6470I8shield_3ED0Ev>:
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ffe7 	bl	8002c48 <_ZN5L6470I8shield_3ED1Ev>
 8002c7a:	216c      	movs	r1, #108	@ 0x6c
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f00f fc8d 	bl	801259c <_ZdlPvj>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_ZN5L6470I8shield_2ED1Ev>:
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	4a05      	ldr	r2, [pc, #20]	@ (8002cac <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f00a f8df 	bl	800ce60 <_ZN13abstractL6470D1Ev>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	080172e4 	.word	0x080172e4

08002cb0 <_ZN5L6470I8shield_2ED0Ev>:
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ffe7 	bl	8002c8c <_ZN5L6470I8shield_2ED1Ev>
 8002cbe:	216c      	movs	r1, #108	@ 0x6c
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f00f fc6b 	bl	801259c <_ZdlPvj>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <_ZN5L6470I8shield_1ED1Ev>:
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f00a f8bd 	bl	800ce60 <_ZN13abstractL6470D1Ev>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	08017550 	.word	0x08017550

08002cf4 <_ZN5L6470I8shield_1ED0Ev>:
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ffe7 	bl	8002cd0 <_ZN5L6470I8shield_1ED1Ev>
 8002d02:	216c      	movs	r1, #108	@ 0x6c
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f00f fc49 	bl	801259c <_ZdlPvj>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6839      	ldr	r1, [r7, #0]
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
 8002d2e:	4603      	mov	r3, r0
    }
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
 8002d4e:	4603      	mov	r3, r0
    }
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4611      	mov	r1, r2
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	4603      	mov	r3, r0
    }
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002d90:	681c      	ldr	r4, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	47a0      	blx	r4
 8002daa:	4603      	mov	r3, r0
    }
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}

08002db4 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002dc4:	681c      	ldr	r4, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	47a0      	blx	r4
 8002dde:	4603      	mov	r3, r0
    }
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002de8:	b5b0      	push	{r4, r5, r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002df8:	681c      	ldr	r4, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002e02:	681d      	ldr	r5, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2103      	movs	r1, #3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
 8002e14:	4603      	mov	r3, r0
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	47a8      	blx	r5
 8002e1c:	eef0 7a40 	vmov.f32	s15, s0
 8002e20:	eeb0 0a67 	vmov.f32	s0, s15
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	47a0      	blx	r4
 8002e28:	4603      	mov	r3, r0
    }
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bdb0      	pop	{r4, r5, r7, pc}

08002e32 <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002e32:	b5b0      	push	{r4, r5, r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e42:	681c      	ldr	r4, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e4c:	681d      	ldr	r5, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2106      	movs	r1, #6
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4619      	mov	r1, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	47a8      	blx	r5
 8002e68:	eef0 7a40 	vmov.f32	s15, s0
 8002e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	47a0      	blx	r4
 8002e74:	4603      	mov	r3, r0
    }
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bdb0      	pop	{r4, r5, r7, pc}

08002e7e <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002e7e:	b5b0      	push	{r4, r5, r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e8e:	681c      	ldr	r4, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002e98:	681d      	ldr	r5, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2107      	movs	r1, #7
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	47a8      	blx	r5
 8002eb4:	eef0 7a40 	vmov.f32	s15, s0
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	47a0      	blx	r4
 8002ec0:	4603      	mov	r3, r0
    }
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bdb0      	pop	{r4, r5, r7, pc}

08002eca <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002eca:	b5b0      	push	{r4, r5, r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eda:	681c      	ldr	r4, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ee4:	681d      	ldr	r5, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2104      	movs	r1, #4
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	47a8      	blx	r5
 8002f00:	eef0 7a40 	vmov.f32	s15, s0
 8002f04:	eeb0 0a67 	vmov.f32	s0, s15
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	47a0      	blx	r4
 8002f0c:	4603      	mov	r3, r0
    }
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}

08002f16 <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002f16:	b5b0      	push	{r4, r5, r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002f30:	681d      	ldr	r5, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2105      	movs	r1, #5
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	47a8      	blx	r5
 8002f4c:	eef0 7a40 	vmov.f32	s15, s0
 8002f50:	eeb0 0a67 	vmov.f32	s0, s15
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	47a0      	blx	r4
 8002f58:	4603      	mov	r3, r0
    }
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}

08002f62 <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2104      	movs	r1, #4
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002f84:	2300      	movs	r3, #0
    }
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	b2d1      	uxtb	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	4798      	blx	r3
    }
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
    }
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002fe4:	681c      	ldr	r4, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2102      	movs	r1, #2
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	47a0      	blx	r4
    }
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}

08003008 <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	2102      	movs	r1, #2
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	47a0      	blx	r4
    }
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}

0800303e <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 800303e:	b590      	push	{r4, r7, lr}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003050:	681c      	ldr	r4, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	ee07 2a90 	vmov	s15, r2
 8003062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003066:	eeb0 0a67 	vmov.f32	s0, s15
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	2106      	movs	r1, #6
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	47a0      	blx	r4
        return true;
 8003078:	2301      	movs	r3, #1
    }
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}

08003082 <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 8003082:	b590      	push	{r4, r7, lr}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003094:	681c      	ldr	r4, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	ee07 2a90 	vmov	s15, r2
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	eeb0 0a67 	vmov.f32	s0, s15
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	2107      	movs	r1, #7
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	47a0      	blx	r4
        return true;
 80030bc:	2301      	movs	r3, #1
    }
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}

080030c6 <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 80030c6:	b590      	push	{r4, r7, lr}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80030d8:	681c      	ldr	r4, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	ee07 2a90 	vmov	s15, r2
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	eeb0 0a67 	vmov.f32	s0, s15
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	461a      	mov	r2, r3
 80030fa:	2104      	movs	r1, #4
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	47a0      	blx	r4
        return true;
 8003100:	2301      	movs	r3, #1
    }
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	bd90      	pop	{r4, r7, pc}

0800310a <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 800310a:	b590      	push	{r4, r7, lr}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800311c:	681c      	ldr	r4, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	ee07 2a90 	vmov	s15, r2
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eeb0 0a67 	vmov.f32	s0, s15
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	2105      	movs	r1, #5
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	47a0      	blx	r4
        return true;
 8003144:	2301      	movs	r3, #1
    }
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bd90      	pop	{r4, r7, pc}

0800314e <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	2b07      	cmp	r3, #7
 800315e:	d901      	bls.n	8003164 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8003160:	2300      	movs	r3, #0
 8003162:	e00f      	b.n	8003184 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3380      	adds	r3, #128	@ 0x80
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	2115      	movs	r1, #21
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
        return true;
 8003182:	2301      	movs	r3, #1
    }
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800319e:	681c      	ldr	r4, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	4603      	mov	r3, r0
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	47a0      	blx	r4
    }
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}

080031c0 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80031d6:	681c      	ldr	r4, [r3, #0]
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 80031de:	2501      	movs	r5, #1
 80031e0:	e000      	b.n	80031e4 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 80031e2:	2500      	movs	r5, #0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	4798      	blx	r3
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	4629      	mov	r1, r5
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	47a0      	blx	r4
    }
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bdb0      	pop	{r4, r5, r7, pc}

08003206 <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
    }
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
    }
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8003242:	b5b0      	push	{r4, r5, r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	72fb      	strb	r3, [r7, #11]
 8003250:	4613      	mov	r3, r2
 8003252:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800325c:	681c      	ldr	r4, [r3, #0]
 800325e:	7abb      	ldrb	r3, [r7, #10]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003264:	2501      	movs	r5, #1
 8003266:	e000      	b.n	800326a <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8003268:	2500      	movs	r5, #0
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	ee07 2a90 	vmov	s15, r2
 800327a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327e:	eeb0 0a67 	vmov.f32	s0, s15
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	4798      	blx	r3
 8003286:	4603      	mov	r3, r0
 8003288:	7af9      	ldrb	r1, [r7, #11]
 800328a:	462a      	mov	r2, r5
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	47a0      	blx	r4
    }
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bdb0      	pop	{r4, r5, r7, pc}

08003298 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80032ac:	681c      	ldr	r4, [r3, #0]
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 80032b4:	2501      	movs	r5, #1
 80032b6:	e000      	b.n	80032ba <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 80032b8:	2500      	movs	r5, #0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2106      	movs	r1, #6
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	4629      	mov	r1, r5
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	47a0      	blx	r4
    }
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bdb0      	pop	{r4, r5, r7, pc}

080032dc <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80032dc:	b5b0      	push	{r4, r5, r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	460b      	mov	r3, r1
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80032f2:	681c      	ldr	r4, [r3, #0]
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 80032fa:	2501      	movs	r5, #1
 80032fc:	e000      	b.n	8003300 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 80032fe:	2500      	movs	r5, #0
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	ee07 2a90 	vmov	s15, r2
 8003310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	4798      	blx	r3
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	4629      	mov	r1, r5
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	47a0      	blx	r4
    }
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bdb0      	pop	{r4, r5, r7, pc}

0800332e <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	460b      	mov	r3, r1
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	7afa      	ldrb	r2, [r7, #11]
 8003348:	2a01      	cmp	r2, #1
 800334a:	d101      	bne.n	8003350 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 800334c:	2101      	movs	r1, #1
 800334e:	e000      	b.n	8003352 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 8003350:	2100      	movs	r1, #0
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	4798      	blx	r3
    }
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
    }
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
    }
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
    }
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
    }
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80033e0:	bf00      	nop
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ef      	bne.n	80033e2 <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3380      	adds	r3, #128	@ 0x80
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	2a01      	cmp	r2, #1
 8003432:	d101      	bne.n	8003438 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8003434:	2201      	movs	r2, #1
 8003436:	e000      	b.n	800343a <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 8003438:	2200      	movs	r2, #0
 800343a:	4611      	mov	r1, r2
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    }
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
 8003454:	4613      	mov	r3, r2
 8003456:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	78ba      	ldrb	r2, [r7, #2]
 8003464:	2a01      	cmp	r2, #1
 8003466:	d101      	bne.n	800346c <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003468:	2201      	movs	r2, #1
 800346a:	e000      	b.n	800346e <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800346c:	2200      	movs	r2, #0
 800346e:	78f9      	ldrb	r1, [r7, #3]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
    }
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
    }
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	4611      	mov	r1, r2
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2100      	movs	r1, #0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2102      	movs	r1, #2
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2103      	movs	r1, #3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2203      	movs	r2, #3
 800355a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2106      	movs	r1, #6
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2204      	movs	r2, #4
 8003582:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2107      	movs	r1, #7
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2205      	movs	r2, #5
 80035aa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2104      	movs	r1, #4
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2206      	movs	r2, #6
 80035d2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2105      	movs	r1, #5
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2207      	movs	r2, #7
 80035fa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8003618:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4906      	ldr	r1, [pc, #24]	@ (8003644 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2208      	movs	r2, #8
 8003632:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	2000027d 	.word	0x2000027d
 8003644:	20000280 	.word	0x20000280

08003648 <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	b2d1      	uxtb	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2102      	movs	r1, #2
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2209      	movs	r2, #9
 80036bc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036da:	681c      	ldr	r4, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	2102      	movs	r1, #2
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}

08003706 <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 8003706:	b590      	push	{r4, r7, lr}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003718:	681c      	ldr	r4, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	ee07 2a90 	vmov	s15, r2
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	eeb0 0a67 	vmov.f32	s0, s15
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	2103      	movs	r1, #3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}

08003750 <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003762:	681c      	ldr	r4, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	ee07 2a90 	vmov	s15, r2
 8003774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003778:	eeb0 0a67 	vmov.f32	s0, s15
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	2106      	movs	r1, #6
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}

0800379a <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 800379a:	b590      	push	{r4, r7, lr}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037ac:	681c      	ldr	r4, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	ee07 2a90 	vmov	s15, r2
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	2107      	movs	r1, #7
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd90      	pop	{r4, r7, pc}

080037e4 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80037f6:	681c      	ldr	r4, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	ee07 2a90 	vmov	s15, r2
 8003808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380c:	eeb0 0a67 	vmov.f32	s0, s15
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	2104      	movs	r1, #4
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}

0800382e <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 800382e:	b590      	push	{r4, r7, lr}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003840:	681c      	ldr	r4, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	ee07 2a90 	vmov	s15, r2
 8003852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003856:	eeb0 0a67 	vmov.f32	s0, s15
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
 800385e:	4603      	mov	r3, r0
 8003860:	461a      	mov	r2, r3
 8003862:	2105      	movs	r1, #5
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bd90      	pop	{r4, r7, pc}

08003878 <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800388a:	681c      	ldr	r4, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
 800389c:	4603      	mov	r3, r0
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd90      	pop	{r4, r7, pc}

080038b4 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 80038b4:	b5b0      	push	{r4, r5, r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80038ca:	681c      	ldr	r4, [r3, #0]
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 80038d2:	2501      	movs	r5, #1
 80038d4:	e000      	b.n	80038d8 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 80038d6:	2500      	movs	r5, #0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	4798      	blx	r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	461a      	mov	r2, r3
 80038ec:	4629      	mov	r1, r5
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bdb0      	pop	{r4, r5, r7, pc}

08003902 <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 800394e:	b5b0      	push	{r4, r5, r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	72fb      	strb	r3, [r7, #11]
 800395c:	4613      	mov	r3, r2
 800395e:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003968:	681c      	ldr	r4, [r3, #0]
 800396a:	7abb      	ldrb	r3, [r7, #10]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8003970:	2501      	movs	r5, #1
 8003972:	e000      	b.n	8003976 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8003974:	2500      	movs	r5, #0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	ee07 2a90 	vmov	s15, r2
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eeb0 0a67 	vmov.f32	s0, s15
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	4798      	blx	r3
 8003992:	4603      	mov	r3, r0
 8003994:	7af9      	ldrb	r1, [r7, #11]
 8003996:	462a      	mov	r2, r5
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bdb0      	pop	{r4, r5, r7, pc}

080039ac <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 80039ac:	b5b0      	push	{r4, r5, r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80039c0:	681c      	ldr	r4, [r3, #0]
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 80039c8:	2501      	movs	r5, #1
 80039ca:	e000      	b.n	80039ce <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 80039cc:	2500      	movs	r5, #0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2106      	movs	r1, #6
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	4629      	mov	r1, r5
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}

080039f8 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	460b      	mov	r3, r1
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003a0e:	681c      	ldr	r4, [r3, #0]
 8003a10:	7afb      	ldrb	r3, [r7, #11]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8003a16:	2501      	movs	r5, #1
 8003a18:	e000      	b.n	8003a1c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	ee07 2a90 	vmov	s15, r2
 8003a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a30:	eeb0 0a67 	vmov.f32	s0, s15
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	4798      	blx	r3
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bdb0      	pop	{r4, r5, r7, pc}

08003a52 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	7afa      	ldrb	r2, [r7, #11]
 8003a6c:	2a01      	cmp	r2, #1
 8003a6e:	d101      	bne.n	8003a74 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8003a70:	2101      	movs	r1, #1
 8003a72:	e000      	b.n	8003a76 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8003a74:	2100      	movs	r1, #0
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	2a01      	cmp	r2, #1
 8003b3e:	d101      	bne.n	8003b44 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003b40:	2201      	movs	r2, #1
 8003b42:	e000      	b.n	8003b46 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003b44:	2200      	movs	r2, #0
 8003b46:	4611      	mov	r1, r2
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	78ba      	ldrb	r2, [r7, #2]
 8003b78:	2a01      	cmp	r2, #1
 8003b7a:	d101      	bne.n	8003b80 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	e000      	b.n	8003b82 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8003b80:	2200      	movs	r2, #0
 8003b82:	78f9      	ldrb	r1, [r7, #3]
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
 8003bd4:	4603      	mov	r3, r0
    }
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003bf8:	b5b0      	push	{r4, r5, r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	2b07      	cmp	r3, #7
 8003c0c:	f200 80fe 	bhi.w	8003e0c <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003c10:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c39 	.word	0x08003c39
 8003c1c:	08003c65 	.word	0x08003c65
 8003c20:	08003c93 	.word	0x08003c93
 8003c24:	08003cd7 	.word	0x08003cd7
 8003c28:	08003d1d 	.word	0x08003d1d
 8003c2c:	08003d63 	.word	0x08003d63
 8003c30:	08003da9 	.word	0x08003da9
 8003c34:	08003def 	.word	0x08003def
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003c40:	681c      	ldr	r4, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6a12      	ldr	r2, [r2, #32]
 8003c50:	7b92      	ldrb	r2, [r2, #14]
 8003c52:	6839      	ldr	r1, [r7, #0]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	47a0      	blx	r4
 8003c60:	4603      	mov	r3, r0
 8003c62:	e0d4      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003c6c:	681c      	ldr	r4, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6a12      	ldr	r2, [r2, #32]
 8003c7c:	3228      	adds	r2, #40	@ 0x28
 8003c7e:	7b92      	ldrb	r2, [r2, #14]
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	47a0      	blx	r4
 8003c8e:	4603      	mov	r3, r0
 8003c90:	e0bd      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c9a:	681c      	ldr	r4, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003ca4:	681d      	ldr	r5, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6a12      	ldr	r2, [r2, #32]
 8003cb4:	323c      	adds	r2, #60	@ 0x3c
 8003cb6:	7b92      	ldrb	r2, [r2, #14]
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	47a8      	blx	r5
 8003cc6:	eef0 7a40 	vmov.f32	s15, s0
 8003cca:	eeb0 0a67 	vmov.f32	s0, s15
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	47a0      	blx	r4
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	e09b      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cde:	681c      	ldr	r4, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ce8:	681d      	ldr	r5, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6a12      	ldr	r2, [r2, #32]
 8003cf8:	3278      	adds	r2, #120	@ 0x78
 8003cfa:	7b92      	ldrb	r2, [r2, #14]
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4619      	mov	r1, r3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	47a8      	blx	r5
 8003d0c:	eef0 7a40 	vmov.f32	s15, s0
 8003d10:	eeb0 0a67 	vmov.f32	s0, s15
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	47a0      	blx	r4
 8003d18:	4603      	mov	r3, r0
 8003d1a:	e078      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d24:	681c      	ldr	r4, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003d2e:	681d      	ldr	r5, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6a12      	ldr	r2, [r2, #32]
 8003d3e:	328c      	adds	r2, #140	@ 0x8c
 8003d40:	7b92      	ldrb	r2, [r2, #14]
 8003d42:	6839      	ldr	r1, [r7, #0]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	4798      	blx	r3
 8003d48:	4603      	mov	r3, r0
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	47a8      	blx	r5
 8003d52:	eef0 7a40 	vmov.f32	s15, s0
 8003d56:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	47a0      	blx	r4
 8003d5e:	4603      	mov	r3, r0
 8003d60:	e055      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d6a:	681c      	ldr	r4, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003d74:	681d      	ldr	r5, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6a12      	ldr	r2, [r2, #32]
 8003d84:	3250      	adds	r2, #80	@ 0x50
 8003d86:	7b92      	ldrb	r2, [r2, #14]
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	4798      	blx	r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	47a8      	blx	r5
 8003d98:	eef0 7a40 	vmov.f32	s15, s0
 8003d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	47a0      	blx	r4
 8003da4:	4603      	mov	r3, r0
 8003da6:	e032      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003db0:	681c      	ldr	r4, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003dba:	681d      	ldr	r5, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6a12      	ldr	r2, [r2, #32]
 8003dca:	3264      	adds	r2, #100	@ 0x64
 8003dcc:	7b92      	ldrb	r2, [r2, #14]
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	47a8      	blx	r5
 8003dde:	eef0 7a40 	vmov.f32	s15, s0
 8003de2:	eeb0 0a67 	vmov.f32	s0, s15
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	47a0      	blx	r4
 8003dea:	4603      	mov	r3, r0
 8003dec:	e00f      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2104      	movs	r1, #4
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e002      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003e0c:	2300      	movs	r3, #0
        }
    }
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bdb0      	pop	{r4, r5, r7, pc}
 8003e16:	bf00      	nop

08003e18 <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6898      	ldr	r0, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	899b      	ldrh	r3, [r3, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	f00a fe1a 	bl	800ea64 <HAL_GPIO_WritePin>
    }
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e48:	d303      	bcc.n	8003e52 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8003e50:	e000      	b.n	8003e54 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003e52:	683b      	ldr	r3, [r7, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	db05      	blt.n	8003e7c <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e76:	da01      	bge.n	8003e7c <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	e00c      	b.n	8003e96 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8003e82:	db06      	blt.n	8003e92 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da03      	bge.n	8003e92 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8003e90:	e001      	b.n	8003e96 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003e92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003ed0 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	3c74242a 	.word	0x3c74242a

08003ed4 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003ee0:	edd7 7a00 	vldr	s15, [r7]
 8003ee4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003f18 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	d80a      	bhi.n	8003f08 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003ef2:	ed97 7a00 	vldr	s14, [r7]
 8003ef6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003f1c <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003efa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f02:	ee17 3a90 	vmov	r3, s15
 8003f06:	e000      	b.n	8003f0a <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	4674241b 	.word	0x4674241b
 8003f1c:	3c74242a 	.word	0x3c74242a

08003f20 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f32:	d209      	bcs.n	8003f48 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8003f34:	887b      	ldrh	r3, [r7, #2]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003f5c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8003f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f46:	e001      	b.n	8003f4c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003f48:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003f60 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8003f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	4168d4fe 	.word	0x4168d4fe
 8003f60:	00000000 	.word	0x00000000

08003f64 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003f70:	edd7 7a00 	vldr	s15, [r7]
 8003f74:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003fa8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f80:	d80b      	bhi.n	8003f9a <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003f82:	ed97 7a00 	vldr	s14, [r7]
 8003f86:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8003fac <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8003f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f92:	ee17 3a90 	vmov	r3, s15
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	e000      	b.n	8003f9c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	4768c671 	.word	0x4768c671
 8003fac:	4168d4fe 	.word	0x4168d4fe

08003fb0 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc2:	d209      	bcs.n	8003fd8 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fce:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003fec <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 8003fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fd6:	e001      	b.n	8003fdc <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003fd8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003ff0 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 8003fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	4168d4fe 	.word	0x4168d4fe
 8003ff0:	00000000 	.word	0x00000000

08003ff4 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8004000:	edd7 7a00 	vldr	s15, [r7]
 8004004:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004038 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8004008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004010:	d80b      	bhi.n	800402a <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004012:	ed97 7a00 	vldr	s14, [r7]
 8004016:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800403c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 800401a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800401e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004022:	ee17 3a90 	vmov	r3, s15
 8004026:	b29b      	uxth	r3, r3
 8004028:	e000      	b.n	800402c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	4768c671 	.word	0x4768c671
 800403c:	4168d4fe 	.word	0x4168d4fe

08004040 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004052:	d209      	bcs.n	8004068 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800405e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800407c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8004062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004066:	e001      	b.n	800406c <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004068:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004080 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800406c:	eeb0 0a67 	vmov.f32	s0, s15
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	4174240b 	.word	0x4174240b
 8004080:	00000000 	.word	0x00000000

08004084 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004090:	edd7 7a00 	vldr	s15, [r7]
 8004094:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80040c8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8004098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a0:	d80b      	bhi.n	80040ba <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80040a2:	ed97 7a00 	vldr	s14, [r7]
 80040a6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80040cc <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 80040aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b2:	ee17 3a90 	vmov	r3, s15
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	e000      	b.n	80040bc <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	4673e702 	.word	0x4673e702
 80040cc:	4174240b 	.word	0x4174240b

080040d0 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e2:	d209      	bcs.n	80040f8 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80040e4:	887b      	ldrh	r3, [r7, #2]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ee:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800410c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 80040f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040f6:	e001      	b.n	80040fc <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 80040f8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004110 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 80040fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	3e742401 	.word	0x3e742401
 8004110:	00000000 	.word	0x00000000

08004114 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004120:	edd7 7a00 	vldr	s15, [r7]
 8004124:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004158 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 8004128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	d80b      	bhi.n	800414a <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8004132:	ed97 7a00 	vldr	s14, [r7]
 8004136:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800415c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 800413a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800413e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004142:	ee17 3a90 	vmov	r3, s15
 8004146:	b29b      	uxth	r3, r3
 8004148:	e000      	b.n	800414c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	447414bf 	.word	0x447414bf
 800415c:	3e742401 	.word	0x3e742401

08004160 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 800416c:	887b      	ldrh	r3, [r7, #2]
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004172:	d219      	bcs.n	80041a8 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc fa04 	bl	8000584 <__aeabi_i2d>
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	4b0e      	ldr	r3, [pc, #56]	@ (80041bc <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8004182:	f7fc f8b3 	bl	80002ec <__adddf3>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 8004194:	f7fc fa60 	bl	8000658 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fd52 	bl	8000c48 <__aeabi_d2f>
 80041a4:	4603      	mov	r3, r0
 80041a6:	e001      	b.n	80041ac <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 80041a8:	f04f 0300 	mov.w	r3, #0
}
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	eeb0 0a67 	vmov.f32	s0, s15
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	3fe00000 	.word	0x3fe00000
 80041c0:	402e8000 	.word	0x402e8000

080041c4 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80041d0:	edd7 7a00 	vldr	s15, [r7]
 80041d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004210 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 80041d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	d80f      	bhi.n	8004202 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80041e2:	ed97 7a00 	vldr	s14, [r7]
 80041e6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004214 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 80041ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80041f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041fa:	ee17 3a90 	vmov	r3, s15
 80041fe:	b29b      	uxth	r3, r3
 8004200:	e000      	b.n	8004204 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	4673e180 	.word	0x4673e180
 8004214:	41740000 	.word	0x41740000

08004218 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800422a:	d209      	bcs.n	8004240 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004236:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004254 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800423a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800423e:	e001      	b.n	8004244 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004240:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004258 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8004244:	eeb0 0a67 	vmov.f32	s0, s15
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	3d7423f4 	.word	0x3d7423f4
 8004258:	00000000 	.word	0x00000000

0800425c <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8004268:	edd7 7a00 	vldr	s15, [r7]
 800426c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80042a0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 8004270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004278:	d80b      	bhi.n	8004292 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800427a:	ed97 7a00 	vldr	s14, [r7]
 800427e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80042a4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 8004282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428a:	ee17 3a90 	vmov	r3, s15
 800428e:	b29b      	uxth	r3, r3
 8004290:	e000      	b.n	8004294 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	44742023 	.word	0x44742023
 80042a4:	3d7423f4 	.word	0x3d7423f4

080042a8 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80042d4 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 80042c2:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80042c6:	eeb0 0a67 	vmov.f32	s0, s15
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	3783956e 	.word	0x3783956e

080042d8 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80042e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004320 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 80042ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f4:	d80c      	bhi.n	8004310 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80042f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80042fa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004324 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 80042fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	edc7 7a01 	vstr	s15, [r7, #4]
 800430a:	793b      	ldrb	r3, [r7, #4]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e000      	b.n	8004312 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	3b8311d9 	.word	0x3b8311d9
 8004324:	3783956e 	.word	0x3783956e

08004328 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800433e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004354 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8004342:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 8004346:	eeb0 0a67 	vmov.f32	s0, s15
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	3783956e 	.word	0x3783956e

08004358 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8004364:	edd7 7a02 	vldr	s15, [r7, #8]
 8004368:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80043a0 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800436c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	d80c      	bhi.n	8004390 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004376:	ed97 7a02 	vldr	s14, [r7, #8]
 800437a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80043a4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800437e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004386:	edc7 7a01 	vstr	s15, [r7, #4]
 800438a:	793b      	ldrb	r3, [r7, #4]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	e000      	b.n	8004392 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	3b8311d9 	.word	0x3b8311d9
 80043a4:	3783956e 	.word	0x3783956e

080043a8 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043be:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80043d4 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80043c2:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 80043c6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	3783956e 	.word	0x3783956e

080043d8 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80043e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004420 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80043ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	d80c      	bhi.n	8004410 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80043f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80043fa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004424 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 80043fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004406:	edc7 7a01 	vstr	s15, [r7, #4]
 800440a:	793b      	ldrb	r3, [r7, #4]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e000      	b.n	8004412 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	3b8311d9 	.word	0x3b8311d9
 8004424:	3783956e 	.word	0x3783956e

08004428 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	2b0f      	cmp	r3, #15
 8004438:	d80a      	bhi.n	8004450 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	3301      	adds	r3, #1
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004446:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004464 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 800444a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444e:	e001      	b.n	8004454 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 8004450:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004468 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 8004454:	eeb0 0a67 	vmov.f32	s0, s15
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	43bb8000 	.word	0x43bb8000
 8004468:	00000000 	.word	0x00000000

0800446c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8004478:	edd7 7a02 	vldr	s15, [r7, #8]
 800447c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004508 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 8004480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004488:	d836      	bhi.n	80044f8 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 800448a:	ed97 7a02 	vldr	s14, [r7, #8]
 800448e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800450c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 8004492:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004496:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800449a:	edd7 7a05 	vldr	s15, [r7, #20]
 800449e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80044a6:	793b      	ldrb	r3, [r7, #4]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80044b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ba:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80044be:	edd7 7a04 	vldr	s15, [r7, #16]
 80044c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80044c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ce:	d50a      	bpl.n	80044e6 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80044d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80044d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80044dc:	793b      	ldrb	r3, [r7, #4]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e009      	b.n	80044fa <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 80044e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80044f2:	793b      	ldrb	r3, [r7, #4]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e000      	b.n	80044fa <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	45bb8000 	.word	0x45bb8000
 800450c:	43bb8000 	.word	0x43bb8000

08004510 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 800451c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db0a      	blt.n	800453a <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	3301      	adds	r3, #1
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004530:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800454c <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8004534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004538:	e001      	b.n	800453e <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 800453a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004550 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 800453e:	eeb0 0a67 	vmov.f32	s0, s15
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	41fa0000 	.word	0x41fa0000
 8004550:	00000000 	.word	0x00000000

08004554 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8004560:	edd7 7a02 	vldr	s15, [r7, #8]
 8004564:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80045f0 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 8004568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	d836      	bhi.n	80045e0 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 8004572:	ed97 7a02 	vldr	s14, [r7, #8]
 8004576:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80045f4 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 800457a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8004582:	edd7 7a05 	vldr	s15, [r7, #20]
 8004586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458a:	edc7 7a01 	vstr	s15, [r7, #4]
 800458e:	793b      	ldrb	r3, [r7, #4]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800459a:	ed97 7a05 	vldr	s14, [r7, #20]
 800459e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80045a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80045aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b6:	d50a      	bpl.n	80045ce <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80045b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80045bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80045c4:	793b      	ldrb	r3, [r7, #4]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	e009      	b.n	80045e2 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 80045ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80045d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80045da:	793b      	ldrb	r3, [r7, #4]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e000      	b.n	80045e2 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	457a0000 	.word	0x457a0000
 80045f4:	41fa0000 	.word	0x41fa0000

080045f8 <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3394      	adds	r3, #148	@ 0x94
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	edd2 7a05 	vldr	s15, [r2, #20]
 800462e:	eeb0 0a67 	vmov.f32	s0, s15
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	4798      	blx	r3
 8004636:	4603      	mov	r3, r0
 8004638:	461a      	mov	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	edd2 7a06 	vldr	s15, [r2, #24]
 8004650:	eeb0 0a67 	vmov.f32	s0, s15
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	4798      	blx	r3
 8004658:	4603      	mov	r3, r0
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	edd2 7a07 	vldr	s15, [r2, #28]
 8004672:	eeb0 0a67 	vmov.f32	s0, s15
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	4798      	blx	r3
 800467a:	4603      	mov	r3, r0
 800467c:	461a      	mov	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	edd2 7a08 	vldr	s15, [r2, #32]
 8004694:	eeb0 0a67 	vmov.f32	s0, s15
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	4798      	blx	r3
 800469c:	4603      	mov	r3, r0
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80046b6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	4798      	blx	r3
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80046ce:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80049a0 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80046d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	ed93 7a00 	vldr	s14, [r3]
 80046dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80046e8:	793b      	ldrb	r3, [r7, #4]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80046f8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80049a0 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80046fc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	ed93 7a00 	vldr	s14, [r3]
 8004706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800470e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004712:	793b      	ldrb	r3, [r7, #4]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004722:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80049a0 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004726:	ee67 6a87 	vmul.f32	s13, s15, s14
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	ed93 7a00 	vldr	s14, [r3]
 8004730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004738:	edc7 7a01 	vstr	s15, [r7, #4]
 800473c:	793b      	ldrb	r3, [r7, #4]
 800473e:	b2da      	uxtb	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800474c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80049a0 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004750:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ed93 7a00 	vldr	s14, [r3]
 800475a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800475e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004762:	edc7 7a01 	vstr	s15, [r7, #4]
 8004766:	793b      	ldrb	r3, [r7, #4]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004780:	eeb0 0a67 	vmov.f32	s0, s15
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	4798      	blx	r3
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80047a2:	eeb0 0a67 	vmov.f32	s0, s15
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	4798      	blx	r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 80047c4:	eeb0 0a67 	vmov.f32	s0, s15
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	4798      	blx	r3
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 80047e6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	4798      	blx	r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 8004814:	eeb0 0a67 	vmov.f32	s0, s15
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	4798      	blx	r3
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 8004836:	eeb0 0a67 	vmov.f32	s0, s15
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	4798      	blx	r3
 800483e:	4603      	mov	r3, r0
 8004840:	461a      	mov	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800487c:	2104      	movs	r1, #4
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8004892:	2105      	movs	r1, #5
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 80048a8:	2106      	movs	r1, #6
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 80048be:	2107      	movs	r1, #7
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80048d4:	2108      	movs	r1, #8
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80048ea:	2109      	movs	r1, #9
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8004900:	210a      	movs	r1, #10
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004916:	210b      	movs	r1, #11
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800492c:	210c      	movs	r1, #12
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8004942:	210d      	movs	r1, #13
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8004958:	210e      	movs	r1, #14
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800496e:	210f      	movs	r1, #15
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8004984:	2110      	movs	r1, #16
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800499a:	2111      	movs	r1, #17
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	e001      	b.n	80049a4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 80049a0:	43800000 	.word	0x43800000
 80049a4:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 80049b6:	2113      	movs	r1, #19
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 80049cc:	2114      	movs	r1, #20
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80049e2:	2116      	movs	r1, #22
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 80049f8:	2117      	movs	r1, #23
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3354      	adds	r3, #84	@ 0x54
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	4798      	blx	r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	f083 0301 	eor.w	r3, r3, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	460b      	mov	r3, r1
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004a42:	681c      	ldr	r4, [r3, #0]
 8004a44:	7afa      	ldrb	r2, [r7, #11]
 8004a46:	2300      	movs	r3, #0
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	2201      	movs	r2, #1
 8004a52:	490c      	ldr	r1, [pc, #48]	@ (8004a84 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a09      	ldr	r2, [pc, #36]	@ (8004a88 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004a64:	4907      	ldr	r1, [pc, #28]	@ (8004a84 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a05      	ldr	r2, [pc, #20]	@ (8004a8c <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8004a76:	4904      	ldr	r1, [pc, #16]	@ (8004a88 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	4798      	blx	r3
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd90      	pop	{r4, r7, pc}
 8004a84:	20000280 	.word	0x20000280
 8004a88:	200002a0 	.word	0x200002a0
 8004a8c:	200002a8 	.word	0x200002a8

08004a90 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004aa4:	681c      	ldr	r4, [r3, #0]
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	9201      	str	r2, [sp, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	9200      	str	r2, [sp, #0]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4917      	ldr	r1, [pc, #92]	@ (8004b10 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a14      	ldr	r2, [pc, #80]	@ (8004b14 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004ac4:	4912      	ldr	r1, [pc, #72]	@ (8004b10 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a10      	ldr	r2, [pc, #64]	@ (8004b18 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004ad6:	490f      	ldr	r1, [pc, #60]	@ (8004b14 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a19      	ldr	r1, [r3, #32]
 8004ae0:	78fa      	ldrb	r2, [r7, #3]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	7b9b      	ldrb	r3, [r3, #14]
 8004aee:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	4906      	ldr	r1, [pc, #24]	@ (8004b18 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8004b06:	68bb      	ldr	r3, [r7, #8]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}
 8004b10:	20000280 	.word	0x20000280
 8004b14:	200002a0 	.word	0x200002a0
 8004b18:	200002a8 	.word	0x200002a8

08004b1c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	460b      	mov	r3, r1
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b32:	681c      	ldr	r4, [r3, #0]
 8004b34:	7afa      	ldrb	r2, [r7, #11]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	2203      	movs	r2, #3
 8004b42:	490c      	ldr	r1, [pc, #48]	@ (8004b74 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a09      	ldr	r2, [pc, #36]	@ (8004b78 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004b54:	4907      	ldr	r1, [pc, #28]	@ (8004b74 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a05      	ldr	r2, [pc, #20]	@ (8004b7c <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8004b66:	4904      	ldr	r1, [pc, #16]	@ (8004b78 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	4798      	blx	r3
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd90      	pop	{r4, r7, pc}
 8004b74:	20000280 	.word	0x20000280
 8004b78:	200002a0 	.word	0x200002a0
 8004b7c:	200002a8 	.word	0x200002a8

08004b80 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004b94:	681c      	ldr	r4, [r3, #0]
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	9201      	str	r2, [sp, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	9200      	str	r2, [sp, #0]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	490c      	ldr	r1, [pc, #48]	@ (8004bd4 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a09      	ldr	r2, [pc, #36]	@ (8004bd8 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004bb4:	4907      	ldr	r1, [pc, #28]	@ (8004bd4 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a05      	ldr	r2, [pc, #20]	@ (8004bdc <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004bc6:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd90      	pop	{r4, r7, pc}
 8004bd4:	20000280 	.word	0x20000280
 8004bd8:	200002a0 	.word	0x200002a0
 8004bdc:	200002a8 	.word	0x200002a8

08004be0 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	460b      	mov	r3, r1
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004bf6:	681c      	ldr	r4, [r3, #0]
 8004bf8:	7afa      	ldrb	r2, [r7, #11]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	2205      	movs	r2, #5
 8004c06:	490c      	ldr	r1, [pc, #48]	@ (8004c38 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a09      	ldr	r2, [pc, #36]	@ (8004c3c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c18:	4907      	ldr	r1, [pc, #28]	@ (8004c38 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a05      	ldr	r2, [pc, #20]	@ (8004c40 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004c2a:	4904      	ldr	r1, [pc, #16]	@ (8004c3c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	4798      	blx	r3
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd90      	pop	{r4, r7, pc}
 8004c38:	20000280 	.word	0x20000280
 8004c3c:	200002a0 	.word	0x200002a0
 8004c40:	200002a8 	.word	0x200002a8

08004c44 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c54:	d21f      	bcs.n	8004c96 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004c5e:	681c      	ldr	r4, [r3, #0]
 8004c60:	2300      	movs	r3, #0
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	2300      	movs	r3, #0
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2206      	movs	r2, #6
 8004c6c:	490c      	ldr	r1, [pc, #48]	@ (8004ca0 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004c7e:	4908      	ldr	r1, [pc, #32]	@ (8004ca0 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a06      	ldr	r2, [pc, #24]	@ (8004ca8 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004c90:	4904      	ldr	r1, [pc, #16]	@ (8004ca4 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000280 	.word	0x20000280
 8004ca4:	200002a0 	.word	0x200002a0
 8004ca8:	200002a8 	.word	0x200002a8

08004cac <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cc0:	d220      	bcs.n	8004d04 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004cca:	681c      	ldr	r4, [r3, #0]
 8004ccc:	7afa      	ldrb	r2, [r7, #11]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	2207      	movs	r2, #7
 8004cda:	490c      	ldr	r1, [pc, #48]	@ (8004d0c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a09      	ldr	r2, [pc, #36]	@ (8004d10 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004cec:	4907      	ldr	r1, [pc, #28]	@ (8004d0c <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004cfe:	4904      	ldr	r1, [pc, #16]	@ (8004d10 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	4798      	blx	r3
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd90      	pop	{r4, r7, pc}
 8004d0c:	20000280 	.word	0x20000280
 8004d10:	200002a0 	.word	0x200002a0
 8004d14:	200002a8 	.word	0x200002a8

08004d18 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	72fb      	strb	r3, [r7, #11]
 8004d26:	4613      	mov	r3, r2
 8004d28:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d32:	681c      	ldr	r4, [r3, #0]
 8004d34:	7af9      	ldrb	r1, [r7, #11]
 8004d36:	7abb      	ldrb	r3, [r7, #10]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	9201      	str	r2, [sp, #4]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	2208      	movs	r2, #8
 8004d42:	490c      	ldr	r1, [pc, #48]	@ (8004d74 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a09      	ldr	r2, [pc, #36]	@ (8004d78 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004d54:	4907      	ldr	r1, [pc, #28]	@ (8004d74 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a05      	ldr	r2, [pc, #20]	@ (8004d7c <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004d66:	4904      	ldr	r1, [pc, #16]	@ (8004d78 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	4798      	blx	r3
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd90      	pop	{r4, r7, pc}
 8004d74:	20000280 	.word	0x20000280
 8004d78:	200002a0 	.word	0x200002a0
 8004d7c:	200002a8 	.word	0x200002a8

08004d80 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d98:	681c      	ldr	r4, [r3, #0]
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	78bb      	ldrb	r3, [r7, #2]
 8004d9e:	2100      	movs	r1, #0
 8004da0:	9101      	str	r1, [sp, #4]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	2209      	movs	r2, #9
 8004da8:	490c      	ldr	r1, [pc, #48]	@ (8004ddc <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a09      	ldr	r2, [pc, #36]	@ (8004de0 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004dba:	4908      	ldr	r1, [pc, #32]	@ (8004ddc <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a06      	ldr	r2, [pc, #24]	@ (8004de4 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004dcc:	4904      	ldr	r1, [pc, #16]	@ (8004de0 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000280 	.word	0x20000280
 8004de0:	200002a0 	.word	0x200002a0
 8004de4:	200002a8 	.word	0x200002a8

08004de8 <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004df8:	681c      	ldr	r4, [r3, #0]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	220a      	movs	r2, #10
 8004e06:	490c      	ldr	r1, [pc, #48]	@ (8004e38 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a09      	ldr	r2, [pc, #36]	@ (8004e3c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e18:	4907      	ldr	r1, [pc, #28]	@ (8004e38 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a05      	ldr	r2, [pc, #20]	@ (8004e40 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004e2a:	4904      	ldr	r1, [pc, #16]	@ (8004e3c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd90      	pop	{r4, r7, pc}
 8004e38:	20000280 	.word	0x20000280
 8004e3c:	200002a0 	.word	0x200002a0
 8004e40:	200002a8 	.word	0x200002a8

08004e44 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004e54:	681c      	ldr	r4, [r3, #0]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	220b      	movs	r2, #11
 8004e62:	490c      	ldr	r1, [pc, #48]	@ (8004e94 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a09      	ldr	r2, [pc, #36]	@ (8004e98 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004e74:	4907      	ldr	r1, [pc, #28]	@ (8004e94 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a05      	ldr	r2, [pc, #20]	@ (8004e9c <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004e86:	4904      	ldr	r1, [pc, #16]	@ (8004e98 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd90      	pop	{r4, r7, pc}
 8004e94:	20000280 	.word	0x20000280
 8004e98:	200002a0 	.word	0x200002a0
 8004e9c:	200002a8 	.word	0x200002a8

08004ea0 <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004eb0:	681c      	ldr	r4, [r3, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	220c      	movs	r2, #12
 8004ebe:	490c      	ldr	r1, [pc, #48]	@ (8004ef0 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a09      	ldr	r2, [pc, #36]	@ (8004ef4 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004ed0:	4907      	ldr	r1, [pc, #28]	@ (8004ef0 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a05      	ldr	r2, [pc, #20]	@ (8004ef8 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004ee2:	4904      	ldr	r1, [pc, #16]	@ (8004ef4 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd90      	pop	{r4, r7, pc}
 8004ef0:	20000280 	.word	0x20000280
 8004ef4:	200002a0 	.word	0x200002a0
 8004ef8:	200002a8 	.word	0x200002a8

08004efc <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f0c:	681c      	ldr	r4, [r3, #0]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	2300      	movs	r3, #0
 8004f18:	220d      	movs	r2, #13
 8004f1a:	490c      	ldr	r1, [pc, #48]	@ (8004f4c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004f2c:	4907      	ldr	r1, [pc, #28]	@ (8004f4c <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a05      	ldr	r2, [pc, #20]	@ (8004f54 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8004f3e:	4904      	ldr	r1, [pc, #16]	@ (8004f50 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd90      	pop	{r4, r7, pc}
 8004f4c:	20000280 	.word	0x20000280
 8004f50:	200002a0 	.word	0x200002a0
 8004f54:	200002a8 	.word	0x200002a8

08004f58 <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004f68:	681c      	ldr	r4, [r3, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9301      	str	r3, [sp, #4]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	2300      	movs	r3, #0
 8004f74:	220e      	movs	r2, #14
 8004f76:	490c      	ldr	r1, [pc, #48]	@ (8004fa8 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a09      	ldr	r2, [pc, #36]	@ (8004fac <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004f88:	4907      	ldr	r1, [pc, #28]	@ (8004fa8 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a05      	ldr	r2, [pc, #20]	@ (8004fb0 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8004f9a:	4904      	ldr	r1, [pc, #16]	@ (8004fac <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}
 8004fa8:	20000280 	.word	0x20000280
 8004fac:	200002a0 	.word	0x200002a0
 8004fb0:	200002a8 	.word	0x200002a8

08004fb4 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fc4:	681c      	ldr	r4, [r3, #0]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	220f      	movs	r2, #15
 8004fd2:	490c      	ldr	r1, [pc, #48]	@ (8005004 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a09      	ldr	r2, [pc, #36]	@ (8005008 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004fe4:	4907      	ldr	r1, [pc, #28]	@ (8005004 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a05      	ldr	r2, [pc, #20]	@ (800500c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8004ff6:	4904      	ldr	r1, [pc, #16]	@ (8005008 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4798      	blx	r3
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	bd90      	pop	{r4, r7, pc}
 8005004:	20000280 	.word	0x20000280
 8005008:	200002a0 	.word	0x200002a0
 800500c:	200002a8 	.word	0x200002a8

08005010 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b085      	sub	sp, #20
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005020:	681c      	ldr	r4, [r3, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	2300      	movs	r3, #0
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2300      	movs	r3, #0
 800502c:	2210      	movs	r2, #16
 800502e:	490c      	ldr	r1, [pc, #48]	@ (8005060 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a09      	ldr	r2, [pc, #36]	@ (8005064 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8005040:	4907      	ldr	r1, [pc, #28]	@ (8005060 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a05      	ldr	r2, [pc, #20]	@ (8005068 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 8005052:	4904      	ldr	r1, [pc, #16]	@ (8005064 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bd90      	pop	{r4, r7, pc}
 8005060:	20000280 	.word	0x20000280
 8005064:	200002a0 	.word	0x200002a0
 8005068:	200002a8 	.word	0x200002a8

0800506c <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b085      	sub	sp, #20
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800507c:	681c      	ldr	r4, [r3, #0]
 800507e:	2300      	movs	r3, #0
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	2300      	movs	r3, #0
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	2211      	movs	r2, #17
 800508a:	490c      	ldr	r1, [pc, #48]	@ (80050bc <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a09      	ldr	r2, [pc, #36]	@ (80050c0 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 800509c:	4907      	ldr	r1, [pc, #28]	@ (80050bc <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a05      	ldr	r2, [pc, #20]	@ (80050c4 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 80050ae:	4904      	ldr	r1, [pc, #16]	@ (80050c0 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}
 80050bc:	20000280 	.word	0x20000280
 80050c0:	200002a0 	.word	0x200002a0
 80050c4:	200002a8 	.word	0x200002a8

080050c8 <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 80050c8:	b590      	push	{r4, r7, lr}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80050d8:	681c      	ldr	r4, [r3, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	2300      	movs	r3, #0
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	2300      	movs	r3, #0
 80050e4:	2212      	movs	r2, #18
 80050e6:	4912      	ldr	r1, [pc, #72]	@ (8005130 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005134 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 80050f8:	490d      	ldr	r1, [pc, #52]	@ (8005130 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a0b      	ldr	r2, [pc, #44]	@ (8005138 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800510a:	490a      	ldr	r1, [pc, #40]	@ (8005134 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2202      	movs	r2, #2
 800511c:	4906      	ldr	r1, [pc, #24]	@ (8005138 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
 8005122:	4603      	mov	r3, r0
 8005124:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8005126:	89fb      	ldrh	r3, [r7, #14]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bd90      	pop	{r4, r7, pc}
 8005130:	20000280 	.word	0x20000280
 8005134:	200002a0 	.word	0x200002a0
 8005138:	200002a8 	.word	0x200002a8

0800513c <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b087      	sub	sp, #28
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	460b      	mov	r3, r1
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005152:	681c      	ldr	r4, [r3, #0]
 8005154:	7afa      	ldrb	r2, [r7, #11]
 8005156:	2300      	movs	r3, #0
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	2201      	movs	r2, #1
 8005162:	4903      	ldr	r1, [pc, #12]	@ (8005170 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	47a0      	blx	r4
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	bd90      	pop	{r4, r7, pc}
 8005170:	20000280 	.word	0x20000280

08005174 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b085      	sub	sp, #20
 8005178:	af02      	add	r7, sp, #8
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005188:	681c      	ldr	r4, [r3, #0]
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	2200      	movs	r2, #0
 800518e:	9201      	str	r2, [sp, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	9200      	str	r2, [sp, #0]
 8005194:	2202      	movs	r2, #2
 8005196:	4903      	ldr	r1, [pc, #12]	@ (80051a4 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	47a0      	blx	r4
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd90      	pop	{r4, r7, pc}
 80051a4:	20000280 	.word	0x20000280

080051a8 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	460b      	mov	r3, r1
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051be:	681c      	ldr	r4, [r3, #0]
 80051c0:	7afa      	ldrb	r2, [r7, #11]
 80051c2:	2300      	movs	r3, #0
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	2203      	movs	r2, #3
 80051ce:	4903      	ldr	r1, [pc, #12]	@ (80051dc <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	47a0      	blx	r4
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd90      	pop	{r4, r7, pc}
 80051dc:	20000280 	.word	0x20000280

080051e0 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80051f4:	681c      	ldr	r4, [r3, #0]
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	2200      	movs	r2, #0
 80051fa:	9201      	str	r2, [sp, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	9200      	str	r2, [sp, #0]
 8005200:	2204      	movs	r2, #4
 8005202:	4903      	ldr	r1, [pc, #12]	@ (8005210 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	47a0      	blx	r4
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}
 8005210:	20000280 	.word	0x20000280

08005214 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b087      	sub	sp, #28
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	460b      	mov	r3, r1
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800522a:	681c      	ldr	r4, [r3, #0]
 800522c:	7afa      	ldrb	r2, [r7, #11]
 800522e:	2300      	movs	r3, #0
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	4613      	mov	r3, r2
 8005238:	2205      	movs	r2, #5
 800523a:	4903      	ldr	r1, [pc, #12]	@ (8005248 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	47a0      	blx	r4
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bd90      	pop	{r4, r7, pc}
 8005248:	20000280 	.word	0x20000280

0800524c <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b085      	sub	sp, #20
 8005250:	af02      	add	r7, sp, #8
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800525e:	681c      	ldr	r4, [r3, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	2300      	movs	r3, #0
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2206      	movs	r2, #6
 800526c:	4903      	ldr	r1, [pc, #12]	@ (800527c <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	47a0      	blx	r4
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	bd90      	pop	{r4, r7, pc}
 800527a:	bf00      	nop
 800527c:	20000280 	.word	0x20000280

08005280 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b087      	sub	sp, #28
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	460b      	mov	r3, r1
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005296:	681c      	ldr	r4, [r3, #0]
 8005298:	7afa      	ldrb	r2, [r7, #11]
 800529a:	2300      	movs	r3, #0
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	2207      	movs	r2, #7
 80052a6:	4903      	ldr	r1, [pc, #12]	@ (80052b4 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	47a0      	blx	r4
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd90      	pop	{r4, r7, pc}
 80052b4:	20000280 	.word	0x20000280

080052b8 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80052b8:	b590      	push	{r4, r7, lr}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	607b      	str	r3, [r7, #4]
 80052c2:	460b      	mov	r3, r1
 80052c4:	72fb      	strb	r3, [r7, #11]
 80052c6:	4613      	mov	r3, r2
 80052c8:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80052d2:	681c      	ldr	r4, [r3, #0]
 80052d4:	7af9      	ldrb	r1, [r7, #11]
 80052d6:	7abb      	ldrb	r3, [r7, #10]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	9201      	str	r2, [sp, #4]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	460b      	mov	r3, r1
 80052e0:	2208      	movs	r2, #8
 80052e2:	4903      	ldr	r1, [pc, #12]	@ (80052f0 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	47a0      	blx	r4
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd90      	pop	{r4, r7, pc}
 80052f0:	20000280 	.word	0x20000280

080052f4 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
 8005300:	4613      	mov	r3, r2
 8005302:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800530c:	681c      	ldr	r4, [r3, #0]
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	78bb      	ldrb	r3, [r7, #2]
 8005312:	2100      	movs	r1, #0
 8005314:	9101      	str	r1, [sp, #4]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	2209      	movs	r2, #9
 800531c:	4903      	ldr	r1, [pc, #12]	@ (800532c <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	47a0      	blx	r4
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	bd90      	pop	{r4, r7, pc}
 800532a:	bf00      	nop
 800532c:	20000280 	.word	0x20000280

08005330 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b085      	sub	sp, #20
 8005334:	af02      	add	r7, sp, #8
 8005336:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005340:	681c      	ldr	r4, [r3, #0]
 8005342:	2300      	movs	r3, #0
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	2300      	movs	r3, #0
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	220a      	movs	r2, #10
 800534e:	4903      	ldr	r1, [pc, #12]	@ (800535c <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	47a0      	blx	r4
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	bd90      	pop	{r4, r7, pc}
 800535c:	20000280 	.word	0x20000280

08005360 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af02      	add	r7, sp, #8
 8005366:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005370:	681c      	ldr	r4, [r3, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	2300      	movs	r3, #0
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	220b      	movs	r2, #11
 800537e:	4903      	ldr	r1, [pc, #12]	@ (800538c <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	47a0      	blx	r4
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bd90      	pop	{r4, r7, pc}
 800538c:	20000280 	.word	0x20000280

08005390 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b085      	sub	sp, #20
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053a0:	681c      	ldr	r4, [r3, #0]
 80053a2:	2300      	movs	r3, #0
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	220c      	movs	r2, #12
 80053ae:	4903      	ldr	r1, [pc, #12]	@ (80053bc <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	47a0      	blx	r4
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}
 80053bc:	20000280 	.word	0x20000280

080053c0 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	220d      	movs	r2, #13
 80053de:	4903      	ldr	r1, [pc, #12]	@ (80053ec <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	47a0      	blx	r4
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	20000280 	.word	0x20000280

080053f0 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005400:	681c      	ldr	r4, [r3, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	2300      	movs	r3, #0
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	220e      	movs	r2, #14
 800540e:	4903      	ldr	r1, [pc, #12]	@ (800541c <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	47a0      	blx	r4
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bd90      	pop	{r4, r7, pc}
 800541c:	20000280 	.word	0x20000280

08005420 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b085      	sub	sp, #20
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	2300      	movs	r3, #0
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	220f      	movs	r2, #15
 800543e:	4903      	ldr	r1, [pc, #12]	@ (800544c <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	47a0      	blx	r4
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bd90      	pop	{r4, r7, pc}
 800544c:	20000280 	.word	0x20000280

08005450 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b085      	sub	sp, #20
 8005454:	af02      	add	r7, sp, #8
 8005456:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005460:	681c      	ldr	r4, [r3, #0]
 8005462:	2300      	movs	r3, #0
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	2300      	movs	r3, #0
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	2210      	movs	r2, #16
 800546e:	4903      	ldr	r1, [pc, #12]	@ (800547c <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	47a0      	blx	r4
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bd90      	pop	{r4, r7, pc}
 800547c:	20000280 	.word	0x20000280

08005480 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b085      	sub	sp, #20
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005490:	681c      	ldr	r4, [r3, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	2300      	movs	r3, #0
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	2211      	movs	r2, #17
 800549e:	4903      	ldr	r1, [pc, #12]	@ (80054ac <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	47a0      	blx	r4
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd90      	pop	{r4, r7, pc}
 80054ac:	20000280 	.word	0x20000280

080054b0 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80054c0:	681c      	ldr	r4, [r3, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	2300      	movs	r3, #0
 80054cc:	2212      	movs	r2, #18
 80054ce:	4903      	ldr	r1, [pc, #12]	@ (80054dc <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	47a0      	blx	r4
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd90      	pop	{r4, r7, pc}
 80054dc:	20000280 	.word	0x20000280

080054e0 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a09      	ldr	r2, [pc, #36]	@ (8005518 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80054f4:	4909      	ldr	r1, [pc, #36]	@ (800551c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a06      	ldr	r2, [pc, #24]	@ (8005520 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 8005506:	4904      	ldr	r1, [pc, #16]	@ (8005518 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800550c:	4b04      	ldr	r3, [pc, #16]	@ (8005520 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	200002a0 	.word	0x200002a0
 800551c:	20000280 	.word	0x20000280
 8005520:	200002a8 	.word	0x200002a8

08005524 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b089      	sub	sp, #36	@ 0x24
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8005530:	4b17      	ldr	r3, [pc, #92]	@ (8005590 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]
 800553a:	e020      	b.n	800557e <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005544:	681c      	ldr	r4, [r3, #0]
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	461a      	mov	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	1899      	adds	r1, r3, r2
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	461a      	mov	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	441a      	add	r2, r3
 800555a:	230a      	movs	r3, #10
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	2302      	movs	r3, #2
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8005564:	2300      	movs	r3, #0
 8005566:	75bb      	strb	r3, [r7, #22]
 8005568:	e003      	b.n	8005572 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800556a:	bf00      	nop
 800556c:	7dbb      	ldrb	r3, [r7, #22]
 800556e:	3301      	adds	r3, #1
 8005570:	75bb      	strb	r3, [r7, #22]
 8005572:	7dbb      	ldrb	r3, [r7, #22]
 8005574:	2b7c      	cmp	r3, #124	@ 0x7c
 8005576:	d9f8      	bls.n	800556a <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	3301      	adds	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d9db      	bls.n	800553c <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8005584:	bf00      	nop
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}
 800558e:	bf00      	nop
 8005590:	2000027d 	.word	0x2000027d

08005594 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80055a6:	2301      	movs	r3, #1
 80055a8:	74fb      	strb	r3, [r7, #19]
 80055aa:	e016      	b.n	80055da <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80055ac:	7cfb      	ldrb	r3, [r7, #19]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	461a      	mov	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	7f1b      	ldrb	r3, [r3, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	4619      	mov	r1, r3
 80055c0:	79fa      	ldrb	r2, [r7, #7]
 80055c2:	7cfb      	ldrb	r3, [r7, #19]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	fa01 f303 	lsl.w	r3, r1, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	3301      	adds	r3, #1
 80055d8:	74fb      	strb	r3, [r7, #19]
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d9e5      	bls.n	80055ac <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80055e0:	697b      	ldr	r3, [r7, #20]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2118      	movs	r1, #24
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
 8005610:	4602      	mov	r2, r0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005616:	b292      	uxth	r2, r2
 8005618:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	2b0e      	cmp	r3, #14
 800561e:	f200 8099 	bhi.w	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005665 	.word	0x08005665
 800562c:	08005675 	.word	0x08005675
 8005630:	08005685 	.word	0x08005685
 8005634:	08005695 	.word	0x08005695
 8005638:	080056a5 	.word	0x080056a5
 800563c:	080056b5 	.word	0x080056b5
 8005640:	080056c5 	.word	0x080056c5
 8005644:	080056d5 	.word	0x080056d5
 8005648:	080056e5 	.word	0x080056e5
 800564c:	080056f5 	.word	0x080056f5
 8005650:	08005705 	.word	0x08005705
 8005654:	08005715 	.word	0x08005715
 8005658:	08005725 	.word	0x08005725
 800565c:	08005735 	.word	0x08005735
 8005660:	08005745 	.word	0x08005745
      state = pL6470_StatusRegister->HiZ;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800566e:	b2db      	uxtb	r3, r3
 8005670:	73fb      	strb	r3, [r7, #15]
      break;
 8005672:	e06f      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	73fb      	strb	r3, [r7, #15]
      break;
 8005682:	e067      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	73fb      	strb	r3, [r7, #15]
      break;
 8005692:	e05f      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	73fb      	strb	r3, [r7, #15]
      break;
 80056a2:	e057      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	73fb      	strb	r3, [r7, #15]
      break;
 80056b2:	e04f      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	73fb      	strb	r3, [r7, #15]
      break;
 80056c2:	e047      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	73fb      	strb	r3, [r7, #15]
      break;
 80056d2:	e03f      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	73fb      	strb	r3, [r7, #15]
      break;
 80056e2:	e037      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	73fb      	strb	r3, [r7, #15]
      break;
 80056f2:	e02f      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f8:	785b      	ldrb	r3, [r3, #1]
 80056fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e027      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800570e:	b2db      	uxtb	r3, r3
 8005710:	73fb      	strb	r3, [r7, #15]
      break;
 8005712:	e01f      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	73fb      	strb	r3, [r7, #15]
      break;
 8005722:	e017      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e00f      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	73fb      	strb	r3, [r7, #15]
      break;
 8005742:	e007      	b.n	8005754 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	73fb      	strb	r3, [r7, #15]
      break;
 8005752:	bf00      	nop
  return state;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop

08005760 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	2b18      	cmp	r3, #24
 8005770:	d809      	bhi.n	8005786 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a19      	ldr	r1, [r3, #32]
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	3301      	adds	r3, #1
 8005784:	e000      	b.n	8005788 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
 80057a2:	e01a      	b.n	80057da <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	4413      	add	r3, r2
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	4413      	add	r3, r2
 80057b8:	2200      	movs	r2, #0
 80057ba:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	4413      	add	r3, r2
 80057c4:	2200      	movs	r2, #0
 80057c6:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	4413      	add	r3, r2
 80057d0:	2200      	movs	r2, #0
 80057d2:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	3301      	adds	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d9e1      	bls.n	80057a4 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	4613      	mov	r3, r2
 80057fc:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	7f1b      	ldrb	r3, [r3, #28]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	4413      	add	r3, r2
 8005808:	79fa      	ldrb	r2, [r7, #7]
 800580a:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	7f1b      	ldrb	r3, [r3, #28]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4413      	add	r3, r2
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	7f1b      	ldrb	r3, [r3, #28]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	4413      	add	r3, r2
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	7f1b      	ldrb	r3, [r3, #28]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	60da      	str	r2, [r3, #12]
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b087      	sub	sp, #28
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8005854:	4b10      	ldr	r3, [pc, #64]	@ (8005898 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800585c:	4b0e      	ldr	r3, [pc, #56]	@ (8005898 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800585e:	2201      	movs	r2, #1
 8005860:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800587a:	681c      	ldr	r4, [r3, #0]
 800587c:	79fa      	ldrb	r2, [r7, #7]
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	47a0      	blx	r4
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}
 8005896:	bf00      	nop
 8005898:	2000027d 	.word	0x2000027d

0800589c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80058ac:	2300      	movs	r3, #0
 80058ae:	75bb      	strb	r3, [r7, #22]
 80058b0:	e013      	b.n	80058da <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]
 80058b6:	e00a      	b.n	80058ce <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80058b8:	7d7b      	ldrb	r3, [r7, #21]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	757a      	strb	r2, [r7, #21]
 80058be:	461a      	mov	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4413      	add	r3, r2
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	3301      	adds	r3, #1
 80058cc:	75fb      	strb	r3, [r7, #23]
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d9f1      	bls.n	80058b8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80058d4:	7dbb      	ldrb	r3, [r7, #22]
 80058d6:	3301      	adds	r3, #1
 80058d8:	75bb      	strb	r3, [r7, #22]
 80058da:	7dbb      	ldrb	r3, [r7, #22]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d9e8      	bls.n	80058b2 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	75fb      	strb	r3, [r7, #23]
 80058e4:	e1f1      	b.n	8005cca <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	440b      	add	r3, r1
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	4619      	mov	r1, r3
 80058f6:	460b      	mov	r3, r1
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	1a5b      	subs	r3, r3, r1
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	441a      	add	r2, r3
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	440b      	add	r3, r1
 8005906:	7b12      	ldrb	r2, [r2, #12]
 8005908:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800590a:	7dfb      	ldrb	r3, [r7, #23]
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	4413      	add	r3, r2
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b12      	cmp	r3, #18
 8005916:	f200 81d5 	bhi.w	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800591a:	a201      	add	r2, pc, #4	@ (adr r2, 8005920 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005cc5 	.word	0x08005cc5
 8005924:	0800596d 	.word	0x0800596d
 8005928:	080059f5 	.word	0x080059f5
 800592c:	08005a25 	.word	0x08005a25
 8005930:	08005a8d 	.word	0x08005a8d
 8005934:	08005abb 	.word	0x08005abb
 8005938:	08005b23 	.word	0x08005b23
 800593c:	08005b5f 	.word	0x08005b5f
 8005940:	08005bc7 	.word	0x08005bc7
 8005944:	08005c63 	.word	0x08005c63
 8005948:	08005cc5 	.word	0x08005cc5
 800594c:	08005cc5 	.word	0x08005cc5
 8005950:	08005cc5 	.word	0x08005cc5
 8005954:	08005cc5 	.word	0x08005cc5
 8005958:	08005cc5 	.word	0x08005cc5
 800595c:	08005cc5 	.word	0x08005cc5
 8005960:	08005cc5 	.word	0x08005cc5
 8005964:	08005cc5 	.word	0x08005cc5
 8005968:	08005cc5 	.word	0x08005cc5
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800596c:	7dfb      	ldrb	r3, [r7, #23]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	7819      	ldrb	r1, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a18      	ldr	r0, [r3, #32]
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4413      	add	r3, r2
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4403      	add	r3, r0
 800598c:	781a      	ldrb	r2, [r3, #0]
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4403      	add	r3, r0
 8005994:	430a      	orrs	r2, r1
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a19      	ldr	r1, [r3, #32]
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4413      	add	r3, r2
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	7b9b      	ldrb	r3, [r3, #14]
 80059b4:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80059b6:	2301      	movs	r3, #1
 80059b8:	75bb      	strb	r3, [r7, #22]
 80059ba:	e016      	b.n	80059ea <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	4413      	add	r3, r2
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	7d39      	ldrb	r1, [r7, #20]
 80059c8:	7dbb      	ldrb	r3, [r7, #22]
 80059ca:	1acb      	subs	r3, r1, r3
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	fa22 f103 	lsr.w	r1, r2, r3
 80059d2:	7dbb      	ldrb	r3, [r7, #22]
 80059d4:	005a      	lsls	r2, r3, #1
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	4413      	add	r3, r2
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4413      	add	r3, r2
 80059e0:	b2ca      	uxtb	r2, r1
 80059e2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80059e4:	7dbb      	ldrb	r3, [r7, #22]
 80059e6:	3301      	adds	r3, #1
 80059e8:	75bb      	strb	r3, [r7, #22]
 80059ea:	7d3a      	ldrb	r2, [r7, #20]
 80059ec:	7dbb      	ldrb	r3, [r7, #22]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d2e4      	bcs.n	80059bc <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 80059f2:	e167      	b.n	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4413      	add	r3, r2
 80059fa:	7819      	ldrb	r1, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a18      	ldr	r0, [r3, #32]
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	4413      	add	r3, r2
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4403      	add	r3, r0
 8005a14:	781a      	ldrb	r2, [r3, #0]
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4403      	add	r3, r0
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
      break;
 8005a22:	e14f      	b.n	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4413      	add	r3, r2
 8005a2a:	7819      	ldrb	r1, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	4413      	add	r3, r2
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4413      	add	r3, r2
 8005a40:	4403      	add	r3, r0
 8005a42:	7a1a      	ldrb	r2, [r3, #8]
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4403      	add	r3, r0
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a50:	2301      	movs	r3, #1
 8005a52:	75bb      	strb	r3, [r7, #22]
 8005a54:	e016      	b.n	8005a84 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	7dbb      	ldrb	r3, [r7, #22]
 8005a62:	f1c3 0303 	rsb	r3, r3, #3
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	fa22 f103 	lsr.w	r1, r2, r3
 8005a6c:	7dbb      	ldrb	r3, [r7, #22]
 8005a6e:	005a      	lsls	r2, r3, #1
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	4413      	add	r3, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	b2ca      	uxtb	r2, r1
 8005a7c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a7e:	7dbb      	ldrb	r3, [r7, #22]
 8005a80:	3301      	adds	r3, #1
 8005a82:	75bb      	strb	r3, [r7, #22]
 8005a84:	7dbb      	ldrb	r3, [r7, #22]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d9e5      	bls.n	8005a56 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8005a8a:	e11b      	b.n	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	7819      	ldrb	r1, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	4403      	add	r3, r0
 8005aaa:	7a1a      	ldrb	r2, [r3, #8]
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4403      	add	r3, r0
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
      break;
 8005ab8:	e104      	b.n	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	4413      	add	r3, r2
 8005ac0:	7819      	ldrb	r1, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4413      	add	r3, r2
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	4403      	add	r3, r0
 8005ad8:	7a1a      	ldrb	r2, [r3, #8]
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	4403      	add	r3, r0
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	75bb      	strb	r3, [r7, #22]
 8005aea:	e016      	b.n	8005b1a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	4413      	add	r3, r2
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	7dbb      	ldrb	r3, [r7, #22]
 8005af8:	f1c3 0303 	rsb	r3, r3, #3
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	fa22 f103 	lsr.w	r1, r2, r3
 8005b02:	7dbb      	ldrb	r3, [r7, #22]
 8005b04:	005a      	lsls	r2, r3, #1
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	4413      	add	r3, r2
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	b2ca      	uxtb	r2, r1
 8005b12:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b14:	7dbb      	ldrb	r3, [r7, #22]
 8005b16:	3301      	adds	r3, #1
 8005b18:	75bb      	strb	r3, [r7, #22]
 8005b1a:	7dbb      	ldrb	r3, [r7, #22]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d9e5      	bls.n	8005aec <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005b20:	e0d0      	b.n	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b22:	2301      	movs	r3, #1
 8005b24:	75bb      	strb	r3, [r7, #22]
 8005b26:	e016      	b.n	8005b56 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	4413      	add	r3, r2
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	7dbb      	ldrb	r3, [r7, #22]
 8005b34:	f1c3 0303 	rsb	r3, r3, #3
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	fa22 f103 	lsr.w	r1, r2, r3
 8005b3e:	7dbb      	ldrb	r3, [r7, #22]
 8005b40:	005a      	lsls	r2, r3, #1
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	4413      	add	r3, r2
 8005b46:	461a      	mov	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	b2ca      	uxtb	r2, r1
 8005b4e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b50:	7dbb      	ldrb	r3, [r7, #22]
 8005b52:	3301      	adds	r3, #1
 8005b54:	75bb      	strb	r3, [r7, #22]
 8005b56:	7dbb      	ldrb	r3, [r7, #22]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d9e5      	bls.n	8005b28 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8005b5c:	e0b2      	b.n	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	7819      	ldrb	r1, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4413      	add	r3, r2
 8005b7a:	4403      	add	r3, r0
 8005b7c:	7a1a      	ldrb	r2, [r3, #8]
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	4403      	add	r3, r0
 8005b84:	430a      	orrs	r2, r1
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75bb      	strb	r3, [r7, #22]
 8005b8e:	e016      	b.n	8005bbe <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	4413      	add	r3, r2
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	7dbb      	ldrb	r3, [r7, #22]
 8005b9c:	f1c3 0303 	rsb	r3, r3, #3
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	fa22 f103 	lsr.w	r1, r2, r3
 8005ba6:	7dbb      	ldrb	r3, [r7, #22]
 8005ba8:	005a      	lsls	r2, r3, #1
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	4413      	add	r3, r2
 8005bae:	461a      	mov	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	b2ca      	uxtb	r2, r1
 8005bb6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005bb8:	7dbb      	ldrb	r3, [r7, #22]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	75bb      	strb	r3, [r7, #22]
 8005bbe:	7dbb      	ldrb	r3, [r7, #22]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d9e5      	bls.n	8005b90 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005bc4:	e07e      	b.n	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	b259      	sxtb	r1, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	4413      	add	r3, r2
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	4403      	add	r3, r0
 8005be6:	791b      	ldrb	r3, [r3, #4]
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	b25b      	sxtb	r3, r3
 8005bec:	430b      	orrs	r3, r1
 8005bee:	b259      	sxtb	r1, r3
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	b2ca      	uxtb	r2, r1
 8005bf8:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	7819      	ldrb	r1, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	4403      	add	r3, r0
 8005c18:	7a1a      	ldrb	r2, [r3, #8]
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4403      	add	r3, r0
 8005c20:	430a      	orrs	r2, r1
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c26:	2301      	movs	r3, #1
 8005c28:	75bb      	strb	r3, [r7, #22]
 8005c2a:	e016      	b.n	8005c5a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	4413      	add	r3, r2
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	7dbb      	ldrb	r3, [r7, #22]
 8005c38:	f1c3 0303 	rsb	r3, r3, #3
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	fa22 f103 	lsr.w	r1, r2, r3
 8005c42:	7dbb      	ldrb	r3, [r7, #22]
 8005c44:	005a      	lsls	r2, r3, #1
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	4413      	add	r3, r2
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4413      	add	r3, r2
 8005c50:	b2ca      	uxtb	r2, r1
 8005c52:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005c54:	7dbb      	ldrb	r3, [r7, #22]
 8005c56:	3301      	adds	r3, #1
 8005c58:	75bb      	strb	r3, [r7, #22]
 8005c5a:	7dbb      	ldrb	r3, [r7, #22]
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d9e5      	bls.n	8005c2c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005c60:	e030      	b.n	8005cc4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	4413      	add	r3, r2
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b259      	sxtb	r1, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	4413      	add	r3, r2
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	4403      	add	r3, r0
 8005c82:	791b      	ldrb	r3, [r3, #4]
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	b25b      	sxtb	r3, r3
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	b259      	sxtb	r1, r3
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	b2ca      	uxtb	r2, r1
 8005c94:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	7819      	ldrb	r1, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	4413      	add	r3, r2
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	4403      	add	r3, r0
 8005cb4:	7a1a      	ldrb	r2, [r3, #8]
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4403      	add	r3, r0
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]
      break;
 8005cc2:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	f67f ae0a 	bls.w	80058e6 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005cec:	edd7 7a00 	vldr	s15, [r7]
 8005cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf8:	db1e      	blt.n	8005d38 <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005cfa:	edd7 7a00 	vldr	s15, [r7]
 8005cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d02:	ee17 2a90 	vmov	r2, s15
 8005d06:	edd7 7a00 	vldr	s15, [r7]
 8005d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d12:	ed97 7a00 	vldr	s14, [r7]
 8005d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d26:	bf4c      	ite	mi
 8005d28:	2301      	movmi	r3, #1
 8005d2a:	2300      	movpl	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f083 0301 	eor.w	r3, r3, #1
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	e01a      	b.n	8005d6e <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005d38:	edd7 7a00 	vldr	s15, [r7]
 8005d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d40:	ee17 2a90 	vmov	r2, s15
 8005d44:	edd7 7a00 	vldr	s15, [r7]
 8005d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d50:	ed97 7a00 	vldr	s14, [r7]
 8005d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d58:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8005d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d64:	d501      	bpl.n	8005d6a <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	1ad3      	subs	r3, r2, r3
        }
    }
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	4613      	mov	r3, r2
 8005d86:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6918      	ldr	r0, [r3, #16]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8a9b      	ldrh	r3, [r3, #20]
 8005d90:	2200      	movs	r2, #0
 8005d92:	4619      	mov	r1, r3
 8005d94:	f008 fe66 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6998      	ldr	r0, [r3, #24]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	2364      	movs	r3, #100	@ 0x64
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	f009 fe8e 	bl	800fac2 <HAL_SPI_Receive>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6918      	ldr	r0, [r3, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8a9b      	ldrh	r3, [r3, #20]
 8005db2:	2201      	movs	r2, #1
 8005db4:	4619      	mov	r1, r3
 8005db6:	f008 fe55 	bl	800ea64 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005dc4:	2300      	movs	r3, #0
    }
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b086      	sub	sp, #24
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6918      	ldr	r0, [r3, #16]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8a9b      	ldrh	r3, [r3, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	4619      	mov	r1, r3
 8005de8:	f008 fe3c 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6998      	ldr	r0, [r3, #24]
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	2364      	movs	r3, #100	@ 0x64
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	f009 fd28 	bl	800f84a <HAL_SPI_Transmit>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6918      	ldr	r0, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8a9b      	ldrh	r3, [r3, #20]
 8005e06:	2201      	movs	r2, #1
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f008 fe2b 	bl	800ea64 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005e18:	2300      	movs	r3, #0
    }
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b088      	sub	sp, #32
 8005e26:	af02      	add	r7, sp, #8
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6918      	ldr	r0, [r3, #16]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8a9b      	ldrh	r3, [r3, #20]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	f008 fe12 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6998      	ldr	r0, [r3, #24]
 8005e44:	887b      	ldrh	r3, [r7, #2]
 8005e46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e4a:	9200      	str	r2, [sp, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	f009 ff48 	bl	800fce4 <HAL_SPI_TransmitReceive>
 8005e54:	4603      	mov	r3, r0
 8005e56:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6918      	ldr	r0, [r3, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8a9b      	ldrh	r3, [r3, #20]
 8005e66:	2201      	movs	r2, #1
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f008 fdfb 	bl	800ea64 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e008      	b.n	8005e84 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6918      	ldr	r0, [r3, #16]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8a9b      	ldrh	r3, [r3, #20]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f008 fdf1 	bl	800ea64 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005e82:	2300      	movs	r3, #0
    }
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005e8c:	b590      	push	{r4, r7, lr}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005ea2:	681c      	ldr	r4, [r3, #0]
 8005ea4:	887b      	ldrh	r3, [r7, #2]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	47a0      	blx	r4
    }
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd90      	pop	{r4, r7, pc}

08005eb6 <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
 8005ed0:	4603      	mov	r3, r0
    }
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
 8005ef0:	4603      	mov	r3, r0
    }
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	4611      	mov	r1, r2
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
 8005f18:	4603      	mov	r3, r0
    }
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005f22:	b590      	push	{r4, r7, lr}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005f32:	681c      	ldr	r4, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
 8005f44:	4603      	mov	r3, r0
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	47a0      	blx	r4
 8005f4c:	4603      	mov	r3, r0
    }
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}

08005f56 <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8005f56:	b590      	push	{r4, r7, lr}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005f66:	681c      	ldr	r4, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2102      	movs	r1, #2
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
 8005f78:	4603      	mov	r3, r0
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	47a0      	blx	r4
 8005f80:	4603      	mov	r3, r0
    }
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd90      	pop	{r4, r7, pc}

08005f8a <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8005f8a:	b5b0      	push	{r4, r5, r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f9a:	681c      	ldr	r4, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8005fa4:	681d      	ldr	r5, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2103      	movs	r1, #3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	47a8      	blx	r5
 8005fbe:	eef0 7a40 	vmov.f32	s15, s0
 8005fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	47a0      	blx	r4
 8005fca:	4603      	mov	r3, r0
    }
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bdb0      	pop	{r4, r5, r7, pc}

08005fd4 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8005fd4:	b5b0      	push	{r4, r5, r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fe4:	681c      	ldr	r4, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005fee:	681d      	ldr	r5, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2106      	movs	r1, #6
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
 8006000:	4603      	mov	r3, r0
 8006002:	b29b      	uxth	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	47a8      	blx	r5
 800600a:	eef0 7a40 	vmov.f32	s15, s0
 800600e:	eeb0 0a67 	vmov.f32	s0, s15
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	47a0      	blx	r4
 8006016:	4603      	mov	r3, r0
    }
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bdb0      	pop	{r4, r5, r7, pc}

08006020 <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8006020:	b5b0      	push	{r4, r5, r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006030:	681c      	ldr	r4, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800603a:	681d      	ldr	r5, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2107      	movs	r1, #7
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
 800604c:	4603      	mov	r3, r0
 800604e:	b29b      	uxth	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	47a8      	blx	r5
 8006056:	eef0 7a40 	vmov.f32	s15, s0
 800605a:	eeb0 0a67 	vmov.f32	s0, s15
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	47a0      	blx	r4
 8006062:	4603      	mov	r3, r0
    }
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bdb0      	pop	{r4, r5, r7, pc}

0800606c <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 800606c:	b5b0      	push	{r4, r5, r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800607c:	681c      	ldr	r4, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006086:	681d      	ldr	r5, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2104      	movs	r1, #4
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
 8006098:	4603      	mov	r3, r0
 800609a:	b29b      	uxth	r3, r3
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	47a8      	blx	r5
 80060a2:	eef0 7a40 	vmov.f32	s15, s0
 80060a6:	eeb0 0a67 	vmov.f32	s0, s15
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	47a0      	blx	r4
 80060ae:	4603      	mov	r3, r0
    }
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bdb0      	pop	{r4, r5, r7, pc}

080060b8 <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 80060b8:	b5b0      	push	{r4, r5, r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060c8:	681c      	ldr	r4, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80060d2:	681d      	ldr	r5, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2105      	movs	r1, #5
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
 80060e4:	4603      	mov	r3, r0
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	47a8      	blx	r5
 80060ee:	eef0 7a40 	vmov.f32	s15, s0
 80060f2:	eeb0 0a67 	vmov.f32	s0, s15
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	47a0      	blx	r4
 80060fa:	4603      	mov	r3, r0
    }
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bdb0      	pop	{r4, r5, r7, pc}

08006104 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2104      	movs	r1, #4
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 8006126:	2300      	movs	r3, #0
    }
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	b2d1      	uxtb	r1, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	4798      	blx	r3
    }
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
    }
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 8006176:	b590      	push	{r4, r7, lr}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006186:	681c      	ldr	r4, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2100      	movs	r1, #0
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
 8006198:	4603      	mov	r3, r0
 800619a:	461a      	mov	r2, r3
 800619c:	2102      	movs	r1, #2
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	47a0      	blx	r4
    }
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd90      	pop	{r4, r7, pc}

080061aa <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 80061aa:	b590      	push	{r4, r7, lr}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061bc:	681c      	ldr	r4, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	2102      	movs	r1, #2
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	47a0      	blx	r4
    }
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd90      	pop	{r4, r7, pc}

080061e0 <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80061f2:	681c      	ldr	r4, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	ee07 2a90 	vmov	s15, r2
 8006204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006208:	eeb0 0a67 	vmov.f32	s0, s15
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	2106      	movs	r1, #6
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	47a0      	blx	r4
        return true;
 800621a:	2301      	movs	r3, #1
    }
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	bd90      	pop	{r4, r7, pc}

08006224 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006236:	681c      	ldr	r4, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	ee07 2a90 	vmov	s15, r2
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	eeb0 0a67 	vmov.f32	s0, s15
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	2107      	movs	r1, #7
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	47a0      	blx	r4
        return true;
 800625e:	2301      	movs	r3, #1
    }
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	bd90      	pop	{r4, r7, pc}

08006268 <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800627a:	681c      	ldr	r4, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	ee07 2a90 	vmov	s15, r2
 800628c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006290:	eeb0 0a67 	vmov.f32	s0, s15
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	2104      	movs	r1, #4
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	47a0      	blx	r4
        return true;
 80062a2:	2301      	movs	r3, #1
    }
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd90      	pop	{r4, r7, pc}

080062ac <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 80062ac:	b590      	push	{r4, r7, lr}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80062be:	681c      	ldr	r4, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	ee07 2a90 	vmov	s15, r2
 80062d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d4:	eeb0 0a67 	vmov.f32	s0, s15
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	2105      	movs	r1, #5
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	47a0      	blx	r4
        return true;
 80062e6:	2301      	movs	r3, #1
    }
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd90      	pop	{r4, r7, pc}

080062f0 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	2b07      	cmp	r3, #7
 8006300:	d901      	bls.n	8006306 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8006302:	2300      	movs	r3, #0
 8006304:	e00f      	b.n	8006326 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3380      	adds	r3, #128	@ 0x80
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	78fa      	ldrb	r2, [r7, #3]
 800631e:	2115      	movs	r1, #21
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
        return true;
 8006324:	2301      	movs	r3, #1
    }
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 800632e:	b590      	push	{r4, r7, lr}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8006340:	681c      	ldr	r4, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
 8006352:	4603      	mov	r3, r0
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	47a0      	blx	r4
    }
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	bd90      	pop	{r4, r7, pc}

08006362 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8006362:	b5b0      	push	{r4, r5, r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	4613      	mov	r3, r2
 800636e:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8006378:	681c      	ldr	r4, [r3, #0]
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 8006380:	2501      	movs	r5, #1
 8006382:	e000      	b.n	8006386 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 8006384:	2500      	movs	r5, #0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	4798      	blx	r3
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	4629      	mov	r1, r5
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	47a0      	blx	r4
    }
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bdb0      	pop	{r4, r5, r7, pc}

080063a8 <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
    }
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
    }
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80063e4:	b5b0      	push	{r4, r5, r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	607b      	str	r3, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	72fb      	strb	r3, [r7, #11]
 80063f2:	4613      	mov	r3, r2
 80063f4:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80063fe:	681c      	ldr	r4, [r3, #0]
 8006400:	7abb      	ldrb	r3, [r7, #10]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006406:	2501      	movs	r5, #1
 8006408:	e000      	b.n	800640c <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800640a:	2500      	movs	r5, #0
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	ee07 2a90 	vmov	s15, r2
 800641c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006420:	eeb0 0a67 	vmov.f32	s0, s15
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	4798      	blx	r3
 8006428:	4603      	mov	r3, r0
 800642a:	7af9      	ldrb	r1, [r7, #11]
 800642c:	462a      	mov	r2, r5
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	47a0      	blx	r4
    }
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bdb0      	pop	{r4, r5, r7, pc}

0800643a <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800643a:	b5b0      	push	{r4, r5, r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800644e:	681c      	ldr	r4, [r3, #0]
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 8006456:	2501      	movs	r5, #1
 8006458:	e000      	b.n	800645c <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 800645a:	2500      	movs	r5, #0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2106      	movs	r1, #6
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	4798      	blx	r3
 800646c:	4603      	mov	r3, r0
 800646e:	461a      	mov	r2, r3
 8006470:	4629      	mov	r1, r5
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	47a0      	blx	r4
    }
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bdb0      	pop	{r4, r5, r7, pc}

0800647e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800647e:	b5b0      	push	{r4, r5, r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	460b      	mov	r3, r1
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8006494:	681c      	ldr	r4, [r3, #0]
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 800649c:	2501      	movs	r5, #1
 800649e:	e000      	b.n	80064a2 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 80064a0:	2500      	movs	r5, #0
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	ee07 2a90 	vmov	s15, r2
 80064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b6:	eeb0 0a67 	vmov.f32	s0, s15
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	4798      	blx	r3
 80064be:	4603      	mov	r3, r0
 80064c0:	461a      	mov	r2, r3
 80064c2:	4629      	mov	r1, r5
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	47a0      	blx	r4
    }
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bdb0      	pop	{r4, r5, r7, pc}

080064d0 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	460b      	mov	r3, r1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	7afa      	ldrb	r2, [r7, #11]
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	d101      	bne.n	80064f2 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 80064ee:	2101      	movs	r1, #1
 80064f0:	e000      	b.n	80064f4 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 80064f2:	2100      	movs	r1, #0
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	4798      	blx	r3
    }
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
    }
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
    }
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	4798      	blx	r3
    }
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
    }
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8006582:	bf00      	nop
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2101      	movs	r1, #1
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1ef      	bne.n	8006584 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3380      	adds	r3, #128	@ 0x80
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	2a01      	cmp	r2, #1
 80065d4:	d101      	bne.n	80065da <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80065d6:	2201      	movs	r2, #1
 80065d8:	e000      	b.n	80065dc <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80065da:	2200      	movs	r2, #0
 80065dc:	4611      	mov	r1, r2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
    }
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	70fb      	strb	r3, [r7, #3]
 80065f6:	4613      	mov	r3, r2
 80065f8:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	78ba      	ldrb	r2, [r7, #2]
 8006606:	2a01      	cmp	r2, #1
 8006608:	d101      	bne.n	800660e <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800660a:	2201      	movs	r2, #1
 800660c:	e000      	b.n	8006610 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 800660e:	2200      	movs	r2, #0
 8006610:	78f9      	ldrb	r1, [r7, #3]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
    }
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
    }
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	4611      	mov	r1, r2
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006688:	bf00      	nop
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2102      	movs	r1, #2
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2103      	movs	r1, #3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2203      	movs	r2, #3
 80066fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2106      	movs	r1, #6
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2204      	movs	r2, #4
 8006724:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2107      	movs	r1, #7
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2205      	movs	r2, #5
 800674c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2104      	movs	r1, #4
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2206      	movs	r2, #6
 8006774:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2105      	movs	r1, #5
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2207      	movs	r2, #7
 800679c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 80067b0:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80067b8:	4b09      	ldr	r3, [pc, #36]	@ (80067e0 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4906      	ldr	r1, [pc, #24]	@ (80067e4 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2208      	movs	r2, #8
 80067d2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000249 	.word	0x20000249
 80067e4:	2000024c 	.word	0x2000024c

080067e8 <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	b2d1      	uxtb	r1, r2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2200      	movs	r2, #0
 8006852:	2102      	movs	r1, #2
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2209      	movs	r2, #9
 800685c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800687a:	681c      	ldr	r4, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	2102      	movs	r1, #2
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd90      	pop	{r4, r7, pc}

080068a6 <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 80068a6:	b590      	push	{r4, r7, lr}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80068b8:	681c      	ldr	r4, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	ee07 2a90 	vmov	s15, r2
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	eeb0 0a67 	vmov.f32	s0, s15
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	2103      	movs	r1, #3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd90      	pop	{r4, r7, pc}

080068f0 <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006902:	681c      	ldr	r4, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	ee07 2a90 	vmov	s15, r2
 8006914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006918:	eeb0 0a67 	vmov.f32	s0, s15
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	2106      	movs	r1, #6
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	bd90      	pop	{r4, r7, pc}

0800693a <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 800693a:	b590      	push	{r4, r7, lr}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800694c:	681c      	ldr	r4, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	ee07 2a90 	vmov	s15, r2
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	eeb0 0a67 	vmov.f32	s0, s15
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	2107      	movs	r1, #7
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	bd90      	pop	{r4, r7, pc}

08006984 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006996:	681c      	ldr	r4, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	ee07 2a90 	vmov	s15, r2
 80069a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ac:	eeb0 0a67 	vmov.f32	s0, s15
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
 80069b4:	4603      	mov	r3, r0
 80069b6:	461a      	mov	r2, r3
 80069b8:	2104      	movs	r1, #4
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd90      	pop	{r4, r7, pc}

080069ce <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 80069ce:	b590      	push	{r4, r7, lr}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80069e0:	681c      	ldr	r4, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	ee07 2a90 	vmov	s15, r2
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eeb0 0a67 	vmov.f32	s0, s15
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	2105      	movs	r1, #5
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd90      	pop	{r4, r7, pc}

08006a18 <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8006a2a:	681c      	ldr	r4, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd90      	pop	{r4, r7, pc}

08006a54 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8006a54:	b5b0      	push	{r4, r5, r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8006a6a:	681c      	ldr	r4, [r3, #0]
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8006a72:	2501      	movs	r5, #1
 8006a74:	e000      	b.n	8006a78 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8006a76:	2500      	movs	r5, #0
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	4798      	blx	r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bdb0      	pop	{r4, r5, r7, pc}

08006aa2 <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006aee:	b5b0      	push	{r4, r5, r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	72fb      	strb	r3, [r7, #11]
 8006afc:	4613      	mov	r3, r2
 8006afe:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006b08:	681c      	ldr	r4, [r3, #0]
 8006b0a:	7abb      	ldrb	r3, [r7, #10]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006b10:	2501      	movs	r5, #1
 8006b12:	e000      	b.n	8006b16 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006b14:	2500      	movs	r5, #0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	ee07 2a90 	vmov	s15, r2
 8006b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	4798      	blx	r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	7af9      	ldrb	r1, [r7, #11]
 8006b36:	462a      	mov	r2, r5
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bdb0      	pop	{r4, r5, r7, pc}

08006b4c <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8006b4c:	b5b0      	push	{r4, r5, r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006b60:	681c      	ldr	r4, [r3, #0]
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8006b68:	2501      	movs	r5, #1
 8006b6a:	e000      	b.n	8006b6e <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2106      	movs	r1, #6
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	4629      	mov	r1, r5
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bdb0      	pop	{r4, r5, r7, pc}

08006b98 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8006b98:	b5b0      	push	{r4, r5, r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006bae:	681c      	ldr	r4, [r3, #0]
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006bb6:	2501      	movs	r5, #1
 8006bb8:	e000      	b.n	8006bbc <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006bba:	2500      	movs	r5, #0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	ee07 2a90 	vmov	s15, r2
 8006bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	4798      	blx	r3
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4629      	mov	r1, r5
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bdb0      	pop	{r4, r5, r7, pc}

08006bf2 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	7afa      	ldrb	r2, [r7, #11]
 8006c0c:	2a01      	cmp	r2, #1
 8006c0e:	d101      	bne.n	8006c14 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006c10:	2101      	movs	r1, #1
 8006c12:	e000      	b.n	8006c16 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006c14:	2100      	movs	r1, #0
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	78fa      	ldrb	r2, [r7, #3]
 8006cdc:	2a01      	cmp	r2, #1
 8006cde:	d101      	bne.n	8006ce4 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	e000      	b.n	8006ce6 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	78ba      	ldrb	r2, [r7, #2]
 8006d18:	2a01      	cmp	r2, #1
 8006d1a:	d101      	bne.n	8006d20 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	e000      	b.n	8006d22 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006d20:	2200      	movs	r2, #0
 8006d22:	78f9      	ldrb	r1, [r7, #3]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
 8006d74:	4603      	mov	r3, r0
    }
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006d98:	b5b0      	push	{r4, r5, r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006da8:	3b01      	subs	r3, #1
 8006daa:	2b07      	cmp	r3, #7
 8006dac:	f200 80fe 	bhi.w	8006fac <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006db0:	a201      	add	r2, pc, #4	@ (adr r2, 8006db8 <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006dd9 	.word	0x08006dd9
 8006dbc:	08006e05 	.word	0x08006e05
 8006dc0:	08006e33 	.word	0x08006e33
 8006dc4:	08006e77 	.word	0x08006e77
 8006dc8:	08006ebd 	.word	0x08006ebd
 8006dcc:	08006f03 	.word	0x08006f03
 8006dd0:	08006f49 	.word	0x08006f49
 8006dd4:	08006f8f 	.word	0x08006f8f
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006de0:	681c      	ldr	r4, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6a12      	ldr	r2, [r2, #32]
 8006df0:	7b92      	ldrb	r2, [r2, #14]
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
 8006df8:	4603      	mov	r3, r0
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	47a0      	blx	r4
 8006e00:	4603      	mov	r3, r0
 8006e02:	e0d4      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006e0c:	681c      	ldr	r4, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6a12      	ldr	r2, [r2, #32]
 8006e1c:	3228      	adds	r2, #40	@ 0x28
 8006e1e:	7b92      	ldrb	r2, [r2, #14]
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	47a0      	blx	r4
 8006e2e:	4603      	mov	r3, r0
 8006e30:	e0bd      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e3a:	681c      	ldr	r4, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006e44:	681d      	ldr	r5, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6a12      	ldr	r2, [r2, #32]
 8006e54:	323c      	adds	r2, #60	@ 0x3c
 8006e56:	7b92      	ldrb	r2, [r2, #14]
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	47a8      	blx	r5
 8006e66:	eef0 7a40 	vmov.f32	s15, s0
 8006e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	47a0      	blx	r4
 8006e72:	4603      	mov	r3, r0
 8006e74:	e09b      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e7e:	681c      	ldr	r4, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e88:	681d      	ldr	r5, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6a12      	ldr	r2, [r2, #32]
 8006e98:	3278      	adds	r2, #120	@ 0x78
 8006e9a:	7b92      	ldrb	r2, [r2, #14]
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	47a8      	blx	r5
 8006eac:	eef0 7a40 	vmov.f32	s15, s0
 8006eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	47a0      	blx	r4
 8006eb8:	4603      	mov	r3, r0
 8006eba:	e078      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ec4:	681c      	ldr	r4, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006ece:	681d      	ldr	r5, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6a12      	ldr	r2, [r2, #32]
 8006ede:	328c      	adds	r2, #140	@ 0x8c
 8006ee0:	7b92      	ldrb	r2, [r2, #14]
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
 8006ee8:	4603      	mov	r3, r0
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	47a8      	blx	r5
 8006ef2:	eef0 7a40 	vmov.f32	s15, s0
 8006ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	47a0      	blx	r4
 8006efe:	4603      	mov	r3, r0
 8006f00:	e055      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f0a:	681c      	ldr	r4, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006f14:	681d      	ldr	r5, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6a12      	ldr	r2, [r2, #32]
 8006f24:	3250      	adds	r2, #80	@ 0x50
 8006f26:	7b92      	ldrb	r2, [r2, #14]
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	47a8      	blx	r5
 8006f38:	eef0 7a40 	vmov.f32	s15, s0
 8006f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	47a0      	blx	r4
 8006f44:	4603      	mov	r3, r0
 8006f46:	e032      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f50:	681c      	ldr	r4, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006f5a:	681d      	ldr	r5, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6a12      	ldr	r2, [r2, #32]
 8006f6a:	3264      	adds	r2, #100	@ 0x64
 8006f6c:	7b92      	ldrb	r2, [r2, #14]
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
 8006f74:	4603      	mov	r3, r0
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	47a8      	blx	r5
 8006f7e:	eef0 7a40 	vmov.f32	s15, s0
 8006f82:	eeb0 0a67 	vmov.f32	s0, s15
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	47a0      	blx	r4
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	e00f      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2104      	movs	r1, #4
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e002      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8006fac:	2300      	movs	r3, #0
    }
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fb6:	bf00      	nop

08006fb8 <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6898      	ldr	r0, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	899b      	ldrh	r3, [r3, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4619      	mov	r1, r3
 8006fcc:	f007 fd4a 	bl	800ea64 <HAL_GPIO_WritePin>
    }
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fe8:	d303      	bcc.n	8006ff2 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 8006ff0:	e000      	b.n	8006ff4 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8006ff2:	683b      	ldr	r3, [r7, #0]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	db05      	blt.n	800701c <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007016:	da01      	bge.n	800701c <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	e00c      	b.n	8007036 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 8007022:	db06      	blt.n	8007032 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	da03      	bge.n	8007032 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 8007030:	e001      	b.n	8007036 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 8007032:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007058:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007070 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 800705c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007060:	eeb0 0a67 	vmov.f32	s0, s15
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	3c74242a 	.word	0x3c74242a

08007074 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8007080:	edd7 7a00 	vldr	s15, [r7]
 8007084:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80070b8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 8007088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	d80a      	bhi.n	80070a8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8007092:	ed97 7a00 	vldr	s14, [r7]
 8007096:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80070bc <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 800709a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800709e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a2:	ee17 3a90 	vmov	r3, s15
 80070a6:	e000      	b.n	80070aa <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	4674241b 	.word	0x4674241b
 80070bc:	3c74242a 	.word	0x3c74242a

080070c0 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 80070cc:	887b      	ldrh	r3, [r7, #2]
 80070ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d2:	d209      	bcs.n	80070e8 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 80070d4:	887b      	ldrh	r3, [r7, #2]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070de:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80070fc <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 80070e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070e6:	e001      	b.n	80070ec <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 80070e8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007100 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 80070ec:	eeb0 0a67 	vmov.f32	s0, s15
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	4168d4fe 	.word	0x4168d4fe
 8007100:	00000000 	.word	0x00000000

08007104 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8007110:	edd7 7a00 	vldr	s15, [r7]
 8007114:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007148 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 8007118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007120:	d80b      	bhi.n	800713a <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8007122:	ed97 7a00 	vldr	s14, [r7]
 8007126:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800714c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 800712a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800712e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007132:	ee17 3a90 	vmov	r3, s15
 8007136:	b29b      	uxth	r3, r3
 8007138:	e000      	b.n	800713c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	4768c671 	.word	0x4768c671
 800714c:	4168d4fe 	.word	0x4168d4fe

08007150 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800715c:	887b      	ldrh	r3, [r7, #2]
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007162:	d209      	bcs.n	8007178 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8007164:	887b      	ldrh	r3, [r7, #2]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800716e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800718c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 8007172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007176:	e001      	b.n	800717c <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8007178:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007190 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 800717c:	eeb0 0a67 	vmov.f32	s0, s15
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	4168d4fe 	.word	0x4168d4fe
 8007190:	00000000 	.word	0x00000000

08007194 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80071a0:	edd7 7a00 	vldr	s15, [r7]
 80071a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80071d8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 80071a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b0:	d80b      	bhi.n	80071ca <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80071b2:	ed97 7a00 	vldr	s14, [r7]
 80071b6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80071dc <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 80071ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c2:	ee17 3a90 	vmov	r3, s15
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	e000      	b.n	80071cc <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	4768c671 	.word	0x4768c671
 80071dc:	4168d4fe 	.word	0x4168d4fe

080071e0 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 80071ec:	887b      	ldrh	r3, [r7, #2]
 80071ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071f2:	d209      	bcs.n	8007208 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 80071f4:	887b      	ldrh	r3, [r7, #2]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071fe:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800721c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8007202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007206:	e001      	b.n	800720c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007208:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007220 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800720c:	eeb0 0a67 	vmov.f32	s0, s15
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	4174240b 	.word	0x4174240b
 8007220:	00000000 	.word	0x00000000

08007224 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8007230:	edd7 7a00 	vldr	s15, [r7]
 8007234:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007268 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8007238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007240:	d80b      	bhi.n	800725a <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8007242:	ed97 7a00 	vldr	s14, [r7]
 8007246:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800726c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800724a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800724e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007252:	ee17 3a90 	vmov	r3, s15
 8007256:	b29b      	uxth	r3, r3
 8007258:	e000      	b.n	800725c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	4673e702 	.word	0x4673e702
 800726c:	4174240b 	.word	0x4174240b

08007270 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800727c:	887b      	ldrh	r3, [r7, #2]
 800727e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007282:	d209      	bcs.n	8007298 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8007284:	887b      	ldrh	r3, [r7, #2]
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800728e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80072ac <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8007292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007296:	e001      	b.n	800729c <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007298:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80072b0 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800729c:	eeb0 0a67 	vmov.f32	s0, s15
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	3e742401 	.word	0x3e742401
 80072b0:	00000000 	.word	0x00000000

080072b4 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80072c0:	edd7 7a00 	vldr	s15, [r7]
 80072c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80072f8 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 80072c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d0:	d80b      	bhi.n	80072ea <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80072d2:	ed97 7a00 	vldr	s14, [r7]
 80072d6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80072fc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 80072da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e2:	ee17 3a90 	vmov	r3, s15
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	e000      	b.n	80072ec <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	447414bf 	.word	0x447414bf
 80072fc:	3e742401 	.word	0x3e742401

08007300 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800730c:	887b      	ldrh	r3, [r7, #2]
 800730e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007312:	d219      	bcs.n	8007348 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007314:	887b      	ldrh	r3, [r7, #2]
 8007316:	4618      	mov	r0, r3
 8007318:	f7f9 f934 	bl	8000584 <__aeabi_i2d>
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8007322:	f7f8 ffe3 	bl	80002ec <__adddf3>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4610      	mov	r0, r2
 800732c:	4619      	mov	r1, r3
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8007334:	f7f9 f990 	bl	8000658 <__aeabi_dmul>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4610      	mov	r0, r2
 800733e:	4619      	mov	r1, r3
 8007340:	f7f9 fc82 	bl	8000c48 <__aeabi_d2f>
 8007344:	4603      	mov	r3, r0
 8007346:	e001      	b.n	800734c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 8007348:	f04f 0300 	mov.w	r3, #0
}
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eeb0 0a67 	vmov.f32	s0, s15
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	3fe00000 	.word	0x3fe00000
 8007360:	402e8000 	.word	0x402e8000

08007364 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8007370:	edd7 7a00 	vldr	s15, [r7]
 8007374:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80073b0 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 8007378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800737c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007380:	d80f      	bhi.n	80073a2 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8007382:	ed97 7a00 	vldr	s14, [r7]
 8007386:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80073b4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 800738a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800738e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007392:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800739a:	ee17 3a90 	vmov	r3, s15
 800739e:	b29b      	uxth	r3, r3
 80073a0:	e000      	b.n	80073a4 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	4673e180 	.word	0x4673e180
 80073b4:	41740000 	.word	0x41740000

080073b8 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 80073c4:	887b      	ldrh	r3, [r7, #2]
 80073c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073ca:	d209      	bcs.n	80073e0 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 80073cc:	887b      	ldrh	r3, [r7, #2]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80073f4 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 80073da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073de:	e001      	b.n	80073e4 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80073e0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80073f8 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 80073e4:	eeb0 0a67 	vmov.f32	s0, s15
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	3d7423f4 	.word	0x3d7423f4
 80073f8:	00000000 	.word	0x00000000

080073fc <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8007408:	edd7 7a00 	vldr	s15, [r7]
 800740c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007440 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 8007410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007418:	d80b      	bhi.n	8007432 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800741a:	ed97 7a00 	vldr	s14, [r7]
 800741e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007444 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 8007422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800742a:	ee17 3a90 	vmov	r3, s15
 800742e:	b29b      	uxth	r3, r3
 8007430:	e000      	b.n	8007434 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	44742023 	.word	0x44742023
 8007444:	3d7423f4 	.word	0x3d7423f4

08007448 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800745e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007474 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 8007462:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007466:	eeb0 0a67 	vmov.f32	s0, s15
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	3783956e 	.word	0x3783956e

08007478 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8007484:	edd7 7a02 	vldr	s15, [r7, #8]
 8007488:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80074c0 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 800748c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007494:	d80c      	bhi.n	80074b0 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007496:	ed97 7a02 	vldr	s14, [r7, #8]
 800749a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80074c4 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 800749e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80074aa:	793b      	ldrb	r3, [r7, #4]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	e000      	b.n	80074b2 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	3b8311d9 	.word	0x3b8311d9
 80074c4:	3783956e 	.word	0x3783956e

080074c8 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074de:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80074f4 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 80074e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80074e6:	eeb0 0a67 	vmov.f32	s0, s15
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	3783956e 	.word	0x3783956e

080074f8 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8007504:	edd7 7a02 	vldr	s15, [r7, #8]
 8007508:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007540 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800750c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007514:	d80c      	bhi.n	8007530 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007516:	ed97 7a02 	vldr	s14, [r7, #8]
 800751a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8007544 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800751e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007526:	edc7 7a01 	vstr	s15, [r7, #4]
 800752a:	793b      	ldrb	r3, [r7, #4]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	e000      	b.n	8007532 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	3b8311d9 	.word	0x3b8311d9
 8007544:	3783956e 	.word	0x3783956e

08007548 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800755e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007574 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8007562:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007566:	eeb0 0a67 	vmov.f32	s0, s15
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	3783956e 	.word	0x3783956e

08007578 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8007584:	edd7 7a02 	vldr	s15, [r7, #8]
 8007588:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80075c0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800758c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007594:	d80c      	bhi.n	80075b0 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8007596:	ed97 7a02 	vldr	s14, [r7, #8]
 800759a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80075c4 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800759e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80075aa:	793b      	ldrb	r3, [r7, #4]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	e000      	b.n	80075b2 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	3b8311d9 	.word	0x3b8311d9
 80075c4:	3783956e 	.word	0x3783956e

080075c8 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d80a      	bhi.n	80075f0 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	3301      	adds	r3, #1
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075e6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007604 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 80075ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075ee:	e001      	b.n	80075f4 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 80075f0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007608 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 80075f4:	eeb0 0a67 	vmov.f32	s0, s15
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	43bb8000 	.word	0x43bb8000
 8007608:	00000000 	.word	0x00000000

0800760c <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8007618:	edd7 7a02 	vldr	s15, [r7, #8]
 800761c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80076a8 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 8007620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007628:	d836      	bhi.n	8007698 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800762a:	ed97 7a02 	vldr	s14, [r7, #8]
 800762e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80076ac <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 8007632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007636:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800763a:	edd7 7a05 	vldr	s15, [r7, #20]
 800763e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007642:	edc7 7a01 	vstr	s15, [r7, #4]
 8007646:	793b      	ldrb	r3, [r7, #4]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007652:	ed97 7a05 	vldr	s14, [r7, #20]
 8007656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800765a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800765e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007662:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800766a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766e:	d50a      	bpl.n	8007686 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8007670:	edd7 7a05 	vldr	s15, [r7, #20]
 8007674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007678:	edc7 7a01 	vstr	s15, [r7, #4]
 800767c:	793b      	ldrb	r3, [r7, #4]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b2db      	uxtb	r3, r3
 8007684:	e009      	b.n	800769a <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 8007686:	edd7 7a05 	vldr	s15, [r7, #20]
 800768a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007692:	793b      	ldrb	r3, [r7, #4]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	e000      	b.n	800769a <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	45bb8000 	.word	0x45bb8000
 80076ac:	43bb8000 	.word	0x43bb8000

080076b0 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 80076bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	db0a      	blt.n	80076da <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	3301      	adds	r3, #1
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076d0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80076ec <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 80076d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076d8:	e001      	b.n	80076de <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 80076da:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80076f0 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 80076de:	eeb0 0a67 	vmov.f32	s0, s15
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	41fa0000 	.word	0x41fa0000
 80076f0:	00000000 	.word	0x00000000

080076f4 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8007700:	edd7 7a02 	vldr	s15, [r7, #8]
 8007704:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007790 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 8007708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800770c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007710:	d836      	bhi.n	8007780 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 8007712:	ed97 7a02 	vldr	s14, [r7, #8]
 8007716:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007794 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 800771a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800771e:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007722:	edd7 7a05 	vldr	s15, [r7, #20]
 8007726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800772a:	edc7 7a01 	vstr	s15, [r7, #4]
 800772e:	793b      	ldrb	r3, [r7, #4]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800773a:	ed97 7a05 	vldr	s14, [r7, #20]
 800773e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007742:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 8007746:	edd7 7a04 	vldr	s15, [r7, #16]
 800774a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800774e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007756:	d50a      	bpl.n	800776e <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 8007758:	edd7 7a05 	vldr	s15, [r7, #20]
 800775c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007760:	edc7 7a01 	vstr	s15, [r7, #4]
 8007764:	793b      	ldrb	r3, [r7, #4]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e009      	b.n	8007782 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800776e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007776:	edc7 7a01 	vstr	s15, [r7, #4]
 800777a:	793b      	ldrb	r3, [r7, #4]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	e000      	b.n	8007782 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	457a0000 	.word	0x457a0000
 8007794:	41fa0000 	.word	0x41fa0000

08007798 <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
  reset_device();
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3394      	adds	r3, #148	@ 0x94
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	4798      	blx	r3
  get_status();
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	edd2 7a05 	vldr	s15, [r2, #20]
 80077ce:	eeb0 0a67 	vmov.f32	s0, s15
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	4798      	blx	r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	edd2 7a06 	vldr	s15, [r2, #24]
 80077f0:	eeb0 0a67 	vmov.f32	s0, s15
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	4798      	blx	r3
 80077f8:	4603      	mov	r3, r0
 80077fa:	461a      	mov	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	edd2 7a07 	vldr	s15, [r2, #28]
 8007812:	eeb0 0a67 	vmov.f32	s0, s15
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	4798      	blx	r3
 800781a:	4603      	mov	r3, r0
 800781c:	461a      	mov	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	edd2 7a08 	vldr	s15, [r2, #32]
 8007834:	eeb0 0a67 	vmov.f32	s0, s15
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	4798      	blx	r3
 800783c:	4603      	mov	r3, r0
 800783e:	461a      	mov	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8007856:	eeb0 0a67 	vmov.f32	s0, s15
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	461a      	mov	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800786e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007b40 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007872:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	ed93 7a00 	vldr	s14, [r3]
 800787c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007884:	edc7 7a01 	vstr	s15, [r7, #4]
 8007888:	793b      	ldrb	r3, [r7, #4]
 800788a:	b2da      	uxtb	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007898:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007b40 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800789c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	ed93 7a00 	vldr	s14, [r3]
 80078a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80078b2:	793b      	ldrb	r3, [r7, #4]
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80078c2:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8007b40 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	ed93 7a00 	vldr	s14, [r3]
 80078d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80078dc:	793b      	ldrb	r3, [r7, #4]
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80078ec:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8007b40 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80078f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	ed93 7a00 	vldr	s14, [r3]
 80078fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007902:	edc7 7a01 	vstr	s15, [r7, #4]
 8007906:	793b      	ldrb	r3, [r7, #4]
 8007908:	b2da      	uxtb	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8007920:	eeb0 0a67 	vmov.f32	s0, s15
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	4798      	blx	r3
 8007928:	4603      	mov	r3, r0
 800792a:	461a      	mov	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8007942:	eeb0 0a67 	vmov.f32	s0, s15
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	4798      	blx	r3
 800794a:	4603      	mov	r3, r0
 800794c:	461a      	mov	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8007964:	eeb0 0a67 	vmov.f32	s0, s15
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	4798      	blx	r3
 800796c:	4603      	mov	r3, r0
 800796e:	461a      	mov	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 8007986:	eeb0 0a67 	vmov.f32	s0, s15
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	4798      	blx	r3
 800798e:	4603      	mov	r3, r0
 8007990:	461a      	mov	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 80079b4:	eeb0 0a67 	vmov.f32	s0, s15
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	4798      	blx	r3
 80079bc:	4603      	mov	r3, r0
 80079be:	461a      	mov	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 80079d6:	eeb0 0a67 	vmov.f32	s0, s15
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	4798      	blx	r3
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8007a1c:	2104      	movs	r1, #4
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8007a32:	2105      	movs	r1, #5
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 8007a48:	2106      	movs	r1, #6
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 8007a5e:	2107      	movs	r1, #7
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8007a74:	2108      	movs	r1, #8
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8007a8a:	2109      	movs	r1, #9
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 8007aa0:	210a      	movs	r1, #10
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007ab6:	210b      	movs	r1, #11
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007acc:	210c      	movs	r1, #12
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8007ae2:	210d      	movs	r1, #13
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 8007af8:	210e      	movs	r1, #14
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 8007b0e:	210f      	movs	r1, #15
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8007b24:	2110      	movs	r1, #16
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 8007b3a:	2111      	movs	r1, #17
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	e001      	b.n	8007b44 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007b40:	43800000 	.word	0x43800000
 8007b44:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8007b56:	2113      	movs	r1, #19
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 8007b6c:	2114      	movs	r1, #20
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007b82:	2116      	movs	r1, #22
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 8007b98:	2117      	movs	r1, #23
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3354      	adds	r3, #84	@ 0x54
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 8007bac:	4611      	mov	r1, r2
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	4798      	blx	r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f083 0301 	eor.w	r3, r3, #1
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007bcc:	b590      	push	{r4, r7, lr}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007be2:	681c      	ldr	r4, [r3, #0]
 8007be4:	7afa      	ldrb	r2, [r7, #11]
 8007be6:	2300      	movs	r3, #0
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	490c      	ldr	r1, [pc, #48]	@ (8007c24 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a09      	ldr	r2, [pc, #36]	@ (8007c28 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c04:	4907      	ldr	r1, [pc, #28]	@ (8007c24 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a05      	ldr	r2, [pc, #20]	@ (8007c2c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007c16:	4904      	ldr	r1, [pc, #16]	@ (8007c28 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	4798      	blx	r3
}
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd90      	pop	{r4, r7, pc}
 8007c24:	2000024c 	.word	0x2000024c
 8007c28:	2000026c 	.word	0x2000026c
 8007c2c:	20000274 	.word	0x20000274

08007c30 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007c44:	681c      	ldr	r4, [r3, #0]
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	9201      	str	r2, [sp, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	9200      	str	r2, [sp, #0]
 8007c50:	2202      	movs	r2, #2
 8007c52:	4917      	ldr	r1, [pc, #92]	@ (8007cb0 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a14      	ldr	r2, [pc, #80]	@ (8007cb4 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007c64:	4912      	ldr	r1, [pc, #72]	@ (8007cb0 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a10      	ldr	r2, [pc, #64]	@ (8007cb8 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007c76:	490f      	ldr	r1, [pc, #60]	@ (8007cb4 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a19      	ldr	r1, [r3, #32]
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	7b9b      	ldrb	r3, [r3, #14]
 8007c8e:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	7bfa      	ldrb	r2, [r7, #15]
 8007c9c:	4906      	ldr	r1, [pc, #24]	@ (8007cb8 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd90      	pop	{r4, r7, pc}
 8007cb0:	2000024c 	.word	0x2000024c
 8007cb4:	2000026c 	.word	0x2000026c
 8007cb8:	20000274 	.word	0x20000274

08007cbc <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007cbc:	b590      	push	{r4, r7, lr}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007cd2:	681c      	ldr	r4, [r3, #0]
 8007cd4:	7afa      	ldrb	r2, [r7, #11]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	490c      	ldr	r1, [pc, #48]	@ (8007d14 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a09      	ldr	r2, [pc, #36]	@ (8007d18 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007cf4:	4907      	ldr	r1, [pc, #28]	@ (8007d14 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a05      	ldr	r2, [pc, #20]	@ (8007d1c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007d06:	4904      	ldr	r1, [pc, #16]	@ (8007d18 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	4798      	blx	r3
}
 8007d0c:	bf00      	nop
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd90      	pop	{r4, r7, pc}
 8007d14:	2000024c 	.word	0x2000024c
 8007d18:	2000026c 	.word	0x2000026c
 8007d1c:	20000274 	.word	0x20000274

08007d20 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007d20:	b590      	push	{r4, r7, lr}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d34:	681c      	ldr	r4, [r3, #0]
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	9201      	str	r2, [sp, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	9200      	str	r2, [sp, #0]
 8007d40:	2204      	movs	r2, #4
 8007d42:	490c      	ldr	r1, [pc, #48]	@ (8007d74 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a09      	ldr	r2, [pc, #36]	@ (8007d78 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007d54:	4907      	ldr	r1, [pc, #28]	@ (8007d74 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a05      	ldr	r2, [pc, #20]	@ (8007d7c <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007d66:	4904      	ldr	r1, [pc, #16]	@ (8007d78 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd90      	pop	{r4, r7, pc}
 8007d74:	2000024c 	.word	0x2000024c
 8007d78:	2000026c 	.word	0x2000026c
 8007d7c:	20000274 	.word	0x20000274

08007d80 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007d96:	681c      	ldr	r4, [r3, #0]
 8007d98:	7afa      	ldrb	r2, [r7, #11]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4613      	mov	r3, r2
 8007da4:	2205      	movs	r2, #5
 8007da6:	490c      	ldr	r1, [pc, #48]	@ (8007dd8 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a09      	ldr	r2, [pc, #36]	@ (8007ddc <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007db8:	4907      	ldr	r1, [pc, #28]	@ (8007dd8 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a05      	ldr	r2, [pc, #20]	@ (8007de0 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007dca:	4904      	ldr	r1, [pc, #16]	@ (8007ddc <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	4798      	blx	r3
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd90      	pop	{r4, r7, pc}
 8007dd8:	2000024c 	.word	0x2000024c
 8007ddc:	2000026c 	.word	0x2000026c
 8007de0:	20000274 	.word	0x20000274

08007de4 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007de4:	b590      	push	{r4, r7, lr}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007df4:	d21f      	bcs.n	8007e36 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007dfe:	681c      	ldr	r4, [r3, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	2300      	movs	r3, #0
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2206      	movs	r2, #6
 8007e0c:	490c      	ldr	r1, [pc, #48]	@ (8007e40 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a09      	ldr	r2, [pc, #36]	@ (8007e44 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e1e:	4908      	ldr	r1, [pc, #32]	@ (8007e40 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a06      	ldr	r2, [pc, #24]	@ (8007e48 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007e30:	4904      	ldr	r1, [pc, #16]	@ (8007e44 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd90      	pop	{r4, r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	2000024c 	.word	0x2000024c
 8007e44:	2000026c 	.word	0x2000026c
 8007e48:	20000274 	.word	0x20000274

08007e4c <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007e4c:	b590      	push	{r4, r7, lr}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	460b      	mov	r3, r1
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e60:	d220      	bcs.n	8007ea4 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007e6a:	681c      	ldr	r4, [r3, #0]
 8007e6c:	7afa      	ldrb	r2, [r7, #11]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4613      	mov	r3, r2
 8007e78:	2207      	movs	r2, #7
 8007e7a:	490c      	ldr	r1, [pc, #48]	@ (8007eac <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007e8c:	4907      	ldr	r1, [pc, #28]	@ (8007eac <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a05      	ldr	r2, [pc, #20]	@ (8007eb4 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007e9e:	4904      	ldr	r1, [pc, #16]	@ (8007eb0 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	4798      	blx	r3
}
 8007ea4:	bf00      	nop
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd90      	pop	{r4, r7, pc}
 8007eac:	2000024c 	.word	0x2000024c
 8007eb0:	2000026c 	.word	0x2000026c
 8007eb4:	20000274 	.word	0x20000274

08007eb8 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	72fb      	strb	r3, [r7, #11]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ed2:	681c      	ldr	r4, [r3, #0]
 8007ed4:	7af9      	ldrb	r1, [r7, #11]
 8007ed6:	7abb      	ldrb	r3, [r7, #10]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	9201      	str	r2, [sp, #4]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	490c      	ldr	r1, [pc, #48]	@ (8007f14 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a09      	ldr	r2, [pc, #36]	@ (8007f18 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007ef4:	4907      	ldr	r1, [pc, #28]	@ (8007f14 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a05      	ldr	r2, [pc, #20]	@ (8007f1c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007f06:	4904      	ldr	r1, [pc, #16]	@ (8007f18 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	4798      	blx	r3
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd90      	pop	{r4, r7, pc}
 8007f14:	2000024c 	.word	0x2000024c
 8007f18:	2000026c 	.word	0x2000026c
 8007f1c:	20000274 	.word	0x20000274

08007f20 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007f20:	b590      	push	{r4, r7, lr}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f38:	681c      	ldr	r4, [r3, #0]
 8007f3a:	78fa      	ldrb	r2, [r7, #3]
 8007f3c:	78bb      	ldrb	r3, [r7, #2]
 8007f3e:	2100      	movs	r1, #0
 8007f40:	9101      	str	r1, [sp, #4]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	4613      	mov	r3, r2
 8007f46:	2209      	movs	r2, #9
 8007f48:	490c      	ldr	r1, [pc, #48]	@ (8007f7c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a09      	ldr	r2, [pc, #36]	@ (8007f80 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007f5a:	4908      	ldr	r1, [pc, #32]	@ (8007f7c <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a06      	ldr	r2, [pc, #24]	@ (8007f84 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8007f6c:	4904      	ldr	r1, [pc, #16]	@ (8007f80 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd90      	pop	{r4, r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	2000024c 	.word	0x2000024c
 8007f80:	2000026c 	.word	0x2000026c
 8007f84:	20000274 	.word	0x20000274

08007f88 <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007f88:	b590      	push	{r4, r7, lr}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007f98:	681c      	ldr	r4, [r3, #0]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	220a      	movs	r2, #10
 8007fa6:	490c      	ldr	r1, [pc, #48]	@ (8007fd8 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a09      	ldr	r2, [pc, #36]	@ (8007fdc <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007fb8:	4907      	ldr	r1, [pc, #28]	@ (8007fd8 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a05      	ldr	r2, [pc, #20]	@ (8007fe0 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 8007fca:	4904      	ldr	r1, [pc, #16]	@ (8007fdc <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd90      	pop	{r4, r7, pc}
 8007fd8:	2000024c 	.word	0x2000024c
 8007fdc:	2000026c 	.word	0x2000026c
 8007fe0:	20000274 	.word	0x20000274

08007fe4 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8007fe4:	b590      	push	{r4, r7, lr}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007ff4:	681c      	ldr	r4, [r3, #0]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	2300      	movs	r3, #0
 8008000:	220b      	movs	r2, #11
 8008002:	490c      	ldr	r1, [pc, #48]	@ (8008034 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a09      	ldr	r2, [pc, #36]	@ (8008038 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008014:	4907      	ldr	r1, [pc, #28]	@ (8008034 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a05      	ldr	r2, [pc, #20]	@ (800803c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 8008026:	4904      	ldr	r1, [pc, #16]	@ (8008038 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	4798      	blx	r3
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bd90      	pop	{r4, r7, pc}
 8008034:	2000024c 	.word	0x2000024c
 8008038:	2000026c 	.word	0x2000026c
 800803c:	20000274 	.word	0x20000274

08008040 <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b085      	sub	sp, #20
 8008044:	af02      	add	r7, sp, #8
 8008046:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008050:	681c      	ldr	r4, [r3, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	2300      	movs	r3, #0
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	2300      	movs	r3, #0
 800805c:	220c      	movs	r2, #12
 800805e:	490c      	ldr	r1, [pc, #48]	@ (8008090 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a09      	ldr	r2, [pc, #36]	@ (8008094 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8008070:	4907      	ldr	r1, [pc, #28]	@ (8008090 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a05      	ldr	r2, [pc, #20]	@ (8008098 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 8008082:	4904      	ldr	r1, [pc, #16]	@ (8008094 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	bd90      	pop	{r4, r7, pc}
 8008090:	2000024c 	.word	0x2000024c
 8008094:	2000026c 	.word	0x2000026c
 8008098:	20000274 	.word	0x20000274

0800809c <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b085      	sub	sp, #20
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80080ac:	681c      	ldr	r4, [r3, #0]
 80080ae:	2300      	movs	r3, #0
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	2300      	movs	r3, #0
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	220d      	movs	r2, #13
 80080ba:	490c      	ldr	r1, [pc, #48]	@ (80080ec <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a09      	ldr	r2, [pc, #36]	@ (80080f0 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 80080cc:	4907      	ldr	r1, [pc, #28]	@ (80080ec <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a05      	ldr	r2, [pc, #20]	@ (80080f4 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 80080de:	4904      	ldr	r1, [pc, #16]	@ (80080f0 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd90      	pop	{r4, r7, pc}
 80080ec:	2000024c 	.word	0x2000024c
 80080f0:	2000026c 	.word	0x2000026c
 80080f4:	20000274 	.word	0x20000274

080080f8 <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008108:	681c      	ldr	r4, [r3, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	2300      	movs	r3, #0
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	220e      	movs	r2, #14
 8008116:	490c      	ldr	r1, [pc, #48]	@ (8008148 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a09      	ldr	r2, [pc, #36]	@ (800814c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8008128:	4907      	ldr	r1, [pc, #28]	@ (8008148 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a05      	ldr	r2, [pc, #20]	@ (8008150 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 800813a:	4904      	ldr	r1, [pc, #16]	@ (800814c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	bd90      	pop	{r4, r7, pc}
 8008148:	2000024c 	.word	0x2000024c
 800814c:	2000026c 	.word	0x2000026c
 8008150:	20000274 	.word	0x20000274

08008154 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8008154:	b590      	push	{r4, r7, lr}
 8008156:	b085      	sub	sp, #20
 8008158:	af02      	add	r7, sp, #8
 800815a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008164:	681c      	ldr	r4, [r3, #0]
 8008166:	2300      	movs	r3, #0
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	2300      	movs	r3, #0
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	2300      	movs	r3, #0
 8008170:	220f      	movs	r2, #15
 8008172:	490c      	ldr	r1, [pc, #48]	@ (80081a4 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a09      	ldr	r2, [pc, #36]	@ (80081a8 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8008184:	4907      	ldr	r1, [pc, #28]	@ (80081a4 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a05      	ldr	r2, [pc, #20]	@ (80081ac <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 8008196:	4904      	ldr	r1, [pc, #16]	@ (80081a8 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd90      	pop	{r4, r7, pc}
 80081a4:	2000024c 	.word	0x2000024c
 80081a8:	2000026c 	.word	0x2000026c
 80081ac:	20000274 	.word	0x20000274

080081b0 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 80081b0:	b590      	push	{r4, r7, lr}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af02      	add	r7, sp, #8
 80081b6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80081c0:	681c      	ldr	r4, [r3, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	2300      	movs	r3, #0
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	2300      	movs	r3, #0
 80081cc:	2210      	movs	r2, #16
 80081ce:	490c      	ldr	r1, [pc, #48]	@ (8008200 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a09      	ldr	r2, [pc, #36]	@ (8008204 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 80081e0:	4907      	ldr	r1, [pc, #28]	@ (8008200 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a05      	ldr	r2, [pc, #20]	@ (8008208 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 80081f2:	4904      	ldr	r1, [pc, #16]	@ (8008204 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd90      	pop	{r4, r7, pc}
 8008200:	2000024c 	.word	0x2000024c
 8008204:	2000026c 	.word	0x2000026c
 8008208:	20000274 	.word	0x20000274

0800820c <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b085      	sub	sp, #20
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800821c:	681c      	ldr	r4, [r3, #0]
 800821e:	2300      	movs	r3, #0
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	2300      	movs	r3, #0
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	2300      	movs	r3, #0
 8008228:	2211      	movs	r2, #17
 800822a:	490c      	ldr	r1, [pc, #48]	@ (800825c <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a09      	ldr	r2, [pc, #36]	@ (8008260 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 800823c:	4907      	ldr	r1, [pc, #28]	@ (800825c <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a05      	ldr	r2, [pc, #20]	@ (8008264 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 800824e:	4904      	ldr	r1, [pc, #16]	@ (8008260 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	4798      	blx	r3
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bd90      	pop	{r4, r7, pc}
 800825c:	2000024c 	.word	0x2000024c
 8008260:	2000026c 	.word	0x2000026c
 8008264:	20000274 	.word	0x20000274

08008268 <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8008268:	b590      	push	{r4, r7, lr}
 800826a:	b087      	sub	sp, #28
 800826c:	af02      	add	r7, sp, #8
 800826e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008278:	681c      	ldr	r4, [r3, #0]
 800827a:	2300      	movs	r3, #0
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	2300      	movs	r3, #0
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	2300      	movs	r3, #0
 8008284:	2212      	movs	r2, #18
 8008286:	4912      	ldr	r1, [pc, #72]	@ (80082d0 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a0f      	ldr	r2, [pc, #60]	@ (80082d4 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8008298:	490d      	ldr	r1, [pc, #52]	@ (80082d0 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a0b      	ldr	r2, [pc, #44]	@ (80082d8 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 80082aa:	490a      	ldr	r1, [pc, #40]	@ (80082d4 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2202      	movs	r2, #2
 80082bc:	4906      	ldr	r1, [pc, #24]	@ (80082d8 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 80082c6:	89fb      	ldrh	r3, [r7, #14]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd90      	pop	{r4, r7, pc}
 80082d0:	2000024c 	.word	0x2000024c
 80082d4:	2000026c 	.word	0x2000026c
 80082d8:	20000274 	.word	0x20000274

080082dc <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b087      	sub	sp, #28
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	460b      	mov	r3, r1
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80082f2:	681c      	ldr	r4, [r3, #0]
 80082f4:	7afa      	ldrb	r2, [r7, #11]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	4613      	mov	r3, r2
 8008300:	2201      	movs	r2, #1
 8008302:	4903      	ldr	r1, [pc, #12]	@ (8008310 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	47a0      	blx	r4
}
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	bd90      	pop	{r4, r7, pc}
 8008310:	2000024c 	.word	0x2000024c

08008314 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008314:	b590      	push	{r4, r7, lr}
 8008316:	b085      	sub	sp, #20
 8008318:	af02      	add	r7, sp, #8
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008328:	681c      	ldr	r4, [r3, #0]
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	2200      	movs	r2, #0
 800832e:	9201      	str	r2, [sp, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	9200      	str	r2, [sp, #0]
 8008334:	2202      	movs	r2, #2
 8008336:	4903      	ldr	r1, [pc, #12]	@ (8008344 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	47a0      	blx	r4
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	bd90      	pop	{r4, r7, pc}
 8008344:	2000024c 	.word	0x2000024c

08008348 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008348:	b590      	push	{r4, r7, lr}
 800834a:	b087      	sub	sp, #28
 800834c:	af02      	add	r7, sp, #8
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	460b      	mov	r3, r1
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800835e:	681c      	ldr	r4, [r3, #0]
 8008360:	7afa      	ldrb	r2, [r7, #11]
 8008362:	2300      	movs	r3, #0
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	4613      	mov	r3, r2
 800836c:	2203      	movs	r2, #3
 800836e:	4903      	ldr	r1, [pc, #12]	@ (800837c <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	47a0      	blx	r4
}
 8008374:	bf00      	nop
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	bd90      	pop	{r4, r7, pc}
 800837c:	2000024c 	.word	0x2000024c

08008380 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8008380:	b590      	push	{r4, r7, lr}
 8008382:	b085      	sub	sp, #20
 8008384:	af02      	add	r7, sp, #8
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008394:	681c      	ldr	r4, [r3, #0]
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	2200      	movs	r2, #0
 800839a:	9201      	str	r2, [sp, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	9200      	str	r2, [sp, #0]
 80083a0:	2204      	movs	r2, #4
 80083a2:	4903      	ldr	r1, [pc, #12]	@ (80083b0 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	47a0      	blx	r4
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd90      	pop	{r4, r7, pc}
 80083b0:	2000024c 	.word	0x2000024c

080083b4 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	460b      	mov	r3, r1
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083ca:	681c      	ldr	r4, [r3, #0]
 80083cc:	7afa      	ldrb	r2, [r7, #11]
 80083ce:	2300      	movs	r3, #0
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	4613      	mov	r3, r2
 80083d8:	2205      	movs	r2, #5
 80083da:	4903      	ldr	r1, [pc, #12]	@ (80083e8 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	47a0      	blx	r4
}
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd90      	pop	{r4, r7, pc}
 80083e8:	2000024c 	.word	0x2000024c

080083ec <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 80083ec:	b590      	push	{r4, r7, lr}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80083fe:	681c      	ldr	r4, [r3, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	9301      	str	r3, [sp, #4]
 8008404:	2300      	movs	r3, #0
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2206      	movs	r2, #6
 800840c:	4903      	ldr	r1, [pc, #12]	@ (800841c <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	47a0      	blx	r4
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	bf00      	nop
 800841c:	2000024c 	.word	0x2000024c

08008420 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8008420:	b590      	push	{r4, r7, lr}
 8008422:	b087      	sub	sp, #28
 8008424:	af02      	add	r7, sp, #8
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	460b      	mov	r3, r1
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008436:	681c      	ldr	r4, [r3, #0]
 8008438:	7afa      	ldrb	r2, [r7, #11]
 800843a:	2300      	movs	r3, #0
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4613      	mov	r3, r2
 8008444:	2207      	movs	r2, #7
 8008446:	4903      	ldr	r1, [pc, #12]	@ (8008454 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	47a0      	blx	r4
}
 800844c:	bf00      	nop
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	bd90      	pop	{r4, r7, pc}
 8008454:	2000024c 	.word	0x2000024c

08008458 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8008458:	b590      	push	{r4, r7, lr}
 800845a:	b087      	sub	sp, #28
 800845c:	af02      	add	r7, sp, #8
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	607b      	str	r3, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	72fb      	strb	r3, [r7, #11]
 8008466:	4613      	mov	r3, r2
 8008468:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008472:	681c      	ldr	r4, [r3, #0]
 8008474:	7af9      	ldrb	r1, [r7, #11]
 8008476:	7abb      	ldrb	r3, [r7, #10]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	9201      	str	r2, [sp, #4]
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	460b      	mov	r3, r1
 8008480:	2208      	movs	r2, #8
 8008482:	4903      	ldr	r1, [pc, #12]	@ (8008490 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	47a0      	blx	r4
}
 8008488:	bf00      	nop
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	bd90      	pop	{r4, r7, pc}
 8008490:	2000024c 	.word	0x2000024c

08008494 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8008494:	b590      	push	{r4, r7, lr}
 8008496:	b085      	sub	sp, #20
 8008498:	af02      	add	r7, sp, #8
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
 80084a0:	4613      	mov	r3, r2
 80084a2:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084ac:	681c      	ldr	r4, [r3, #0]
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	78bb      	ldrb	r3, [r7, #2]
 80084b2:	2100      	movs	r1, #0
 80084b4:	9101      	str	r1, [sp, #4]
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	4613      	mov	r3, r2
 80084ba:	2209      	movs	r2, #9
 80084bc:	4903      	ldr	r1, [pc, #12]	@ (80084cc <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	47a0      	blx	r4
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd90      	pop	{r4, r7, pc}
 80084ca:	bf00      	nop
 80084cc:	2000024c 	.word	0x2000024c

080084d0 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 80084d0:	b590      	push	{r4, r7, lr}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80084e0:	681c      	ldr	r4, [r3, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	2300      	movs	r3, #0
 80084ec:	220a      	movs	r2, #10
 80084ee:	4903      	ldr	r1, [pc, #12]	@ (80084fc <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	47a0      	blx	r4
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd90      	pop	{r4, r7, pc}
 80084fc:	2000024c 	.word	0x2000024c

08008500 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8008500:	b590      	push	{r4, r7, lr}
 8008502:	b085      	sub	sp, #20
 8008504:	af02      	add	r7, sp, #8
 8008506:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008510:	681c      	ldr	r4, [r3, #0]
 8008512:	2300      	movs	r3, #0
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	2300      	movs	r3, #0
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	2300      	movs	r3, #0
 800851c:	220b      	movs	r2, #11
 800851e:	4903      	ldr	r1, [pc, #12]	@ (800852c <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	47a0      	blx	r4
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	bd90      	pop	{r4, r7, pc}
 800852c:	2000024c 	.word	0x2000024c

08008530 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8008530:	b590      	push	{r4, r7, lr}
 8008532:	b085      	sub	sp, #20
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008540:	681c      	ldr	r4, [r3, #0]
 8008542:	2300      	movs	r3, #0
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	2300      	movs	r3, #0
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	2300      	movs	r3, #0
 800854c:	220c      	movs	r2, #12
 800854e:	4903      	ldr	r1, [pc, #12]	@ (800855c <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	47a0      	blx	r4
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bd90      	pop	{r4, r7, pc}
 800855c:	2000024c 	.word	0x2000024c

08008560 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8008560:	b590      	push	{r4, r7, lr}
 8008562:	b085      	sub	sp, #20
 8008564:	af02      	add	r7, sp, #8
 8008566:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008570:	681c      	ldr	r4, [r3, #0]
 8008572:	2300      	movs	r3, #0
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	2300      	movs	r3, #0
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	220d      	movs	r2, #13
 800857e:	4903      	ldr	r1, [pc, #12]	@ (800858c <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	47a0      	blx	r4
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bd90      	pop	{r4, r7, pc}
 800858c:	2000024c 	.word	0x2000024c

08008590 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8008590:	b590      	push	{r4, r7, lr}
 8008592:	b085      	sub	sp, #20
 8008594:	af02      	add	r7, sp, #8
 8008596:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085a0:	681c      	ldr	r4, [r3, #0]
 80085a2:	2300      	movs	r3, #0
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	220e      	movs	r2, #14
 80085ae:	4903      	ldr	r1, [pc, #12]	@ (80085bc <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	47a0      	blx	r4
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd90      	pop	{r4, r7, pc}
 80085bc:	2000024c 	.word	0x2000024c

080085c0 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80085d0:	681c      	ldr	r4, [r3, #0]
 80085d2:	2300      	movs	r3, #0
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	2300      	movs	r3, #0
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	220f      	movs	r2, #15
 80085de:	4903      	ldr	r1, [pc, #12]	@ (80085ec <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	47a0      	blx	r4
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd90      	pop	{r4, r7, pc}
 80085ec:	2000024c 	.word	0x2000024c

080085f0 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008600:	681c      	ldr	r4, [r3, #0]
 8008602:	2300      	movs	r3, #0
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	2300      	movs	r3, #0
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	2210      	movs	r2, #16
 800860e:	4903      	ldr	r1, [pc, #12]	@ (800861c <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	47a0      	blx	r4
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	bd90      	pop	{r4, r7, pc}
 800861c:	2000024c 	.word	0x2000024c

08008620 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b085      	sub	sp, #20
 8008624:	af02      	add	r7, sp, #8
 8008626:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008630:	681c      	ldr	r4, [r3, #0]
 8008632:	2300      	movs	r3, #0
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	2300      	movs	r3, #0
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	2211      	movs	r2, #17
 800863e:	4903      	ldr	r1, [pc, #12]	@ (800864c <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	47a0      	blx	r4
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bd90      	pop	{r4, r7, pc}
 800864c:	2000024c 	.word	0x2000024c

08008650 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8008650:	b590      	push	{r4, r7, lr}
 8008652:	b085      	sub	sp, #20
 8008654:	af02      	add	r7, sp, #8
 8008656:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8008660:	681c      	ldr	r4, [r3, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	2300      	movs	r3, #0
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	2300      	movs	r3, #0
 800866c:	2212      	movs	r2, #18
 800866e:	4903      	ldr	r1, [pc, #12]	@ (800867c <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	47a0      	blx	r4
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	bd90      	pop	{r4, r7, pc}
 800867c:	2000024c 	.word	0x2000024c

08008680 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a09      	ldr	r2, [pc, #36]	@ (80086b8 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8008694:	4909      	ldr	r1, [pc, #36]	@ (80086bc <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a06      	ldr	r2, [pc, #24]	@ (80086c0 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 80086a6:	4904      	ldr	r1, [pc, #16]	@ (80086b8 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80086ac:	4b04      	ldr	r3, [pc, #16]	@ (80086c0 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	2000026c 	.word	0x2000026c
 80086bc:	2000024c 	.word	0x2000024c
 80086c0:	20000274 	.word	0x20000274

080086c4 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b089      	sub	sp, #36	@ 0x24
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80086d0:	4b17      	ldr	r3, [pc, #92]	@ (8008730 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]
 80086da:	e020      	b.n	800871e <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086e4:	681c      	ldr	r4, [r3, #0]
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	461a      	mov	r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	1899      	adds	r1, r3, r2
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	441a      	add	r2, r3
 80086fa:	230a      	movs	r3, #10
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	2302      	movs	r3, #2
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8008704:	2300      	movs	r3, #0
 8008706:	75bb      	strb	r3, [r7, #22]
 8008708:	e003      	b.n	8008712 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800870a:	bf00      	nop
 800870c:	7dbb      	ldrb	r3, [r7, #22]
 800870e:	3301      	adds	r3, #1
 8008710:	75bb      	strb	r3, [r7, #22]
 8008712:	7dbb      	ldrb	r3, [r7, #22]
 8008714:	2b7c      	cmp	r3, #124	@ 0x7c
 8008716:	d9f8      	bls.n	800870a <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	3301      	adds	r3, #1
 800871c:	75fb      	strb	r3, [r7, #23]
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b03      	cmp	r3, #3
 8008722:	d9db      	bls.n	80086dc <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8008724:	bf00      	nop
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	bd90      	pop	{r4, r7, pc}
 800872e:	bf00      	nop
 8008730:	20000249 	.word	0x20000249

08008734 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008746:	2301      	movs	r3, #1
 8008748:	74fb      	strb	r3, [r7, #19]
 800874a:	e016      	b.n	800877a <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800874c:	7cfb      	ldrb	r3, [r7, #19]
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	461a      	mov	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	7f1b      	ldrb	r3, [r3, #28]
 8008756:	4413      	add	r3, r2
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	4413      	add	r3, r2
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	4619      	mov	r1, r3
 8008760:	79fa      	ldrb	r2, [r7, #7]
 8008762:	7cfb      	ldrb	r3, [r7, #19]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	fa01 f303 	lsl.w	r3, r1, r3
 800876c:	461a      	mov	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8008774:	7cfb      	ldrb	r3, [r7, #19]
 8008776:	3301      	adds	r3, #1
 8008778:	74fb      	strb	r3, [r7, #19]
 800877a:	7cfb      	ldrb	r3, [r7, #19]
 800877c:	2b03      	cmp	r3, #3
 800877e:	d9e5      	bls.n	800874c <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8008780:	697b      	ldr	r3, [r7, #20]
}
 8008782:	4618      	mov	r0, r3
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2118      	movs	r1, #24
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	4798      	blx	r3
 80087b0:	4602      	mov	r2, r0
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087b6:	b292      	uxth	r2, r2
 80087b8:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	2b0e      	cmp	r3, #14
 80087be:	f200 8099 	bhi.w	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 80087c2:	a201      	add	r2, pc, #4	@ (adr r2, 80087c8 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	08008805 	.word	0x08008805
 80087cc:	08008815 	.word	0x08008815
 80087d0:	08008825 	.word	0x08008825
 80087d4:	08008835 	.word	0x08008835
 80087d8:	08008845 	.word	0x08008845
 80087dc:	08008855 	.word	0x08008855
 80087e0:	08008865 	.word	0x08008865
 80087e4:	08008875 	.word	0x08008875
 80087e8:	08008885 	.word	0x08008885
 80087ec:	08008895 	.word	0x08008895
 80087f0:	080088a5 	.word	0x080088a5
 80087f4:	080088b5 	.word	0x080088b5
 80087f8:	080088c5 	.word	0x080088c5
 80087fc:	080088d5 	.word	0x080088d5
 8008800:	080088e5 	.word	0x080088e5
      state = pL6470_StatusRegister->HiZ;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800880e:	b2db      	uxtb	r3, r3
 8008810:	73fb      	strb	r3, [r7, #15]
      break;
 8008812:	e06f      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800881e:	b2db      	uxtb	r3, r3
 8008820:	73fb      	strb	r3, [r7, #15]
      break;
 8008822:	e067      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800882e:	b2db      	uxtb	r3, r3
 8008830:	73fb      	strb	r3, [r7, #15]
      break;
 8008832:	e05f      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	73fb      	strb	r3, [r7, #15]
      break;
 8008842:	e057      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800884e:	b2db      	uxtb	r3, r3
 8008850:	73fb      	strb	r3, [r7, #15]
      break;
 8008852:	e04f      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800885e:	b2db      	uxtb	r3, r3
 8008860:	73fb      	strb	r3, [r7, #15]
      break;
 8008862:	e047      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800886e:	b2db      	uxtb	r3, r3
 8008870:	73fb      	strb	r3, [r7, #15]
      break;
 8008872:	e03f      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	73fb      	strb	r3, [r7, #15]
      break;
 8008882:	e037      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800888e:	b2db      	uxtb	r3, r3
 8008890:	73fb      	strb	r3, [r7, #15]
      break;
 8008892:	e02f      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	e027      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	73fb      	strb	r3, [r7, #15]
      break;
 80088b2:	e01f      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	73fb      	strb	r3, [r7, #15]
      break;
 80088c2:	e017      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	73fb      	strb	r3, [r7, #15]
      break;
 80088d2:	e00f      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	73fb      	strb	r3, [r7, #15]
      break;
 80088e2:	e007      	b.n	80088f4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	73fb      	strb	r3, [r7, #15]
      break;
 80088f2:	bf00      	nop
  return state;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop

08008900 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	2b18      	cmp	r3, #24
 8008910:	d809      	bhi.n	8008926 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a19      	ldr	r1, [r3, #32]
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	4613      	mov	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	3301      	adds	r3, #1
 8008924:	e000      	b.n	8008928 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
 8008942:	e01a      	b.n	800897a <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	4413      	add	r3, r2
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	4413      	add	r3, r2
 8008958:	2200      	movs	r2, #0
 800895a:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	4413      	add	r3, r2
 8008964:	2200      	movs	r2, #0
 8008966:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	4413      	add	r3, r2
 8008970:	2200      	movs	r2, #0
 8008972:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	3301      	adds	r3, #1
 8008978:	73fb      	strb	r3, [r7, #15]
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d9e1      	bls.n	8008944 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800898e:	b480      	push	{r7}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	603b      	str	r3, [r7, #0]
 800899a:	4613      	mov	r3, r2
 800899c:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	7f1b      	ldrb	r3, [r3, #28]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	4413      	add	r3, r2
 80089a8:	79fa      	ldrb	r2, [r7, #7]
 80089aa:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	7f1b      	ldrb	r3, [r3, #28]
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	7f1b      	ldrb	r3, [r3, #28]
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	4413      	add	r3, r2
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	7f1b      	ldrb	r3, [r3, #28]
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	4413      	add	r3, r2
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	60da      	str	r2, [r3, #12]
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
	...

080089e4 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80089e4:	b590      	push	{r4, r7, lr}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af02      	add	r7, sp, #8
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	603b      	str	r3, [r7, #0]
 80089f0:	4613      	mov	r3, r2
 80089f2:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80089f4:	4b10      	ldr	r3, [pc, #64]	@ (8008a38 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80089fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008a38 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80089fe:	2201      	movs	r2, #1
 8008a00:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8008a1a:	681c      	ldr	r4, [r3, #0]
 8008a1c:	79fa      	ldrb	r2, [r7, #7]
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	47a0      	blx	r4
}
 8008a2e:	bf00      	nop
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd90      	pop	{r4, r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000249 	.word	0x20000249

08008a3c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75bb      	strb	r3, [r7, #22]
 8008a50:	e013      	b.n	8008a7a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]
 8008a56:	e00a      	b.n	8008a6e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8008a58:	7d7b      	ldrb	r3, [r7, #21]
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	757a      	strb	r2, [r7, #21]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4413      	add	r3, r2
 8008a64:	2200      	movs	r2, #0
 8008a66:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	75fb      	strb	r3, [r7, #23]
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d9f1      	bls.n	8008a58 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8008a74:	7dbb      	ldrb	r3, [r7, #22]
 8008a76:	3301      	adds	r3, #1
 8008a78:	75bb      	strb	r3, [r7, #22]
 8008a7a:	7dbb      	ldrb	r3, [r7, #22]
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d9e8      	bls.n	8008a52 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008a80:	2300      	movs	r3, #0
 8008a82:	75fb      	strb	r3, [r7, #23]
 8008a84:	e1f1      	b.n	8008e6a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	68b9      	ldr	r1, [r7, #8]
 8008a90:	440b      	add	r3, r1
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	4619      	mov	r1, r3
 8008a96:	460b      	mov	r3, r1
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	1a5b      	subs	r3, r3, r1
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	441a      	add	r2, r3
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	440b      	add	r3, r1
 8008aa6:	7b12      	ldrb	r2, [r2, #12]
 8008aa8:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	011b      	lsls	r3, r3, #4
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b12      	cmp	r3, #18
 8008ab6:	f200 81d5 	bhi.w	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 8008aba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008e65 	.word	0x08008e65
 8008ac4:	08008b0d 	.word	0x08008b0d
 8008ac8:	08008b95 	.word	0x08008b95
 8008acc:	08008bc5 	.word	0x08008bc5
 8008ad0:	08008c2d 	.word	0x08008c2d
 8008ad4:	08008c5b 	.word	0x08008c5b
 8008ad8:	08008cc3 	.word	0x08008cc3
 8008adc:	08008cff 	.word	0x08008cff
 8008ae0:	08008d67 	.word	0x08008d67
 8008ae4:	08008e03 	.word	0x08008e03
 8008ae8:	08008e65 	.word	0x08008e65
 8008aec:	08008e65 	.word	0x08008e65
 8008af0:	08008e65 	.word	0x08008e65
 8008af4:	08008e65 	.word	0x08008e65
 8008af8:	08008e65 	.word	0x08008e65
 8008afc:	08008e65 	.word	0x08008e65
 8008b00:	08008e65 	.word	0x08008e65
 8008b04:	08008e65 	.word	0x08008e65
 8008b08:	08008e65 	.word	0x08008e65
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	4413      	add	r3, r2
 8008b12:	7819      	ldrb	r1, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a18      	ldr	r0, [r3, #32]
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	4413      	add	r3, r2
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4403      	add	r3, r0
 8008b2c:	781a      	ldrb	r2, [r3, #0]
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	4403      	add	r3, r0
 8008b34:	430a      	orrs	r2, r1
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6a19      	ldr	r1, [r3, #32]
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	4413      	add	r3, r2
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	7b9b      	ldrb	r3, [r3, #14]
 8008b54:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008b56:	2301      	movs	r3, #1
 8008b58:	75bb      	strb	r3, [r7, #22]
 8008b5a:	e016      	b.n	8008b8a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	4413      	add	r3, r2
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	7d39      	ldrb	r1, [r7, #20]
 8008b68:	7dbb      	ldrb	r3, [r7, #22]
 8008b6a:	1acb      	subs	r3, r1, r3
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	fa22 f103 	lsr.w	r1, r2, r3
 8008b72:	7dbb      	ldrb	r3, [r7, #22]
 8008b74:	005a      	lsls	r2, r3, #1
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	4413      	add	r3, r2
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4413      	add	r3, r2
 8008b80:	b2ca      	uxtb	r2, r1
 8008b82:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8008b84:	7dbb      	ldrb	r3, [r7, #22]
 8008b86:	3301      	adds	r3, #1
 8008b88:	75bb      	strb	r3, [r7, #22]
 8008b8a:	7d3a      	ldrb	r2, [r7, #20]
 8008b8c:	7dbb      	ldrb	r3, [r7, #22]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d2e4      	bcs.n	8008b5c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8008b92:	e167      	b.n	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	4413      	add	r3, r2
 8008b9a:	7819      	ldrb	r1, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a18      	ldr	r0, [r3, #32]
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4403      	add	r3, r0
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4403      	add	r3, r0
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	b2d2      	uxtb	r2, r2
 8008bc0:	701a      	strb	r2, [r3, #0]
      break;
 8008bc2:	e14f      	b.n	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4413      	add	r3, r2
 8008bca:	7819      	ldrb	r1, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	011b      	lsls	r3, r3, #4
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	4413      	add	r3, r2
 8008be0:	4403      	add	r3, r0
 8008be2:	7a1a      	ldrb	r2, [r3, #8]
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	4403      	add	r3, r0
 8008bea:	430a      	orrs	r2, r1
 8008bec:	b2d2      	uxtb	r2, r2
 8008bee:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	75bb      	strb	r3, [r7, #22]
 8008bf4:	e016      	b.n	8008c24 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	7dbb      	ldrb	r3, [r7, #22]
 8008c02:	f1c3 0303 	rsb	r3, r3, #3
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	fa22 f103 	lsr.w	r1, r2, r3
 8008c0c:	7dbb      	ldrb	r3, [r7, #22]
 8008c0e:	005a      	lsls	r2, r3, #1
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	4413      	add	r3, r2
 8008c14:	461a      	mov	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4413      	add	r3, r2
 8008c1a:	b2ca      	uxtb	r2, r1
 8008c1c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c1e:	7dbb      	ldrb	r3, [r7, #22]
 8008c20:	3301      	adds	r3, #1
 8008c22:	75bb      	strb	r3, [r7, #22]
 8008c24:	7dbb      	ldrb	r3, [r7, #22]
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d9e5      	bls.n	8008bf6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008c2a:	e11b      	b.n	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	4413      	add	r3, r2
 8008c32:	7819      	ldrb	r1, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	4413      	add	r3, r2
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	4613      	mov	r3, r2
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	4413      	add	r3, r2
 8008c48:	4403      	add	r3, r0
 8008c4a:	7a1a      	ldrb	r2, [r3, #8]
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4403      	add	r3, r0
 8008c52:	430a      	orrs	r2, r1
 8008c54:	b2d2      	uxtb	r2, r2
 8008c56:	701a      	strb	r2, [r3, #0]
      break;
 8008c58:	e104      	b.n	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4413      	add	r3, r2
 8008c60:	7819      	ldrb	r1, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	4613      	mov	r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4413      	add	r3, r2
 8008c76:	4403      	add	r3, r0
 8008c78:	7a1a      	ldrb	r2, [r3, #8]
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4403      	add	r3, r0
 8008c80:	430a      	orrs	r2, r1
 8008c82:	b2d2      	uxtb	r2, r2
 8008c84:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c86:	2301      	movs	r3, #1
 8008c88:	75bb      	strb	r3, [r7, #22]
 8008c8a:	e016      	b.n	8008cba <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	4413      	add	r3, r2
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	7dbb      	ldrb	r3, [r7, #22]
 8008c98:	f1c3 0303 	rsb	r3, r3, #3
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	fa22 f103 	lsr.w	r1, r2, r3
 8008ca2:	7dbb      	ldrb	r3, [r7, #22]
 8008ca4:	005a      	lsls	r2, r3, #1
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	4413      	add	r3, r2
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4413      	add	r3, r2
 8008cb0:	b2ca      	uxtb	r2, r1
 8008cb2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cb4:	7dbb      	ldrb	r3, [r7, #22]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	75bb      	strb	r3, [r7, #22]
 8008cba:	7dbb      	ldrb	r3, [r7, #22]
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d9e5      	bls.n	8008c8c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008cc0:	e0d0      	b.n	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	75bb      	strb	r3, [r7, #22]
 8008cc6:	e016      	b.n	8008cf6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	4413      	add	r3, r2
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	7dbb      	ldrb	r3, [r7, #22]
 8008cd4:	f1c3 0303 	rsb	r3, r3, #3
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	fa22 f103 	lsr.w	r1, r2, r3
 8008cde:	7dbb      	ldrb	r3, [r7, #22]
 8008ce0:	005a      	lsls	r2, r3, #1
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4413      	add	r3, r2
 8008cec:	b2ca      	uxtb	r2, r1
 8008cee:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008cf0:	7dbb      	ldrb	r3, [r7, #22]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	75bb      	strb	r3, [r7, #22]
 8008cf6:	7dbb      	ldrb	r3, [r7, #22]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d9e5      	bls.n	8008cc8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008cfc:	e0b2      	b.n	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	4413      	add	r3, r2
 8008d04:	7819      	ldrb	r1, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	4413      	add	r3, r2
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	4613      	mov	r3, r2
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	4413      	add	r3, r2
 8008d1a:	4403      	add	r3, r0
 8008d1c:	7a1a      	ldrb	r2, [r3, #8]
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4403      	add	r3, r0
 8008d24:	430a      	orrs	r2, r1
 8008d26:	b2d2      	uxtb	r2, r2
 8008d28:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	75bb      	strb	r3, [r7, #22]
 8008d2e:	e016      	b.n	8008d5e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4413      	add	r3, r2
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	7dbb      	ldrb	r3, [r7, #22]
 8008d3c:	f1c3 0303 	rsb	r3, r3, #3
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	fa22 f103 	lsr.w	r1, r2, r3
 8008d46:	7dbb      	ldrb	r3, [r7, #22]
 8008d48:	005a      	lsls	r2, r3, #1
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	461a      	mov	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4413      	add	r3, r2
 8008d54:	b2ca      	uxtb	r2, r1
 8008d56:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008d58:	7dbb      	ldrb	r3, [r7, #22]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	75bb      	strb	r3, [r7, #22]
 8008d5e:	7dbb      	ldrb	r3, [r7, #22]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d9e5      	bls.n	8008d30 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008d64:	e07e      	b.n	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	b259      	sxtb	r1, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	4403      	add	r3, r0
 8008d86:	791b      	ldrb	r3, [r3, #4]
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	b25b      	sxtb	r3, r3
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	b259      	sxtb	r1, r3
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	4413      	add	r3, r2
 8008d96:	b2ca      	uxtb	r2, r1
 8008d98:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4413      	add	r3, r2
 8008da0:	7819      	ldrb	r1, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	011b      	lsls	r3, r3, #4
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	4413      	add	r3, r2
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	4613      	mov	r3, r2
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	4413      	add	r3, r2
 8008db6:	4403      	add	r3, r0
 8008db8:	7a1a      	ldrb	r2, [r3, #8]
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4403      	add	r3, r0
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75bb      	strb	r3, [r7, #22]
 8008dca:	e016      	b.n	8008dfa <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	7dbb      	ldrb	r3, [r7, #22]
 8008dd8:	f1c3 0303 	rsb	r3, r3, #3
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	fa22 f103 	lsr.w	r1, r2, r3
 8008de2:	7dbb      	ldrb	r3, [r7, #22]
 8008de4:	005a      	lsls	r2, r3, #1
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	4413      	add	r3, r2
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4413      	add	r3, r2
 8008df0:	b2ca      	uxtb	r2, r1
 8008df2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008df4:	7dbb      	ldrb	r3, [r7, #22]
 8008df6:	3301      	adds	r3, #1
 8008df8:	75bb      	strb	r3, [r7, #22]
 8008dfa:	7dbb      	ldrb	r3, [r7, #22]
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d9e5      	bls.n	8008dcc <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008e00:	e030      	b.n	8008e64 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	4413      	add	r3, r2
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b259      	sxtb	r1, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	4413      	add	r3, r2
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	4403      	add	r3, r0
 8008e22:	791b      	ldrb	r3, [r3, #4]
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	b25b      	sxtb	r3, r3
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	b259      	sxtb	r1, r3
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	4413      	add	r3, r2
 8008e32:	b2ca      	uxtb	r2, r1
 8008e34:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	7819      	ldrb	r1, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	4413      	add	r3, r2
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	4413      	add	r3, r2
 8008e52:	4403      	add	r3, r0
 8008e54:	7a1a      	ldrb	r2, [r3, #8]
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	4403      	add	r3, r0
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	701a      	strb	r2, [r3, #0]
      break;
 8008e62:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	3301      	adds	r3, #1
 8008e68:	75fb      	strb	r3, [r7, #23]
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	f67f ae0a 	bls.w	8008a86 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	371c      	adds	r7, #28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008e8c:	edd7 7a00 	vldr	s15, [r7]
 8008e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e98:	db1e      	blt.n	8008ed8 <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008e9a:	edd7 7a00 	vldr	s15, [r7]
 8008e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ea2:	ee17 2a90 	vmov	r2, s15
 8008ea6:	edd7 7a00 	vldr	s15, [r7]
 8008eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eb2:	ed97 7a00 	vldr	s14, [r7]
 8008eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008eba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec6:	bf4c      	ite	mi
 8008ec8:	2301      	movmi	r3, #1
 8008eca:	2300      	movpl	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	f083 0301 	eor.w	r3, r3, #1
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	e01a      	b.n	8008f0e <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008ed8:	edd7 7a00 	vldr	s15, [r7]
 8008edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ee0:	ee17 2a90 	vmov	r2, s15
 8008ee4:	edd7 7a00 	vldr	s15, [r7]
 8008ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef0:	ed97 7a00 	vldr	s14, [r7]
 8008ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ef8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8008efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f04:	d501      	bpl.n	8008f0a <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	1ad3      	subs	r3, r2, r3
    }
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b086      	sub	sp, #24
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	4613      	mov	r3, r2
 8008f26:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6918      	ldr	r0, [r3, #16]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8a9b      	ldrh	r3, [r3, #20]
 8008f30:	2200      	movs	r2, #0
 8008f32:	4619      	mov	r1, r3
 8008f34:	f005 fd96 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6998      	ldr	r0, [r3, #24]
 8008f3c:	88fa      	ldrh	r2, [r7, #6]
 8008f3e:	2364      	movs	r3, #100	@ 0x64
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	f006 fdbe 	bl	800fac2 <HAL_SPI_Receive>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6918      	ldr	r0, [r3, #16]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	8a9b      	ldrh	r3, [r3, #20]
 8008f52:	2201      	movs	r2, #1
 8008f54:	4619      	mov	r1, r3
 8008f56:	f005 fd85 	bl	800ea64 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e000      	b.n	8008f66 <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008f64:	2300      	movs	r3, #0
    }
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b086      	sub	sp, #24
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6918      	ldr	r0, [r3, #16]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	8a9b      	ldrh	r3, [r3, #20]
 8008f84:	2200      	movs	r2, #0
 8008f86:	4619      	mov	r1, r3
 8008f88:	f005 fd6c 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6998      	ldr	r0, [r3, #24]
 8008f90:	88fa      	ldrh	r2, [r7, #6]
 8008f92:	2364      	movs	r3, #100	@ 0x64
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	f006 fc58 	bl	800f84a <HAL_SPI_Transmit>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6918      	ldr	r0, [r3, #16]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8a9b      	ldrh	r3, [r3, #20]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	4619      	mov	r1, r3
 8008faa:	f005 fd5b 	bl	800ea64 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e000      	b.n	8008fba <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8008fb8:	2300      	movs	r3, #0
    }
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b088      	sub	sp, #32
 8008fc6:	af02      	add	r7, sp, #8
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6918      	ldr	r0, [r3, #16]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8a9b      	ldrh	r3, [r3, #20]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4619      	mov	r1, r3
 8008fdc:	f005 fd42 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6998      	ldr	r0, [r3, #24]
 8008fe4:	887b      	ldrh	r3, [r7, #2]
 8008fe6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fea:	9200      	str	r2, [sp, #0]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	f006 fe78 	bl	800fce4 <HAL_SPI_TransmitReceive>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d009      	beq.n	8009012 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6918      	ldr	r0, [r3, #16]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8a9b      	ldrh	r3, [r3, #20]
 8009006:	2201      	movs	r2, #1
 8009008:	4619      	mov	r1, r3
 800900a:	f005 fd2b 	bl	800ea64 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e008      	b.n	8009024 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6918      	ldr	r0, [r3, #16]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8a9b      	ldrh	r3, [r3, #20]
 800901a:	2201      	movs	r2, #1
 800901c:	4619      	mov	r1, r3
 800901e:	f005 fd21 	bl	800ea64 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8009022:	2300      	movs	r3, #0
    }
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800902c:	b590      	push	{r4, r7, lr}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009042:	681c      	ldr	r4, [r3, #0]
 8009044:	887b      	ldrh	r3, [r7, #2]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	47a0      	blx	r4
    }
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	bd90      	pop	{r4, r7, pc}

08009056 <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	4798      	blx	r3
 8009070:	4603      	mov	r3, r0
    }
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 800907a:	b580      	push	{r7, lr}
 800907c:	b082      	sub	sp, #8
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
 8009090:	4603      	mov	r3, r0
    }
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	b2d2      	uxtb	r2, r2
 80090b2:	4611      	mov	r1, r2
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
 80090b8:	4603      	mov	r3, r0
    }
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 80090c2:	b590      	push	{r4, r7, lr}
 80090c4:	b083      	sub	sp, #12
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80090d2:	681c      	ldr	r4, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2100      	movs	r1, #0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	4798      	blx	r3
 80090e4:	4603      	mov	r3, r0
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	47a0      	blx	r4
 80090ec:	4603      	mov	r3, r0
    }
 80090ee:	4618      	mov	r0, r3
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd90      	pop	{r4, r7, pc}

080090f6 <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 80090f6:	b590      	push	{r4, r7, lr}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009106:	681c      	ldr	r4, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2102      	movs	r1, #2
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
 8009118:	4603      	mov	r3, r0
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	47a0      	blx	r4
 8009120:	4603      	mov	r3, r0
    }
 8009122:	4618      	mov	r0, r3
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	bd90      	pop	{r4, r7, pc}

0800912a <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 800912a:	b5b0      	push	{r4, r5, r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800913a:	681c      	ldr	r4, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009144:	681d      	ldr	r5, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2103      	movs	r1, #3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
 8009156:	4603      	mov	r3, r0
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	47a8      	blx	r5
 800915e:	eef0 7a40 	vmov.f32	s15, s0
 8009162:	eeb0 0a67 	vmov.f32	s0, s15
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	47a0      	blx	r4
 800916a:	4603      	mov	r3, r0
    }
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bdb0      	pop	{r4, r5, r7, pc}

08009174 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8009174:	b5b0      	push	{r4, r5, r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009184:	681c      	ldr	r4, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800918e:	681d      	ldr	r5, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2106      	movs	r1, #6
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
 80091a0:	4603      	mov	r3, r0
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	47a8      	blx	r5
 80091aa:	eef0 7a40 	vmov.f32	s15, s0
 80091ae:	eeb0 0a67 	vmov.f32	s0, s15
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	47a0      	blx	r4
 80091b6:	4603      	mov	r3, r0
    }
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bdb0      	pop	{r4, r5, r7, pc}

080091c0 <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 80091c0:	b5b0      	push	{r4, r5, r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80091d0:	681c      	ldr	r4, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80091da:	681d      	ldr	r5, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2107      	movs	r1, #7
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4798      	blx	r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	47a8      	blx	r5
 80091f6:	eef0 7a40 	vmov.f32	s15, s0
 80091fa:	eeb0 0a67 	vmov.f32	s0, s15
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	47a0      	blx	r4
 8009202:	4603      	mov	r3, r0
    }
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bdb0      	pop	{r4, r5, r7, pc}

0800920c <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 800920c:	b5b0      	push	{r4, r5, r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800921c:	681c      	ldr	r4, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8009226:	681d      	ldr	r5, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2104      	movs	r1, #4
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	4798      	blx	r3
 8009238:	4603      	mov	r3, r0
 800923a:	b29b      	uxth	r3, r3
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	47a8      	blx	r5
 8009242:	eef0 7a40 	vmov.f32	s15, s0
 8009246:	eeb0 0a67 	vmov.f32	s0, s15
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	47a0      	blx	r4
 800924e:	4603      	mov	r3, r0
    }
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bdb0      	pop	{r4, r5, r7, pc}

08009258 <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8009258:	b5b0      	push	{r4, r5, r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009268:	681c      	ldr	r4, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8009272:	681d      	ldr	r5, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2105      	movs	r1, #5
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
 8009284:	4603      	mov	r3, r0
 8009286:	b29b      	uxth	r3, r3
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	47a8      	blx	r5
 800928e:	eef0 7a40 	vmov.f32	s15, s0
 8009292:	eeb0 0a67 	vmov.f32	s0, s15
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	47a0      	blx	r4
 800929a:	4603      	mov	r3, r0
    }
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bdb0      	pop	{r4, r5, r7, pc}

080092a4 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2104      	movs	r1, #4
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	4798      	blx	r3
 80092bc:	4603      	mov	r3, r0
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e000      	b.n	80092c8 <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 80092c6:	2300      	movs	r3, #0
    }
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	b2d1      	uxtb	r1, r2
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	4798      	blx	r3
    }
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
    }
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 8009316:	b590      	push	{r4, r7, lr}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009326:	681c      	ldr	r4, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2100      	movs	r1, #0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	4798      	blx	r3
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	2102      	movs	r1, #2
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	47a0      	blx	r4
    }
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	bd90      	pop	{r4, r7, pc}

0800934a <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 800934a:	b590      	push	{r4, r7, lr}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800935c:	681c      	ldr	r4, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	2102      	movs	r1, #2
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	47a0      	blx	r4
    }
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	bd90      	pop	{r4, r7, pc}

08009380 <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8009380:	b590      	push	{r4, r7, lr}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8009392:	681c      	ldr	r4, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	ee07 2a90 	vmov	s15, r2
 80093a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a8:	eeb0 0a67 	vmov.f32	s0, s15
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	4798      	blx	r3
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	2106      	movs	r1, #6
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	47a0      	blx	r4
        return true;
 80093ba:	2301      	movs	r3, #1
    }
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd90      	pop	{r4, r7, pc}

080093c4 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 80093c4:	b590      	push	{r4, r7, lr}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80093d6:	681c      	ldr	r4, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	ee07 2a90 	vmov	s15, r2
 80093e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ec:	eeb0 0a67 	vmov.f32	s0, s15
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	4798      	blx	r3
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	2107      	movs	r1, #7
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	47a0      	blx	r4
        return true;
 80093fe:	2301      	movs	r3, #1
    }
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	bd90      	pop	{r4, r7, pc}

08009408 <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8009408:	b590      	push	{r4, r7, lr}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800941a:	681c      	ldr	r4, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	ee07 2a90 	vmov	s15, r2
 800942c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009430:	eeb0 0a67 	vmov.f32	s0, s15
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	4798      	blx	r3
 8009438:	4603      	mov	r3, r0
 800943a:	461a      	mov	r2, r3
 800943c:	2104      	movs	r1, #4
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	47a0      	blx	r4
        return true;
 8009442:	2301      	movs	r3, #1
    }
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	bd90      	pop	{r4, r7, pc}

0800944c <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 800944c:	b590      	push	{r4, r7, lr}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800945e:	681c      	ldr	r4, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	ee07 2a90 	vmov	s15, r2
 8009470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009474:	eeb0 0a67 	vmov.f32	s0, s15
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
 800947c:	4603      	mov	r3, r0
 800947e:	461a      	mov	r2, r3
 8009480:	2105      	movs	r1, #5
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	47a0      	blx	r4
        return true;
 8009486:	2301      	movs	r3, #1
    }
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	bd90      	pop	{r4, r7, pc}

08009490 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	2b07      	cmp	r3, #7
 80094a0:	d901      	bls.n	80094a6 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e00f      	b.n	80094c6 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3380      	adds	r3, #128	@ 0x80
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	2115      	movs	r1, #21
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	4798      	blx	r3
        return true;
 80094c4:	2301      	movs	r3, #1
    }
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 80094ce:	b590      	push	{r4, r7, lr}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80094e0:	681c      	ldr	r4, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	4798      	blx	r3
 80094f2:	4603      	mov	r3, r0
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	47a0      	blx	r4
    }
 80094fa:	bf00      	nop
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd90      	pop	{r4, r7, pc}

08009502 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8009502:	b5b0      	push	{r4, r5, r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	4613      	mov	r3, r2
 800950e:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8009518:	681c      	ldr	r4, [r3, #0]
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d101      	bne.n	8009524 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 8009520:	2501      	movs	r5, #1
 8009522:	e000      	b.n	8009526 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8009524:	2500      	movs	r5, #0
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68b9      	ldr	r1, [r7, #8]
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	4798      	blx	r3
 8009536:	4603      	mov	r3, r0
 8009538:	461a      	mov	r2, r3
 800953a:	4629      	mov	r1, r5
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	47a0      	blx	r4
    }
 8009540:	bf00      	nop
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bdb0      	pop	{r4, r5, r7, pc}

08009548 <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	4798      	blx	r3
    }
 800955e:	bf00      	nop
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4798      	blx	r3
    }
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8009584:	b5b0      	push	{r4, r5, r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	607b      	str	r3, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	72fb      	strb	r3, [r7, #11]
 8009592:	4613      	mov	r3, r2
 8009594:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800959e:	681c      	ldr	r4, [r3, #0]
 80095a0:	7abb      	ldrb	r3, [r7, #10]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80095a6:	2501      	movs	r5, #1
 80095a8:	e000      	b.n	80095ac <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80095aa:	2500      	movs	r5, #0
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	ee07 2a90 	vmov	s15, r2
 80095bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c0:	eeb0 0a67 	vmov.f32	s0, s15
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	4798      	blx	r3
 80095c8:	4603      	mov	r3, r0
 80095ca:	7af9      	ldrb	r1, [r7, #11]
 80095cc:	462a      	mov	r2, r5
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	47a0      	blx	r4
    }
 80095d2:	bf00      	nop
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bdb0      	pop	{r4, r5, r7, pc}

080095da <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 80095da:	b5b0      	push	{r4, r5, r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80095ee:	681c      	ldr	r4, [r3, #0]
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 80095f6:	2501      	movs	r5, #1
 80095f8:	e000      	b.n	80095fc <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 80095fa:	2500      	movs	r5, #0
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2106      	movs	r1, #6
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
 800960c:	4603      	mov	r3, r0
 800960e:	461a      	mov	r2, r3
 8009610:	4629      	mov	r1, r5
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	47a0      	blx	r4
    }
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bdb0      	pop	{r4, r5, r7, pc}

0800961e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 800961e:	b5b0      	push	{r4, r5, r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	460b      	mov	r3, r1
 8009628:	607a      	str	r2, [r7, #4]
 800962a:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8009634:	681c      	ldr	r4, [r3, #0]
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 800963c:	2501      	movs	r5, #1
 800963e:	e000      	b.n	8009642 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 8009640:	2500      	movs	r5, #0
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	ee07 2a90 	vmov	s15, r2
 8009652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009656:	eeb0 0a67 	vmov.f32	s0, s15
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	4798      	blx	r3
 800965e:	4603      	mov	r3, r0
 8009660:	461a      	mov	r2, r3
 8009662:	4629      	mov	r1, r5
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	47a0      	blx	r4
    }
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bdb0      	pop	{r4, r5, r7, pc}

08009670 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	460b      	mov	r3, r1
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	7afa      	ldrb	r2, [r7, #11]
 800968a:	2a01      	cmp	r2, #1
 800968c:	d101      	bne.n	8009692 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 800968e:	2101      	movs	r1, #1
 8009690:	e000      	b.n	8009694 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 8009692:	2100      	movs	r1, #0
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	4798      	blx	r3
    }
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	4798      	blx	r3
    }
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
    }
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	4798      	blx	r3
    }
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
    }
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8009722:	bf00      	nop
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2101      	movs	r1, #1
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	4798      	blx	r3
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	bf0c      	ite	eq
 800973a:	2301      	moveq	r3, #1
 800973c:	2300      	movne	r3, #0
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1ef      	bne.n	8009724 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3380      	adds	r3, #128	@ 0x80
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	2a01      	cmp	r2, #1
 8009774:	d101      	bne.n	800977a <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8009776:	2201      	movs	r2, #1
 8009778:	e000      	b.n	800977c <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800977a:	2200      	movs	r2, #0
 800977c:	4611      	mov	r1, r2
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
    }
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	460b      	mov	r3, r1
 8009794:	70fb      	strb	r3, [r7, #3]
 8009796:	4613      	mov	r3, r2
 8009798:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	78ba      	ldrb	r2, [r7, #2]
 80097a6:	2a01      	cmp	r2, #1
 80097a8:	d101      	bne.n	80097ae <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80097aa:	2201      	movs	r2, #1
 80097ac:	e000      	b.n	80097b0 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80097ae:	2200      	movs	r2, #0
 80097b0:	78f9      	ldrb	r1, [r7, #3]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4798      	blx	r3
    }
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
    }
 80097d4:	bf00      	nop
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	b2d2      	uxtb	r2, r2
 800981a:	4611      	mov	r1, r2
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2100      	movs	r1, #0
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2102      	movs	r1, #2
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2103      	movs	r1, #3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2203      	movs	r2, #3
 800989c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2106      	movs	r1, #6
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2204      	movs	r2, #4
 80098c4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2107      	movs	r1, #7
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2205      	movs	r2, #5
 80098ec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2104      	movs	r1, #4
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2206      	movs	r2, #6
 8009914:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2105      	movs	r1, #5
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2207      	movs	r2, #7
 800993c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8009950:	4b0b      	ldr	r3, [pc, #44]	@ (8009980 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8009958:	4b09      	ldr	r3, [pc, #36]	@ (8009980 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 800995a:	2201      	movs	r2, #1
 800995c:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4906      	ldr	r1, [pc, #24]	@ (8009984 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2208      	movs	r2, #8
 8009972:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20000215 	.word	0x20000215
 8009984:	20000218 	.word	0x20000218

08009988 <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	b2d1      	uxtb	r1, r2
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 80099d6:	bf00      	nop
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2200      	movs	r2, #0
 80099f2:	2102      	movs	r1, #2
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2209      	movs	r2, #9
 80099fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8009a08:	b590      	push	{r4, r7, lr}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a1a:	681c      	ldr	r4, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	4798      	blx	r3
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	461a      	mov	r2, r3
 8009a30:	2102      	movs	r1, #2
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a3e:	bf00      	nop
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd90      	pop	{r4, r7, pc}

08009a46 <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8009a46:	b590      	push	{r4, r7, lr}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a58:	681c      	ldr	r4, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	ee07 2a90 	vmov	s15, r2
 8009a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	4798      	blx	r3
 8009a76:	4603      	mov	r3, r0
 8009a78:	461a      	mov	r2, r3
 8009a7a:	2103      	movs	r1, #3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd90      	pop	{r4, r7, pc}

08009a90 <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8009a90:	b590      	push	{r4, r7, lr}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009aa2:	681c      	ldr	r4, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	ee07 2a90 	vmov	s15, r2
 8009ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	2106      	movs	r1, #6
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd90      	pop	{r4, r7, pc}

08009ada <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8009ada:	b590      	push	{r4, r7, lr}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009aec:	681c      	ldr	r4, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	ee07 2a90 	vmov	s15, r2
 8009afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b02:	eeb0 0a67 	vmov.f32	s0, s15
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	2107      	movs	r1, #7
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd90      	pop	{r4, r7, pc}

08009b24 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009b24:	b590      	push	{r4, r7, lr}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b36:	681c      	ldr	r4, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	ee07 2a90 	vmov	s15, r2
 8009b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	4798      	blx	r3
 8009b54:	4603      	mov	r3, r0
 8009b56:	461a      	mov	r2, r3
 8009b58:	2104      	movs	r1, #4
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd90      	pop	{r4, r7, pc}

08009b6e <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8009b6e:	b590      	push	{r4, r7, lr}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b80:	681c      	ldr	r4, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	ee07 2a90 	vmov	s15, r2
 8009b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b96:	eeb0 0a67 	vmov.f32	s0, s15
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	4798      	blx	r3
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	2105      	movs	r1, #5
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd90      	pop	{r4, r7, pc}

08009bb8 <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8009bca:	681c      	ldr	r4, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	4798      	blx	r3
 8009bdc:	4603      	mov	r3, r0
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd90      	pop	{r4, r7, pc}

08009bf4 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009bf4:	b5b0      	push	{r4, r5, r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8009c0a:	681c      	ldr	r4, [r3, #0]
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009c12:	2501      	movs	r5, #1
 8009c14:	e000      	b.n	8009c18 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009c16:	2500      	movs	r5, #0
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68b9      	ldr	r1, [r7, #8]
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	4798      	blx	r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c3a:	bf00      	nop
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bdb0      	pop	{r4, r5, r7, pc}

08009c42 <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009c8e:	b5b0      	push	{r4, r5, r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	607b      	str	r3, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	72fb      	strb	r3, [r7, #11]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009ca8:	681c      	ldr	r4, [r3, #0]
 8009caa:	7abb      	ldrb	r3, [r7, #10]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d101      	bne.n	8009cb4 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009cb0:	2501      	movs	r5, #1
 8009cb2:	e000      	b.n	8009cb6 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009cb4:	2500      	movs	r5, #0
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	ee07 2a90 	vmov	s15, r2
 8009cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cca:	eeb0 0a67 	vmov.f32	s0, s15
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	4798      	blx	r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	7af9      	ldrb	r1, [r7, #11]
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ce4:	bf00      	nop
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bdb0      	pop	{r4, r5, r7, pc}

08009cec <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009cec:	b5b0      	push	{r4, r5, r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009d00:	681c      	ldr	r4, [r3, #0]
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d101      	bne.n	8009d0c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009d08:	2501      	movs	r5, #1
 8009d0a:	e000      	b.n	8009d0e <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009d0c:	2500      	movs	r5, #0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2106      	movs	r1, #6
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	4798      	blx	r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	461a      	mov	r2, r3
 8009d22:	4629      	mov	r1, r5
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bdb0      	pop	{r4, r5, r7, pc}

08009d38 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009d38:	b5b0      	push	{r4, r5, r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	460b      	mov	r3, r1
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009d4e:	681c      	ldr	r4, [r3, #0]
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d101      	bne.n	8009d5a <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009d56:	2501      	movs	r5, #1
 8009d58:	e000      	b.n	8009d5c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	ee07 2a90 	vmov	s15, r2
 8009d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d70:	eeb0 0a67 	vmov.f32	s0, s15
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	4798      	blx	r3
 8009d78:	4603      	mov	r3, r0
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009d8a:	bf00      	nop
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bdb0      	pop	{r4, r5, r7, pc}

08009d92 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	607a      	str	r2, [r7, #4]
 8009d9e:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	7afa      	ldrb	r2, [r7, #11]
 8009dac:	2a01      	cmp	r2, #1
 8009dae:	d101      	bne.n	8009db4 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009db0:	2101      	movs	r1, #1
 8009db2:	e000      	b.n	8009db6 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009db4:	2100      	movs	r1, #0
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009dc4:	bf00      	nop
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009dea:	bf00      	nop
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e5c:	bf00      	nop
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	2a01      	cmp	r2, #1
 8009e7e:	d101      	bne.n	8009e84 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009e80:	2201      	movs	r2, #1
 8009e82:	e000      	b.n	8009e86 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009e84:	2200      	movs	r2, #0
 8009e86:	4611      	mov	r1, r2
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	78ba      	ldrb	r2, [r7, #2]
 8009eb8:	2a01      	cmp	r2, #1
 8009eba:	d101      	bne.n	8009ec0 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	e000      	b.n	8009ec2 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	78f9      	ldrb	r1, [r7, #3]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    }
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	4798      	blx	r3
 8009f14:	4603      	mov	r3, r0
    }
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009f1e:	b480      	push	{r7}
 8009f20:	b083      	sub	sp, #12
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    }
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8009f38:	b5b0      	push	{r4, r5, r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	2b07      	cmp	r3, #7
 8009f4c:	f200 80fe 	bhi.w	800a14c <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 8009f50:	a201      	add	r2, pc, #4	@ (adr r2, 8009f58 <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009f79 	.word	0x08009f79
 8009f5c:	08009fa5 	.word	0x08009fa5
 8009f60:	08009fd3 	.word	0x08009fd3
 8009f64:	0800a017 	.word	0x0800a017
 8009f68:	0800a05d 	.word	0x0800a05d
 8009f6c:	0800a0a3 	.word	0x0800a0a3
 8009f70:	0800a0e9 	.word	0x0800a0e9
 8009f74:	0800a12f 	.word	0x0800a12f
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009f80:	681c      	ldr	r4, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	6a12      	ldr	r2, [r2, #32]
 8009f90:	7b92      	ldrb	r2, [r2, #14]
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	4798      	blx	r3
 8009f98:	4603      	mov	r3, r0
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	47a0      	blx	r4
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	e0d4      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8009fac:	681c      	ldr	r4, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6a12      	ldr	r2, [r2, #32]
 8009fbc:	3228      	adds	r2, #40	@ 0x28
 8009fbe:	7b92      	ldrb	r2, [r2, #14]
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	4798      	blx	r3
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	47a0      	blx	r4
 8009fce:	4603      	mov	r3, r0
 8009fd0:	e0bd      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009fda:	681c      	ldr	r4, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8009fe4:	681d      	ldr	r5, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6a12      	ldr	r2, [r2, #32]
 8009ff4:	323c      	adds	r2, #60	@ 0x3c
 8009ff6:	7b92      	ldrb	r2, [r2, #14]
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	4798      	blx	r3
 8009ffe:	4603      	mov	r3, r0
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	47a8      	blx	r5
 800a006:	eef0 7a40 	vmov.f32	s15, s0
 800a00a:	eeb0 0a67 	vmov.f32	s0, s15
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	47a0      	blx	r4
 800a012:	4603      	mov	r3, r0
 800a014:	e09b      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a01e:	681c      	ldr	r4, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a028:	681d      	ldr	r5, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6a12      	ldr	r2, [r2, #32]
 800a038:	3278      	adds	r2, #120	@ 0x78
 800a03a:	7b92      	ldrb	r2, [r2, #14]
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	4798      	blx	r3
 800a042:	4603      	mov	r3, r0
 800a044:	b29b      	uxth	r3, r3
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	47a8      	blx	r5
 800a04c:	eef0 7a40 	vmov.f32	s15, s0
 800a050:	eeb0 0a67 	vmov.f32	s0, s15
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	47a0      	blx	r4
 800a058:	4603      	mov	r3, r0
 800a05a:	e078      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a064:	681c      	ldr	r4, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a06e:	681d      	ldr	r5, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	6a12      	ldr	r2, [r2, #32]
 800a07e:	328c      	adds	r2, #140	@ 0x8c
 800a080:	7b92      	ldrb	r2, [r2, #14]
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	4798      	blx	r3
 800a088:	4603      	mov	r3, r0
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	47a8      	blx	r5
 800a092:	eef0 7a40 	vmov.f32	s15, s0
 800a096:	eeb0 0a67 	vmov.f32	s0, s15
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	47a0      	blx	r4
 800a09e:	4603      	mov	r3, r0
 800a0a0:	e055      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0aa:	681c      	ldr	r4, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a0b4:	681d      	ldr	r5, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6a12      	ldr	r2, [r2, #32]
 800a0c4:	3250      	adds	r2, #80	@ 0x50
 800a0c6:	7b92      	ldrb	r2, [r2, #14]
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	4798      	blx	r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	47a8      	blx	r5
 800a0d8:	eef0 7a40 	vmov.f32	s15, s0
 800a0dc:	eeb0 0a67 	vmov.f32	s0, s15
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	47a0      	blx	r4
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	e032      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0f0:	681c      	ldr	r4, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a0fa:	681d      	ldr	r5, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6a12      	ldr	r2, [r2, #32]
 800a10a:	3264      	adds	r2, #100	@ 0x64
 800a10c:	7b92      	ldrb	r2, [r2, #14]
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	4798      	blx	r3
 800a114:	4603      	mov	r3, r0
 800a116:	b29b      	uxth	r3, r3
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	47a8      	blx	r5
 800a11e:	eef0 7a40 	vmov.f32	s15, s0
 800a122:	eeb0 0a67 	vmov.f32	s0, s15
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	47a0      	blx	r4
 800a12a:	4603      	mov	r3, r0
 800a12c:	e00f      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2104      	movs	r1, #4
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	4798      	blx	r3
 800a13e:	4603      	mov	r3, r0
 800a140:	2b01      	cmp	r3, #1
 800a142:	d101      	bne.n	800a148 <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 800a144:	2301      	movs	r3, #1
 800a146:	e002      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 800a148:	2300      	movs	r3, #0
 800a14a:	e000      	b.n	800a14e <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 800a14c:	2300      	movs	r3, #0
    }
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bdb0      	pop	{r4, r5, r7, pc}
 800a156:	bf00      	nop

0800a158 <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6898      	ldr	r0, [r3, #8]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	899b      	ldrh	r3, [r3, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	4619      	mov	r1, r3
 800a16c:	f004 fc7a 	bl	800ea64 <HAL_GPIO_WritePin>
    }
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a188:	d303      	bcc.n	800a192 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	f5a3 0380 	sub.w	r3, r3, #4194304	@ 0x400000
 800a190:	e000      	b.n	800a194 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 800a192:	683b      	ldr	r3, [r7, #0]
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	db05      	blt.n	800a1bc <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1b6:	da01      	bge.n	800a1bc <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	e00c      	b.n	800a1d6 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	f513 1f00 	cmn.w	r3, #2097152	@ 0x200000
 800a1c2:	db06      	blt.n	800a1d2 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	da03      	bge.n	800a1d2 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800a1d0:	e001      	b.n	800a1d6 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a1d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a210 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a1fc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a200:	eeb0 0a67 	vmov.f32	s0, s15
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	3c74242a 	.word	0x3c74242a

0800a214 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a220:	edd7 7a00 	vldr	s15, [r7]
 800a224:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a258 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a230:	d80a      	bhi.n	800a248 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a232:	ed97 7a00 	vldr	s14, [r7]
 800a236:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a25c <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a23a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a23e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a242:	ee17 3a90 	vmov	r3, s15
 800a246:	e000      	b.n	800a24a <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	4674241b 	.word	0x4674241b
 800a25c:	3c74242a 	.word	0x3c74242a

0800a260 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	460b      	mov	r3, r1
 800a26a:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a26c:	887b      	ldrh	r3, [r7, #2]
 800a26e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a272:	d209      	bcs.n	800a288 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a274:	887b      	ldrh	r3, [r7, #2]
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a27e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a29c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a282:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a286:	e001      	b.n	800a28c <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a288:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a2a0 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a28c:	eeb0 0a67 	vmov.f32	s0, s15
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	4168d4fe 	.word	0x4168d4fe
 800a2a0:	00000000 	.word	0x00000000

0800a2a4 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a2b0:	edd7 7a00 	vldr	s15, [r7]
 800a2b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a2e8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a2b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c0:	d80b      	bhi.n	800a2da <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a2c2:	ed97 7a00 	vldr	s14, [r7]
 800a2c6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a2ec <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a2ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2d2:	ee17 3a90 	vmov	r3, s15
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	e000      	b.n	800a2dc <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	4768c671 	.word	0x4768c671
 800a2ec:	4168d4fe 	.word	0x4168d4fe

0800a2f0 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a2fc:	887b      	ldrh	r3, [r7, #2]
 800a2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a302:	d209      	bcs.n	800a318 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a304:	887b      	ldrh	r3, [r7, #2]
 800a306:	ee07 3a90 	vmov	s15, r3
 800a30a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a30e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a32c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a312:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a316:	e001      	b.n	800a31c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a318:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a330 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a31c:	eeb0 0a67 	vmov.f32	s0, s15
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	4168d4fe 	.word	0x4168d4fe
 800a330:	00000000 	.word	0x00000000

0800a334 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a340:	edd7 7a00 	vldr	s15, [r7]
 800a344:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a378 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a350:	d80b      	bhi.n	800a36a <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a352:	ed97 7a00 	vldr	s14, [r7]
 800a356:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a37c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a35a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a362:	ee17 3a90 	vmov	r3, s15
 800a366:	b29b      	uxth	r3, r3
 800a368:	e000      	b.n	800a36c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	4768c671 	.word	0x4768c671
 800a37c:	4168d4fe 	.word	0x4168d4fe

0800a380 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a38c:	887b      	ldrh	r3, [r7, #2]
 800a38e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a392:	d209      	bcs.n	800a3a8 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a394:	887b      	ldrh	r3, [r7, #2]
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a39e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a3bc <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a3a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3a6:	e001      	b.n	800a3ac <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a3a8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a3c0 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a3ac:	eeb0 0a67 	vmov.f32	s0, s15
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	4174240b 	.word	0x4174240b
 800a3c0:	00000000 	.word	0x00000000

0800a3c4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a3d0:	edd7 7a00 	vldr	s15, [r7]
 800a3d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a408 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a3d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e0:	d80b      	bhi.n	800a3fa <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a3e2:	ed97 7a00 	vldr	s14, [r7]
 800a3e6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a40c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a3ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f2:	ee17 3a90 	vmov	r3, s15
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	e000      	b.n	800a3fc <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	4673e702 	.word	0x4673e702
 800a40c:	4174240b 	.word	0x4174240b

0800a410 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a41c:	887b      	ldrh	r3, [r7, #2]
 800a41e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a422:	d209      	bcs.n	800a438 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a424:	887b      	ldrh	r3, [r7, #2]
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a42e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a44c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a432:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a436:	e001      	b.n	800a43c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a438:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a450 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a43c:	eeb0 0a67 	vmov.f32	s0, s15
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	3e742401 	.word	0x3e742401
 800a450:	00000000 	.word	0x00000000

0800a454 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a460:	edd7 7a00 	vldr	s15, [r7]
 800a464:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a498 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a470:	d80b      	bhi.n	800a48a <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a472:	ed97 7a00 	vldr	s14, [r7]
 800a476:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a49c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a47a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a47e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a482:	ee17 3a90 	vmov	r3, s15
 800a486:	b29b      	uxth	r3, r3
 800a488:	e000      	b.n	800a48c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	447414bf 	.word	0x447414bf
 800a49c:	3e742401 	.word	0x3e742401

0800a4a0 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a4ac:	887b      	ldrh	r3, [r7, #2]
 800a4ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4b2:	d219      	bcs.n	800a4e8 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a4b4:	887b      	ldrh	r3, [r7, #2]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f6 f864 	bl	8000584 <__aeabi_i2d>
 800a4bc:	f04f 0200 	mov.w	r2, #0
 800a4c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a4fc <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a4c2:	f7f5 ff13 	bl	80002ec <__adddf3>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	f04f 0200 	mov.w	r2, #0
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a500 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a4d4:	f7f6 f8c0 	bl	8000658 <__aeabi_dmul>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f7f6 fbb2 	bl	8000c48 <__aeabi_d2f>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	e001      	b.n	800a4ec <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a4e8:	f04f 0300 	mov.w	r3, #0
}
 800a4ec:	ee07 3a90 	vmov	s15, r3
 800a4f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	3fe00000 	.word	0x3fe00000
 800a500:	402e8000 	.word	0x402e8000

0800a504 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a510:	edd7 7a00 	vldr	s15, [r7]
 800a514:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a550 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a520:	d80f      	bhi.n	800a542 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a522:	ed97 7a00 	vldr	s14, [r7]
 800a526:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800a554 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a52a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a52e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a532:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a53a:	ee17 3a90 	vmov	r3, s15
 800a53e:	b29b      	uxth	r3, r3
 800a540:	e000      	b.n	800a544 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	4673e180 	.word	0x4673e180
 800a554:	41740000 	.word	0x41740000

0800a558 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a564:	887b      	ldrh	r3, [r7, #2]
 800a566:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a56a:	d209      	bcs.n	800a580 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a56c:	887b      	ldrh	r3, [r7, #2]
 800a56e:	ee07 3a90 	vmov	s15, r3
 800a572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a576:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a594 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a57a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a57e:	e001      	b.n	800a584 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a580:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a598 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a584:	eeb0 0a67 	vmov.f32	s0, s15
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	3d7423f4 	.word	0x3d7423f4
 800a598:	00000000 	.word	0x00000000

0800a59c <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a5a8:	edd7 7a00 	vldr	s15, [r7]
 800a5ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800a5e0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a5b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b8:	d80b      	bhi.n	800a5d2 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a5ba:	ed97 7a00 	vldr	s14, [r7]
 800a5be:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800a5e4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a5c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ca:	ee17 3a90 	vmov	r3, s15
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	e000      	b.n	800a5d4 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	44742023 	.word	0x44742023
 800a5e4:	3d7423f4 	.word	0x3d7423f4

0800a5e8 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a5f4:	78fb      	ldrb	r3, [r7, #3]
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5fe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a614 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a602:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a606:	eeb0 0a67 	vmov.f32	s0, s15
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	3783956e 	.word	0x3783956e

0800a618 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a624:	edd7 7a02 	vldr	s15, [r7, #8]
 800a628:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a660 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a62c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a634:	d80c      	bhi.n	800a650 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a636:	ed97 7a02 	vldr	s14, [r7, #8]
 800a63a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a664 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a63e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a646:	edc7 7a01 	vstr	s15, [r7, #4]
 800a64a:	793b      	ldrb	r3, [r7, #4]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	e000      	b.n	800a652 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	3b8311d9 	.word	0x3b8311d9
 800a664:	3783956e 	.word	0x3783956e

0800a668 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a67e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a694 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a682:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a686:	eeb0 0a67 	vmov.f32	s0, s15
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	3783956e 	.word	0x3783956e

0800a698 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a6a4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6a8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a6e0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a6ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b4:	d80c      	bhi.n	800a6d0 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a6b6:	ed97 7a02 	vldr	s14, [r7, #8]
 800a6ba:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a6e4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a6be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a6ca:	793b      	ldrb	r3, [r7, #4]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	e000      	b.n	800a6d2 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	3b8311d9 	.word	0x3b8311d9
 800a6e4:	3783956e 	.word	0x3783956e

0800a6e8 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6fe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800a714 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a702:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a706:	eeb0 0a67 	vmov.f32	s0, s15
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	3783956e 	.word	0x3783956e

0800a718 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a724:	edd7 7a02 	vldr	s15, [r7, #8]
 800a728:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a760 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a72c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a734:	d80c      	bhi.n	800a750 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a736:	ed97 7a02 	vldr	s14, [r7, #8]
 800a73a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a764 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a73e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a746:	edc7 7a01 	vstr	s15, [r7, #4]
 800a74a:	793b      	ldrb	r3, [r7, #4]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	e000      	b.n	800a752 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	3b8311d9 	.word	0x3b8311d9
 800a764:	3783956e 	.word	0x3783956e

0800a768 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a774:	78fb      	ldrb	r3, [r7, #3]
 800a776:	2b0f      	cmp	r3, #15
 800a778:	d80a      	bhi.n	800a790 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	3301      	adds	r3, #1
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a786:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a7a4 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a78a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a78e:	e001      	b.n	800a794 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a790:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a7a8 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a794:	eeb0 0a67 	vmov.f32	s0, s15
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	43bb8000 	.word	0x43bb8000
 800a7a8:	00000000 	.word	0x00000000

0800a7ac <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a7b8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a7bc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a848 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a7c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c8:	d836      	bhi.n	800a838 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a7ca:	ed97 7a02 	vldr	s14, [r7, #8]
 800a7ce:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a84c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a7d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7d6:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a7da:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7e2:	edc7 7a01 	vstr	s15, [r7, #4]
 800a7e6:	793b      	ldrb	r3, [r7, #4]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7f2:	ed97 7a05 	vldr	s14, [r7, #20]
 800a7f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7fa:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a7fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800a802:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80e:	d50a      	bpl.n	800a826 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a810:	edd7 7a05 	vldr	s15, [r7, #20]
 800a814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a818:	edc7 7a01 	vstr	s15, [r7, #4]
 800a81c:	793b      	ldrb	r3, [r7, #4]
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	3b01      	subs	r3, #1
 800a822:	b2db      	uxtb	r3, r3
 800a824:	e009      	b.n	800a83a <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a826:	edd7 7a05 	vldr	s15, [r7, #20]
 800a82a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a82e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a832:	793b      	ldrb	r3, [r7, #4]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	e000      	b.n	800a83a <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	371c      	adds	r7, #28
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	45bb8000 	.word	0x45bb8000
 800a84c:	43bb8000 	.word	0x43bb8000

0800a850 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a85c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a860:	2b00      	cmp	r3, #0
 800a862:	db0a      	blt.n	800a87a <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	3301      	adds	r3, #1
 800a868:	ee07 3a90 	vmov	s15, r3
 800a86c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a870:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a88c <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a874:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a878:	e001      	b.n	800a87e <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a87a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a890 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a87e:	eeb0 0a67 	vmov.f32	s0, s15
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	41fa0000 	.word	0x41fa0000
 800a890:	00000000 	.word	0x00000000

0800a894 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a8a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a8a4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800a930 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a8a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b0:	d836      	bhi.n	800a920 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a8b2:	ed97 7a02 	vldr	s14, [r7, #8]
 800a8b6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800a934 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a8ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8be:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a8c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ca:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8ce:	793b      	ldrb	r3, [r7, #4]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8da:	ed97 7a05 	vldr	s14, [r7, #20]
 800a8de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8e2:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a8e6:	edd7 7a04 	vldr	s15, [r7, #16]
 800a8ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a8ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f6:	d50a      	bpl.n	800a90e <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a8f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a900:	edc7 7a01 	vstr	s15, [r7, #4]
 800a904:	793b      	ldrb	r3, [r7, #4]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	3b01      	subs	r3, #1
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	e009      	b.n	800a922 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a90e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a916:	edc7 7a01 	vstr	s15, [r7, #4]
 800a91a:	793b      	ldrb	r3, [r7, #4]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	e000      	b.n	800a922 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	371c      	adds	r7, #28
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	457a0000 	.word	0x457a0000
 800a934:	41fa0000 	.word	0x41fa0000

0800a938 <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3394      	adds	r3, #148	@ 0x94
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	4798      	blx	r3
  get_status();
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	330c      	adds	r3, #12
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	edd2 7a05 	vldr	s15, [r2, #20]
 800a96e:	eeb0 0a67 	vmov.f32	s0, s15
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	4798      	blx	r3
 800a976:	4603      	mov	r3, r0
 800a978:	461a      	mov	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	edd2 7a06 	vldr	s15, [r2, #24]
 800a990:	eeb0 0a67 	vmov.f32	s0, s15
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	4798      	blx	r3
 800a998:	4603      	mov	r3, r0
 800a99a:	461a      	mov	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	edd2 7a07 	vldr	s15, [r2, #28]
 800a9b2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	4798      	blx	r3
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	461a      	mov	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	edd2 7a08 	vldr	s15, [r2, #32]
 800a9d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	4798      	blx	r3
 800a9dc:	4603      	mov	r3, r0
 800a9de:	461a      	mov	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800a9f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	4798      	blx	r3
 800a9fe:	4603      	mov	r3, r0
 800aa00:	461a      	mov	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800aa0e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ace0 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa12:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	ed93 7a00 	vldr	s14, [r3]
 800aa1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa24:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa28:	793b      	ldrb	r3, [r7, #4]
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800aa38:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800ace0 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa3c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	ed93 7a00 	vldr	s14, [r3]
 800aa46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa4e:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa52:	793b      	ldrb	r3, [r7, #4]
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800aa62:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800ace0 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa66:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	ed93 7a00 	vldr	s14, [r3]
 800aa70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa78:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa7c:	793b      	ldrb	r3, [r7, #4]
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800aa8c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800ace0 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800aa90:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	ed93 7a00 	vldr	s14, [r3]
 800aa9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa2:	edc7 7a01 	vstr	s15, [r7, #4]
 800aaa6:	793b      	ldrb	r3, [r7, #4]
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800aac0:	eeb0 0a67 	vmov.f32	s0, s15
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	4798      	blx	r3
 800aac8:	4603      	mov	r3, r0
 800aaca:	461a      	mov	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 800aae2:	eeb0 0a67 	vmov.f32	s0, s15
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	4798      	blx	r3
 800aaea:	4603      	mov	r3, r0
 800aaec:	461a      	mov	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 800ab04:	eeb0 0a67 	vmov.f32	s0, s15
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	4798      	blx	r3
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	461a      	mov	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	697a      	ldr	r2, [r7, #20]
 800ab22:	edd2 7a11 	vldr	s15, [r2, #68]	@ 0x44
 800ab26:	eeb0 0a67 	vmov.f32	s0, s15
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	461a      	mov	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	edd2 7a13 	vldr	s15, [r2, #76]	@ 0x4c
 800ab54:	eeb0 0a67 	vmov.f32	s0, s15
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	4798      	blx	r3
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	461a      	mov	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	edd2 7a14 	vldr	s15, [r2, #80]	@ 0x50
 800ab76:	eeb0 0a67 	vmov.f32	s0, s15
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	4798      	blx	r3
 800ab7e:	4603      	mov	r3, r0
 800ab80:	461a      	mov	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800abbc:	2104      	movs	r1, #4
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800abd2:	2105      	movs	r1, #5
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800abe8:	2106      	movs	r1, #6
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	f8b2 204e 	ldrh.w	r2, [r2, #78]	@ 0x4e
 800abfe:	2107      	movs	r1, #7
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800ac14:	2108      	movs	r1, #8
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800ac2a:	2109      	movs	r1, #9
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	f892 2053 	ldrb.w	r2, [r2, #83]	@ 0x53
 800ac40:	210a      	movs	r1, #10
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800ac56:	210b      	movs	r1, #11
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800ac6c:	210c      	movs	r1, #12
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 800ac82:	210d      	movs	r1, #13
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 800ac98:	210e      	movs	r1, #14
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	f892 2059 	ldrb.w	r2, [r2, #89]	@ 0x59
 800acae:	210f      	movs	r1, #15
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800acc4:	2110      	movs	r1, #16
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	f892 205b 	ldrb.w	r2, [r2, #91]	@ 0x5b
 800acda:	2111      	movs	r1, #17
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	e001      	b.n	800ace4 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800ace0:	43800000 	.word	0x43800000
 800ace4:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 800acf6:	2113      	movs	r1, #19
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	f892 205e 	ldrb.w	r2, [r2, #94]	@ 0x5e
 800ad0c:	2114      	movs	r1, #20
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800ad22:	2116      	movs	r1, #22
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
 800ad38:	2117      	movs	r1, #23
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3354      	adds	r3, #84	@ 0x54
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	f892 205f 	ldrb.w	r2, [r2, #95]	@ 0x5f
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	4798      	blx	r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	f083 0301 	eor.w	r3, r3, #1
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800ad6c:	b590      	push	{r4, r7, lr}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af02      	add	r7, sp, #8
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	460b      	mov	r3, r1
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ad82:	681c      	ldr	r4, [r3, #0]
 800ad84:	7afa      	ldrb	r2, [r7, #11]
 800ad86:	2300      	movs	r3, #0
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	2201      	movs	r2, #1
 800ad92:	490c      	ldr	r1, [pc, #48]	@ (800adc4 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a09      	ldr	r2, [pc, #36]	@ (800adc8 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ada4:	4907      	ldr	r1, [pc, #28]	@ (800adc4 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a05      	ldr	r2, [pc, #20]	@ (800adcc <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800adb6:	4904      	ldr	r1, [pc, #16]	@ (800adc8 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	4798      	blx	r3
}
 800adbc:	bf00      	nop
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}
 800adc4:	20000218 	.word	0x20000218
 800adc8:	20000238 	.word	0x20000238
 800adcc:	20000240 	.word	0x20000240

0800add0 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800add0:	b590      	push	{r4, r7, lr}
 800add2:	b087      	sub	sp, #28
 800add4:	af02      	add	r7, sp, #8
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	460b      	mov	r3, r1
 800adda:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ade4:	681c      	ldr	r4, [r3, #0]
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	2200      	movs	r2, #0
 800adea:	9201      	str	r2, [sp, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	9200      	str	r2, [sp, #0]
 800adf0:	2202      	movs	r2, #2
 800adf2:	4917      	ldr	r1, [pc, #92]	@ (800ae50 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a14      	ldr	r2, [pc, #80]	@ (800ae54 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae04:	4912      	ldr	r1, [pc, #72]	@ (800ae50 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a10      	ldr	r2, [pc, #64]	@ (800ae58 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae16:	490f      	ldr	r1, [pc, #60]	@ (800ae54 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a19      	ldr	r1, [r3, #32]
 800ae20:	78fa      	ldrb	r2, [r7, #3]
 800ae22:	4613      	mov	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	440b      	add	r3, r1
 800ae2c:	7b9b      	ldrb	r3, [r3, #14]
 800ae2e:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	7bfa      	ldrb	r2, [r7, #15]
 800ae3c:	4906      	ldr	r1, [pc, #24]	@ (800ae58 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800ae46:	68bb      	ldr	r3, [r7, #8]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd90      	pop	{r4, r7, pc}
 800ae50:	20000218 	.word	0x20000218
 800ae54:	20000238 	.word	0x20000238
 800ae58:	20000240 	.word	0x20000240

0800ae5c <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800ae5c:	b590      	push	{r4, r7, lr}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	460b      	mov	r3, r1
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ae72:	681c      	ldr	r4, [r3, #0]
 800ae74:	7afa      	ldrb	r2, [r7, #11]
 800ae76:	2300      	movs	r3, #0
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	2203      	movs	r2, #3
 800ae82:	490c      	ldr	r1, [pc, #48]	@ (800aeb4 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a09      	ldr	r2, [pc, #36]	@ (800aeb8 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800ae94:	4907      	ldr	r1, [pc, #28]	@ (800aeb4 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a05      	ldr	r2, [pc, #20]	@ (800aebc <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800aea6:	4904      	ldr	r1, [pc, #16]	@ (800aeb8 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	4798      	blx	r3
}
 800aeac:	bf00      	nop
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd90      	pop	{r4, r7, pc}
 800aeb4:	20000218 	.word	0x20000218
 800aeb8:	20000238 	.word	0x20000238
 800aebc:	20000240 	.word	0x20000240

0800aec0 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800aec0:	b590      	push	{r4, r7, lr}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af02      	add	r7, sp, #8
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800aed4:	681c      	ldr	r4, [r3, #0]
 800aed6:	78fb      	ldrb	r3, [r7, #3]
 800aed8:	2200      	movs	r2, #0
 800aeda:	9201      	str	r2, [sp, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	9200      	str	r2, [sp, #0]
 800aee0:	2204      	movs	r2, #4
 800aee2:	490c      	ldr	r1, [pc, #48]	@ (800af14 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a09      	ldr	r2, [pc, #36]	@ (800af18 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800aef4:	4907      	ldr	r1, [pc, #28]	@ (800af14 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a05      	ldr	r2, [pc, #20]	@ (800af1c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800af06:	4904      	ldr	r1, [pc, #16]	@ (800af18 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	4798      	blx	r3
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	bd90      	pop	{r4, r7, pc}
 800af14:	20000218 	.word	0x20000218
 800af18:	20000238 	.word	0x20000238
 800af1c:	20000240 	.word	0x20000240

0800af20 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800af20:	b590      	push	{r4, r7, lr}
 800af22:	b087      	sub	sp, #28
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	460b      	mov	r3, r1
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af36:	681c      	ldr	r4, [r3, #0]
 800af38:	7afa      	ldrb	r2, [r7, #11]
 800af3a:	2300      	movs	r3, #0
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	4613      	mov	r3, r2
 800af44:	2205      	movs	r2, #5
 800af46:	490c      	ldr	r1, [pc, #48]	@ (800af78 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a09      	ldr	r2, [pc, #36]	@ (800af7c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800af58:	4907      	ldr	r1, [pc, #28]	@ (800af78 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a05      	ldr	r2, [pc, #20]	@ (800af80 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800af6a:	4904      	ldr	r1, [pc, #16]	@ (800af7c <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	4798      	blx	r3
}
 800af70:	bf00      	nop
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	bd90      	pop	{r4, r7, pc}
 800af78:	20000218 	.word	0x20000218
 800af7c:	20000238 	.word	0x20000238
 800af80:	20000240 	.word	0x20000240

0800af84 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800af84:	b590      	push	{r4, r7, lr}
 800af86:	b085      	sub	sp, #20
 800af88:	af02      	add	r7, sp, #8
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af94:	d21f      	bcs.n	800afd6 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800af9e:	681c      	ldr	r4, [r3, #0]
 800afa0:	2300      	movs	r3, #0
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	2300      	movs	r3, #0
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2206      	movs	r2, #6
 800afac:	490c      	ldr	r1, [pc, #48]	@ (800afe0 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a09      	ldr	r2, [pc, #36]	@ (800afe4 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800afbe:	4908      	ldr	r1, [pc, #32]	@ (800afe0 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a06      	ldr	r2, [pc, #24]	@ (800afe8 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800afd0:	4904      	ldr	r1, [pc, #16]	@ (800afe4 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	4798      	blx	r3
}
 800afd6:	bf00      	nop
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd90      	pop	{r4, r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000218 	.word	0x20000218
 800afe4:	20000238 	.word	0x20000238
 800afe8:	20000240 	.word	0x20000240

0800afec <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800afec:	b590      	push	{r4, r7, lr}
 800afee:	b087      	sub	sp, #28
 800aff0:	af02      	add	r7, sp, #8
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	460b      	mov	r3, r1
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b000:	d220      	bcs.n	800b044 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b00a:	681c      	ldr	r4, [r3, #0]
 800b00c:	7afa      	ldrb	r2, [r7, #11]
 800b00e:	2300      	movs	r3, #0
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	4613      	mov	r3, r2
 800b018:	2207      	movs	r2, #7
 800b01a:	490c      	ldr	r1, [pc, #48]	@ (800b04c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a09      	ldr	r2, [pc, #36]	@ (800b050 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b02c:	4907      	ldr	r1, [pc, #28]	@ (800b04c <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a05      	ldr	r2, [pc, #20]	@ (800b054 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800b03e:	4904      	ldr	r1, [pc, #16]	@ (800b050 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	4798      	blx	r3
}
 800b044:	bf00      	nop
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd90      	pop	{r4, r7, pc}
 800b04c:	20000218 	.word	0x20000218
 800b050:	20000238 	.word	0x20000238
 800b054:	20000240 	.word	0x20000240

0800b058 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	607b      	str	r3, [r7, #4]
 800b062:	460b      	mov	r3, r1
 800b064:	72fb      	strb	r3, [r7, #11]
 800b066:	4613      	mov	r3, r2
 800b068:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b072:	681c      	ldr	r4, [r3, #0]
 800b074:	7af9      	ldrb	r1, [r7, #11]
 800b076:	7abb      	ldrb	r3, [r7, #10]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	9201      	str	r2, [sp, #4]
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	460b      	mov	r3, r1
 800b080:	2208      	movs	r2, #8
 800b082:	490c      	ldr	r1, [pc, #48]	@ (800b0b4 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a09      	ldr	r2, [pc, #36]	@ (800b0b8 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b094:	4907      	ldr	r1, [pc, #28]	@ (800b0b4 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a05      	ldr	r2, [pc, #20]	@ (800b0bc <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800b0a6:	4904      	ldr	r1, [pc, #16]	@ (800b0b8 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	4798      	blx	r3
}
 800b0ac:	bf00      	nop
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd90      	pop	{r4, r7, pc}
 800b0b4:	20000218 	.word	0x20000218
 800b0b8:	20000238 	.word	0x20000238
 800b0bc:	20000240 	.word	0x20000240

0800b0c0 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b0c0:	b590      	push	{r4, r7, lr}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b0d8:	681c      	ldr	r4, [r3, #0]
 800b0da:	78fa      	ldrb	r2, [r7, #3]
 800b0dc:	78bb      	ldrb	r3, [r7, #2]
 800b0de:	2100      	movs	r1, #0
 800b0e0:	9101      	str	r1, [sp, #4]
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	2209      	movs	r2, #9
 800b0e8:	490c      	ldr	r1, [pc, #48]	@ (800b11c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a09      	ldr	r2, [pc, #36]	@ (800b120 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b0fa:	4908      	ldr	r1, [pc, #32]	@ (800b11c <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a06      	ldr	r2, [pc, #24]	@ (800b124 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800b10c:	4904      	ldr	r1, [pc, #16]	@ (800b120 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
}
 800b112:	bf00      	nop
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20000218 	.word	0x20000218
 800b120:	20000238 	.word	0x20000238
 800b124:	20000240 	.word	0x20000240

0800b128 <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b138:	681c      	ldr	r4, [r3, #0]
 800b13a:	2300      	movs	r3, #0
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	2300      	movs	r3, #0
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	2300      	movs	r3, #0
 800b144:	220a      	movs	r2, #10
 800b146:	490c      	ldr	r1, [pc, #48]	@ (800b178 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a09      	ldr	r2, [pc, #36]	@ (800b17c <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b158:	4907      	ldr	r1, [pc, #28]	@ (800b178 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a05      	ldr	r2, [pc, #20]	@ (800b180 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800b16a:	4904      	ldr	r1, [pc, #16]	@ (800b17c <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	4798      	blx	r3
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	bd90      	pop	{r4, r7, pc}
 800b178:	20000218 	.word	0x20000218
 800b17c:	20000238 	.word	0x20000238
 800b180:	20000240 	.word	0x20000240

0800b184 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800b184:	b590      	push	{r4, r7, lr}
 800b186:	b085      	sub	sp, #20
 800b188:	af02      	add	r7, sp, #8
 800b18a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b194:	681c      	ldr	r4, [r3, #0]
 800b196:	2300      	movs	r3, #0
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	2300      	movs	r3, #0
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	220b      	movs	r2, #11
 800b1a2:	490c      	ldr	r1, [pc, #48]	@ (800b1d4 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a09      	ldr	r2, [pc, #36]	@ (800b1d8 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b1b4:	4907      	ldr	r1, [pc, #28]	@ (800b1d4 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a05      	ldr	r2, [pc, #20]	@ (800b1dc <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b1c6:	4904      	ldr	r1, [pc, #16]	@ (800b1d8 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	4798      	blx	r3
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd90      	pop	{r4, r7, pc}
 800b1d4:	20000218 	.word	0x20000218
 800b1d8:	20000238 	.word	0x20000238
 800b1dc:	20000240 	.word	0x20000240

0800b1e0 <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b1e0:	b590      	push	{r4, r7, lr}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af02      	add	r7, sp, #8
 800b1e6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b1f0:	681c      	ldr	r4, [r3, #0]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9301      	str	r3, [sp, #4]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	220c      	movs	r2, #12
 800b1fe:	490c      	ldr	r1, [pc, #48]	@ (800b230 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a09      	ldr	r2, [pc, #36]	@ (800b234 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b210:	4907      	ldr	r1, [pc, #28]	@ (800b230 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a05      	ldr	r2, [pc, #20]	@ (800b238 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b222:	4904      	ldr	r1, [pc, #16]	@ (800b234 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	4798      	blx	r3
}
 800b228:	bf00      	nop
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd90      	pop	{r4, r7, pc}
 800b230:	20000218 	.word	0x20000218
 800b234:	20000238 	.word	0x20000238
 800b238:	20000240 	.word	0x20000240

0800b23c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b23c:	b590      	push	{r4, r7, lr}
 800b23e:	b085      	sub	sp, #20
 800b240:	af02      	add	r7, sp, #8
 800b242:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b24c:	681c      	ldr	r4, [r3, #0]
 800b24e:	2300      	movs	r3, #0
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	2300      	movs	r3, #0
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	2300      	movs	r3, #0
 800b258:	220d      	movs	r2, #13
 800b25a:	490c      	ldr	r1, [pc, #48]	@ (800b28c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a09      	ldr	r2, [pc, #36]	@ (800b290 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b26c:	4907      	ldr	r1, [pc, #28]	@ (800b28c <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a05      	ldr	r2, [pc, #20]	@ (800b294 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b27e:	4904      	ldr	r1, [pc, #16]	@ (800b290 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	4798      	blx	r3
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd90      	pop	{r4, r7, pc}
 800b28c:	20000218 	.word	0x20000218
 800b290:	20000238 	.word	0x20000238
 800b294:	20000240 	.word	0x20000240

0800b298 <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b298:	b590      	push	{r4, r7, lr}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b2a8:	681c      	ldr	r4, [r3, #0]
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	9301      	str	r3, [sp, #4]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	220e      	movs	r2, #14
 800b2b6:	490c      	ldr	r1, [pc, #48]	@ (800b2e8 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a09      	ldr	r2, [pc, #36]	@ (800b2ec <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b2c8:	4907      	ldr	r1, [pc, #28]	@ (800b2e8 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a05      	ldr	r2, [pc, #20]	@ (800b2f0 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b2da:	4904      	ldr	r1, [pc, #16]	@ (800b2ec <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	4798      	blx	r3
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd90      	pop	{r4, r7, pc}
 800b2e8:	20000218 	.word	0x20000218
 800b2ec:	20000238 	.word	0x20000238
 800b2f0:	20000240 	.word	0x20000240

0800b2f4 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b2f4:	b590      	push	{r4, r7, lr}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af02      	add	r7, sp, #8
 800b2fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b304:	681c      	ldr	r4, [r3, #0]
 800b306:	2300      	movs	r3, #0
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	2300      	movs	r3, #0
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	2300      	movs	r3, #0
 800b310:	220f      	movs	r2, #15
 800b312:	490c      	ldr	r1, [pc, #48]	@ (800b344 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a09      	ldr	r2, [pc, #36]	@ (800b348 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b324:	4907      	ldr	r1, [pc, #28]	@ (800b344 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a05      	ldr	r2, [pc, #20]	@ (800b34c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b336:	4904      	ldr	r1, [pc, #16]	@ (800b348 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	4798      	blx	r3
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	bd90      	pop	{r4, r7, pc}
 800b344:	20000218 	.word	0x20000218
 800b348:	20000238 	.word	0x20000238
 800b34c:	20000240 	.word	0x20000240

0800b350 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b350:	b590      	push	{r4, r7, lr}
 800b352:	b085      	sub	sp, #20
 800b354:	af02      	add	r7, sp, #8
 800b356:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b360:	681c      	ldr	r4, [r3, #0]
 800b362:	2300      	movs	r3, #0
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	2300      	movs	r3, #0
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	2300      	movs	r3, #0
 800b36c:	2210      	movs	r2, #16
 800b36e:	490c      	ldr	r1, [pc, #48]	@ (800b3a0 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a09      	ldr	r2, [pc, #36]	@ (800b3a4 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b380:	4907      	ldr	r1, [pc, #28]	@ (800b3a0 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a05      	ldr	r2, [pc, #20]	@ (800b3a8 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b392:	4904      	ldr	r1, [pc, #16]	@ (800b3a4 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	4798      	blx	r3
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd90      	pop	{r4, r7, pc}
 800b3a0:	20000218 	.word	0x20000218
 800b3a4:	20000238 	.word	0x20000238
 800b3a8:	20000240 	.word	0x20000240

0800b3ac <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b3ac:	b590      	push	{r4, r7, lr}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af02      	add	r7, sp, #8
 800b3b2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b3bc:	681c      	ldr	r4, [r3, #0]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	2211      	movs	r2, #17
 800b3ca:	490c      	ldr	r1, [pc, #48]	@ (800b3fc <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a09      	ldr	r2, [pc, #36]	@ (800b400 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b3dc:	4907      	ldr	r1, [pc, #28]	@ (800b3fc <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a05      	ldr	r2, [pc, #20]	@ (800b404 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b3ee:	4904      	ldr	r1, [pc, #16]	@ (800b400 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	4798      	blx	r3
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd90      	pop	{r4, r7, pc}
 800b3fc:	20000218 	.word	0x20000218
 800b400:	20000238 	.word	0x20000238
 800b404:	20000240 	.word	0x20000240

0800b408 <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b408:	b590      	push	{r4, r7, lr}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b418:	681c      	ldr	r4, [r3, #0]
 800b41a:	2300      	movs	r3, #0
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	2300      	movs	r3, #0
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	2300      	movs	r3, #0
 800b424:	2212      	movs	r2, #18
 800b426:	4912      	ldr	r1, [pc, #72]	@ (800b470 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a0f      	ldr	r2, [pc, #60]	@ (800b474 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b438:	490d      	ldr	r1, [pc, #52]	@ (800b470 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a0b      	ldr	r2, [pc, #44]	@ (800b478 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b44a:	490a      	ldr	r1, [pc, #40]	@ (800b474 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2202      	movs	r2, #2
 800b45c:	4906      	ldr	r1, [pc, #24]	@ (800b478 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	4798      	blx	r3
 800b462:	4603      	mov	r3, r0
 800b464:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b466:	89fb      	ldrh	r3, [r7, #14]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd90      	pop	{r4, r7, pc}
 800b470:	20000218 	.word	0x20000218
 800b474:	20000238 	.word	0x20000238
 800b478:	20000240 	.word	0x20000240

0800b47c <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b087      	sub	sp, #28
 800b480:	af02      	add	r7, sp, #8
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	460b      	mov	r3, r1
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b492:	681c      	ldr	r4, [r3, #0]
 800b494:	7afa      	ldrb	r2, [r7, #11]
 800b496:	2300      	movs	r3, #0
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	4903      	ldr	r1, [pc, #12]	@ (800b4b0 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	47a0      	blx	r4
}
 800b4a8:	bf00      	nop
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd90      	pop	{r4, r7, pc}
 800b4b0:	20000218 	.word	0x20000218

0800b4b4 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b4b4:	b590      	push	{r4, r7, lr}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4c8:	681c      	ldr	r4, [r3, #0]
 800b4ca:	78fb      	ldrb	r3, [r7, #3]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	9201      	str	r2, [sp, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	9200      	str	r2, [sp, #0]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	4903      	ldr	r1, [pc, #12]	@ (800b4e4 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	47a0      	blx	r4
}
 800b4dc:	bf00      	nop
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd90      	pop	{r4, r7, pc}
 800b4e4:	20000218 	.word	0x20000218

0800b4e8 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b4e8:	b590      	push	{r4, r7, lr}
 800b4ea:	b087      	sub	sp, #28
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b4fe:	681c      	ldr	r4, [r3, #0]
 800b500:	7afa      	ldrb	r2, [r7, #11]
 800b502:	2300      	movs	r3, #0
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	4613      	mov	r3, r2
 800b50c:	2203      	movs	r2, #3
 800b50e:	4903      	ldr	r1, [pc, #12]	@ (800b51c <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	47a0      	blx	r4
}
 800b514:	bf00      	nop
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd90      	pop	{r4, r7, pc}
 800b51c:	20000218 	.word	0x20000218

0800b520 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b520:	b590      	push	{r4, r7, lr}
 800b522:	b085      	sub	sp, #20
 800b524:	af02      	add	r7, sp, #8
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b534:	681c      	ldr	r4, [r3, #0]
 800b536:	78fb      	ldrb	r3, [r7, #3]
 800b538:	2200      	movs	r2, #0
 800b53a:	9201      	str	r2, [sp, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	9200      	str	r2, [sp, #0]
 800b540:	2204      	movs	r2, #4
 800b542:	4903      	ldr	r1, [pc, #12]	@ (800b550 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	47a0      	blx	r4
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd90      	pop	{r4, r7, pc}
 800b550:	20000218 	.word	0x20000218

0800b554 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b554:	b590      	push	{r4, r7, lr}
 800b556:	b087      	sub	sp, #28
 800b558:	af02      	add	r7, sp, #8
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	460b      	mov	r3, r1
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b56a:	681c      	ldr	r4, [r3, #0]
 800b56c:	7afa      	ldrb	r2, [r7, #11]
 800b56e:	2300      	movs	r3, #0
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	4613      	mov	r3, r2
 800b578:	2205      	movs	r2, #5
 800b57a:	4903      	ldr	r1, [pc, #12]	@ (800b588 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	47a0      	blx	r4
}
 800b580:	bf00      	nop
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	bd90      	pop	{r4, r7, pc}
 800b588:	20000218 	.word	0x20000218

0800b58c <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b58c:	b590      	push	{r4, r7, lr}
 800b58e:	b085      	sub	sp, #20
 800b590:	af02      	add	r7, sp, #8
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b59e:	681c      	ldr	r4, [r3, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2206      	movs	r2, #6
 800b5ac:	4903      	ldr	r1, [pc, #12]	@ (800b5bc <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	47a0      	blx	r4
}
 800b5b2:	bf00      	nop
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd90      	pop	{r4, r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20000218 	.word	0x20000218

0800b5c0 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b5c0:	b590      	push	{r4, r7, lr}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af02      	add	r7, sp, #8
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b5d6:	681c      	ldr	r4, [r3, #0]
 800b5d8:	7afa      	ldrb	r2, [r7, #11]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	9301      	str	r3, [sp, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	2207      	movs	r2, #7
 800b5e6:	4903      	ldr	r1, [pc, #12]	@ (800b5f4 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	47a0      	blx	r4
}
 800b5ec:	bf00      	nop
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd90      	pop	{r4, r7, pc}
 800b5f4:	20000218 	.word	0x20000218

0800b5f8 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b5f8:	b590      	push	{r4, r7, lr}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af02      	add	r7, sp, #8
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	607b      	str	r3, [r7, #4]
 800b602:	460b      	mov	r3, r1
 800b604:	72fb      	strb	r3, [r7, #11]
 800b606:	4613      	mov	r3, r2
 800b608:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b612:	681c      	ldr	r4, [r3, #0]
 800b614:	7af9      	ldrb	r1, [r7, #11]
 800b616:	7abb      	ldrb	r3, [r7, #10]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	9201      	str	r2, [sp, #4]
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	460b      	mov	r3, r1
 800b620:	2208      	movs	r2, #8
 800b622:	4903      	ldr	r1, [pc, #12]	@ (800b630 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	47a0      	blx	r4
}
 800b628:	bf00      	nop
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd90      	pop	{r4, r7, pc}
 800b630:	20000218 	.word	0x20000218

0800b634 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b634:	b590      	push	{r4, r7, lr}
 800b636:	b085      	sub	sp, #20
 800b638:	af02      	add	r7, sp, #8
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
 800b640:	4613      	mov	r3, r2
 800b642:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b64c:	681c      	ldr	r4, [r3, #0]
 800b64e:	78fa      	ldrb	r2, [r7, #3]
 800b650:	78bb      	ldrb	r3, [r7, #2]
 800b652:	2100      	movs	r1, #0
 800b654:	9101      	str	r1, [sp, #4]
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	4613      	mov	r3, r2
 800b65a:	2209      	movs	r2, #9
 800b65c:	4903      	ldr	r1, [pc, #12]	@ (800b66c <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	47a0      	blx	r4
}
 800b662:	bf00      	nop
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	bd90      	pop	{r4, r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20000218 	.word	0x20000218

0800b670 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b670:	b590      	push	{r4, r7, lr}
 800b672:	b085      	sub	sp, #20
 800b674:	af02      	add	r7, sp, #8
 800b676:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b680:	681c      	ldr	r4, [r3, #0]
 800b682:	2300      	movs	r3, #0
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	2300      	movs	r3, #0
 800b688:	9300      	str	r3, [sp, #0]
 800b68a:	2300      	movs	r3, #0
 800b68c:	220a      	movs	r2, #10
 800b68e:	4903      	ldr	r1, [pc, #12]	@ (800b69c <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	47a0      	blx	r4
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd90      	pop	{r4, r7, pc}
 800b69c:	20000218 	.word	0x20000218

0800b6a0 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b6a0:	b590      	push	{r4, r7, lr}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6b0:	681c      	ldr	r4, [r3, #0]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	220b      	movs	r2, #11
 800b6be:	4903      	ldr	r1, [pc, #12]	@ (800b6cc <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	47a0      	blx	r4
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd90      	pop	{r4, r7, pc}
 800b6cc:	20000218 	.word	0x20000218

0800b6d0 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b6d0:	b590      	push	{r4, r7, lr}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b6e0:	681c      	ldr	r4, [r3, #0]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	220c      	movs	r2, #12
 800b6ee:	4903      	ldr	r1, [pc, #12]	@ (800b6fc <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	47a0      	blx	r4
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd90      	pop	{r4, r7, pc}
 800b6fc:	20000218 	.word	0x20000218

0800b700 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b700:	b590      	push	{r4, r7, lr}
 800b702:	b085      	sub	sp, #20
 800b704:	af02      	add	r7, sp, #8
 800b706:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b710:	681c      	ldr	r4, [r3, #0]
 800b712:	2300      	movs	r3, #0
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	2300      	movs	r3, #0
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	2300      	movs	r3, #0
 800b71c:	220d      	movs	r2, #13
 800b71e:	4903      	ldr	r1, [pc, #12]	@ (800b72c <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	47a0      	blx	r4
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd90      	pop	{r4, r7, pc}
 800b72c:	20000218 	.word	0x20000218

0800b730 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b730:	b590      	push	{r4, r7, lr}
 800b732:	b085      	sub	sp, #20
 800b734:	af02      	add	r7, sp, #8
 800b736:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b740:	681c      	ldr	r4, [r3, #0]
 800b742:	2300      	movs	r3, #0
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	2300      	movs	r3, #0
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	2300      	movs	r3, #0
 800b74c:	220e      	movs	r2, #14
 800b74e:	4903      	ldr	r1, [pc, #12]	@ (800b75c <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	47a0      	blx	r4
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd90      	pop	{r4, r7, pc}
 800b75c:	20000218 	.word	0x20000218

0800b760 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b085      	sub	sp, #20
 800b764:	af02      	add	r7, sp, #8
 800b766:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b770:	681c      	ldr	r4, [r3, #0]
 800b772:	2300      	movs	r3, #0
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	2300      	movs	r3, #0
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	2300      	movs	r3, #0
 800b77c:	220f      	movs	r2, #15
 800b77e:	4903      	ldr	r1, [pc, #12]	@ (800b78c <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	47a0      	blx	r4
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd90      	pop	{r4, r7, pc}
 800b78c:	20000218 	.word	0x20000218

0800b790 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b085      	sub	sp, #20
 800b794:	af02      	add	r7, sp, #8
 800b796:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7a0:	681c      	ldr	r4, [r3, #0]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	2210      	movs	r2, #16
 800b7ae:	4903      	ldr	r1, [pc, #12]	@ (800b7bc <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	47a0      	blx	r4
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd90      	pop	{r4, r7, pc}
 800b7bc:	20000218 	.word	0x20000218

0800b7c0 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b7c0:	b590      	push	{r4, r7, lr}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b7d0:	681c      	ldr	r4, [r3, #0]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	2211      	movs	r2, #17
 800b7de:	4903      	ldr	r1, [pc, #12]	@ (800b7ec <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	47a0      	blx	r4
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd90      	pop	{r4, r7, pc}
 800b7ec:	20000218 	.word	0x20000218

0800b7f0 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b7f0:	b590      	push	{r4, r7, lr}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800b800:	681c      	ldr	r4, [r3, #0]
 800b802:	2300      	movs	r3, #0
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	2300      	movs	r3, #0
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	2300      	movs	r3, #0
 800b80c:	2212      	movs	r2, #18
 800b80e:	4903      	ldr	r1, [pc, #12]	@ (800b81c <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	47a0      	blx	r4
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd90      	pop	{r4, r7, pc}
 800b81c:	20000218 	.word	0x20000218

0800b820 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a09      	ldr	r2, [pc, #36]	@ (800b858 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b834:	4909      	ldr	r1, [pc, #36]	@ (800b85c <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a06      	ldr	r2, [pc, #24]	@ (800b860 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b846:	4904      	ldr	r1, [pc, #16]	@ (800b858 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b84c:	4b04      	ldr	r3, [pc, #16]	@ (800b860 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20000238 	.word	0x20000238
 800b85c:	20000218 	.word	0x20000218
 800b860:	20000240 	.word	0x20000240

0800b864 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b089      	sub	sp, #36	@ 0x24
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b870:	4b17      	ldr	r3, [pc, #92]	@ (800b8d0 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b872:	2200      	movs	r2, #0
 800b874:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b876:	2300      	movs	r3, #0
 800b878:	75fb      	strb	r3, [r7, #23]
 800b87a:	e020      	b.n	800b8be <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b884:	681c      	ldr	r4, [r3, #0]
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	461a      	mov	r2, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	1899      	adds	r1, r3, r2
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	461a      	mov	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	441a      	add	r2, r3
 800b89a:	230a      	movs	r3, #10
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	2302      	movs	r3, #2
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	75bb      	strb	r3, [r7, #22]
 800b8a8:	e003      	b.n	800b8b2 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b8aa:	bf00      	nop
 800b8ac:	7dbb      	ldrb	r3, [r7, #22]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	75bb      	strb	r3, [r7, #22]
 800b8b2:	7dbb      	ldrb	r3, [r7, #22]
 800b8b4:	2b7c      	cmp	r3, #124	@ 0x7c
 800b8b6:	d9f8      	bls.n	800b8aa <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	75fb      	strb	r3, [r7, #23]
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d9db      	bls.n	800b87c <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b8c4:	bf00      	nop
}
 800b8c6:	bf00      	nop
 800b8c8:	371c      	adds	r7, #28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd90      	pop	{r4, r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20000215 	.word	0x20000215

0800b8d4 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b8d4:	b480      	push	{r7}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	74fb      	strb	r3, [r7, #19]
 800b8ea:	e016      	b.n	800b91a <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b8ec:	7cfb      	ldrb	r3, [r7, #19]
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	7f1b      	ldrb	r3, [r3, #28]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	4619      	mov	r1, r3
 800b900:	79fa      	ldrb	r2, [r7, #7]
 800b902:	7cfb      	ldrb	r3, [r7, #19]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	fa01 f303 	lsl.w	r3, r1, r3
 800b90c:	461a      	mov	r2, r3
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	4313      	orrs	r3, r2
 800b912:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b914:	7cfb      	ldrb	r3, [r7, #19]
 800b916:	3301      	adds	r3, #1
 800b918:	74fb      	strb	r3, [r7, #19]
 800b91a:	7cfb      	ldrb	r3, [r7, #19]
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d9e5      	bls.n	800b8ec <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b920:	697b      	ldr	r3, [r7, #20]
}
 800b922:	4618      	mov	r0, r3
 800b924:	371c      	adds	r7, #28
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
	...

0800b930 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2118      	movs	r1, #24
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	4798      	blx	r3
 800b950:	4602      	mov	r2, r0
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b956:	b292      	uxth	r2, r2
 800b958:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	2b0e      	cmp	r3, #14
 800b95e:	f200 8099 	bhi.w	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b962:	a201      	add	r2, pc, #4	@ (adr r2, 800b968 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b968:	0800b9a5 	.word	0x0800b9a5
 800b96c:	0800b9b5 	.word	0x0800b9b5
 800b970:	0800b9c5 	.word	0x0800b9c5
 800b974:	0800b9d5 	.word	0x0800b9d5
 800b978:	0800b9e5 	.word	0x0800b9e5
 800b97c:	0800b9f5 	.word	0x0800b9f5
 800b980:	0800ba05 	.word	0x0800ba05
 800b984:	0800ba15 	.word	0x0800ba15
 800b988:	0800ba25 	.word	0x0800ba25
 800b98c:	0800ba35 	.word	0x0800ba35
 800b990:	0800ba45 	.word	0x0800ba45
 800b994:	0800ba55 	.word	0x0800ba55
 800b998:	0800ba65 	.word	0x0800ba65
 800b99c:	0800ba75 	.word	0x0800ba75
 800b9a0:	0800ba85 	.word	0x0800ba85
      state = pL6470_StatusRegister->HiZ;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b2:	e06f      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c2:	e067      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9d2:	e05f      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e2:	e057      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f2:	e04f      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	73fb      	strb	r3, [r7, #15]
      break;
 800ba02:	e047      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	73fb      	strb	r3, [r7, #15]
      break;
 800ba12:	e03f      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba18:	785b      	ldrb	r3, [r3, #1]
 800ba1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	73fb      	strb	r3, [r7, #15]
      break;
 800ba22:	e037      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba28:	785b      	ldrb	r3, [r3, #1]
 800ba2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	73fb      	strb	r3, [r7, #15]
      break;
 800ba32:	e02f      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba38:	785b      	ldrb	r3, [r3, #1]
 800ba3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	73fb      	strb	r3, [r7, #15]
      break;
 800ba42:	e027      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	73fb      	strb	r3, [r7, #15]
      break;
 800ba52:	e01f      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba58:	785b      	ldrb	r3, [r3, #1]
 800ba5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	73fb      	strb	r3, [r7, #15]
      break;
 800ba62:	e017      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba68:	785b      	ldrb	r3, [r3, #1]
 800ba6a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	73fb      	strb	r3, [r7, #15]
      break;
 800ba72:	e00f      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	73fb      	strb	r3, [r7, #15]
      break;
 800ba82:	e007      	b.n	800ba94 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba88:	785b      	ldrb	r3, [r3, #1]
 800ba8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	73fb      	strb	r3, [r7, #15]
      break;
 800ba92:	bf00      	nop
  return state;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop

0800baa0 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	460b      	mov	r3, r1
 800baaa:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	2b18      	cmp	r3, #24
 800bab0:	d809      	bhi.n	800bac6 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a19      	ldr	r1, [r3, #32]
 800bab6:	78fa      	ldrb	r2, [r7, #3]
 800bab8:	4613      	mov	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	440b      	add	r3, r1
 800bac2:	3301      	adds	r3, #1
 800bac4:	e000      	b.n	800bac8 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bade:	2300      	movs	r3, #0
 800bae0:	73fb      	strb	r3, [r7, #15]
 800bae2:	e01a      	b.n	800bb1a <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	4413      	add	r3, r2
 800baec:	2200      	movs	r2, #0
 800baee:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	4413      	add	r3, r2
 800baf8:	2200      	movs	r2, #0
 800bafa:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	011b      	lsls	r3, r3, #4
 800bb00:	683a      	ldr	r2, [r7, #0]
 800bb02:	4413      	add	r3, r2
 800bb04:	2200      	movs	r2, #0
 800bb06:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	4413      	add	r3, r2
 800bb10:	2200      	movs	r2, #0
 800bb12:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	3301      	adds	r3, #1
 800bb18:	73fb      	strb	r3, [r7, #15]
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d9e1      	bls.n	800bae4 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800bb20:	bf00      	nop
 800bb22:	bf00      	nop
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bb2e:	b480      	push	{r7}
 800bb30:	b085      	sub	sp, #20
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	60f8      	str	r0, [r7, #12]
 800bb36:	60b9      	str	r1, [r7, #8]
 800bb38:	603b      	str	r3, [r7, #0]
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	7f1b      	ldrb	r3, [r3, #28]
 800bb42:	011b      	lsls	r3, r3, #4
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	4413      	add	r3, r2
 800bb48:	79fa      	ldrb	r2, [r7, #7]
 800bb4a:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	7f1b      	ldrb	r3, [r3, #28]
 800bb50:	011b      	lsls	r3, r3, #4
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	4413      	add	r3, r2
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	7f1b      	ldrb	r3, [r3, #28]
 800bb5e:	011b      	lsls	r3, r3, #4
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	4413      	add	r3, r2
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	7f1b      	ldrb	r3, [r3, #28]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	4413      	add	r3, r2
 800bb72:	69fa      	ldr	r2, [r7, #28]
 800bb74:	60da      	str	r2, [r3, #12]
}
 800bb76:	bf00      	nop
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
	...

0800bb84 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800bb84:	b590      	push	{r4, r7, lr}
 800bb86:	b087      	sub	sp, #28
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	4613      	mov	r3, r2
 800bb92:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800bb94:	4b10      	ldr	r3, [pc, #64]	@ (800bbd8 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bbd8 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800bb9e:	2201      	movs	r2, #1
 800bba0:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68b9      	ldr	r1, [r7, #8]
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800bbba:	681c      	ldr	r4, [r3, #0]
 800bbbc:	79fa      	ldrb	r2, [r7, #7]
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc0:	9301      	str	r3, [sp, #4]
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	68b9      	ldr	r1, [r7, #8]
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	47a0      	blx	r4
}
 800bbce:	bf00      	nop
 800bbd0:	3714      	adds	r7, #20
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd90      	pop	{r4, r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20000215 	.word	0x20000215

0800bbdc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800bbdc:	b480      	push	{r7}
 800bbde:	b087      	sub	sp, #28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bbec:	2300      	movs	r3, #0
 800bbee:	75bb      	strb	r3, [r7, #22]
 800bbf0:	e013      	b.n	800bc1a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	75fb      	strb	r3, [r7, #23]
 800bbf6:	e00a      	b.n	800bc0e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800bbf8:	7d7b      	ldrb	r3, [r7, #21]
 800bbfa:	1c5a      	adds	r2, r3, #1
 800bbfc:	757a      	strb	r2, [r7, #21]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4413      	add	r3, r2
 800bc04:	2200      	movs	r2, #0
 800bc06:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	75fb      	strb	r3, [r7, #23]
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d9f1      	bls.n	800bbf8 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800bc14:	7dbb      	ldrb	r3, [r7, #22]
 800bc16:	3301      	adds	r3, #1
 800bc18:	75bb      	strb	r3, [r7, #22]
 800bc1a:	7dbb      	ldrb	r3, [r7, #22]
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d9e8      	bls.n	800bbf2 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800bc20:	2300      	movs	r3, #0
 800bc22:	75fb      	strb	r3, [r7, #23]
 800bc24:	e1f1      	b.n	800c00a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	011b      	lsls	r3, r3, #4
 800bc2e:	68b9      	ldr	r1, [r7, #8]
 800bc30:	440b      	add	r3, r1
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	4619      	mov	r1, r3
 800bc36:	460b      	mov	r3, r1
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	1a5b      	subs	r3, r3, r1
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	441a      	add	r2, r3
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	440b      	add	r3, r1
 800bc46:	7b12      	ldrb	r2, [r2, #12]
 800bc48:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	011b      	lsls	r3, r3, #4
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	4413      	add	r3, r2
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b12      	cmp	r3, #18
 800bc56:	f200 81d5 	bhi.w	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800bc5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc60 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc60:	0800c005 	.word	0x0800c005
 800bc64:	0800bcad 	.word	0x0800bcad
 800bc68:	0800bd35 	.word	0x0800bd35
 800bc6c:	0800bd65 	.word	0x0800bd65
 800bc70:	0800bdcd 	.word	0x0800bdcd
 800bc74:	0800bdfb 	.word	0x0800bdfb
 800bc78:	0800be63 	.word	0x0800be63
 800bc7c:	0800be9f 	.word	0x0800be9f
 800bc80:	0800bf07 	.word	0x0800bf07
 800bc84:	0800bfa3 	.word	0x0800bfa3
 800bc88:	0800c005 	.word	0x0800c005
 800bc8c:	0800c005 	.word	0x0800c005
 800bc90:	0800c005 	.word	0x0800c005
 800bc94:	0800c005 	.word	0x0800c005
 800bc98:	0800c005 	.word	0x0800c005
 800bc9c:	0800c005 	.word	0x0800c005
 800bca0:	0800c005 	.word	0x0800c005
 800bca4:	0800c005 	.word	0x0800c005
 800bca8:	0800c005 	.word	0x0800c005
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	7819      	ldrb	r1, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6a18      	ldr	r0, [r3, #32]
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	011b      	lsls	r3, r3, #4
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	685a      	ldr	r2, [r3, #4]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4403      	add	r3, r0
 800bccc:	781a      	ldrb	r2, [r3, #0]
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	4403      	add	r3, r0
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	b2d2      	uxtb	r2, r2
 800bcd8:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6a19      	ldr	r1, [r3, #32]
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	011b      	lsls	r3, r3, #4
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	4413      	add	r3, r2
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	4613      	mov	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	440b      	add	r3, r1
 800bcf2:	7b9b      	ldrb	r3, [r3, #14]
 800bcf4:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	75bb      	strb	r3, [r7, #22]
 800bcfa:	e016      	b.n	800bd2a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	011b      	lsls	r3, r3, #4
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	4413      	add	r3, r2
 800bd04:	689a      	ldr	r2, [r3, #8]
 800bd06:	7d39      	ldrb	r1, [r7, #20]
 800bd08:	7dbb      	ldrb	r3, [r7, #22]
 800bd0a:	1acb      	subs	r3, r1, r3
 800bd0c:	00db      	lsls	r3, r3, #3
 800bd0e:	fa22 f103 	lsr.w	r1, r2, r3
 800bd12:	7dbb      	ldrb	r3, [r7, #22]
 800bd14:	005a      	lsls	r2, r3, #1
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	4413      	add	r3, r2
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4413      	add	r3, r2
 800bd20:	b2ca      	uxtb	r2, r1
 800bd22:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bd24:	7dbb      	ldrb	r3, [r7, #22]
 800bd26:	3301      	adds	r3, #1
 800bd28:	75bb      	strb	r3, [r7, #22]
 800bd2a:	7d3a      	ldrb	r2, [r7, #20]
 800bd2c:	7dbb      	ldrb	r3, [r7, #22]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d2e4      	bcs.n	800bcfc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800bd32:	e167      	b.n	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bd34:	7dfb      	ldrb	r3, [r7, #23]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	4413      	add	r3, r2
 800bd3a:	7819      	ldrb	r1, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6a18      	ldr	r0, [r3, #32]
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	011b      	lsls	r3, r3, #4
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	4413      	add	r3, r2
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4403      	add	r3, r0
 800bd54:	781a      	ldrb	r2, [r3, #0]
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	4403      	add	r3, r0
 800bd5c:	430a      	orrs	r2, r1
 800bd5e:	b2d2      	uxtb	r2, r2
 800bd60:	701a      	strb	r2, [r3, #0]
      break;
 800bd62:	e14f      	b.n	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bd64:	7dfb      	ldrb	r3, [r7, #23]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	4413      	add	r3, r2
 800bd6a:	7819      	ldrb	r1, [r3, #0]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bd70:	7dfb      	ldrb	r3, [r7, #23]
 800bd72:	011b      	lsls	r3, r3, #4
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	4413      	add	r3, r2
 800bd78:	685a      	ldr	r2, [r3, #4]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	4413      	add	r3, r2
 800bd80:	4403      	add	r3, r0
 800bd82:	7a1a      	ldrb	r2, [r3, #8]
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	4403      	add	r3, r0
 800bd8a:	430a      	orrs	r2, r1
 800bd8c:	b2d2      	uxtb	r2, r2
 800bd8e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bd90:	2301      	movs	r3, #1
 800bd92:	75bb      	strb	r3, [r7, #22]
 800bd94:	e016      	b.n	800bdc4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	011b      	lsls	r3, r3, #4
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	689a      	ldr	r2, [r3, #8]
 800bda0:	7dbb      	ldrb	r3, [r7, #22]
 800bda2:	f1c3 0303 	rsb	r3, r3, #3
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	fa22 f103 	lsr.w	r1, r2, r3
 800bdac:	7dbb      	ldrb	r3, [r7, #22]
 800bdae:	005a      	lsls	r2, r3, #1
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4413      	add	r3, r2
 800bdba:	b2ca      	uxtb	r2, r1
 800bdbc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bdbe:	7dbb      	ldrb	r3, [r7, #22]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	75bb      	strb	r3, [r7, #22]
 800bdc4:	7dbb      	ldrb	r3, [r7, #22]
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d9e5      	bls.n	800bd96 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800bdca:	e11b      	b.n	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bdcc:	7dfb      	ldrb	r3, [r7, #23]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	7819      	ldrb	r1, [r3, #0]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	4413      	add	r3, r2
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	4613      	mov	r3, r2
 800bde4:	00db      	lsls	r3, r3, #3
 800bde6:	4413      	add	r3, r2
 800bde8:	4403      	add	r3, r0
 800bdea:	7a1a      	ldrb	r2, [r3, #8]
 800bdec:	7dfb      	ldrb	r3, [r7, #23]
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	4403      	add	r3, r0
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	b2d2      	uxtb	r2, r2
 800bdf6:	701a      	strb	r2, [r3, #0]
      break;
 800bdf8:	e104      	b.n	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	4413      	add	r3, r2
 800be00:	7819      	ldrb	r1, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	011b      	lsls	r3, r3, #4
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	4413      	add	r3, r2
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	4613      	mov	r3, r2
 800be12:	00db      	lsls	r3, r3, #3
 800be14:	4413      	add	r3, r2
 800be16:	4403      	add	r3, r0
 800be18:	7a1a      	ldrb	r2, [r3, #8]
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	4403      	add	r3, r0
 800be20:	430a      	orrs	r2, r1
 800be22:	b2d2      	uxtb	r2, r2
 800be24:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be26:	2301      	movs	r3, #1
 800be28:	75bb      	strb	r3, [r7, #22]
 800be2a:	e016      	b.n	800be5a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	4413      	add	r3, r2
 800be34:	689a      	ldr	r2, [r3, #8]
 800be36:	7dbb      	ldrb	r3, [r7, #22]
 800be38:	f1c3 0303 	rsb	r3, r3, #3
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	fa22 f103 	lsr.w	r1, r2, r3
 800be42:	7dbb      	ldrb	r3, [r7, #22]
 800be44:	005a      	lsls	r2, r3, #1
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	4413      	add	r3, r2
 800be4a:	461a      	mov	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4413      	add	r3, r2
 800be50:	b2ca      	uxtb	r2, r1
 800be52:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be54:	7dbb      	ldrb	r3, [r7, #22]
 800be56:	3301      	adds	r3, #1
 800be58:	75bb      	strb	r3, [r7, #22]
 800be5a:	7dbb      	ldrb	r3, [r7, #22]
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d9e5      	bls.n	800be2c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800be60:	e0d0      	b.n	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be62:	2301      	movs	r3, #1
 800be64:	75bb      	strb	r3, [r7, #22]
 800be66:	e016      	b.n	800be96 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800be68:	7dfb      	ldrb	r3, [r7, #23]
 800be6a:	011b      	lsls	r3, r3, #4
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	4413      	add	r3, r2
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	7dbb      	ldrb	r3, [r7, #22]
 800be74:	f1c3 0303 	rsb	r3, r3, #3
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	fa22 f103 	lsr.w	r1, r2, r3
 800be7e:	7dbb      	ldrb	r3, [r7, #22]
 800be80:	005a      	lsls	r2, r3, #1
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	4413      	add	r3, r2
 800be86:	461a      	mov	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4413      	add	r3, r2
 800be8c:	b2ca      	uxtb	r2, r1
 800be8e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800be90:	7dbb      	ldrb	r3, [r7, #22]
 800be92:	3301      	adds	r3, #1
 800be94:	75bb      	strb	r3, [r7, #22]
 800be96:	7dbb      	ldrb	r3, [r7, #22]
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d9e5      	bls.n	800be68 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800be9c:	e0b2      	b.n	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	4413      	add	r3, r2
 800bea4:	7819      	ldrb	r1, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
 800beac:	011b      	lsls	r3, r3, #4
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	4413      	add	r3, r2
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	4613      	mov	r3, r2
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	4413      	add	r3, r2
 800beba:	4403      	add	r3, r0
 800bebc:	7a1a      	ldrb	r2, [r3, #8]
 800bebe:	7dfb      	ldrb	r3, [r7, #23]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	4403      	add	r3, r0
 800bec4:	430a      	orrs	r2, r1
 800bec6:	b2d2      	uxtb	r2, r2
 800bec8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800beca:	2301      	movs	r3, #1
 800becc:	75bb      	strb	r3, [r7, #22]
 800bece:	e016      	b.n	800befe <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
 800bed2:	011b      	lsls	r3, r3, #4
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	4413      	add	r3, r2
 800bed8:	689a      	ldr	r2, [r3, #8]
 800beda:	7dbb      	ldrb	r3, [r7, #22]
 800bedc:	f1c3 0303 	rsb	r3, r3, #3
 800bee0:	00db      	lsls	r3, r3, #3
 800bee2:	fa22 f103 	lsr.w	r1, r2, r3
 800bee6:	7dbb      	ldrb	r3, [r7, #22]
 800bee8:	005a      	lsls	r2, r3, #1
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	4413      	add	r3, r2
 800beee:	461a      	mov	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4413      	add	r3, r2
 800bef4:	b2ca      	uxtb	r2, r1
 800bef6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bef8:	7dbb      	ldrb	r3, [r7, #22]
 800befa:	3301      	adds	r3, #1
 800befc:	75bb      	strb	r3, [r7, #22]
 800befe:	7dbb      	ldrb	r3, [r7, #22]
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d9e5      	bls.n	800bed0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800bf04:	e07e      	b.n	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	b259      	sxtb	r1, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	011b      	lsls	r3, r3, #4
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	4403      	add	r3, r0
 800bf26:	791b      	ldrb	r3, [r3, #4]
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	b25b      	sxtb	r3, r3
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	b259      	sxtb	r1, r3
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	4413      	add	r3, r2
 800bf36:	b2ca      	uxtb	r2, r1
 800bf38:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bf3a:	7dfb      	ldrb	r3, [r7, #23]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	4413      	add	r3, r2
 800bf40:	7819      	ldrb	r1, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	011b      	lsls	r3, r3, #4
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	4613      	mov	r3, r2
 800bf52:	00db      	lsls	r3, r3, #3
 800bf54:	4413      	add	r3, r2
 800bf56:	4403      	add	r3, r0
 800bf58:	7a1a      	ldrb	r2, [r3, #8]
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	4403      	add	r3, r0
 800bf60:	430a      	orrs	r2, r1
 800bf62:	b2d2      	uxtb	r2, r2
 800bf64:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf66:	2301      	movs	r3, #1
 800bf68:	75bb      	strb	r3, [r7, #22]
 800bf6a:	e016      	b.n	800bf9a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	4413      	add	r3, r2
 800bf74:	68da      	ldr	r2, [r3, #12]
 800bf76:	7dbb      	ldrb	r3, [r7, #22]
 800bf78:	f1c3 0303 	rsb	r3, r3, #3
 800bf7c:	00db      	lsls	r3, r3, #3
 800bf7e:	fa22 f103 	lsr.w	r1, r2, r3
 800bf82:	7dbb      	ldrb	r3, [r7, #22]
 800bf84:	005a      	lsls	r2, r3, #1
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
 800bf88:	4413      	add	r3, r2
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4413      	add	r3, r2
 800bf90:	b2ca      	uxtb	r2, r1
 800bf92:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bf94:	7dbb      	ldrb	r3, [r7, #22]
 800bf96:	3301      	adds	r3, #1
 800bf98:	75bb      	strb	r3, [r7, #22]
 800bf9a:	7dbb      	ldrb	r3, [r7, #22]
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d9e5      	bls.n	800bf6c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800bfa0:	e030      	b.n	800c004 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	b259      	sxtb	r1, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	685a      	ldr	r2, [r3, #4]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	4403      	add	r3, r0
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	b25b      	sxtb	r3, r3
 800bfc8:	430b      	orrs	r3, r1
 800bfca:	b259      	sxtb	r1, r3
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	b2ca      	uxtb	r2, r1
 800bfd4:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bfd6:	7dfb      	ldrb	r3, [r7, #23]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	4413      	add	r3, r2
 800bfdc:	7819      	ldrb	r1, [r3, #0]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
 800bfe4:	011b      	lsls	r3, r3, #4
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	4413      	add	r3, r2
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	4613      	mov	r3, r2
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	4413      	add	r3, r2
 800bff2:	4403      	add	r3, r0
 800bff4:	7a1a      	ldrb	r2, [r3, #8]
 800bff6:	7dfb      	ldrb	r3, [r7, #23]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	4403      	add	r3, r0
 800bffc:	430a      	orrs	r2, r1
 800bffe:	b2d2      	uxtb	r2, r2
 800c000:	701a      	strb	r2, [r3, #0]
      break;
 800c002:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800c004:	7dfb      	ldrb	r3, [r7, #23]
 800c006:	3301      	adds	r3, #1
 800c008:	75fb      	strb	r3, [r7, #23]
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	f67f ae0a 	bls.w	800bc26 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800c012:	bf00      	nop
 800c014:	bf00      	nop
 800c016:	371c      	adds	r7, #28
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800c02c:	edd7 7a00 	vldr	s15, [r7]
 800c030:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c038:	db1e      	blt.n	800c078 <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800c03a:	edd7 7a00 	vldr	s15, [r7]
 800c03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c042:	ee17 2a90 	vmov	r2, s15
 800c046:	edd7 7a00 	vldr	s15, [r7]
 800c04a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c04e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c052:	ed97 7a00 	vldr	s14, [r7]
 800c056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c05a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c05e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c066:	bf4c      	ite	mi
 800c068:	2301      	movmi	r3, #1
 800c06a:	2300      	movpl	r3, #0
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	f083 0301 	eor.w	r3, r3, #1
 800c072:	b2db      	uxtb	r3, r3
 800c074:	4413      	add	r3, r2
 800c076:	e01a      	b.n	800c0ae <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800c078:	edd7 7a00 	vldr	s15, [r7]
 800c07c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c080:	ee17 2a90 	vmov	r2, s15
 800c084:	edd7 7a00 	vldr	s15, [r7]
 800c088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c090:	ed97 7a00 	vldr	s14, [r7]
 800c094:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c098:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800c09c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a4:	d501      	bpl.n	800c0aa <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e000      	b.n	800c0ac <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	1ad3      	subs	r3, r2, r3
    }
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b086      	sub	sp, #24
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6918      	ldr	r0, [r3, #16]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	8a9b      	ldrh	r3, [r3, #20]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	f002 fcc6 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6998      	ldr	r0, [r3, #24]
 800c0dc:	88fa      	ldrh	r2, [r7, #6]
 800c0de:	2364      	movs	r3, #100	@ 0x64
 800c0e0:	68b9      	ldr	r1, [r7, #8]
 800c0e2:	f003 fcee 	bl	800fac2 <HAL_SPI_Receive>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6918      	ldr	r0, [r3, #16]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	8a9b      	ldrh	r3, [r3, #20]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f002 fcb5 	bl	800ea64 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c0fa:	7dfb      	ldrb	r3, [r7, #23]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	e000      	b.n	800c106 <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800c104:	2300      	movs	r3, #0
    }
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800c10e:	b580      	push	{r7, lr}
 800c110:	b086      	sub	sp, #24
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	4613      	mov	r3, r2
 800c11a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6918      	ldr	r0, [r3, #16]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	8a9b      	ldrh	r3, [r3, #20]
 800c124:	2200      	movs	r2, #0
 800c126:	4619      	mov	r1, r3
 800c128:	f002 fc9c 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6998      	ldr	r0, [r3, #24]
 800c130:	88fa      	ldrh	r2, [r7, #6]
 800c132:	2364      	movs	r3, #100	@ 0x64
 800c134:	68b9      	ldr	r1, [r7, #8]
 800c136:	f003 fb88 	bl	800f84a <HAL_SPI_Transmit>
 800c13a:	4603      	mov	r3, r0
 800c13c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6918      	ldr	r0, [r3, #16]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	8a9b      	ldrh	r3, [r3, #20]
 800c146:	2201      	movs	r2, #1
 800c148:	4619      	mov	r1, r3
 800c14a:	f002 fc8b 	bl	800ea64 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	e000      	b.n	800c15a <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800c158:	2300      	movs	r3, #0
    }
 800c15a:	4618      	mov	r0, r3
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800c162:	b580      	push	{r7, lr}
 800c164:	b088      	sub	sp, #32
 800c166:	af02      	add	r7, sp, #8
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	607a      	str	r2, [r7, #4]
 800c16e:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6918      	ldr	r0, [r3, #16]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	8a9b      	ldrh	r3, [r3, #20]
 800c178:	2200      	movs	r2, #0
 800c17a:	4619      	mov	r1, r3
 800c17c:	f002 fc72 	bl	800ea64 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6998      	ldr	r0, [r3, #24]
 800c184:	887b      	ldrh	r3, [r7, #2]
 800c186:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c18a:	9200      	str	r2, [sp, #0]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	f003 fda8 	bl	800fce4 <HAL_SPI_TransmitReceive>
 800c194:	4603      	mov	r3, r0
 800c196:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6918      	ldr	r0, [r3, #16]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	8a9b      	ldrh	r3, [r3, #20]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f002 fc5b 	bl	800ea64 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e008      	b.n	800c1c4 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6918      	ldr	r0, [r3, #16]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	8a9b      	ldrh	r3, [r3, #20]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	4619      	mov	r1, r3
 800c1be:	f002 fc51 	bl	800ea64 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c1c2:	2300      	movs	r3, #0
    }
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3718      	adds	r7, #24
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c1cc:	b590      	push	{r4, r7, lr}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c1e2:	681c      	ldr	r4, [r3, #0]
 800c1e4:	887b      	ldrh	r3, [r7, #2]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	47a0      	blx	r4
    }
 800c1ee:	bf00      	nop
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd90      	pop	{r4, r7, pc}

0800c1f6 <_ZN12Embase3Roues18appendRelativeMoveEddd>:
 * @param x 
 * @param y 
 * @param theta 
 * @return int32_t : the index of the added task, or -1 in case of failure (queue full)
 */
int32_t Embase3Roues::appendRelativeMove(double x, double y, double theta) {
 800c1f6:	b5b0      	push	{r4, r5, r7, lr}
 800c1f8:	b09c      	sub	sp, #112	@ 0x70
 800c1fa:	af08      	add	r7, sp, #32
 800c1fc:	61f8      	str	r0, [r7, #28]
 800c1fe:	ed87 0b04 	vstr	d0, [r7, #16]
 800c202:	ed87 1b02 	vstr	d1, [r7, #8]
 800c206:	ed87 2b00 	vstr	d2, [r7]
	Task_t task;
	initTask(task);
 800c20a:	f107 0320 	add.w	r3, r7, #32
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 f95d 	bl	800c4ce <_Z8initTaskR6Task_t>

	task.type = MOVE_RELATIVE;
 800c214:	2302      	movs	r3, #2
 800c216:	f887 3020 	strb.w	r3, [r7, #32]

	task.x = x;
 800c21a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c21e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	task.y = y;
 800c222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c226:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	task.theta = theta;
 800c22a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c22e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	int32_t res = appendInstruction(task);
 800c232:	466d      	mov	r5, sp
 800c234:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c23a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c23c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c240:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c244:	f107 0320 	add.w	r3, r7, #32
 800c248:	cb0c      	ldmia	r3, {r2, r3}
 800c24a:	69f8      	ldr	r0, [r7, #28]
 800c24c:	f000 f968 	bl	800c520 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800c250:	64f8      	str	r0, [r7, #76]	@ 0x4c
	return res;
 800c252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c254:	4618      	mov	r0, r3
 800c256:	3750      	adds	r7, #80	@ 0x50
 800c258:	46bd      	mov	sp, r7
 800c25a:	bdb0      	pop	{r4, r5, r7, pc}

0800c25c <_ZN12Embase3Roues10appendWaitEm>:
 * @brief Append a wait task at the end of the queue
 * 
 * @param delay_ms 
 * @return int32_t : the index of the added task, or -1 in case of failure (queue full)
 */
int32_t Embase3Roues::appendWait(uint32_t delay_ms) {
 800c25c:	b5b0      	push	{r4, r5, r7, lr}
 800c25e:	b096      	sub	sp, #88	@ 0x58
 800c260:	af08      	add	r7, sp, #32
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
	Task_t task;
	initTask(task);
 800c266:	f107 0308 	add.w	r3, r7, #8
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f92f 	bl	800c4ce <_Z8initTaskR6Task_t>

	task.type = WAIT;
 800c270:	2301      	movs	r3, #1
 800c272:	723b      	strb	r3, [r7, #8]

	task.delay_ms = delay_ms;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	62bb      	str	r3, [r7, #40]	@ 0x28

	int32_t res = appendInstruction(task);
 800c278:	466d      	mov	r5, sp
 800c27a:	f107 0410 	add.w	r4, r7, #16
 800c27e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c282:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c286:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c28a:	f107 0308 	add.w	r3, r7, #8
 800c28e:	cb0c      	ldmia	r3, {r2, r3}
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f945 	bl	800c520 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800c296:	6378      	str	r0, [r7, #52]	@ 0x34
	return res;
 800c298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3738      	adds	r7, #56	@ 0x38
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bdb0      	pop	{r4, r5, r7, pc}

0800c2a2 <_ZN12Embase3Roues10appendUartEh>:

int32_t Embase3Roues::appendUart(uint8_t c){
 800c2a2:	b5b0      	push	{r4, r5, r7, lr}
 800c2a4:	b096      	sub	sp, #88	@ 0x58
 800c2a6:	af08      	add	r7, sp, #32
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	70fb      	strb	r3, [r7, #3]
	Task_t task;
	initTask(task);
 800c2ae:	f107 0308 	add.w	r3, r7, #8
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 f90b 	bl	800c4ce <_Z8initTaskR6Task_t>

	task.type = UART_SEND;
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	723b      	strb	r3, [r7, #8]

	task.c = c;
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	int32_t res = appendInstruction(task);
 800c2c2:	466d      	mov	r5, sp
 800c2c4:	f107 0410 	add.w	r4, r7, #16
 800c2c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c2d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c2d4:	f107 0308 	add.w	r3, r7, #8
 800c2d8:	cb0c      	ldmia	r3, {r2, r3}
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f920 	bl	800c520 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800c2e0:	6378      	str	r0, [r7, #52]	@ 0x34
	return res;
 800c2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3738      	adds	r7, #56	@ 0x38
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c2ec <_ZN12Embase3Roues15appendSpeedMoveEddd>:

int32_t Embase3Roues::appendSpeedMove(double vx, double vy, double wz)
{
 800c2ec:	b5b0      	push	{r4, r5, r7, lr}
 800c2ee:	b09c      	sub	sp, #112	@ 0x70
 800c2f0:	af08      	add	r7, sp, #32
 800c2f2:	61f8      	str	r0, [r7, #28]
 800c2f4:	ed87 0b04 	vstr	d0, [r7, #16]
 800c2f8:	ed87 1b02 	vstr	d1, [r7, #8]
 800c2fc:	ed87 2b00 	vstr	d2, [r7]
	Task_t task;
	initTask(task);
 800c300:	f107 0320 	add.w	r3, r7, #32
 800c304:	4618      	mov	r0, r3
 800c306:	f000 f8e2 	bl	800c4ce <_Z8initTaskR6Task_t>

	task.type = MOVE_SPEED;
 800c30a:	2303      	movs	r3, #3
 800c30c:	f887 3020 	strb.w	r3, [r7, #32]

	task.x = vx;
 800c310:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c314:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	task.y = vy;
 800c318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c31c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	task.theta = wz;
 800c320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c324:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	int32_t res = appendInstruction(task);
 800c328:	466d      	mov	r5, sp
 800c32a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c32e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c332:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c336:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c33a:	f107 0320 	add.w	r3, r7, #32
 800c33e:	cb0c      	ldmia	r3, {r2, r3}
 800c340:	69f8      	ldr	r0, [r7, #28]
 800c342:	f000 f8ed 	bl	800c520 <_ZN12Embase3Roues17appendInstructionE6Task_t>
 800c346:	64f8      	str	r0, [r7, #76]	@ 0x4c
	return res;
 800c348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3750      	adds	r7, #80	@ 0x50
 800c34e:	46bd      	mov	sp, r7
 800c350:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c354 <_ZN12Embase3Roues18executeInstructionEv>:
/**
 * @brief Execute an instruction from the queue
 * 
 * @return int32_t : the index of the executed instruction
 */
TaskType_t Embase3Roues::executeInstruction() {
 800c354:	b5b0      	push	{r4, r5, r7, lr}
 800c356:	b08e      	sub	sp, #56	@ 0x38
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
	Task_t current_task = _task_buffer[_current_index];
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c362:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c364:	6879      	ldr	r1, [r7, #4]
 800c366:	4613      	mov	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	440b      	add	r3, r1
 800c370:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c374:	f107 0408 	add.w	r4, r7, #8
 800c378:	461d      	mov	r5, r3
 800c37a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c37c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c37e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c382:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c386:	e884 0003 	stmia.w	r4, {r0, r1}
	TaskType_t type = current_task.type;
 800c38a:	7a3b      	ldrb	r3, [r7, #8]
 800c38c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	// "delete" current task
	initTask(_task_buffer[_current_index]);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c396:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	00db      	lsls	r3, r3, #3
 800c3a0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 f890 	bl	800c4ce <_Z8initTaskR6Task_t>

	// Only go forward in the buffer if the task was not NONE.
	if (type != NONE)
 800c3ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d008      	beq.n	800c3c8 <_ZN12Embase3Roues18executeInstructionEv+0x74>
	{
		_current_index++;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c3bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3be:	3301      	adds	r3, #1
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800c3c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
	}

	switch (type) {
 800c3c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d849      	bhi.n	800c464 <_ZN12Embase3Roues18executeInstructionEv+0x110>
 800c3d0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d8 <_ZN12Embase3Roues18executeInstructionEv+0x84>)
 800c3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d6:	bf00      	nop
 800c3d8:	0800c465 	.word	0x0800c465
 800c3dc:	0800c445 	.word	0x0800c445
 800c3e0:	0800c419 	.word	0x0800c419
 800c3e4:	0800c3ed 	.word	0x0800c3ed
 800c3e8:	0800c451 	.word	0x0800c451
	case NONE:
		// Do nothing...
		break;

	case MOVE_SPEED:
		moveSpeed(current_task.x, current_task.y, current_task.theta);
 800c3ec:	ed97 7b04 	vldr	d7, [r7, #16]
 800c3f0:	ed97 6b06 	vldr	d6, [r7, #24]
 800c3f4:	ed97 5b08 	vldr	d5, [r7, #32]
 800c3f8:	eeb0 2a45 	vmov.f32	s4, s10
 800c3fc:	eef0 2a65 	vmov.f32	s5, s11
 800c400:	eeb0 1a46 	vmov.f32	s2, s12
 800c404:	eef0 1a66 	vmov.f32	s3, s13
 800c408:	eeb0 0a47 	vmov.f32	s0, s14
 800c40c:	eef0 0a67 	vmov.f32	s1, s15
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fc75 	bl	800cd00 <_ZN12Embase3Roues9moveSpeedEddd>
		break;
 800c416:	e026      	b.n	800c466 <_ZN12Embase3Roues18executeInstructionEv+0x112>

	case MOVE_RELATIVE:
		moveRelative(current_task.x, current_task.y, current_task.theta);
 800c418:	ed97 7b04 	vldr	d7, [r7, #16]
 800c41c:	ed97 6b06 	vldr	d6, [r7, #24]
 800c420:	ed97 5b08 	vldr	d5, [r7, #32]
 800c424:	eeb0 2a45 	vmov.f32	s4, s10
 800c428:	eef0 2a65 	vmov.f32	s5, s11
 800c42c:	eeb0 1a46 	vmov.f32	s2, s12
 800c430:	eef0 1a66 	vmov.f32	s3, s13
 800c434:	eeb0 0a47 	vmov.f32	s0, s14
 800c438:	eef0 0a67 	vmov.f32	s1, s15
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fc13 	bl	800cc68 <_ZN12Embase3Roues12moveRelativeEddd>
		break;
 800c442:	e010      	b.n	800c466 <_ZN12Embase3Roues18executeInstructionEv+0x112>

	case WAIT:
		wait(current_task.delay_ms);
 800c444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 fc35 	bl	800ccb8 <_ZN12Embase3Roues4waitEm>
		break;
 800c44e:	e00a      	b.n	800c466 <_ZN12Embase3Roues18executeInstructionEv+0x112>

	case UART_SEND:
		HAL_UART_Transmit(&huart2, (uint8_t *) &current_task.c, 1*sizeof(char), 100);
 800c450:	f107 0308 	add.w	r3, r7, #8
 800c454:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800c458:	2364      	movs	r3, #100	@ 0x64
 800c45a:	2201      	movs	r2, #1
 800c45c:	4805      	ldr	r0, [pc, #20]	@ (800c474 <_ZN12Embase3Roues18executeInstructionEv+0x120>)
 800c45e:	f005 f808 	bl	8011472 <HAL_UART_Transmit>
		break;
 800c462:	e000      	b.n	800c466 <_ZN12Embase3Roues18executeInstructionEv+0x112>

	default:
		break;
 800c464:	bf00      	nop
	}

	return type;
 800c466:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3738      	adds	r7, #56	@ 0x38
 800c46e:	46bd      	mov	sp, r7
 800c470:	bdb0      	pop	{r4, r5, r7, pc}
 800c472:	bf00      	nop
 800c474:	200004cc 	.word	0x200004cc

0800c478 <_Z8copyTaskR6Task_tS0_>:
/*******************************
 * Private functions
 ******************************/

void copyTask(Task_t &dest, Task_t &src)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
	dest.type = src.type;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	781a      	ldrb	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	701a      	strb	r2, [r3, #0]
	dest.x = src.x;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c490:	6879      	ldr	r1, [r7, #4]
 800c492:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dest.y = src.y;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dest.theta = src.theta;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dest.delay_ms = src.delay_ms;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	6a1a      	ldr	r2, [r3, #32]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	621a      	str	r2, [r3, #32]
	dest.c = src.c;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800c4c2:	bf00      	nop
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <_Z8initTaskR6Task_t>:

void initTask(Task_t &task)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b083      	sub	sp, #12
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
	task.type = TaskType_t::NONE;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
	task.x = 0;
 800c4dc:	6879      	ldr	r1, [r7, #4]
 800c4de:	f04f 0200 	mov.w	r2, #0
 800c4e2:	f04f 0300 	mov.w	r3, #0
 800c4e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	task.y = 0;
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	f04f 0200 	mov.w	r2, #0
 800c4f0:	f04f 0300 	mov.w	r3, #0
 800c4f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	task.theta = 0;
 800c4f8:	6879      	ldr	r1, [r7, #4]
 800c4fa:	f04f 0200 	mov.w	r2, #0
 800c4fe:	f04f 0300 	mov.w	r3, #0
 800c502:	e9c1 2306 	strd	r2, r3, [r1, #24]
	task.delay_ms = 0;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	621a      	str	r2, [r3, #32]
	task.c = '\0';
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <_ZN12Embase3Roues17appendInstructionE6Task_t>:

int32_t Embase3Roues::appendInstruction(Task_t task) {
 800c520:	b082      	sub	sp, #8
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	f107 0110 	add.w	r1, r7, #16
 800c52e:	e881 000c 	stmia.w	r1, {r2, r3}
	if (_task_buffer[_last_index].type != NONE) {
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c538:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	440b      	add	r3, r1
 800c546:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <_ZN12Embase3Roues17appendInstructionE6Task_t+0x36>
		// The task queue is full - error
	 	return -1;
 800c550:	f04f 33ff 	mov.w	r3, #4294967295
 800c554:	e030      	b.n	800c5b8 <_ZN12Embase3Roues17appendInstructionE6Task_t+0x98>
	}
	if(task.type == NONE)
 800c556:	7c3b      	ldrb	r3, [r7, #16]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d104      	bne.n	800c566 <_ZN12Embase3Roues17appendInstructionE6Task_t+0x46>
	{
		// Nothing happened
		return _last_index;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c564:	e028      	b.n	800c5b8 <_ZN12Embase3Roues17appendInstructionE6Task_t+0x98>
	}

	copyTask(_task_buffer[_last_index], task);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c56c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c56e:	4613      	mov	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	00db      	lsls	r3, r3, #3
 800c576:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	4413      	add	r3, r2
 800c57e:	f107 0110 	add.w	r1, r7, #16
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff ff78 	bl	800c478 <_Z8copyTaskR6Task_tS0_>

	_last_index = (_last_index + 1) % MAX_TASK_COUNT;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c58e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c8 <_ZN12Embase3Roues17appendInstructionE6Task_t+0xa8>)
 800c594:	fb83 1302 	smull	r1, r3, r3, r2
 800c598:	1159      	asrs	r1, r3, #5
 800c59a:	17d3      	asrs	r3, r2, #31
 800c59c:	1acb      	subs	r3, r1, r3
 800c59e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800c5a2:	fb01 f303 	mul.w	r3, r1, r3
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800c5ae:	6593      	str	r3, [r2, #88]	@ 0x58

	return _last_index;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800c5b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5c2:	b002      	add	sp, #8
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	1b4e81b5 	.word	0x1b4e81b5
 800c5cc:	00000000 	.word	0x00000000

0800c5d0 <_ZN12Embase3Roues7setStepEddd>:


	return _current_index;
}

void Embase3Roues::setStep(double x, double y, double theta) {
 800c5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5d2:	b09d      	sub	sp, #116	@ 0x74
 800c5d4:	af06      	add	r7, sp, #24
 800c5d6:	61f8      	str	r0, [r7, #28]
 800c5d8:	ed87 0b04 	vstr	d0, [r7, #16]
 800c5dc:	ed87 1b02 	vstr	d1, [r7, #8]
 800c5e0:	ed87 2b00 	vstr	d2, [r7]
	//Conversion en m
	x *= 4; //Conversion pour que Set-position(1,0,0) donne une translation de 1m suivant X
 800c5e4:	f04f 0200 	mov.w	r2, #0
 800c5e8:	4bb5      	ldr	r3, [pc, #724]	@ (800c8c0 <_ZN12Embase3Roues7setStepEddd+0x2f0>)
 800c5ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c5ee:	f7f4 f833 	bl	8000658 <__aeabi_dmul>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y *= 4; //Conversion pour que Set-position(0,1,0) donne une translation de 1m suivant Y
 800c5fa:	f04f 0200 	mov.w	r2, #0
 800c5fe:	4bb0      	ldr	r3, [pc, #704]	@ (800c8c0 <_ZN12Embase3Roues7setStepEddd+0x2f0>)
 800c600:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c604:	f7f4 f828 	bl	8000658 <__aeabi_dmul>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	theta *= 0.070777; //Conversion pour que Set_Position(0,0,360) donne une rotation de 360° autour de Z
 800c610:	a3a3      	add	r3, pc, #652	@ (adr r3, 800c8a0 <_ZN12Embase3Roues7setStepEddd+0x2d0>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c61a:	f7f4 f81d 	bl	8000658 <__aeabi_dmul>
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	e9c7 2300 	strd	r2, r3, [r7]

	//Angles en radians
	double theta_a = 1 / Rayon_Roue * (coeff_1x * x * 0.5 - coeff_1y * y * coeff_Y - diametre_embase * theta * coeff_1z);
 800c626:	f04f 0200 	mov.w	r2, #0
 800c62a:	4ba6      	ldr	r3, [pc, #664]	@ (800c8c4 <_ZN12Embase3Roues7setStepEddd+0x2f4>)
 800c62c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c630:	f7f4 f812 	bl	8000658 <__aeabi_dmul>
 800c634:	4602      	mov	r2, r0
 800c636:	460b      	mov	r3, r1
 800c638:	4614      	mov	r4, r2
 800c63a:	461d      	mov	r5, r3
 800c63c:	a39a      	add	r3, pc, #616	@ (adr r3, 800c8a8 <_ZN12Embase3Roues7setStepEddd+0x2d8>)
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c646:	f7f4 f807 	bl	8000658 <__aeabi_dmul>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f3 fe49 	bl	80002e8 <__aeabi_dsub>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4614      	mov	r4, r2
 800c65c:	461d      	mov	r5, r3
 800c65e:	a394      	add	r3, pc, #592	@ (adr r3, 800c8b0 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c664:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c668:	f7f3 fff6 	bl	8000658 <__aeabi_dmul>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	4620      	mov	r0, r4
 800c672:	4629      	mov	r1, r5
 800c674:	f7f3 fe38 	bl	80002e8 <__aeabi_dsub>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4610      	mov	r0, r2
 800c67e:	4619      	mov	r1, r3
 800c680:	a38d      	add	r3, pc, #564	@ (adr r3, 800c8b8 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c686:	f7f3 ffe7 	bl	8000658 <__aeabi_dmul>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double theta_c = 1 / Rayon_Roue * (coeff_3x * x * 0.5 + y * coeff_Y * coeff_3y - diametre_embase * theta * coeff_3z);
 800c692:	f04f 0200 	mov.w	r2, #0
 800c696:	4b8b      	ldr	r3, [pc, #556]	@ (800c8c4 <_ZN12Embase3Roues7setStepEddd+0x2f4>)
 800c698:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c69c:	f7f3 ffdc 	bl	8000658 <__aeabi_dmul>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4614      	mov	r4, r2
 800c6a6:	461d      	mov	r5, r3
 800c6a8:	a37f      	add	r3, pc, #508	@ (adr r3, 800c8a8 <_ZN12Embase3Roues7setStepEddd+0x2d8>)
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6b2:	f7f3 ffd1 	bl	8000658 <__aeabi_dmul>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	4629      	mov	r1, r5
 800c6be:	f7f3 fe15 	bl	80002ec <__adddf3>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4614      	mov	r4, r2
 800c6c8:	461d      	mov	r5, r3
 800c6ca:	a379      	add	r3, pc, #484	@ (adr r3, 800c8b0 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6d4:	f7f3 ffc0 	bl	8000658 <__aeabi_dmul>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 fe02 	bl	80002e8 <__aeabi_dsub>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	a372      	add	r3, pc, #456	@ (adr r3, 800c8b8 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	f7f3 ffb1 	bl	8000658 <__aeabi_dmul>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double theta_b = 1 / Rayon_Roue * (coeff_2x * 1 * x - diametre_embase * theta * coeff_2z);
 800c6fe:	a36c      	add	r3, pc, #432	@ (adr r3, 800c8b0 <_ZN12Embase3Roues7setStepEddd+0x2e0>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c708:	f7f3 ffa6 	bl	8000658 <__aeabi_dmul>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c714:	f7f3 fde8 	bl	80002e8 <__aeabi_dsub>
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	4610      	mov	r0, r2
 800c71e:	4619      	mov	r1, r3
 800c720:	a365      	add	r3, pc, #404	@ (adr r3, 800c8b8 <_ZN12Embase3Roues7setStepEddd+0x2e8>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f3 ff97 	bl	8000658 <__aeabi_dmul>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double step_a = rad_to_step(theta_a);
 800c732:	69fc      	ldr	r4, [r7, #28]
 800c734:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800c738:	f7f4 fa86 	bl	8000c48 <__aeabi_d2f>
 800c73c:	4603      	mov	r3, r0
 800c73e:	ee00 3a10 	vmov	s0, r3
 800c742:	4620      	mov	r0, r4
 800c744:	f7f5 fe42 	bl	80023cc <_ZN11BlocMoteurs11rad_to_stepEf>
 800c748:	ee10 3a10 	vmov	r3, s0
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7f3 ff2b 	bl	80005a8 <__aeabi_f2d>
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double step_b = rad_to_step(theta_b);
 800c75a:	69fc      	ldr	r4, [r7, #28]
 800c75c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c760:	f7f4 fa72 	bl	8000c48 <__aeabi_d2f>
 800c764:	4603      	mov	r3, r0
 800c766:	ee00 3a10 	vmov	s0, r3
 800c76a:	4620      	mov	r0, r4
 800c76c:	f7f5 fe2e 	bl	80023cc <_ZN11BlocMoteurs11rad_to_stepEf>
 800c770:	ee10 3a10 	vmov	r3, s0
 800c774:	4618      	mov	r0, r3
 800c776:	f7f3 ff17 	bl	80005a8 <__aeabi_f2d>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double step_c = rad_to_step(theta_c);
 800c782:	69fc      	ldr	r4, [r7, #28]
 800c784:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c788:	f7f4 fa5e 	bl	8000c48 <__aeabi_d2f>
 800c78c:	4603      	mov	r3, r0
 800c78e:	ee00 3a10 	vmov	s0, r3
 800c792:	4620      	mov	r0, r4
 800c794:	f7f5 fe1a 	bl	80023cc <_ZN11BlocMoteurs11rad_to_stepEf>
 800c798:	ee10 3a10 	vmov	r3, s0
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7f3 ff03 	bl	80005a8 <__aeabi_f2d>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	StepperMotor::direction_t dir_a = FWD;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	StepperMotor::direction_t dir_b = FWD;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	StepperMotor::direction_t dir_c = FWD;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	//Gestion des directions par défaut: avancer sinon, si nb de step negatif, inversion du nb de steps et direction arriere
	if (step_a < 0) {
 800c7bc:	f04f 0200 	mov.w	r2, #0
 800c7c0:	f04f 0300 	mov.w	r3, #0
 800c7c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c7c8:	f7f4 f9b8 	bl	8000b3c <__aeabi_dcmplt>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00e      	beq.n	800c7f0 <_ZN12Embase3Roues7setStepEddd+0x220>
		step_a = 0 - step_a;
 800c7d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c7d6:	f04f 0000 	mov.w	r0, #0
 800c7da:	f04f 0100 	mov.w	r1, #0
 800c7de:	f7f3 fd83 	bl	80002e8 <__aeabi_dsub>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		dir_a = BWD;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
	if (step_b < 0) {
 800c7f0:	f04f 0200 	mov.w	r2, #0
 800c7f4:	f04f 0300 	mov.w	r3, #0
 800c7f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c7fc:	f7f4 f99e 	bl	8000b3c <__aeabi_dcmplt>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00e      	beq.n	800c824 <_ZN12Embase3Roues7setStepEddd+0x254>
		step_b = 0 - step_b;
 800c806:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c80a:	f04f 0000 	mov.w	r0, #0
 800c80e:	f04f 0100 	mov.w	r1, #0
 800c812:	f7f3 fd69 	bl	80002e8 <__aeabi_dsub>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		dir_b = BWD;
 800c81e:	2300      	movs	r3, #0
 800c820:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	}
	if (step_c < 0) {
 800c824:	f04f 0200 	mov.w	r2, #0
 800c828:	f04f 0300 	mov.w	r3, #0
 800c82c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c830:	f7f4 f984 	bl	8000b3c <__aeabi_dcmplt>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00e      	beq.n	800c858 <_ZN12Embase3Roues7setStepEddd+0x288>
		step_c = 0 - step_c;
 800c83a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c83e:	f04f 0000 	mov.w	r0, #0
 800c842:	f04f 0100 	mov.w	r1, #0
 800c846:	f7f3 fd4f 	bl	80002e8 <__aeabi_dsub>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		dir_c = BWD;
 800c852:	2300      	movs	r3, #0
 800c854:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	}

	if (step_a || step_b || step_c)
 800c858:	f04f 0200 	mov.w	r2, #0
 800c85c:	f04f 0300 	mov.w	r3, #0
 800c860:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c864:	f7f4 f960 	bl	8000b28 <__aeabi_dcmpeq>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d031      	beq.n	800c8d2 <_ZN12Embase3Roues7setStepEddd+0x302>
 800c86e:	f04f 0200 	mov.w	r2, #0
 800c872:	f04f 0300 	mov.w	r3, #0
 800c876:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c87a:	f7f4 f955 	bl	8000b28 <__aeabi_dcmpeq>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d026      	beq.n	800c8d2 <_ZN12Embase3Roues7setStepEddd+0x302>
 800c884:	f04f 0200 	mov.w	r2, #0
 800c888:	f04f 0300 	mov.w	r3, #0
 800c88c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c890:	f7f4 f94a 	bl	8000b28 <__aeabi_dcmpeq>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d150      	bne.n	800c93c <_ZN12Embase3Roues7setStepEddd+0x36c>
	{
		while(!movement_allowed)
 800c89a:	e01a      	b.n	800c8d2 <_ZN12Embase3Roues7setStepEddd+0x302>
 800c89c:	f3af 8000 	nop.w
 800c8a0:	044f1a1a 	.word	0x044f1a1a
 800c8a4:	3fb21e71 	.word	0x3fb21e71
 800c8a8:	e875ed0f 	.word	0xe875ed0f
 800c8ac:	3febb67a 	.word	0x3febb67a
 800c8b0:	0a3d70a4 	.word	0x0a3d70a4
 800c8b4:	3fc0a3d7 	.word	0x3fc0a3d7
 800c8b8:	a2e8ba2f 	.word	0xa2e8ba2f
 800c8bc:	40322e8b 	.word	0x40322e8b
 800c8c0:	40100000 	.word	0x40100000
 800c8c4:	3fe00000 	.word	0x3fe00000
		{
			if(get_out_step)
 800c8c8:	4b1e      	ldr	r3, [pc, #120]	@ (800c944 <_ZN12Embase3Roues7setStepEddd+0x374>)
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d133      	bne.n	800c93a <_ZN12Embase3Roues7setStepEddd+0x36a>
		while(!movement_allowed)
 800c8d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c948 <_ZN12Embase3Roues7setStepEddd+0x378>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	f083 0301 	eor.w	r3, r3, #1
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1f2      	bne.n	800c8c8 <_ZN12Embase3Roues7setStepEddd+0x2f8>
			{
				return;
			}
		}
		motors_busy = true;
 800c8e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c94c <_ZN12Embase3Roues7setStepEddd+0x37c>)
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	701a      	strb	r2, [r3, #0]
		commande_step_indiv(step_a, dir_a, step_b, dir_b, step_c, dir_c, 0, FWD);
 800c8e8:	69fc      	ldr	r4, [r7, #28]
 800c8ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c8ee:	f7f4 f98b 	bl	8000c08 <__aeabi_d2uiz>
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c8f8:	f7f4 f986 	bl	8000c08 <__aeabi_d2uiz>
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c902:	f7f4 f981 	bl	8000c08 <__aeabi_d2uiz>
 800c906:	4601      	mov	r1, r0
 800c908:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c90c:	2301      	movs	r3, #1
 800c90e:	9304      	str	r3, [sp, #16]
 800c910:	2300      	movs	r3, #0
 800c912:	9303      	str	r3, [sp, #12]
 800c914:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c918:	9302      	str	r3, [sp, #8]
 800c91a:	9101      	str	r1, [sp, #4]
 800c91c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	4633      	mov	r3, r6
 800c924:	4629      	mov	r1, r5
 800c926:	4620      	mov	r0, r4
 800c928:	f7f5 febf 	bl	80026aa <_ZN11BlocMoteurs19commande_step_indivEjN12StepperMotor11direction_tEjS1_jS1_jS1_>
		while(motors_busy); // Wait for motors to be off.
 800c92c:	bf00      	nop
 800c92e:	4b07      	ldr	r3, [pc, #28]	@ (800c94c <_ZN12Embase3Roues7setStepEddd+0x37c>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1fa      	bne.n	800c92e <_ZN12Embase3Roues7setStepEddd+0x35e>
 800c938:	e000      	b.n	800c93c <_ZN12Embase3Roues7setStepEddd+0x36c>
				return;
 800c93a:	bf00      	nop
	}

}
 800c93c:	375c      	adds	r7, #92	@ 0x5c
 800c93e:	46bd      	mov	sp, r7
 800c940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c942:	bf00      	nop
 800c944:	2000055c 	.word	0x2000055c
 800c948:	20000559 	.word	0x20000559
 800c94c:	20000558 	.word	0x20000558

0800c950 <_ZN12Embase3Roues9translateEdd>:

void Embase3Roues::translate(double x, double y) {
 800c950:	b5b0      	push	{r4, r5, r7, lr}
 800c952:	b08e      	sub	sp, #56	@ 0x38
 800c954:	af00      	add	r7, sp, #0
 800c956:	6278      	str	r0, [r7, #36]	@ 0x24
 800c958:	ed87 0b06 	vstr	d0, [r7, #24]
 800c95c:	ed87 1b04 	vstr	d1, [r7, #16]

	// passage en coordonnées polaires.
	double distance = 0;
 800c960:	f04f 0200 	mov.w	r2, #0
 800c964:	f04f 0300 	mov.w	r3, #0
 800c968:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double theta = 0;
 800c96c:	f04f 0200 	mov.w	r2, #0
 800c970:	f04f 0300 	mov.w	r3, #0
 800c974:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if((y == 0)&&(x != 0))
 800c978:	f04f 0200 	mov.w	r2, #0
 800c97c:	f04f 0300 	mov.w	r3, #0
 800c980:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c984:	f7f4 f8d0 	bl	8000b28 <__aeabi_dcmpeq>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d02b      	beq.n	800c9e6 <_ZN12Embase3Roues9translateEdd+0x96>
 800c98e:	f04f 0200 	mov.w	r2, #0
 800c992:	f04f 0300 	mov.w	r3, #0
 800c996:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c99a:	f7f4 f8c5 	bl	8000b28 <__aeabi_dcmpeq>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d120      	bne.n	800c9e6 <_ZN12Embase3Roues9translateEdd+0x96>
	{
		if(x < 0)
 800c9a4:	f04f 0200 	mov.w	r2, #0
 800c9a8:	f04f 0300 	mov.w	r3, #0
 800c9ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c9b0:	f7f4 f8c4 	bl	8000b3c <__aeabi_dcmplt>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00b      	beq.n	800c9d2 <_ZN12Embase3Roues9translateEdd+0x82>
		{
			theta = 90;
 800c9ba:	f04f 0200 	mov.w	r2, #0
 800c9be:	4b8c      	ldr	r3, [pc, #560]	@ (800cbf0 <_ZN12Embase3Roues9translateEdd+0x2a0>)
 800c9c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = -x;
 800c9c4:	69bc      	ldr	r4, [r7, #24]
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800c9cc:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
		if(x < 0)
 800c9d0:	e07a      	b.n	800cac8 <_ZN12Embase3Roues9translateEdd+0x178>

		}
		else
		{
			theta = 90;
 800c9d2:	f04f 0200 	mov.w	r2, #0
 800c9d6:	4b86      	ldr	r3, [pc, #536]	@ (800cbf0 <_ZN12Embase3Roues9translateEdd+0x2a0>)
 800c9d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = x;
 800c9dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(x < 0)
 800c9e4:	e070      	b.n	800cac8 <_ZN12Embase3Roues9translateEdd+0x178>

		}

	}
	else if((y != 0) && (x == 0))
 800c9e6:	f04f 0200 	mov.w	r2, #0
 800c9ea:	f04f 0300 	mov.w	r3, #0
 800c9ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c9f2:	f7f4 f899 	bl	8000b28 <__aeabi_dcmpeq>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d12b      	bne.n	800ca54 <_ZN12Embase3Roues9translateEdd+0x104>
 800c9fc:	f04f 0200 	mov.w	r2, #0
 800ca00:	f04f 0300 	mov.w	r3, #0
 800ca04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca08:	f7f4 f88e 	bl	8000b28 <__aeabi_dcmpeq>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d020      	beq.n	800ca54 <_ZN12Embase3Roues9translateEdd+0x104>
	{
		if(y < 0)
 800ca12:	f04f 0200 	mov.w	r2, #0
 800ca16:	f04f 0300 	mov.w	r3, #0
 800ca1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ca1e:	f7f4 f88d 	bl	8000b3c <__aeabi_dcmplt>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00a      	beq.n	800ca3e <_ZN12Embase3Roues9translateEdd+0xee>
		{
			theta = 0;
 800ca28:	f04f 0200 	mov.w	r2, #0
 800ca2c:	f04f 0300 	mov.w	r3, #0
 800ca30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = y;
 800ca34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca38:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(y < 0)
 800ca3c:	e044      	b.n	800cac8 <_ZN12Embase3Roues9translateEdd+0x178>

		}
		else
		{
			theta = 0;
 800ca3e:	f04f 0200 	mov.w	r2, #0
 800ca42:	f04f 0300 	mov.w	r3, #0
 800ca46:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			distance = y;
 800ca4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if(y < 0)
 800ca52:	e039      	b.n	800cac8 <_ZN12Embase3Roues9translateEdd+0x178>

		}
	}
	else
	{
		distance = sqrt(pow(x * Coeff_erreur_x, 2) + pow(y * Coeff_erreur_y, 2));//Distance à parcourir en m
 800ca54:	ed9f 1b5c 	vldr	d1, [pc, #368]	@ 800cbc8 <_ZN12Embase3Roues9translateEdd+0x278>
 800ca58:	ed97 0b06 	vldr	d0, [r7, #24]
 800ca5c:	f006 fc06 	bl	801326c <pow>
 800ca60:	ec55 4b10 	vmov	r4, r5, d0
 800ca64:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 800cbc8 <_ZN12Embase3Roues9translateEdd+0x278>
 800ca68:	ed97 0b04 	vldr	d0, [r7, #16]
 800ca6c:	f006 fbfe 	bl	801326c <pow>
 800ca70:	ec53 2b10 	vmov	r2, r3, d0
 800ca74:	4620      	mov	r0, r4
 800ca76:	4629      	mov	r1, r5
 800ca78:	f7f3 fc38 	bl	80002ec <__adddf3>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	ec43 2b17 	vmov	d7, r2, r3
 800ca84:	eeb0 0a47 	vmov.f32	s0, s14
 800ca88:	eef0 0a67 	vmov.f32	s1, s15
 800ca8c:	f006 fc5e 	bl	801334c <sqrt>
 800ca90:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
		theta = atan2(x, y) * 180.0 / M_PI;//Angle vers lequel s'orienté en °
 800ca94:	ed97 1b04 	vldr	d1, [r7, #16]
 800ca98:	ed97 0b06 	vldr	d0, [r7, #24]
 800ca9c:	f006 fbe4 	bl	8013268 <atan2>
 800caa0:	ec51 0b10 	vmov	r0, r1, d0
 800caa4:	f04f 0200 	mov.w	r2, #0
 800caa8:	4b52      	ldr	r3, [pc, #328]	@ (800cbf4 <_ZN12Embase3Roues9translateEdd+0x2a4>)
 800caaa:	f7f3 fdd5 	bl	8000658 <__aeabi_dmul>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	4610      	mov	r0, r2
 800cab4:	4619      	mov	r1, r3
 800cab6:	a346      	add	r3, pc, #280	@ (adr r3, 800cbd0 <_ZN12Embase3Roues9translateEdd+0x280>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	f7f3 fef6 	bl	80008ac <__aeabi_ddiv>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	}

	// Execution des mouvements
	rotate(theta); // Rotation initiale
 800cac8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800cacc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cace:	f000 f897 	bl	800cc00 <_ZN12Embase3Roues6rotateEd>

	while(fabs(distance) > BASE_MOVEMENT_DIST_M)
 800cad2:	e047      	b.n	800cb64 <_ZN12Embase3Roues9translateEdd+0x214>
	{
		while(!movement_allowed);
 800cad4:	bf00      	nop
 800cad6:	4b48      	ldr	r3, [pc, #288]	@ (800cbf8 <_ZN12Embase3Roues9translateEdd+0x2a8>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	f083 0301 	eor.w	r3, r3, #1
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1f7      	bne.n	800cad6 <_ZN12Embase3Roues9translateEdd+0x186>
		if(distance>0){
 800cae6:	f04f 0200 	mov.w	r2, #0
 800caea:	f04f 0300 	mov.w	r3, #0
 800caee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800caf2:	f7f4 f841 	bl	8000b78 <__aeabi_dcmpgt>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d014      	beq.n	800cb26 <_ZN12Embase3Roues9translateEdd+0x1d6>
			distance -= BASE_MOVEMENT_DIST_M;
 800cafc:	a336      	add	r3, pc, #216	@ (adr r3, 800cbd8 <_ZN12Embase3Roues9translateEdd+0x288>)
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800cb06:	f7f3 fbef 	bl	80002e8 <__aeabi_dsub>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			setStep(0, BASE_MOVEMENT_DIST_M, 0); // Découpage des mouvements
 800cb12:	ed9f 2b33 	vldr	d2, [pc, #204]	@ 800cbe0 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb16:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 800cbd8 <_ZN12Embase3Roues9translateEdd+0x288>
 800cb1a:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 800cbe0 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb20:	f7ff fd56 	bl	800c5d0 <_ZN12Embase3Roues7setStepEddd>
 800cb24:	e01e      	b.n	800cb64 <_ZN12Embase3Roues9translateEdd+0x214>

		}
		else if(distance<0){
 800cb26:	f04f 0200 	mov.w	r2, #0
 800cb2a:	f04f 0300 	mov.w	r3, #0
 800cb2e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800cb32:	f7f4 f803 	bl	8000b3c <__aeabi_dcmplt>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d013      	beq.n	800cb64 <_ZN12Embase3Roues9translateEdd+0x214>
			distance += BASE_MOVEMENT_DIST_M;
 800cb3c:	a326      	add	r3, pc, #152	@ (adr r3, 800cbd8 <_ZN12Embase3Roues9translateEdd+0x288>)
 800cb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800cb46:	f7f3 fbd1 	bl	80002ec <__adddf3>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			setStep(0, -BASE_MOVEMENT_DIST_M, 0); // Découpage des mouvements
 800cb52:	ed9f 2b23 	vldr	d2, [pc, #140]	@ 800cbe0 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb56:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 800cbe8 <_ZN12Embase3Roues9translateEdd+0x298>
 800cb5a:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 800cbe0 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb60:	f7ff fd36 	bl	800c5d0 <_ZN12Embase3Roues7setStepEddd>
	while(fabs(distance) > BASE_MOVEMENT_DIST_M)
 800cb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb66:	60bb      	str	r3, [r7, #8]
 800cb68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb6e:	60fb      	str	r3, [r7, #12]
 800cb70:	a319      	add	r3, pc, #100	@ (adr r3, 800cbd8 <_ZN12Embase3Roues9translateEdd+0x288>)
 800cb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb7a:	f7f3 fffd 	bl	8000b78 <__aeabi_dcmpgt>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1a7      	bne.n	800cad4 <_ZN12Embase3Roues9translateEdd+0x184>

		}
	}

	while(!movement_allowed);
 800cb84:	bf00      	nop
 800cb86:	4b1c      	ldr	r3, [pc, #112]	@ (800cbf8 <_ZN12Embase3Roues9translateEdd+0x2a8>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f083 0301 	eor.w	r3, r3, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1f7      	bne.n	800cb86 <_ZN12Embase3Roues9translateEdd+0x236>
	//printf("%f\r\n",distance);
	setStep(0, distance, 0); // Mouvement final
 800cb96:	ed9f 2b12 	vldr	d2, [pc, #72]	@ 800cbe0 <_ZN12Embase3Roues9translateEdd+0x290>
 800cb9a:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800cb9e:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 800cbe0 <_ZN12Embase3Roues9translateEdd+0x290>
 800cba2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cba4:	f7ff fd14 	bl	800c5d0 <_ZN12Embase3Roues7setStepEddd>

	rotate(-theta);
 800cba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbaa:	603b      	str	r3, [r7, #0]
 800cbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800cbb2:	607b      	str	r3, [r7, #4]
 800cbb4:	ed97 0b00 	vldr	d0, [r7]
 800cbb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbba:	f000 f821 	bl	800cc00 <_ZN12Embase3Roues6rotateEd>
}
 800cbbe:	bf00      	nop
 800cbc0:	3738      	adds	r7, #56	@ 0x38
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bdb0      	pop	{r4, r5, r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	00000000 	.word	0x00000000
 800cbcc:	40000000 	.word	0x40000000
 800cbd0:	54442d18 	.word	0x54442d18
 800cbd4:	400921fb 	.word	0x400921fb
 800cbd8:	9999999a 	.word	0x9999999a
 800cbdc:	3fa99999 	.word	0x3fa99999
	...
 800cbe8:	9999999a 	.word	0x9999999a
 800cbec:	bfa99999 	.word	0xbfa99999
 800cbf0:	40568000 	.word	0x40568000
 800cbf4:	40668000 	.word	0x40668000
 800cbf8:	20000559 	.word	0x20000559
 800cbfc:	00000000 	.word	0x00000000

0800cc00 <_ZN12Embase3Roues6rotateEd>:

void Embase3Roues::rotate(double theta) {
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	ed87 0b00 	vstr	d0, [r7]
	setStep(0, 0, theta * Coeff_erreur_z);
 800cc0c:	f04f 0200 	mov.w	r2, #0
 800cc10:	4b13      	ldr	r3, [pc, #76]	@ (800cc60 <_ZN12Embase3Roues6rotateEd+0x60>)
 800cc12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc16:	f7f3 fd1f 	bl	8000658 <__aeabi_dmul>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4610      	mov	r0, r2
 800cc20:	4619      	mov	r1, r3
 800cc22:	f04f 0200 	mov.w	r2, #0
 800cc26:	4b0f      	ldr	r3, [pc, #60]	@ (800cc64 <_ZN12Embase3Roues6rotateEd+0x64>)
 800cc28:	f7f3 fe40 	bl	80008ac <__aeabi_ddiv>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	ec43 2b17 	vmov	d7, r2, r3
 800cc34:	eeb0 2a47 	vmov.f32	s4, s14
 800cc38:	eef0 2a67 	vmov.f32	s5, s15
 800cc3c:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 800cc58 <_ZN12Embase3Roues6rotateEd+0x58>
 800cc40:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800cc58 <_ZN12Embase3Roues6rotateEd+0x58>
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f7ff fcc3 	bl	800c5d0 <_ZN12Embase3Roues7setStepEddd>
}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	f3af 8000 	nop.w
	...
 800cc60:	40468000 	.word	0x40468000
 800cc64:	40460000 	.word	0x40460000

0800cc68 <_ZN12Embase3Roues12moveRelativeEddd>:

void Embase3Roues::moveRelative(double x, double y, double theta) {
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	61f8      	str	r0, [r7, #28]
 800cc70:	ed87 0b04 	vstr	d0, [r7, #16]
 800cc74:	ed87 1b02 	vstr	d1, [r7, #8]
 800cc78:	ed87 2b00 	vstr	d2, [r7]
	motors_on();
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7f5 fdbf 	bl	8002802 <_ZN11BlocMoteurs9motors_onEv>
	translate(x, y);
 800cc84:	ed97 1b02 	vldr	d1, [r7, #8]
 800cc88:	ed97 0b04 	vldr	d0, [r7, #16]
 800cc8c:	69f8      	ldr	r0, [r7, #28]
 800cc8e:	f7ff fe5f 	bl	800c950 <_ZN12Embase3Roues9translateEdd>
	rotate(theta);
 800cc92:	ed97 0b00 	vldr	d0, [r7]
 800cc96:	69f8      	ldr	r0, [r7, #28]
 800cc98:	f7ff ffb2 	bl	800cc00 <_ZN12Embase3Roues6rotateEd>
	get_out_step = false;
 800cc9c:	4b05      	ldr	r3, [pc, #20]	@ (800ccb4 <_ZN12Embase3Roues12moveRelativeEddd+0x4c>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	701a      	strb	r2, [r3, #0]
	motors_stop_hard();
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7f5 fdb9 	bl	800281c <_ZN11BlocMoteurs16motors_stop_hardEv>
}
 800ccaa:	bf00      	nop
 800ccac:	3720      	adds	r7, #32
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	2000055c 	.word	0x2000055c

0800ccb8 <_ZN12Embase3Roues4waitEm>:

void Embase3Roues::wait(uint32_t delay_ms) {
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
	motors_stop_hard();
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7f5 fda9 	bl	800281c <_ZN11BlocMoteurs16motors_stop_hardEv>
	if (delay_ms == 0)
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10c      	bne.n	800ccea <_ZN12Embase3Roues4waitEm+0x32>
	{
		movement_allowed = false;
 800ccd0:	4b09      	ldr	r3, [pc, #36]	@ (800ccf8 <_ZN12Embase3Roues4waitEm+0x40>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	701a      	strb	r2, [r3, #0]
		while(!movement_allowed);
 800ccd6:	bf00      	nop
 800ccd8:	4b07      	ldr	r3, [pc, #28]	@ (800ccf8 <_ZN12Embase3Roues4waitEm+0x40>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	f083 0301 	eor.w	r3, r3, #1
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1f7      	bne.n	800ccd8 <_ZN12Embase3Roues4waitEm+0x20>
	}
	else{
		HAL_Delay(delay_ms);
	}
}
 800cce8:	e002      	b.n	800ccf0 <_ZN12Embase3Roues4waitEm+0x38>
		HAL_Delay(delay_ms);
 800ccea:	6838      	ldr	r0, [r7, #0]
 800ccec:	f001 fb5e 	bl	800e3ac <HAL_Delay>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	20000559 	.word	0x20000559
 800ccfc:	00000000 	.word	0x00000000

0800cd00 <_ZN12Embase3Roues9moveSpeedEddd>:


/*Fonctions pour la commande en vitesse*/

void Embase3Roues::moveSpeed(double vx, double vy, double wz)
{
 800cd00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cd04:	b090      	sub	sp, #64	@ 0x40
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	61f8      	str	r0, [r7, #28]
 800cd0a:	ed87 0b04 	vstr	d0, [r7, #16]
 800cd0e:	ed87 1b02 	vstr	d1, [r7, #8]
 800cd12:	ed87 2b00 	vstr	d2, [r7]
	const double d = 0.13; //m
 800cd16:	a346      	add	r3, pc, #280	@ (adr r3, 800ce30 <_ZN12Embase3Roues9moveSpeedEddd+0x130>)
 800cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	//calcul des vitesses
	double Vaf = 0.5*vx - sqrt(3)/2*vy - d*wz;
 800cd20:	f04f 0200 	mov.w	r2, #0
 800cd24:	4b44      	ldr	r3, [pc, #272]	@ (800ce38 <_ZN12Embase3Roues9moveSpeedEddd+0x138>)
 800cd26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cd2a:	f7f3 fc95 	bl	8000658 <__aeabi_dmul>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4690      	mov	r8, r2
 800cd34:	4699      	mov	r9, r3
 800cd36:	a33c      	add	r3, pc, #240	@ (adr r3, 800ce28 <_ZN12Embase3Roues9moveSpeedEddd+0x128>)
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd40:	f7f3 fc8a 	bl	8000658 <__aeabi_dmul>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	4640      	mov	r0, r8
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	f7f3 facc 	bl	80002e8 <__aeabi_dsub>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	4690      	mov	r8, r2
 800cd56:	4699      	mov	r9, r3
 800cd58:	a335      	add	r3, pc, #212	@ (adr r3, 800ce30 <_ZN12Embase3Roues9moveSpeedEddd+0x130>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd62:	f7f3 fc79 	bl	8000658 <__aeabi_dmul>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	f7f3 fabb 	bl	80002e8 <__aeabi_dsub>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double Vbf = 0.5*vx + sqrt(3)/2*vy - d*wz;
 800cd7a:	f04f 0200 	mov.w	r2, #0
 800cd7e:	4b2e      	ldr	r3, [pc, #184]	@ (800ce38 <_ZN12Embase3Roues9moveSpeedEddd+0x138>)
 800cd80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cd84:	f7f3 fc68 	bl	8000658 <__aeabi_dmul>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	4690      	mov	r8, r2
 800cd8e:	4699      	mov	r9, r3
 800cd90:	a325      	add	r3, pc, #148	@ (adr r3, 800ce28 <_ZN12Embase3Roues9moveSpeedEddd+0x128>)
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd9a:	f7f3 fc5d 	bl	8000658 <__aeabi_dmul>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	460b      	mov	r3, r1
 800cda2:	4640      	mov	r0, r8
 800cda4:	4649      	mov	r1, r9
 800cda6:	f7f3 faa1 	bl	80002ec <__adddf3>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	460b      	mov	r3, r1
 800cdae:	4690      	mov	r8, r2
 800cdb0:	4699      	mov	r9, r3
 800cdb2:	a31f      	add	r3, pc, #124	@ (adr r3, 800ce30 <_ZN12Embase3Roues9moveSpeedEddd+0x130>)
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdbc:	f7f3 fc4c 	bl	8000658 <__aeabi_dmul>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	f7f3 fa8e 	bl	80002e8 <__aeabi_dsub>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double Vcf = -vx - d*wz;
 800cdd4:	693c      	ldr	r4, [r7, #16]
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800cddc:	a314      	add	r3, pc, #80	@ (adr r3, 800ce30 <_ZN12Embase3Roues9moveSpeedEddd+0x130>)
 800cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cde6:	f7f3 fc37 	bl	8000658 <__aeabi_dmul>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	4620      	mov	r0, r4
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	f7f3 fa79 	bl	80002e8 <__aeabi_dsub>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//pilotage des moteurs
	motors_on();
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7f5 fcfe 	bl	8002802 <_ZN11BlocMoteurs9motors_onEv>
	commande_vitesses_normalisees(1, 0, 0, 0);
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 800ce3c <_ZN12Embase3Roues9moveSpeedEddd+0x13c>
 800ce0c:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 800ce3c <_ZN12Embase3Roues9moveSpeedEddd+0x13c>
 800ce10:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800ce3c <_ZN12Embase3Roues9moveSpeedEddd+0x13c>
 800ce14:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7f5 faef 	bl	80023fc <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>
}
 800ce1e:	bf00      	nop
 800ce20:	3740      	adds	r7, #64	@ 0x40
 800ce22:	46bd      	mov	sp, r7
 800ce24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ce28:	e8584caa 	.word	0xe8584caa
 800ce2c:	3febb67a 	.word	0x3febb67a
 800ce30:	0a3d70a4 	.word	0x0a3d70a4
 800ce34:	3fc0a3d7 	.word	0x3fc0a3d7
 800ce38:	3fe00000 	.word	0x3fe00000
 800ce3c:	00000000 	.word	0x00000000

0800ce40 <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	4a04      	ldr	r2, [pc, #16]	@ (800ce5c <_ZN13abstractL6470C1Ev+0x1c>)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	601a      	str	r2, [r3, #0]
{

}
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	0801817c 	.word	0x0801817c

0800ce60 <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	4a04      	ldr	r2, [pc, #16]	@ (800ce7c <_ZN13abstractL6470D1Ev+0x1c>)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	601a      	str	r2, [r3, #0]
{

}
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	0801817c 	.word	0x0801817c

0800ce80 <_ZN12Embase3RouesCI111BlocMoteursEP19__SPI_HandleTypeDefP12GPIO_TypeDeftS4_tS4_tS4_t>:
};

class Embase3Roues : public BlocMoteurs
{
public:
	using BlocMoteurs::BlocMoteurs;
 800ce80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce82:	b08d      	sub	sp, #52	@ 0x34
 800ce84:	af06      	add	r7, sp, #24
 800ce86:	6178      	str	r0, [r7, #20]
 800ce88:	6139      	str	r1, [r7, #16]
 800ce8a:	60fa      	str	r2, [r7, #12]
 800ce8c:	817b      	strh	r3, [r7, #10]
 800ce8e:	697e      	ldr	r6, [r7, #20]
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	607b      	str	r3, [r7, #4]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	603a      	str	r2, [r7, #0]
 800ce98:	f8b7 c00a 	ldrh.w	ip, [r7, #10]
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800cea0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cea2:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 800cea4:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800cea6:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 800ceaa:	9505      	str	r5, [sp, #20]
 800ceac:	9404      	str	r4, [sp, #16]
 800ceae:	9003      	str	r0, [sp, #12]
 800ceb0:	9102      	str	r1, [sp, #8]
 800ceb2:	9201      	str	r2, [sp, #4]
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	4663      	mov	r3, ip
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	6879      	ldr	r1, [r7, #4]
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7f5 f9f1 	bl	80022a4 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800cec8:	461a      	mov	r2, r3
 800ceca:	2300      	movs	r3, #0
 800cecc:	6593      	str	r3, [r2, #88]	@ 0x58
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800ced4:	461a      	mov	r2, r3
 800ced6:	2300      	movs	r3, #0
 800ced8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	4618      	mov	r0, r3
 800cede:	371c      	adds	r7, #28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cee4:	0000      	movs	r0, r0
	...

0800cee8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800cee8:	b5b0      	push	{r4, r5, r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800ceee:	f001 f9eb 	bl	800e2c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800cef2:	f000 f8a7 	bl	800d044 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800cef6:	f000 fc73 	bl	800d7e0 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 800cefa:	f000 fc15 	bl	800d728 <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 800cefe:	f000 fa43 	bl	800d388 <_ZL12MX_TIM2_Initv>
	MX_SPI1_Init();
 800cf02:	f000 f921 	bl	800d148 <_ZL12MX_SPI1_Initv>
	MX_SPI2_Init();
 800cf06:	f000 f95b 	bl	800d1c0 <_ZL12MX_SPI2_Initv>
	MX_TIM1_Init();
 800cf0a:	f000 f995 	bl	800d238 <_ZL12MX_TIM1_Initv>
	MX_TIM4_Init();
 800cf0e:	f000 facb 	bl	800d4a8 <_ZL12MX_TIM4_Initv>
	MX_TIM8_Init();
 800cf12:	f000 fb71 	bl	800d5f8 <_ZL12MX_TIM8_Initv>
	MX_USART3_UART_Init();
 800cf16:	f000 fc35 	bl	800d784 <_ZL19MX_USART3_UART_Initv>
	MX_TIM6_Init();
 800cf1a:	f000 fb2d 	bl	800d578 <_ZL12MX_TIM6_Initv>
	/* USER CODE BEGIN 2 */

	//Start Timer2 interrupt (every 20 ms here)
	HAL_TIM_Base_Start_IT(&htim2);
 800cf1e:	4840      	ldr	r0, [pc, #256]	@ (800d020 <main+0x138>)
 800cf20:	f003 fb14 	bl	801054c <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800cf24:	2201      	movs	r2, #1
 800cf26:	493f      	ldr	r1, [pc, #252]	@ (800d024 <main+0x13c>)
 800cf28:	483f      	ldr	r0, [pc, #252]	@ (800d028 <main+0x140>)
 800cf2a:	f004 fb34 	bl	8011596 <HAL_UART_Receive_IT>
			ssel2_Pin); */

	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
			reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
			reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port,
			ssel2_Pin);
 800cf2e:	f243 0060 	movw	r0, #12384	@ 0x3060
 800cf32:	f005 ff8b 	bl	8012e4c <_Znwj>
 800cf36:	4603      	mov	r3, r0
 800cf38:	461c      	mov	r4, r3
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800cf3a:	2501      	movs	r5, #1
			ssel2_Pin);
 800cf3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf40:	9305      	str	r3, [sp, #20]
 800cf42:	4b3a      	ldr	r3, [pc, #232]	@ (800d02c <main+0x144>)
 800cf44:	9304      	str	r3, [sp, #16]
 800cf46:	2310      	movs	r3, #16
 800cf48:	9303      	str	r3, [sp, #12]
 800cf4a:	4b39      	ldr	r3, [pc, #228]	@ (800d030 <main+0x148>)
 800cf4c:	9302      	str	r3, [sp, #8]
 800cf4e:	2310      	movs	r3, #16
 800cf50:	9301      	str	r3, [sp, #4]
 800cf52:	4b36      	ldr	r3, [pc, #216]	@ (800d02c <main+0x144>)
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	2320      	movs	r3, #32
 800cf58:	4a35      	ldr	r2, [pc, #212]	@ (800d030 <main+0x148>)
 800cf5a:	4936      	ldr	r1, [pc, #216]	@ (800d034 <main+0x14c>)
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f7ff ff8f 	bl	800ce80 <_ZN12Embase3RouesCI111BlocMoteursEP19__SPI_HandleTypeDefP12GPIO_TypeDeftS4_tS4_tS4_t>
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800cf62:	4b35      	ldr	r3, [pc, #212]	@ (800d038 <main+0x150>)
 800cf64:	601c      	str	r4, [r3, #0]


	embase->set_microstepping_mode(step_mode_t::STEP_MODE_HALF);
 800cf66:	4b34      	ldr	r3, [pc, #208]	@ (800d038 <main+0x150>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f5 fc08 	bl	8002782 <_ZN11BlocMoteurs22set_microstepping_modeEN12StepperMotor11step_mode_tE>
	embase->set_max_speed_moteurs(W_MAX);
 800cf72:	4b31      	ldr	r3, [pc, #196]	@ (800d038 <main+0x150>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7f5 fc7e 	bl	800287c <_ZN11BlocMoteurs21set_max_speed_moteursEf>

	embase->appendUart('R');
 800cf80:	4b2d      	ldr	r3, [pc, #180]	@ (800d038 <main+0x150>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2152      	movs	r1, #82	@ 0x52
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7ff f98b 	bl	800c2a2 <_ZN12Embase3Roues10appendUartEh>
	embase->appendWait(0);
 800cf8c:	4b2a      	ldr	r3, [pc, #168]	@ (800d038 <main+0x150>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2100      	movs	r1, #0
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff f962 	bl	800c25c <_ZN12Embase3Roues10appendWaitEm>
	embase->appendRelativeMove(1, 0, 0);
 800cf98:	4b27      	ldr	r3, [pc, #156]	@ (800d038 <main+0x150>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	ed9f 2b1a 	vldr	d2, [pc, #104]	@ 800d008 <main+0x120>
 800cfa0:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 800d008 <main+0x120>
 800cfa4:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 800d010 <main+0x128>
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7ff f924 	bl	800c1f6 <_ZN12Embase3Roues18appendRelativeMoveEddd>
	embase->appendWait(0);
 800cfae:	4b22      	ldr	r3, [pc, #136]	@ (800d038 <main+0x150>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff f951 	bl	800c25c <_ZN12Embase3Roues10appendWaitEm>
	embase->appendSpeedMove(10, 0, 0);
 800cfba:	4b1f      	ldr	r3, [pc, #124]	@ (800d038 <main+0x150>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	ed9f 2b12 	vldr	d2, [pc, #72]	@ 800d008 <main+0x120>
 800cfc2:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 800d008 <main+0x120>
 800cfc6:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 800d018 <main+0x130>
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff f98e 	bl	800c2ec <_ZN12Embase3Roues15appendSpeedMoveEddd>



	movement_allowed = false;// TODO: false not true !!!
 800cfd0:	4b1a      	ldr	r3, [pc, #104]	@ (800d03c <main+0x154>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	701a      	strb	r2, [r3, #0]
	robot_started = true; // TODO: false not true !!!
 800cfd6:	4b1a      	ldr	r3, [pc, #104]	@ (800d040 <main+0x158>)
 800cfd8:	2201      	movs	r2, #1
 800cfda:	701a      	strb	r2, [r3, #0]
//			setDefaultInstructions(embase);
//			robot_started = false;
//			//HAL_UART_Transmit(&huart2, (uint8_t *) "Init OK\n", 8*sizeof(char), 1000);
//		}

		if(robot_started){
 800cfdc:	4b18      	ldr	r3, [pc, #96]	@ (800d040 <main+0x158>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d0fa      	beq.n	800cfdc <main+0xf4>
			embase->executeInstruction();
 800cfe6:	4b14      	ldr	r3, [pc, #80]	@ (800d038 <main+0x150>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff f9b2 	bl	800c354 <_ZN12Embase3Roues18executeInstructionEv>
		if(robot_started){
 800cff0:	e7f4      	b.n	800cfdc <main+0xf4>
	embase = new Embase3Roues(&hspi1, reset_shield_1_GPIO_Port,
 800cff2:	2d00      	cmp	r5, #0
 800cff4:	d004      	beq.n	800d000 <main+0x118>
			ssel2_Pin);
 800cff6:	f243 0160 	movw	r1, #12384	@ 0x3060
 800cffa:	4620      	mov	r0, r4
 800cffc:	f005 face 	bl	801259c <_ZdlPvj>
 800d000:	f005 fb62 	bl	80126c8 <__cxa_end_cleanup>
 800d004:	f3af 8000 	nop.w
	...
 800d014:	3ff00000 	.word	0x3ff00000
 800d018:	00000000 	.word	0x00000000
 800d01c:	40240000 	.word	0x40240000
 800d020:	200003ac 	.word	0x200003ac
 800d024:	2000055e 	.word	0x2000055e
 800d028:	200004cc 	.word	0x200004cc
 800d02c:	40020000 	.word	0x40020000
 800d030:	40020400 	.word	0x40020400
 800d034:	200002b4 	.word	0x200002b4
 800d038:	20000554 	.word	0x20000554
 800d03c:	20000559 	.word	0x20000559
 800d040:	2000055a 	.word	0x2000055a

0800d044 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800d044:	b580      	push	{r7, lr}
 800d046:	b094      	sub	sp, #80	@ 0x50
 800d048:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800d04a:	f107 031c 	add.w	r3, r7, #28
 800d04e:	2234      	movs	r2, #52	@ 0x34
 800d050:	2100      	movs	r1, #0
 800d052:	4618      	mov	r0, r3
 800d054:	f008 f925 	bl	80152a2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800d058:	f107 0308 	add.w	r3, r7, #8
 800d05c:	2200      	movs	r2, #0
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	605a      	str	r2, [r3, #4]
 800d062:	609a      	str	r2, [r3, #8]
 800d064:	60da      	str	r2, [r3, #12]
 800d066:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800d068:	2300      	movs	r3, #0
 800d06a:	607b      	str	r3, [r7, #4]
 800d06c:	4b34      	ldr	r3, [pc, #208]	@ (800d140 <_Z18SystemClock_Configv+0xfc>)
 800d06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d070:	4a33      	ldr	r2, [pc, #204]	@ (800d140 <_Z18SystemClock_Configv+0xfc>)
 800d072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d076:	6413      	str	r3, [r2, #64]	@ 0x40
 800d078:	4b31      	ldr	r3, [pc, #196]	@ (800d140 <_Z18SystemClock_Configv+0xfc>)
 800d07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d07c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d080:	607b      	str	r3, [r7, #4]
 800d082:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d084:	2300      	movs	r3, #0
 800d086:	603b      	str	r3, [r7, #0]
 800d088:	4b2e      	ldr	r3, [pc, #184]	@ (800d144 <_Z18SystemClock_Configv+0x100>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a2d      	ldr	r2, [pc, #180]	@ (800d144 <_Z18SystemClock_Configv+0x100>)
 800d08e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d092:	6013      	str	r3, [r2, #0]
 800d094:	4b2b      	ldr	r3, [pc, #172]	@ (800d144 <_Z18SystemClock_Configv+0x100>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d09c:	603b      	str	r3, [r7, #0]
 800d09e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d0a8:	2310      	movs	r3, #16
 800d0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800d0b4:	2308      	movs	r3, #8
 800d0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800d0b8:	23b4      	movs	r3, #180	@ 0xb4
 800d0ba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d0bc:	2302      	movs	r3, #2
 800d0be:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800d0c8:	f107 031c 	add.w	r3, r7, #28
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f002 f895 	bl	800f1fc <HAL_RCC_OscConfig>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	bf14      	ite	ne
 800d0d8:	2301      	movne	r3, #1
 800d0da:	2300      	moveq	r3, #0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 800d0e2:	f000 fcc5 	bl	800da70 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800d0e6:	f001 fcef 	bl	800eac8 <HAL_PWREx_EnableOverDrive>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	bf14      	ite	ne
 800d0f0:	2301      	movne	r3, #1
 800d0f2:	2300      	moveq	r3, #0
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800d0fa:	f000 fcb9 	bl	800da70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800d0fe:	230f      	movs	r3, #15
 800d100:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d102:	2302      	movs	r3, #2
 800d104:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d106:	2300      	movs	r3, #0
 800d108:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d10a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800d10e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800d110:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800d114:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800d116:	f107 0308 	add.w	r3, r7, #8
 800d11a:	2105      	movs	r1, #5
 800d11c:	4618      	mov	r0, r3
 800d11e:	f001 fd23 	bl	800eb68 <HAL_RCC_ClockConfig>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	bf14      	ite	ne
 800d128:	2301      	movne	r3, #1
 800d12a:	2300      	moveq	r3, #0
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800d132:	f000 fc9d 	bl	800da70 <Error_Handler>
	}
}
 800d136:	bf00      	nop
 800d138:	3750      	adds	r7, #80	@ 0x50
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	40023800 	.word	0x40023800
 800d144:	40007000 	.word	0x40007000

0800d148 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800d148:	b580      	push	{r7, lr}
 800d14a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800d14c:	4b1a      	ldr	r3, [pc, #104]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d14e:	4a1b      	ldr	r2, [pc, #108]	@ (800d1bc <_ZL12MX_SPI1_Initv+0x74>)
 800d150:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800d152:	4b19      	ldr	r3, [pc, #100]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d154:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d158:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d15a:	4b17      	ldr	r3, [pc, #92]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d160:	4b15      	ldr	r3, [pc, #84]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d162:	2200      	movs	r2, #0
 800d164:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d166:	4b14      	ldr	r3, [pc, #80]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d168:	2202      	movs	r2, #2
 800d16a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800d16c:	4b12      	ldr	r3, [pc, #72]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d16e:	2201      	movs	r2, #1
 800d170:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800d172:	4b11      	ldr	r3, [pc, #68]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d178:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800d17a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d17c:	2210      	movs	r2, #16
 800d17e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d180:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d182:	2200      	movs	r2, #0
 800d184:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d186:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d188:	2200      	movs	r2, #0
 800d18a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d18c:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d18e:	2200      	movs	r2, #0
 800d190:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800d192:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d194:	220a      	movs	r2, #10
 800d196:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800d198:	4807      	ldr	r0, [pc, #28]	@ (800d1b8 <_ZL12MX_SPI1_Initv+0x70>)
 800d19a:	f002 facd 	bl	800f738 <HAL_SPI_Init>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bf14      	ite	ne
 800d1a4:	2301      	movne	r3, #1
 800d1a6:	2300      	moveq	r3, #0
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 800d1ae:	f000 fc5f 	bl	800da70 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800d1b2:	bf00      	nop
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	200002b4 	.word	0x200002b4
 800d1bc:	40013000 	.word	0x40013000

0800d1c0 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800d1c4:	4b1a      	ldr	r3, [pc, #104]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1c6:	4a1b      	ldr	r2, [pc, #108]	@ (800d234 <_ZL12MX_SPI2_Initv+0x74>)
 800d1c8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800d1ca:	4b19      	ldr	r3, [pc, #100]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d1d0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d1d2:	4b17      	ldr	r3, [pc, #92]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d1d8:	4b15      	ldr	r3, [pc, #84]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d1de:	4b14      	ldr	r3, [pc, #80]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d1e4:	4b12      	ldr	r3, [pc, #72]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800d1ea:	4b11      	ldr	r3, [pc, #68]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1f0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d1f2:	4b0f      	ldr	r3, [pc, #60]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d1f8:	4b0d      	ldr	r3, [pc, #52]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d1fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d200:	2200      	movs	r2, #0
 800d202:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d204:	4b0a      	ldr	r3, [pc, #40]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d206:	2200      	movs	r2, #0
 800d208:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 800d20a:	4b09      	ldr	r3, [pc, #36]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d20c:	220a      	movs	r2, #10
 800d20e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800d210:	4807      	ldr	r0, [pc, #28]	@ (800d230 <_ZL12MX_SPI2_Initv+0x70>)
 800d212:	f002 fa91 	bl	800f738 <HAL_SPI_Init>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bf14      	ite	ne
 800d21c:	2301      	movne	r3, #1
 800d21e:	2300      	moveq	r3, #0
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 800d226:	f000 fc23 	bl	800da70 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800d22a:	bf00      	nop
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	2000030c 	.word	0x2000030c
 800d234:	40003800 	.word	0x40003800

0800d238 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800d238:	b580      	push	{r7, lr}
 800d23a:	b092      	sub	sp, #72	@ 0x48
 800d23c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d23e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d24c:	2200      	movs	r2, #0
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	605a      	str	r2, [r3, #4]
 800d252:	609a      	str	r2, [r3, #8]
 800d254:	60da      	str	r2, [r3, #12]
 800d256:	611a      	str	r2, [r3, #16]
 800d258:	615a      	str	r2, [r3, #20]
 800d25a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800d25c:	1d3b      	adds	r3, r7, #4
 800d25e:	2220      	movs	r2, #32
 800d260:	2100      	movs	r1, #0
 800d262:	4618      	mov	r0, r3
 800d264:	f008 f81d 	bl	80152a2 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800d268:	4b45      	ldr	r3, [pc, #276]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d26a:	4a46      	ldr	r2, [pc, #280]	@ (800d384 <_ZL12MX_TIM1_Initv+0x14c>)
 800d26c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800d26e:	4b44      	ldr	r3, [pc, #272]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d270:	2200      	movs	r2, #0
 800d272:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d274:	4b42      	ldr	r3, [pc, #264]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d276:	2200      	movs	r2, #0
 800d278:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800d27a:	4b41      	ldr	r3, [pc, #260]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d27c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d280:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d282:	4b3f      	ldr	r3, [pc, #252]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d284:	2200      	movs	r2, #0
 800d286:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800d288:	4b3d      	ldr	r3, [pc, #244]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d28e:	4b3c      	ldr	r3, [pc, #240]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d290:	2200      	movs	r2, #0
 800d292:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800d294:	483a      	ldr	r0, [pc, #232]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d296:	f003 f9c9 	bl	801062c <HAL_TIM_PWM_Init>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	bf14      	ite	ne
 800d2a0:	2301      	movne	r3, #1
 800d2a2:	2300      	moveq	r3, #0
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d001      	beq.n	800d2ae <_ZL12MX_TIM1_Initv+0x76>
		Error_Handler();
 800d2aa:	f000 fbe1 	bl	800da70 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800d2b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4830      	ldr	r0, [pc, #192]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d2be:	f003 ffa9 	bl	8011214 <HAL_TIMEx_MasterConfigSynchronization>
 800d2c2:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	bf14      	ite	ne
 800d2c8:	2301      	movne	r3, #1
 800d2ca:	2300      	moveq	r3, #0
 800d2cc:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <_ZL12MX_TIM1_Initv+0x9e>
		Error_Handler();
 800d2d2:	f000 fbcd 	bl	800da70 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d2d6:	2360      	movs	r3, #96	@ 0x60
 800d2d8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800d2f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2f6:	2204      	movs	r2, #4
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	4821      	ldr	r0, [pc, #132]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d2fc:	f003 faee 	bl	80108dc <HAL_TIM_PWM_ConfigChannel>
 800d300:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d302:	2b00      	cmp	r3, #0
 800d304:	bf14      	ite	ne
 800d306:	2301      	movne	r3, #1
 800d308:	2300      	moveq	r3, #0
 800d30a:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <_ZL12MX_TIM1_Initv+0xdc>
		Error_Handler();
 800d310:	f000 fbae 	bl	800da70 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800d314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d318:	2208      	movs	r2, #8
 800d31a:	4619      	mov	r1, r3
 800d31c:	4818      	ldr	r0, [pc, #96]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d31e:	f003 fadd 	bl	80108dc <HAL_TIM_PWM_ConfigChannel>
 800d322:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d324:	2b00      	cmp	r3, #0
 800d326:	bf14      	ite	ne
 800d328:	2301      	movne	r3, #1
 800d32a:	2300      	moveq	r3, #0
 800d32c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <_ZL12MX_TIM1_Initv+0xfe>
		Error_Handler();
 800d332:	f000 fb9d 	bl	800da70 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d336:	2300      	movs	r3, #0
 800d338:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d33a:	2300      	movs	r3, #0
 800d33c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d33e:	2300      	movs	r3, #0
 800d340:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800d342:	2300      	movs	r3, #0
 800d344:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d346:	2300      	movs	r3, #0
 800d348:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d34a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d34e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d350:	2300      	movs	r3, #0
 800d352:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800d354:	1d3b      	adds	r3, r7, #4
 800d356:	4619      	mov	r1, r3
 800d358:	4809      	ldr	r0, [pc, #36]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d35a:	f003 ffd7 	bl	801130c <HAL_TIMEx_ConfigBreakDeadTime>
 800d35e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d360:	2b00      	cmp	r3, #0
 800d362:	bf14      	ite	ne
 800d364:	2301      	movne	r3, #1
 800d366:	2300      	moveq	r3, #0
 800d368:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d001      	beq.n	800d372 <_ZL12MX_TIM1_Initv+0x13a>
		Error_Handler();
 800d36e:	f000 fb7f 	bl	800da70 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 800d372:	4803      	ldr	r0, [pc, #12]	@ (800d380 <_ZL12MX_TIM1_Initv+0x148>)
 800d374:	f000 fce2 	bl	800dd3c <HAL_TIM_MspPostInit>

}
 800d378:	bf00      	nop
 800d37a:	3748      	adds	r7, #72	@ 0x48
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	20000364 	.word	0x20000364
 800d384:	40010000 	.word	0x40010000

0800d388 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800d388:	b580      	push	{r7, lr}
 800d38a:	b08e      	sub	sp, #56	@ 0x38
 800d38c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800d38e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d392:	2200      	movs	r2, #0
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	605a      	str	r2, [r3, #4]
 800d398:	609a      	str	r2, [r3, #8]
 800d39a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d39c:	f107 0320 	add.w	r3, r7, #32
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d3a6:	1d3b      	adds	r3, r7, #4
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	601a      	str	r2, [r3, #0]
 800d3ac:	605a      	str	r2, [r3, #4]
 800d3ae:	609a      	str	r2, [r3, #8]
 800d3b0:	60da      	str	r2, [r3, #12]
 800d3b2:	611a      	str	r2, [r3, #16]
 800d3b4:	615a      	str	r2, [r3, #20]
 800d3b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800d3b8:	4b39      	ldr	r3, [pc, #228]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d3ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d3be:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800d3c0:	4b37      	ldr	r3, [pc, #220]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3c6:	4b36      	ldr	r3, [pc, #216]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1800000;
 800d3cc:	4b34      	ldr	r3, [pc, #208]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d3ce:	4a35      	ldr	r2, [pc, #212]	@ (800d4a4 <_ZL12MX_TIM2_Initv+0x11c>)
 800d3d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d3d2:	4b33      	ldr	r3, [pc, #204]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d3d8:	4b31      	ldr	r3, [pc, #196]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d3da:	2280      	movs	r2, #128	@ 0x80
 800d3dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800d3de:	4830      	ldr	r0, [pc, #192]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d3e0:	f003 f864 	bl	80104ac <HAL_TIM_Base_Init>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	bf14      	ite	ne
 800d3ea:	2301      	movne	r3, #1
 800d3ec:	2300      	moveq	r3, #0
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d001      	beq.n	800d3f8 <_ZL12MX_TIM2_Initv+0x70>
		Error_Handler();
 800d3f4:	f000 fb3c 	bl	800da70 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d3f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800d3fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d402:	4619      	mov	r1, r3
 800d404:	4826      	ldr	r0, [pc, #152]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d406:	f003 fb2b 	bl	8010a60 <HAL_TIM_ConfigClockSource>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bf14      	ite	ne
 800d410:	2301      	movne	r3, #1
 800d412:	2300      	moveq	r3, #0
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <_ZL12MX_TIM2_Initv+0x96>
		Error_Handler();
 800d41a:	f000 fb29 	bl	800da70 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800d41e:	4820      	ldr	r0, [pc, #128]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d420:	f003 f904 	bl	801062c <HAL_TIM_PWM_Init>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	bf14      	ite	ne
 800d42a:	2301      	movne	r3, #1
 800d42c:	2300      	moveq	r3, #0
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 800d434:	f000 fb1c 	bl	800da70 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d438:	2300      	movs	r3, #0
 800d43a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d43c:	2300      	movs	r3, #0
 800d43e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800d440:	f107 0320 	add.w	r3, r7, #32
 800d444:	4619      	mov	r1, r3
 800d446:	4816      	ldr	r0, [pc, #88]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d448:	f003 fee4 	bl	8011214 <HAL_TIMEx_MasterConfigSynchronization>
 800d44c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bf14      	ite	ne
 800d452:	2301      	movne	r3, #1
 800d454:	2300      	moveq	r3, #0
 800d456:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <_ZL12MX_TIM2_Initv+0xd8>
		Error_Handler();
 800d45c:	f000 fb08 	bl	800da70 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d460:	2360      	movs	r3, #96	@ 0x60
 800d462:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d468:	2300      	movs	r3, #0
 800d46a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d46c:	2300      	movs	r3, #0
 800d46e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800d470:	1d3b      	adds	r3, r7, #4
 800d472:	2200      	movs	r2, #0
 800d474:	4619      	mov	r1, r3
 800d476:	480a      	ldr	r0, [pc, #40]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d478:	f003 fa30 	bl	80108dc <HAL_TIM_PWM_ConfigChannel>
 800d47c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d47e:	2b00      	cmp	r3, #0
 800d480:	bf14      	ite	ne
 800d482:	2301      	movne	r3, #1
 800d484:	2300      	moveq	r3, #0
 800d486:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <_ZL12MX_TIM2_Initv+0x108>
		Error_Handler();
 800d48c:	f000 faf0 	bl	800da70 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800d490:	4803      	ldr	r0, [pc, #12]	@ (800d4a0 <_ZL12MX_TIM2_Initv+0x118>)
 800d492:	f000 fc53 	bl	800dd3c <HAL_TIM_MspPostInit>

}
 800d496:	bf00      	nop
 800d498:	3738      	adds	r7, #56	@ 0x38
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	200003ac 	.word	0x200003ac
 800d4a4:	001b7740 	.word	0x001b7740

0800d4a8 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08a      	sub	sp, #40	@ 0x28
 800d4ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d4ae:	f107 0320 	add.w	r3, r7, #32
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d4b8:	1d3b      	adds	r3, r7, #4
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	605a      	str	r2, [r3, #4]
 800d4c0:	609a      	str	r2, [r3, #8]
 800d4c2:	60da      	str	r2, [r3, #12]
 800d4c4:	611a      	str	r2, [r3, #16]
 800d4c6:	615a      	str	r2, [r3, #20]
 800d4c8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800d4ca:	4b29      	ldr	r3, [pc, #164]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d4cc:	4a29      	ldr	r2, [pc, #164]	@ (800d574 <_ZL12MX_TIM4_Initv+0xcc>)
 800d4ce:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800d4d0:	4b27      	ldr	r3, [pc, #156]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4d6:	4b26      	ldr	r3, [pc, #152]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800d4dc:	4b24      	ldr	r3, [pc, #144]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d4de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4e2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d4e4:	4b22      	ldr	r3, [pc, #136]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4ea:	4b21      	ldr	r3, [pc, #132]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800d4f0:	481f      	ldr	r0, [pc, #124]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d4f2:	f003 f89b 	bl	801062c <HAL_TIM_PWM_Init>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	bf14      	ite	ne
 800d4fc:	2301      	movne	r3, #1
 800d4fe:	2300      	moveq	r3, #0
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 800d506:	f000 fab3 	bl	800da70 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d50a:	2300      	movs	r3, #0
 800d50c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d50e:	2300      	movs	r3, #0
 800d510:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800d512:	f107 0320 	add.w	r3, r7, #32
 800d516:	4619      	mov	r1, r3
 800d518:	4815      	ldr	r0, [pc, #84]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d51a:	f003 fe7b 	bl	8011214 <HAL_TIMEx_MasterConfigSynchronization>
 800d51e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d520:	2b00      	cmp	r3, #0
 800d522:	bf14      	ite	ne
 800d524:	2301      	movne	r3, #1
 800d526:	2300      	moveq	r3, #0
 800d528:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 800d52e:	f000 fa9f 	bl	800da70 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d532:	2360      	movs	r3, #96	@ 0x60
 800d534:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d53a:	2300      	movs	r3, #0
 800d53c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d53e:	2300      	movs	r3, #0
 800d540:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800d542:	1d3b      	adds	r3, r7, #4
 800d544:	2204      	movs	r2, #4
 800d546:	4619      	mov	r1, r3
 800d548:	4809      	ldr	r0, [pc, #36]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d54a:	f003 f9c7 	bl	80108dc <HAL_TIM_PWM_ConfigChannel>
 800d54e:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d550:	2b00      	cmp	r3, #0
 800d552:	bf14      	ite	ne
 800d554:	2301      	movne	r3, #1
 800d556:	2300      	moveq	r3, #0
 800d558:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 800d55e:	f000 fa87 	bl	800da70 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit (&htim4);
 800d562:	4803      	ldr	r0, [pc, #12]	@ (800d570 <_ZL12MX_TIM4_Initv+0xc8>)
 800d564:	f000 fbea 	bl	800dd3c <HAL_TIM_MspPostInit>

}
 800d568:	bf00      	nop
 800d56a:	3728      	adds	r7, #40	@ 0x28
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	200003f4 	.word	0x200003f4
 800d574:	40000800 	.word	0x40000800

0800d578 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d57e:	463b      	mov	r3, r7
 800d580:	2200      	movs	r2, #0
 800d582:	601a      	str	r2, [r3, #0]
 800d584:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d586:	4b1a      	ldr	r3, [pc, #104]	@ (800d5f0 <_ZL12MX_TIM6_Initv+0x78>)
 800d588:	4a1a      	ldr	r2, [pc, #104]	@ (800d5f4 <_ZL12MX_TIM6_Initv+0x7c>)
 800d58a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 800d58c:	4b18      	ldr	r3, [pc, #96]	@ (800d5f0 <_ZL12MX_TIM6_Initv+0x78>)
 800d58e:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800d592:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d594:	4b16      	ldr	r3, [pc, #88]	@ (800d5f0 <_ZL12MX_TIM6_Initv+0x78>)
 800d596:	2200      	movs	r2, #0
 800d598:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65520;
 800d59a:	4b15      	ldr	r3, [pc, #84]	@ (800d5f0 <_ZL12MX_TIM6_Initv+0x78>)
 800d59c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800d5a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d5a2:	4b13      	ldr	r3, [pc, #76]	@ (800d5f0 <_ZL12MX_TIM6_Initv+0x78>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d5a8:	4811      	ldr	r0, [pc, #68]	@ (800d5f0 <_ZL12MX_TIM6_Initv+0x78>)
 800d5aa:	f002 ff7f 	bl	80104ac <HAL_TIM_Base_Init>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800d5be:	f000 fa57 	bl	800da70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d5ca:	463b      	mov	r3, r7
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	4808      	ldr	r0, [pc, #32]	@ (800d5f0 <_ZL12MX_TIM6_Initv+0x78>)
 800d5d0:	f003 fe20 	bl	8011214 <HAL_TIMEx_MasterConfigSynchronization>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	bf14      	ite	ne
 800d5da:	2301      	movne	r3, #1
 800d5dc:	2300      	moveq	r3, #0
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d001      	beq.n	800d5e8 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800d5e4:	f000 fa44 	bl	800da70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d5e8:	bf00      	nop
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	2000043c 	.word	0x2000043c
 800d5f4:	40001000 	.word	0x40001000

0800d5f8 <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b092      	sub	sp, #72	@ 0x48
 800d5fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d5fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d602:	2200      	movs	r2, #0
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d60c:	2200      	movs	r2, #0
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	605a      	str	r2, [r3, #4]
 800d612:	609a      	str	r2, [r3, #8]
 800d614:	60da      	str	r2, [r3, #12]
 800d616:	611a      	str	r2, [r3, #16]
 800d618:	615a      	str	r2, [r3, #20]
 800d61a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800d61c:	1d3b      	adds	r3, r7, #4
 800d61e:	2220      	movs	r2, #32
 800d620:	2100      	movs	r1, #0
 800d622:	4618      	mov	r0, r3
 800d624:	f007 fe3d 	bl	80152a2 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800d628:	4b3d      	ldr	r3, [pc, #244]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d62a:	4a3e      	ldr	r2, [pc, #248]	@ (800d724 <_ZL12MX_TIM8_Initv+0x12c>)
 800d62c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800d62e:	4b3c      	ldr	r3, [pc, #240]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d630:	2200      	movs	r2, #0
 800d632:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d634:	4b3a      	ldr	r3, [pc, #232]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d636:	2200      	movs	r2, #0
 800d638:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800d63a:	4b39      	ldr	r3, [pc, #228]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d63c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d640:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d642:	4b37      	ldr	r3, [pc, #220]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d644:	2200      	movs	r2, #0
 800d646:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800d648:	4b35      	ldr	r3, [pc, #212]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d64e:	4b34      	ldr	r3, [pc, #208]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d650:	2200      	movs	r2, #0
 800d652:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800d654:	4832      	ldr	r0, [pc, #200]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d656:	f002 ffe9 	bl	801062c <HAL_TIM_PWM_Init>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	bf14      	ite	ne
 800d660:	2301      	movne	r3, #1
 800d662:	2300      	moveq	r3, #0
 800d664:	b2db      	uxtb	r3, r3
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <_ZL12MX_TIM8_Initv+0x76>
		Error_Handler();
 800d66a:	f000 fa01 	bl	800da70 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d66e:	2300      	movs	r3, #0
 800d670:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d672:	2300      	movs	r3, #0
 800d674:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800d676:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d67a:	4619      	mov	r1, r3
 800d67c:	4828      	ldr	r0, [pc, #160]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d67e:	f003 fdc9 	bl	8011214 <HAL_TIMEx_MasterConfigSynchronization>
 800d682:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d684:	2b00      	cmp	r3, #0
 800d686:	bf14      	ite	ne
 800d688:	2301      	movne	r3, #1
 800d68a:	2300      	moveq	r3, #0
 800d68c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d001      	beq.n	800d696 <_ZL12MX_TIM8_Initv+0x9e>
		Error_Handler();
 800d692:	f000 f9ed 	bl	800da70 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d696:	2360      	movs	r3, #96	@ 0x60
 800d698:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800d6b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6b6:	2204      	movs	r2, #4
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	4819      	ldr	r0, [pc, #100]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d6bc:	f003 f90e 	bl	80108dc <HAL_TIM_PWM_ConfigChannel>
 800d6c0:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	bf14      	ite	ne
 800d6c6:	2301      	movne	r3, #1
 800d6c8:	2300      	moveq	r3, #0
 800d6ca:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <_ZL12MX_TIM8_Initv+0xdc>
		Error_Handler();
 800d6d0:	f000 f9ce 	bl	800da70 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d6e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d6ec:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800d6f2:	1d3b      	adds	r3, r7, #4
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	480a      	ldr	r0, [pc, #40]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d6f8:	f003 fe08 	bl	801130c <HAL_TIMEx_ConfigBreakDeadTime>
 800d6fc:	4603      	mov	r3, r0
			!= HAL_OK) {
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	bf14      	ite	ne
 800d702:	2301      	movne	r3, #1
 800d704:	2300      	moveq	r3, #0
 800d706:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <_ZL12MX_TIM8_Initv+0x118>
		Error_Handler();
 800d70c:	f000 f9b0 	bl	800da70 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit (&htim8);
 800d710:	4803      	ldr	r0, [pc, #12]	@ (800d720 <_ZL12MX_TIM8_Initv+0x128>)
 800d712:	f000 fb13 	bl	800dd3c <HAL_TIM_MspPostInit>

}
 800d716:	bf00      	nop
 800d718:	3748      	adds	r7, #72	@ 0x48
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	20000484 	.word	0x20000484
 800d724:	40010400 	.word	0x40010400

0800d728 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800d72c:	4b13      	ldr	r3, [pc, #76]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d72e:	4a14      	ldr	r2, [pc, #80]	@ (800d780 <_ZL19MX_USART2_UART_Initv+0x58>)
 800d730:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800d732:	4b12      	ldr	r3, [pc, #72]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d738:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d73a:	4b10      	ldr	r3, [pc, #64]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800d740:	4b0e      	ldr	r3, [pc, #56]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d742:	2200      	movs	r2, #0
 800d744:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800d746:	4b0d      	ldr	r3, [pc, #52]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d748:	2200      	movs	r2, #0
 800d74a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800d74c:	4b0b      	ldr	r3, [pc, #44]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d74e:	220c      	movs	r2, #12
 800d750:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d752:	4b0a      	ldr	r3, [pc, #40]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d754:	2200      	movs	r2, #0
 800d756:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d758:	4b08      	ldr	r3, [pc, #32]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800d75e:	4807      	ldr	r0, [pc, #28]	@ (800d77c <_ZL19MX_USART2_UART_Initv+0x54>)
 800d760:	f003 fe3a 	bl	80113d8 <HAL_UART_Init>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	bf14      	ite	ne
 800d76a:	2301      	movne	r3, #1
 800d76c:	2300      	moveq	r3, #0
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	d001      	beq.n	800d778 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 800d774:	f000 f97c 	bl	800da70 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800d778:	bf00      	nop
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	200004cc 	.word	0x200004cc
 800d780:	40004400 	.word	0x40004400

0800d784 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800d784:	b580      	push	{r7, lr}
 800d786:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800d788:	4b13      	ldr	r3, [pc, #76]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d78a:	4a14      	ldr	r2, [pc, #80]	@ (800d7dc <_ZL19MX_USART3_UART_Initv+0x58>)
 800d78c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800d78e:	4b12      	ldr	r3, [pc, #72]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d794:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d796:	4b10      	ldr	r3, [pc, #64]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d798:	2200      	movs	r2, #0
 800d79a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800d79c:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800d7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800d7a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7aa:	220c      	movs	r2, #12
 800d7ac:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d7b4:	4b08      	ldr	r3, [pc, #32]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800d7ba:	4807      	ldr	r0, [pc, #28]	@ (800d7d8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800d7bc:	f003 fe0c 	bl	80113d8 <HAL_UART_Init>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bf14      	ite	ne
 800d7c6:	2301      	movne	r3, #1
 800d7c8:	2300      	moveq	r3, #0
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d001      	beq.n	800d7d4 <_ZL19MX_USART3_UART_Initv+0x50>
		Error_Handler();
 800d7d0:	f000 f94e 	bl	800da70 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800d7d4:	bf00      	nop
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	20000510 	.word	0x20000510
 800d7dc:	40004800 	.word	0x40004800

0800d7e0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b08a      	sub	sp, #40	@ 0x28
 800d7e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d7e6:	f107 0314 	add.w	r3, r7, #20
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	605a      	str	r2, [r3, #4]
 800d7f0:	609a      	str	r2, [r3, #8]
 800d7f2:	60da      	str	r2, [r3, #12]
 800d7f4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	613b      	str	r3, [r7, #16]
 800d7fa:	4b43      	ldr	r3, [pc, #268]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7fe:	4a42      	ldr	r2, [pc, #264]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d800:	f043 0304 	orr.w	r3, r3, #4
 800d804:	6313      	str	r3, [r2, #48]	@ 0x30
 800d806:	4b40      	ldr	r3, [pc, #256]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d80a:	f003 0304 	and.w	r3, r3, #4
 800d80e:	613b      	str	r3, [r7, #16]
 800d810:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d812:	2300      	movs	r3, #0
 800d814:	60fb      	str	r3, [r7, #12]
 800d816:	4b3c      	ldr	r3, [pc, #240]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d81a:	4a3b      	ldr	r2, [pc, #236]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d81c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d820:	6313      	str	r3, [r2, #48]	@ 0x30
 800d822:	4b39      	ldr	r3, [pc, #228]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d82e:	2300      	movs	r3, #0
 800d830:	60bb      	str	r3, [r7, #8]
 800d832:	4b35      	ldr	r3, [pc, #212]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d836:	4a34      	ldr	r2, [pc, #208]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d838:	f043 0301 	orr.w	r3, r3, #1
 800d83c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d83e:	4b32      	ldr	r3, [pc, #200]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	60bb      	str	r3, [r7, #8]
 800d848:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d84a:	2300      	movs	r3, #0
 800d84c:	607b      	str	r3, [r7, #4]
 800d84e:	4b2e      	ldr	r3, [pc, #184]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d852:	4a2d      	ldr	r2, [pc, #180]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d854:	f043 0302 	orr.w	r3, r3, #2
 800d858:	6313      	str	r3, [r2, #48]	@ 0x30
 800d85a:	4b2b      	ldr	r3, [pc, #172]	@ (800d908 <_ZL12MX_GPIO_Initv+0x128>)
 800d85c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d85e:	f003 0302 	and.w	r3, r3, #2
 800d862:	607b      	str	r3, [r7, #4]
 800d864:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ssel1_Pin | LD2_Pin | ssel2_Pin, GPIO_PIN_RESET);
 800d866:	2200      	movs	r2, #0
 800d868:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 800d86c:	4827      	ldr	r0, [pc, #156]	@ (800d90c <_ZL12MX_GPIO_Initv+0x12c>)
 800d86e:	f001 f8f9 	bl	800ea64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800d872:	2200      	movs	r2, #0
 800d874:	f241 2130 	movw	r1, #4656	@ 0x1230
 800d878:	4825      	ldr	r0, [pc, #148]	@ (800d910 <_ZL12MX_GPIO_Initv+0x130>)
 800d87a:	f001 f8f3 	bl	800ea64 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800d87e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d882:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d884:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d888:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d88a:	2300      	movs	r3, #0
 800d88c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d88e:	f107 0314 	add.w	r3, r7, #20
 800d892:	4619      	mov	r1, r3
 800d894:	481f      	ldr	r0, [pc, #124]	@ (800d914 <_ZL12MX_GPIO_Initv+0x134>)
 800d896:	f000 ff51 	bl	800e73c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d89a:	2301      	movs	r3, #1
 800d89c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d89e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800d8a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8a8:	f107 0314 	add.w	r3, r7, #20
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4819      	ldr	r0, [pc, #100]	@ (800d914 <_ZL12MX_GPIO_Initv+0x134>)
 800d8b0:	f000 ff44 	bl	800e73c <HAL_GPIO_Init>

	/*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
	GPIO_InitStruct.Pin = ssel1_Pin | LD2_Pin | ssel2_Pin;
 800d8b4:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800d8b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8c6:	f107 0314 	add.w	r3, r7, #20
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	480f      	ldr	r0, [pc, #60]	@ (800d90c <_ZL12MX_GPIO_Initv+0x12c>)
 800d8ce:	f000 ff35 	bl	800e73c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 reset_shield_2_Pin reset_shield_1_Pin PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | reset_shield_2_Pin | reset_shield_1_Pin
 800d8d2:	f241 2330 	movw	r3, #4656	@ 0x1230
 800d8d6:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8e4:	f107 0314 	add.w	r3, r7, #20
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4809      	ldr	r0, [pc, #36]	@ (800d910 <_ZL12MX_GPIO_Initv+0x130>)
 800d8ec:	f000 ff26 	bl	800e73c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	2006      	movs	r0, #6
 800d8f6:	f000 fe58 	bl	800e5aa <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d8fa:	2006      	movs	r0, #6
 800d8fc:	f000 fe71 	bl	800e5e2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800d900:	bf00      	nop
 800d902:	3728      	adds	r7, #40	@ 0x28
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	40023800 	.word	0x40023800
 800d90c:	40020000 	.word	0x40020000
 800d910:	40020400 	.word	0x40020400
 800d914:	40020800 	.word	0x40020800

0800d918 <HAL_GPIO_EXTI_Callback>:
		break;
	}
}

// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	4603      	mov	r3, r0
 800d920:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800d922:	88fb      	ldrh	r3, [r7, #6]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d102      	bne.n	800d92e <HAL_GPIO_EXTI_Callback+0x16>
		// Motors are busy when pin low. Rising edge -> no longer busy
		motors_busy = false;
 800d928:	4b04      	ldr	r3, [pc, #16]	@ (800d93c <HAL_GPIO_EXTI_Callback+0x24>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	701a      	strb	r2, [r3, #0]
	}
}
 800d92e:	bf00      	nop
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	20000558 	.word	0x20000558

0800d940 <HAL_UART_TxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]

}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <HAL_UART_RxCpltCallback>:

//Redirect Uart callback to msg_handler if huart is huart2 peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a35      	ldr	r2, [pc, #212]	@ (800da38 <HAL_UART_RxCpltCallback+0xe4>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d164      	bne.n	800da30 <HAL_UART_RxCpltCallback+0xdc>
	{
		switch(uart_received_char)
 800d966:	4b35      	ldr	r3, [pc, #212]	@ (800da3c <HAL_UART_RxCpltCallback+0xe8>)
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2b77      	cmp	r3, #119	@ 0x77
 800d96c:	dc5a      	bgt.n	800da24 <HAL_UART_RxCpltCallback+0xd0>
 800d96e:	2b62      	cmp	r3, #98	@ 0x62
 800d970:	da04      	bge.n	800d97c <HAL_UART_RxCpltCallback+0x28>
 800d972:	2b33      	cmp	r3, #51	@ 0x33
 800d974:	d04e      	beq.n	800da14 <HAL_UART_RxCpltCallback+0xc0>
 800d976:	2b36      	cmp	r3, #54	@ 0x36
 800d978:	d050      	beq.n	800da1c <HAL_UART_RxCpltCallback+0xc8>
		case '6':
			nb_panneaux = 6;
			break;

		default:
			break;
 800d97a:	e053      	b.n	800da24 <HAL_UART_RxCpltCallback+0xd0>
		switch(uart_received_char)
 800d97c:	3b62      	subs	r3, #98	@ 0x62
 800d97e:	2b15      	cmp	r3, #21
 800d980:	d850      	bhi.n	800da24 <HAL_UART_RxCpltCallback+0xd0>
 800d982:	a201      	add	r2, pc, #4	@ (adr r2, 800d988 <HAL_UART_RxCpltCallback+0x34>)
 800d984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d988:	0800da05 	.word	0x0800da05
 800d98c:	0800da25 	.word	0x0800da25
 800d990:	0800da25 	.word	0x0800da25
 800d994:	0800da25 	.word	0x0800da25
 800d998:	0800da25 	.word	0x0800da25
 800d99c:	0800da25 	.word	0x0800da25
 800d9a0:	0800da25 	.word	0x0800da25
 800d9a4:	0800d9f7 	.word	0x0800d9f7
 800d9a8:	0800da0d 	.word	0x0800da0d
 800d9ac:	0800da25 	.word	0x0800da25
 800d9b0:	0800da25 	.word	0x0800da25
 800d9b4:	0800da25 	.word	0x0800da25
 800d9b8:	0800da25 	.word	0x0800da25
 800d9bc:	0800da25 	.word	0x0800da25
 800d9c0:	0800da25 	.word	0x0800da25
 800d9c4:	0800da25 	.word	0x0800da25
 800d9c8:	0800da25 	.word	0x0800da25
 800d9cc:	0800d9e1 	.word	0x0800d9e1
 800d9d0:	0800da25 	.word	0x0800da25
 800d9d4:	0800da25 	.word	0x0800da25
 800d9d8:	0800da25 	.word	0x0800da25
 800d9dc:	0800d9ef 	.word	0x0800d9ef
			movement_allowed = true;
 800d9e0:	4b17      	ldr	r3, [pc, #92]	@ (800da40 <HAL_UART_RxCpltCallback+0xec>)
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	701a      	strb	r2, [r3, #0]
			robot_started = true;
 800d9e6:	4b17      	ldr	r3, [pc, #92]	@ (800da44 <HAL_UART_RxCpltCallback+0xf0>)
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	701a      	strb	r2, [r3, #0]
			break;
 800d9ec:	e01b      	b.n	800da26 <HAL_UART_RxCpltCallback+0xd2>
			movement_allowed = false;
 800d9ee:	4b14      	ldr	r3, [pc, #80]	@ (800da40 <HAL_UART_RxCpltCallback+0xec>)
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	701a      	strb	r2, [r3, #0]
			break;
 800d9f4:	e017      	b.n	800da26 <HAL_UART_RxCpltCallback+0xd2>
			init_requested = true;
 800d9f6:	4b14      	ldr	r3, [pc, #80]	@ (800da48 <HAL_UART_RxCpltCallback+0xf4>)
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	701a      	strb	r2, [r3, #0]
			get_out_step = true;
 800d9fc:	4b13      	ldr	r3, [pc, #76]	@ (800da4c <HAL_UART_RxCpltCallback+0xf8>)
 800d9fe:	2201      	movs	r2, #1
 800da00:	701a      	strb	r2, [r3, #0]
			break;
 800da02:	e010      	b.n	800da26 <HAL_UART_RxCpltCallback+0xd2>
			equipe = BLEU;
 800da04:	4b12      	ldr	r3, [pc, #72]	@ (800da50 <HAL_UART_RxCpltCallback+0xfc>)
 800da06:	2200      	movs	r2, #0
 800da08:	701a      	strb	r2, [r3, #0]
			break;
 800da0a:	e00c      	b.n	800da26 <HAL_UART_RxCpltCallback+0xd2>
			equipe = JAUNE;
 800da0c:	4b10      	ldr	r3, [pc, #64]	@ (800da50 <HAL_UART_RxCpltCallback+0xfc>)
 800da0e:	2201      	movs	r2, #1
 800da10:	701a      	strb	r2, [r3, #0]
			break;
 800da12:	e008      	b.n	800da26 <HAL_UART_RxCpltCallback+0xd2>
			nb_panneaux = 3;
 800da14:	4b0f      	ldr	r3, [pc, #60]	@ (800da54 <HAL_UART_RxCpltCallback+0x100>)
 800da16:	2203      	movs	r2, #3
 800da18:	701a      	strb	r2, [r3, #0]
			break;
 800da1a:	e004      	b.n	800da26 <HAL_UART_RxCpltCallback+0xd2>
			nb_panneaux = 6;
 800da1c:	4b0d      	ldr	r3, [pc, #52]	@ (800da54 <HAL_UART_RxCpltCallback+0x100>)
 800da1e:	2206      	movs	r2, #6
 800da20:	701a      	strb	r2, [r3, #0]
			break;
 800da22:	e000      	b.n	800da26 <HAL_UART_RxCpltCallback+0xd2>
			break;
 800da24:	bf00      	nop
		}

		// ALWAYS READ UART
		HAL_UART_Receive_IT(&huart2, &uart_received_char, sizeof(uint8_t));
 800da26:	2201      	movs	r2, #1
 800da28:	4904      	ldr	r1, [pc, #16]	@ (800da3c <HAL_UART_RxCpltCallback+0xe8>)
 800da2a:	480b      	ldr	r0, [pc, #44]	@ (800da58 <HAL_UART_RxCpltCallback+0x104>)
 800da2c:	f003 fdb3 	bl	8011596 <HAL_UART_Receive_IT>
	}
}
 800da30:	bf00      	nop
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	40004400 	.word	0x40004400
 800da3c:	2000055e 	.word	0x2000055e
 800da40:	20000559 	.word	0x20000559
 800da44:	2000055a 	.word	0x2000055a
 800da48:	2000055b 	.word	0x2000055b
 800da4c:	2000055c 	.word	0x2000055c
 800da50:	2000055d 	.word	0x2000055d
 800da54:	20000004 	.word	0x20000004
 800da58:	200004cc 	.word	0x200004cc

0800da5c <HAL_TIM_PeriodElapsedCallback>:

//Timer 2 interrupt (every 20ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
						break;
			}

		}
	}*/
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800da70:	b480      	push	{r7}
 800da72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800da74:	b672      	cpsid	i
}
 800da76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800da78:	bf00      	nop
 800da7a:	e7fd      	b.n	800da78 <Error_Handler+0x8>

0800da7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da82:	2300      	movs	r3, #0
 800da84:	607b      	str	r3, [r7, #4]
 800da86:	4b10      	ldr	r3, [pc, #64]	@ (800dac8 <HAL_MspInit+0x4c>)
 800da88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da8a:	4a0f      	ldr	r2, [pc, #60]	@ (800dac8 <HAL_MspInit+0x4c>)
 800da8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da90:	6453      	str	r3, [r2, #68]	@ 0x44
 800da92:	4b0d      	ldr	r3, [pc, #52]	@ (800dac8 <HAL_MspInit+0x4c>)
 800da94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da9a:	607b      	str	r3, [r7, #4]
 800da9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800da9e:	2300      	movs	r3, #0
 800daa0:	603b      	str	r3, [r7, #0]
 800daa2:	4b09      	ldr	r3, [pc, #36]	@ (800dac8 <HAL_MspInit+0x4c>)
 800daa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa6:	4a08      	ldr	r2, [pc, #32]	@ (800dac8 <HAL_MspInit+0x4c>)
 800daa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800daac:	6413      	str	r3, [r2, #64]	@ 0x40
 800daae:	4b06      	ldr	r3, [pc, #24]	@ (800dac8 <HAL_MspInit+0x4c>)
 800dab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dab6:	603b      	str	r3, [r7, #0]
 800dab8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800daba:	2007      	movs	r0, #7
 800dabc:	f000 fd6a 	bl	800e594 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dac0:	bf00      	nop
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	40023800 	.word	0x40023800

0800dacc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08c      	sub	sp, #48	@ 0x30
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dad4:	f107 031c 	add.w	r3, r7, #28
 800dad8:	2200      	movs	r2, #0
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	605a      	str	r2, [r3, #4]
 800dade:	609a      	str	r2, [r3, #8]
 800dae0:	60da      	str	r2, [r3, #12]
 800dae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a45      	ldr	r2, [pc, #276]	@ (800dc00 <HAL_SPI_MspInit+0x134>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d14a      	bne.n	800db84 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800daee:	2300      	movs	r3, #0
 800daf0:	61bb      	str	r3, [r7, #24]
 800daf2:	4b44      	ldr	r3, [pc, #272]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800daf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daf6:	4a43      	ldr	r2, [pc, #268]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800daf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dafc:	6453      	str	r3, [r2, #68]	@ 0x44
 800dafe:	4b41      	ldr	r3, [pc, #260]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db06:	61bb      	str	r3, [r7, #24]
 800db08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db0a:	2300      	movs	r3, #0
 800db0c:	617b      	str	r3, [r7, #20]
 800db0e:	4b3d      	ldr	r3, [pc, #244]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db12:	4a3c      	ldr	r2, [pc, #240]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db14:	f043 0301 	orr.w	r3, r3, #1
 800db18:	6313      	str	r3, [r2, #48]	@ 0x30
 800db1a:	4b3a      	ldr	r3, [pc, #232]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	617b      	str	r3, [r7, #20]
 800db24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800db26:	2300      	movs	r3, #0
 800db28:	613b      	str	r3, [r7, #16]
 800db2a:	4b36      	ldr	r3, [pc, #216]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db2e:	4a35      	ldr	r2, [pc, #212]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db30:	f043 0302 	orr.w	r3, r3, #2
 800db34:	6313      	str	r3, [r2, #48]	@ 0x30
 800db36:	4b33      	ldr	r3, [pc, #204]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db3a:	f003 0302 	and.w	r3, r3, #2
 800db3e:	613b      	str	r3, [r7, #16]
 800db40:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800db42:	23c0      	movs	r3, #192	@ 0xc0
 800db44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db46:	2302      	movs	r3, #2
 800db48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db4e:	2303      	movs	r3, #3
 800db50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800db52:	2305      	movs	r3, #5
 800db54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db56:	f107 031c 	add.w	r3, r7, #28
 800db5a:	4619      	mov	r1, r3
 800db5c:	482a      	ldr	r0, [pc, #168]	@ (800dc08 <HAL_SPI_MspInit+0x13c>)
 800db5e:	f000 fded 	bl	800e73c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800db62:	2308      	movs	r3, #8
 800db64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db66:	2302      	movs	r3, #2
 800db68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db6a:	2300      	movs	r3, #0
 800db6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db6e:	2303      	movs	r3, #3
 800db70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800db72:	2305      	movs	r3, #5
 800db74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800db76:	f107 031c 	add.w	r3, r7, #28
 800db7a:	4619      	mov	r1, r3
 800db7c:	4823      	ldr	r0, [pc, #140]	@ (800dc0c <HAL_SPI_MspInit+0x140>)
 800db7e:	f000 fddd 	bl	800e73c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800db82:	e038      	b.n	800dbf6 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a21      	ldr	r2, [pc, #132]	@ (800dc10 <HAL_SPI_MspInit+0x144>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d133      	bne.n	800dbf6 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800db8e:	2300      	movs	r3, #0
 800db90:	60fb      	str	r3, [r7, #12]
 800db92:	4b1c      	ldr	r3, [pc, #112]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db96:	4a1b      	ldr	r2, [pc, #108]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800db98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800db9c:	6413      	str	r3, [r2, #64]	@ 0x40
 800db9e:	4b19      	ldr	r3, [pc, #100]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800dba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dbaa:	2300      	movs	r3, #0
 800dbac:	60bb      	str	r3, [r7, #8]
 800dbae:	4b15      	ldr	r3, [pc, #84]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbb2:	4a14      	ldr	r2, [pc, #80]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800dbb4:	f043 0304 	orr.w	r3, r3, #4
 800dbb8:	6313      	str	r3, [r2, #48]	@ 0x30
 800dbba:	4b12      	ldr	r3, [pc, #72]	@ (800dc04 <HAL_SPI_MspInit+0x138>)
 800dbbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbbe:	f003 0304 	and.w	r3, r3, #4
 800dbc2:	60bb      	str	r3, [r7, #8]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800dbc6:	238c      	movs	r3, #140	@ 0x8c
 800dbc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbca:	2302      	movs	r3, #2
 800dbcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbd2:	2303      	movs	r3, #3
 800dbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800dbd6:	2305      	movs	r3, #5
 800dbd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dbda:	f107 031c 	add.w	r3, r7, #28
 800dbde:	4619      	mov	r1, r3
 800dbe0:	480c      	ldr	r0, [pc, #48]	@ (800dc14 <HAL_SPI_MspInit+0x148>)
 800dbe2:	f000 fdab 	bl	800e73c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2100      	movs	r1, #0
 800dbea:	2024      	movs	r0, #36	@ 0x24
 800dbec:	f000 fcdd 	bl	800e5aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800dbf0:	2024      	movs	r0, #36	@ 0x24
 800dbf2:	f000 fcf6 	bl	800e5e2 <HAL_NVIC_EnableIRQ>
}
 800dbf6:	bf00      	nop
 800dbf8:	3730      	adds	r7, #48	@ 0x30
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	40013000 	.word	0x40013000
 800dc04:	40023800 	.word	0x40023800
 800dc08:	40020000 	.word	0x40020000
 800dc0c:	40020400 	.word	0x40020400
 800dc10:	40003800 	.word	0x40003800
 800dc14:	40020800 	.word	0x40020800

0800dc18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a1f      	ldr	r2, [pc, #124]	@ (800dca4 <HAL_TIM_PWM_MspInit+0x8c>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d10e      	bne.n	800dc48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	4b1e      	ldr	r3, [pc, #120]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc32:	4a1d      	ldr	r2, [pc, #116]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc34:	f043 0301 	orr.w	r3, r3, #1
 800dc38:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc3a:	4b1b      	ldr	r3, [pc, #108]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc3e:	f003 0301 	and.w	r3, r3, #1
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800dc46:	e026      	b.n	800dc96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a17      	ldr	r2, [pc, #92]	@ (800dcac <HAL_TIM_PWM_MspInit+0x94>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d10e      	bne.n	800dc70 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800dc52:	2300      	movs	r3, #0
 800dc54:	613b      	str	r3, [r7, #16]
 800dc56:	4b14      	ldr	r3, [pc, #80]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc5a:	4a13      	ldr	r2, [pc, #76]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc5c:	f043 0304 	orr.w	r3, r3, #4
 800dc60:	6413      	str	r3, [r2, #64]	@ 0x40
 800dc62:	4b11      	ldr	r3, [pc, #68]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc66:	f003 0304 	and.w	r3, r3, #4
 800dc6a:	613b      	str	r3, [r7, #16]
 800dc6c:	693b      	ldr	r3, [r7, #16]
}
 800dc6e:	e012      	b.n	800dc96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a0e      	ldr	r2, [pc, #56]	@ (800dcb0 <HAL_TIM_PWM_MspInit+0x98>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d10d      	bne.n	800dc96 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	60fb      	str	r3, [r7, #12]
 800dc7e:	4b0a      	ldr	r3, [pc, #40]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc82:	4a09      	ldr	r2, [pc, #36]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc84:	f043 0302 	orr.w	r3, r3, #2
 800dc88:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc8a:	4b07      	ldr	r3, [pc, #28]	@ (800dca8 <HAL_TIM_PWM_MspInit+0x90>)
 800dc8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc8e:	f003 0302 	and.w	r3, r3, #2
 800dc92:	60fb      	str	r3, [r7, #12]
 800dc94:	68fb      	ldr	r3, [r7, #12]
}
 800dc96:	bf00      	nop
 800dc98:	371c      	adds	r7, #28
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	40010000 	.word	0x40010000
 800dca8:	40023800 	.word	0x40023800
 800dcac:	40000800 	.word	0x40000800
 800dcb0:	40010400 	.word	0x40010400

0800dcb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcc4:	d116      	bne.n	800dcf4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60fb      	str	r3, [r7, #12]
 800dcca:	4b1a      	ldr	r3, [pc, #104]	@ (800dd34 <HAL_TIM_Base_MspInit+0x80>)
 800dccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcce:	4a19      	ldr	r2, [pc, #100]	@ (800dd34 <HAL_TIM_Base_MspInit+0x80>)
 800dcd0:	f043 0301 	orr.w	r3, r3, #1
 800dcd4:	6413      	str	r3, [r2, #64]	@ 0x40
 800dcd6:	4b17      	ldr	r3, [pc, #92]	@ (800dd34 <HAL_TIM_Base_MspInit+0x80>)
 800dcd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	60fb      	str	r3, [r7, #12]
 800dce0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800dce2:	2202      	movs	r2, #2
 800dce4:	2100      	movs	r1, #0
 800dce6:	201c      	movs	r0, #28
 800dce8:	f000 fc5f 	bl	800e5aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800dcec:	201c      	movs	r0, #28
 800dcee:	f000 fc78 	bl	800e5e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800dcf2:	e01a      	b.n	800dd2a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a0f      	ldr	r2, [pc, #60]	@ (800dd38 <HAL_TIM_Base_MspInit+0x84>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d115      	bne.n	800dd2a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60bb      	str	r3, [r7, #8]
 800dd02:	4b0c      	ldr	r3, [pc, #48]	@ (800dd34 <HAL_TIM_Base_MspInit+0x80>)
 800dd04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd06:	4a0b      	ldr	r2, [pc, #44]	@ (800dd34 <HAL_TIM_Base_MspInit+0x80>)
 800dd08:	f043 0310 	orr.w	r3, r3, #16
 800dd0c:	6413      	str	r3, [r2, #64]	@ 0x40
 800dd0e:	4b09      	ldr	r3, [pc, #36]	@ (800dd34 <HAL_TIM_Base_MspInit+0x80>)
 800dd10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd12:	f003 0310 	and.w	r3, r3, #16
 800dd16:	60bb      	str	r3, [r7, #8]
 800dd18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	2036      	movs	r0, #54	@ 0x36
 800dd20:	f000 fc43 	bl	800e5aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800dd24:	2036      	movs	r0, #54	@ 0x36
 800dd26:	f000 fc5c 	bl	800e5e2 <HAL_NVIC_EnableIRQ>
}
 800dd2a:	bf00      	nop
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	40023800 	.word	0x40023800
 800dd38:	40001000 	.word	0x40001000

0800dd3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b08c      	sub	sp, #48	@ 0x30
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd44:	f107 031c 	add.w	r3, r7, #28
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	605a      	str	r2, [r3, #4]
 800dd4e:	609a      	str	r2, [r3, #8]
 800dd50:	60da      	str	r2, [r3, #12]
 800dd52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a49      	ldr	r2, [pc, #292]	@ (800de80 <HAL_TIM_MspPostInit+0x144>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d11f      	bne.n	800dd9e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd5e:	2300      	movs	r3, #0
 800dd60:	61bb      	str	r3, [r7, #24]
 800dd62:	4b48      	ldr	r3, [pc, #288]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800dd64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd66:	4a47      	ldr	r2, [pc, #284]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800dd68:	f043 0302 	orr.w	r3, r3, #2
 800dd6c:	6313      	str	r3, [r2, #48]	@ 0x30
 800dd6e:	4b45      	ldr	r3, [pc, #276]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800dd70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd72:	f003 0302 	and.w	r3, r3, #2
 800dd76:	61bb      	str	r3, [r7, #24]
 800dd78:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800dd7a:	f248 0301 	movw	r3, #32769	@ 0x8001
 800dd7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd80:	2302      	movs	r3, #2
 800dd82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd84:	2300      	movs	r3, #0
 800dd86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dd90:	f107 031c 	add.w	r3, r7, #28
 800dd94:	4619      	mov	r1, r3
 800dd96:	483c      	ldr	r0, [pc, #240]	@ (800de88 <HAL_TIM_MspPostInit+0x14c>)
 800dd98:	f000 fcd0 	bl	800e73c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800dd9c:	e06c      	b.n	800de78 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dda6:	d11f      	bne.n	800dde8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dda8:	2300      	movs	r3, #0
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	4b35      	ldr	r3, [pc, #212]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800ddae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddb0:	4a34      	ldr	r2, [pc, #208]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800ddb2:	f043 0301 	orr.w	r3, r3, #1
 800ddb6:	6313      	str	r3, [r2, #48]	@ 0x30
 800ddb8:	4b32      	ldr	r3, [pc, #200]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800ddba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddbc:	f003 0301 	and.w	r3, r3, #1
 800ddc0:	617b      	str	r3, [r7, #20]
 800ddc2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800ddc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddca:	2302      	movs	r3, #2
 800ddcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddda:	f107 031c 	add.w	r3, r7, #28
 800ddde:	4619      	mov	r1, r3
 800dde0:	482a      	ldr	r0, [pc, #168]	@ (800de8c <HAL_TIM_MspPostInit+0x150>)
 800dde2:	f000 fcab 	bl	800e73c <HAL_GPIO_Init>
}
 800dde6:	e047      	b.n	800de78 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a28      	ldr	r2, [pc, #160]	@ (800de90 <HAL_TIM_MspPostInit+0x154>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d11e      	bne.n	800de30 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	613b      	str	r3, [r7, #16]
 800ddf6:	4b23      	ldr	r3, [pc, #140]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800ddf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddfa:	4a22      	ldr	r2, [pc, #136]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800ddfc:	f043 0302 	orr.w	r3, r3, #2
 800de00:	6313      	str	r3, [r2, #48]	@ 0x30
 800de02:	4b20      	ldr	r3, [pc, #128]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800de04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de06:	f003 0302 	and.w	r3, r3, #2
 800de0a:	613b      	str	r3, [r7, #16]
 800de0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800de0e:	2380      	movs	r3, #128	@ 0x80
 800de10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de12:	2302      	movs	r3, #2
 800de14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de16:	2300      	movs	r3, #0
 800de18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de1a:	2300      	movs	r3, #0
 800de1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800de1e:	2302      	movs	r3, #2
 800de20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de22:	f107 031c 	add.w	r3, r7, #28
 800de26:	4619      	mov	r1, r3
 800de28:	4817      	ldr	r0, [pc, #92]	@ (800de88 <HAL_TIM_MspPostInit+0x14c>)
 800de2a:	f000 fc87 	bl	800e73c <HAL_GPIO_Init>
}
 800de2e:	e023      	b.n	800de78 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a17      	ldr	r2, [pc, #92]	@ (800de94 <HAL_TIM_MspPostInit+0x158>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d11e      	bne.n	800de78 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de3a:	2300      	movs	r3, #0
 800de3c:	60fb      	str	r3, [r7, #12]
 800de3e:	4b11      	ldr	r3, [pc, #68]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800de40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de42:	4a10      	ldr	r2, [pc, #64]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800de44:	f043 0302 	orr.w	r3, r3, #2
 800de48:	6313      	str	r3, [r2, #48]	@ 0x30
 800de4a:	4b0e      	ldr	r3, [pc, #56]	@ (800de84 <HAL_TIM_MspPostInit+0x148>)
 800de4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de4e:	f003 0302 	and.w	r3, r3, #2
 800de52:	60fb      	str	r3, [r7, #12]
 800de54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800de56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800de5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de5c:	2302      	movs	r3, #2
 800de5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de60:	2300      	movs	r3, #0
 800de62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de64:	2300      	movs	r3, #0
 800de66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800de68:	2303      	movs	r3, #3
 800de6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de6c:	f107 031c 	add.w	r3, r7, #28
 800de70:	4619      	mov	r1, r3
 800de72:	4805      	ldr	r0, [pc, #20]	@ (800de88 <HAL_TIM_MspPostInit+0x14c>)
 800de74:	f000 fc62 	bl	800e73c <HAL_GPIO_Init>
}
 800de78:	bf00      	nop
 800de7a:	3730      	adds	r7, #48	@ 0x30
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	40010000 	.word	0x40010000
 800de84:	40023800 	.word	0x40023800
 800de88:	40020400 	.word	0x40020400
 800de8c:	40020000 	.word	0x40020000
 800de90:	40000800 	.word	0x40000800
 800de94:	40010400 	.word	0x40010400

0800de98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b08c      	sub	sp, #48	@ 0x30
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dea0:	f107 031c 	add.w	r3, r7, #28
 800dea4:	2200      	movs	r2, #0
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	605a      	str	r2, [r3, #4]
 800deaa:	609a      	str	r2, [r3, #8]
 800deac:	60da      	str	r2, [r3, #12]
 800deae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a49      	ldr	r2, [pc, #292]	@ (800dfdc <HAL_UART_MspInit+0x144>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d134      	bne.n	800df24 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800deba:	2300      	movs	r3, #0
 800debc:	61bb      	str	r3, [r7, #24]
 800debe:	4b48      	ldr	r3, [pc, #288]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800dec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dec2:	4a47      	ldr	r2, [pc, #284]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800dec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dec8:	6413      	str	r3, [r2, #64]	@ 0x40
 800deca:	4b45      	ldr	r3, [pc, #276]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800decc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ded2:	61bb      	str	r3, [r7, #24]
 800ded4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
 800deda:	4b41      	ldr	r3, [pc, #260]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800dedc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dede:	4a40      	ldr	r2, [pc, #256]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800dee0:	f043 0301 	orr.w	r3, r3, #1
 800dee4:	6313      	str	r3, [r2, #48]	@ 0x30
 800dee6:	4b3e      	ldr	r3, [pc, #248]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800dee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	617b      	str	r3, [r7, #20]
 800def0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800def2:	230c      	movs	r3, #12
 800def4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800def6:	2302      	movs	r3, #2
 800def8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800defa:	2300      	movs	r3, #0
 800defc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800defe:	2303      	movs	r3, #3
 800df00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800df02:	2307      	movs	r3, #7
 800df04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df06:	f107 031c 	add.w	r3, r7, #28
 800df0a:	4619      	mov	r1, r3
 800df0c:	4835      	ldr	r0, [pc, #212]	@ (800dfe4 <HAL_UART_MspInit+0x14c>)
 800df0e:	f000 fc15 	bl	800e73c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800df12:	2200      	movs	r2, #0
 800df14:	2100      	movs	r1, #0
 800df16:	2026      	movs	r0, #38	@ 0x26
 800df18:	f000 fb47 	bl	800e5aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800df1c:	2026      	movs	r0, #38	@ 0x26
 800df1e:	f000 fb60 	bl	800e5e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800df22:	e057      	b.n	800dfd4 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a2f      	ldr	r2, [pc, #188]	@ (800dfe8 <HAL_UART_MspInit+0x150>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d152      	bne.n	800dfd4 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800df2e:	2300      	movs	r3, #0
 800df30:	613b      	str	r3, [r7, #16]
 800df32:	4b2b      	ldr	r3, [pc, #172]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df36:	4a2a      	ldr	r2, [pc, #168]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800df3c:	6413      	str	r3, [r2, #64]	@ 0x40
 800df3e:	4b28      	ldr	r3, [pc, #160]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800df46:	613b      	str	r3, [r7, #16]
 800df48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df4a:	2300      	movs	r3, #0
 800df4c:	60fb      	str	r3, [r7, #12]
 800df4e:	4b24      	ldr	r3, [pc, #144]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df52:	4a23      	ldr	r2, [pc, #140]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df54:	f043 0304 	orr.w	r3, r3, #4
 800df58:	6313      	str	r3, [r2, #48]	@ 0x30
 800df5a:	4b21      	ldr	r3, [pc, #132]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df5e:	f003 0304 	and.w	r3, r3, #4
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df66:	2300      	movs	r3, #0
 800df68:	60bb      	str	r3, [r7, #8]
 800df6a:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df6e:	4a1c      	ldr	r2, [pc, #112]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df70:	f043 0302 	orr.w	r3, r3, #2
 800df74:	6313      	str	r3, [r2, #48]	@ 0x30
 800df76:	4b1a      	ldr	r3, [pc, #104]	@ (800dfe0 <HAL_UART_MspInit+0x148>)
 800df78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df7a:	f003 0302 	and.w	r3, r3, #2
 800df7e:	60bb      	str	r3, [r7, #8]
 800df80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800df82:	2320      	movs	r3, #32
 800df84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df86:	2302      	movs	r3, #2
 800df88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df8e:	2303      	movs	r3, #3
 800df90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800df92:	2307      	movs	r3, #7
 800df94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df96:	f107 031c 	add.w	r3, r7, #28
 800df9a:	4619      	mov	r1, r3
 800df9c:	4813      	ldr	r0, [pc, #76]	@ (800dfec <HAL_UART_MspInit+0x154>)
 800df9e:	f000 fbcd 	bl	800e73c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800dfa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfac:	2300      	movs	r3, #0
 800dfae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800dfb4:	2307      	movs	r3, #7
 800dfb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dfb8:	f107 031c 	add.w	r3, r7, #28
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	480c      	ldr	r0, [pc, #48]	@ (800dff0 <HAL_UART_MspInit+0x158>)
 800dfc0:	f000 fbbc 	bl	800e73c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	2027      	movs	r0, #39	@ 0x27
 800dfca:	f000 faee 	bl	800e5aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800dfce:	2027      	movs	r0, #39	@ 0x27
 800dfd0:	f000 fb07 	bl	800e5e2 <HAL_NVIC_EnableIRQ>
}
 800dfd4:	bf00      	nop
 800dfd6:	3730      	adds	r7, #48	@ 0x30
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	40004400 	.word	0x40004400
 800dfe0:	40023800 	.word	0x40023800
 800dfe4:	40020000 	.word	0x40020000
 800dfe8:	40004800 	.word	0x40004800
 800dfec:	40020800 	.word	0x40020800
 800dff0:	40020400 	.word	0x40020400

0800dff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dff4:	b480      	push	{r7}
 800dff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800dff8:	bf00      	nop
 800dffa:	e7fd      	b.n	800dff8 <NMI_Handler+0x4>

0800dffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e000:	bf00      	nop
 800e002:	e7fd      	b.n	800e000 <HardFault_Handler+0x4>

0800e004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e004:	b480      	push	{r7}
 800e006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e008:	bf00      	nop
 800e00a:	e7fd      	b.n	800e008 <MemManage_Handler+0x4>

0800e00c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e00c:	b480      	push	{r7}
 800e00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e010:	bf00      	nop
 800e012:	e7fd      	b.n	800e010 <BusFault_Handler+0x4>

0800e014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e014:	b480      	push	{r7}
 800e016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e018:	bf00      	nop
 800e01a:	e7fd      	b.n	800e018 <UsageFault_Handler+0x4>

0800e01c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e01c:	b480      	push	{r7}
 800e01e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e020:	bf00      	nop
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e02a:	b480      	push	{r7}
 800e02c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e02e:	bf00      	nop
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e03c:	bf00      	nop
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr

0800e046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e04a:	f000 f98f 	bl	800e36c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e04e:	bf00      	nop
 800e050:	bd80      	pop	{r7, pc}

0800e052 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800e056:	2001      	movs	r0, #1
 800e058:	f000 fd1e 	bl	800ea98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800e05c:	bf00      	nop
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800e064:	4802      	ldr	r0, [pc, #8]	@ (800e070 <TIM2_IRQHandler+0x10>)
 800e066:	f002 fb30 	bl	80106ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800e06a:	bf00      	nop
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	200003ac 	.word	0x200003ac

0800e074 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800e078:	4802      	ldr	r0, [pc, #8]	@ (800e084 <SPI2_IRQHandler+0x10>)
 800e07a:	f001 ffd5 	bl	8010028 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800e07e:	bf00      	nop
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	2000030c 	.word	0x2000030c

0800e088 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800e08c:	4802      	ldr	r0, [pc, #8]	@ (800e098 <USART2_IRQHandler+0x10>)
 800e08e:	f003 fab3 	bl	80115f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800e092:	bf00      	nop
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	200004cc 	.word	0x200004cc

0800e09c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e0a0:	4802      	ldr	r0, [pc, #8]	@ (800e0ac <USART3_IRQHandler+0x10>)
 800e0a2:	f003 faa9 	bl	80115f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800e0a6:	bf00      	nop
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20000510 	.word	0x20000510

0800e0b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800e0b4:	4802      	ldr	r0, [pc, #8]	@ (800e0c0 <TIM6_DAC_IRQHandler+0x10>)
 800e0b6:	f002 fb08 	bl	80106ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e0ba:	bf00      	nop
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	2000043c 	.word	0x2000043c

0800e0c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	af00      	add	r7, sp, #0
  return 1;
 800e0c8:	2301      	movs	r3, #1
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <_kill>:

int _kill(int pid, int sig)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e0de:	f007 f987 	bl	80153f0 <__errno>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2216      	movs	r2, #22
 800e0e6:	601a      	str	r2, [r3, #0]
  return -1;
 800e0e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <_exit>:

void _exit (int status)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e0fc:	f04f 31ff 	mov.w	r1, #4294967295
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7ff ffe7 	bl	800e0d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800e106:	bf00      	nop
 800e108:	e7fd      	b.n	800e106 <_exit+0x12>

0800e10a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b086      	sub	sp, #24
 800e10e:	af00      	add	r7, sp, #0
 800e110:	60f8      	str	r0, [r7, #12]
 800e112:	60b9      	str	r1, [r7, #8]
 800e114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e116:	2300      	movs	r3, #0
 800e118:	617b      	str	r3, [r7, #20]
 800e11a:	e00a      	b.n	800e132 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e11c:	f3af 8000 	nop.w
 800e120:	4601      	mov	r1, r0
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	1c5a      	adds	r2, r3, #1
 800e126:	60ba      	str	r2, [r7, #8]
 800e128:	b2ca      	uxtb	r2, r1
 800e12a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	3301      	adds	r3, #1
 800e130:	617b      	str	r3, [r7, #20]
 800e132:	697a      	ldr	r2, [r7, #20]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	429a      	cmp	r2, r3
 800e138:	dbf0      	blt.n	800e11c <_read+0x12>
  }

  return len;
 800e13a:	687b      	ldr	r3, [r7, #4]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e150:	2300      	movs	r3, #0
 800e152:	617b      	str	r3, [r7, #20]
 800e154:	e009      	b.n	800e16a <_write+0x26>
  {
    __io_putchar(*ptr++);
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	60ba      	str	r2, [r7, #8]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	4618      	mov	r0, r3
 800e160:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	3301      	adds	r3, #1
 800e168:	617b      	str	r3, [r7, #20]
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	429a      	cmp	r2, r3
 800e170:	dbf1      	blt.n	800e156 <_write+0x12>
  }
  return len;
 800e172:	687b      	ldr	r3, [r7, #4]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3718      	adds	r7, #24
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <_close>:

int _close(int file)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e184:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e188:	4618      	mov	r0, r3
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e1a4:	605a      	str	r2, [r3, #4]
  return 0;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <_isatty>:

int _isatty(int file)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e1bc:	2301      	movs	r3, #1
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	370c      	adds	r7, #12
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e1ca:	b480      	push	{r7}
 800e1cc:	b085      	sub	sp, #20
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	60f8      	str	r0, [r7, #12]
 800e1d2:	60b9      	str	r1, [r7, #8]
 800e1d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e1ec:	4a14      	ldr	r2, [pc, #80]	@ (800e240 <_sbrk+0x5c>)
 800e1ee:	4b15      	ldr	r3, [pc, #84]	@ (800e244 <_sbrk+0x60>)
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e1f8:	4b13      	ldr	r3, [pc, #76]	@ (800e248 <_sbrk+0x64>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d102      	bne.n	800e206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e200:	4b11      	ldr	r3, [pc, #68]	@ (800e248 <_sbrk+0x64>)
 800e202:	4a12      	ldr	r2, [pc, #72]	@ (800e24c <_sbrk+0x68>)
 800e204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e206:	4b10      	ldr	r3, [pc, #64]	@ (800e248 <_sbrk+0x64>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4413      	add	r3, r2
 800e20e:	693a      	ldr	r2, [r7, #16]
 800e210:	429a      	cmp	r2, r3
 800e212:	d207      	bcs.n	800e224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e214:	f007 f8ec 	bl	80153f0 <__errno>
 800e218:	4603      	mov	r3, r0
 800e21a:	220c      	movs	r2, #12
 800e21c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e21e:	f04f 33ff 	mov.w	r3, #4294967295
 800e222:	e009      	b.n	800e238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e224:	4b08      	ldr	r3, [pc, #32]	@ (800e248 <_sbrk+0x64>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e22a:	4b07      	ldr	r3, [pc, #28]	@ (800e248 <_sbrk+0x64>)
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4413      	add	r3, r2
 800e232:	4a05      	ldr	r2, [pc, #20]	@ (800e248 <_sbrk+0x64>)
 800e234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e236:	68fb      	ldr	r3, [r7, #12]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3718      	adds	r7, #24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	20020000 	.word	0x20020000
 800e244:	00000400 	.word	0x00000400
 800e248:	20000560 	.word	0x20000560
 800e24c:	200006e8 	.word	0x200006e8

0800e250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e250:	b480      	push	{r7}
 800e252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e254:	4b06      	ldr	r3, [pc, #24]	@ (800e270 <SystemInit+0x20>)
 800e256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e25a:	4a05      	ldr	r2, [pc, #20]	@ (800e270 <SystemInit+0x20>)
 800e25c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e264:	bf00      	nop
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	e000ed00 	.word	0xe000ed00

0800e274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	;  ldr   sp, =_estack      /* set stack pointer */
 800e274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800e2ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e278:	480d      	ldr	r0, [pc, #52]	@ (800e2b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e27a:	490e      	ldr	r1, [pc, #56]	@ (800e2b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e27c:	4a0e      	ldr	r2, [pc, #56]	@ (800e2b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e27e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e280:	e002      	b.n	800e288 <LoopCopyDataInit>

0800e282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e286:	3304      	adds	r3, #4

0800e288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e28a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e28c:	d3f9      	bcc.n	800e282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e28e:	4a0b      	ldr	r2, [pc, #44]	@ (800e2bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e290:	4c0b      	ldr	r4, [pc, #44]	@ (800e2c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800e292:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e294:	e001      	b.n	800e29a <LoopFillZerobss>

0800e296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e298:	3204      	adds	r2, #4

0800e29a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e29a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e29c:	d3fb      	bcc.n	800e296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e29e:	f7ff ffd7 	bl	800e250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e2a2:	f007 f8ab 	bl	80153fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e2a6:	f7fe fe1f 	bl	800cee8 <main>
  bx  lr    
 800e2aa:	4770      	bx	lr
	;  ldr   sp, =_estack      /* set stack pointer */
 800e2ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e2b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e2b4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800e2b8:	0801aa0c 	.word	0x0801aa0c
  ldr r2, =_sbss
 800e2bc:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800e2c0:	200006e4 	.word	0x200006e4

0800e2c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e2c4:	e7fe      	b.n	800e2c4 <ADC_IRQHandler>
	...

0800e2c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e2cc:	4b0e      	ldr	r3, [pc, #56]	@ (800e308 <HAL_Init+0x40>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a0d      	ldr	r2, [pc, #52]	@ (800e308 <HAL_Init+0x40>)
 800e2d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e2d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e2d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e308 <HAL_Init+0x40>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a0a      	ldr	r2, [pc, #40]	@ (800e308 <HAL_Init+0x40>)
 800e2de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e2e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e2e4:	4b08      	ldr	r3, [pc, #32]	@ (800e308 <HAL_Init+0x40>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a07      	ldr	r2, [pc, #28]	@ (800e308 <HAL_Init+0x40>)
 800e2ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e2ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e2f0:	2003      	movs	r0, #3
 800e2f2:	f000 f94f 	bl	800e594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	f000 f808 	bl	800e30c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e2fc:	f7ff fbbe 	bl	800da7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	40023c00 	.word	0x40023c00

0800e30c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e314:	4b12      	ldr	r3, [pc, #72]	@ (800e360 <HAL_InitTick+0x54>)
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	4b12      	ldr	r3, [pc, #72]	@ (800e364 <HAL_InitTick+0x58>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	4619      	mov	r1, r3
 800e31e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e322:	fbb3 f3f1 	udiv	r3, r3, r1
 800e326:	fbb2 f3f3 	udiv	r3, r2, r3
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f967 	bl	800e5fe <HAL_SYSTICK_Config>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	e00e      	b.n	800e358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b0f      	cmp	r3, #15
 800e33e:	d80a      	bhi.n	800e356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e340:	2200      	movs	r2, #0
 800e342:	6879      	ldr	r1, [r7, #4]
 800e344:	f04f 30ff 	mov.w	r0, #4294967295
 800e348:	f000 f92f 	bl	800e5aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e34c:	4a06      	ldr	r2, [pc, #24]	@ (800e368 <HAL_InitTick+0x5c>)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e352:	2300      	movs	r3, #0
 800e354:	e000      	b.n	800e358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20000008 	.word	0x20000008
 800e364:	20000010 	.word	0x20000010
 800e368:	2000000c 	.word	0x2000000c

0800e36c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e36c:	b480      	push	{r7}
 800e36e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e370:	4b06      	ldr	r3, [pc, #24]	@ (800e38c <HAL_IncTick+0x20>)
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	461a      	mov	r2, r3
 800e376:	4b06      	ldr	r3, [pc, #24]	@ (800e390 <HAL_IncTick+0x24>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4413      	add	r3, r2
 800e37c:	4a04      	ldr	r2, [pc, #16]	@ (800e390 <HAL_IncTick+0x24>)
 800e37e:	6013      	str	r3, [r2, #0]
}
 800e380:	bf00      	nop
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	20000010 	.word	0x20000010
 800e390:	20000564 	.word	0x20000564

0800e394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e394:	b480      	push	{r7}
 800e396:	af00      	add	r7, sp, #0
  return uwTick;
 800e398:	4b03      	ldr	r3, [pc, #12]	@ (800e3a8 <HAL_GetTick+0x14>)
 800e39a:	681b      	ldr	r3, [r3, #0]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	20000564 	.word	0x20000564

0800e3ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e3b4:	f7ff ffee 	bl	800e394 <HAL_GetTick>
 800e3b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c4:	d005      	beq.n	800e3d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f0 <HAL_Delay+0x44>)
 800e3c8:	781b      	ldrb	r3, [r3, #0]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e3d2:	bf00      	nop
 800e3d4:	f7ff ffde 	bl	800e394 <HAL_GetTick>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d8f7      	bhi.n	800e3d4 <HAL_Delay+0x28>
  {
  }
}
 800e3e4:	bf00      	nop
 800e3e6:	bf00      	nop
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	20000010 	.word	0x20000010

0800e3f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f003 0307 	and.w	r3, r3, #7
 800e402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e404:	4b0c      	ldr	r3, [pc, #48]	@ (800e438 <__NVIC_SetPriorityGrouping+0x44>)
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800e410:	4013      	ands	r3, r2
 800e412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e41c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800e420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e426:	4a04      	ldr	r2, [pc, #16]	@ (800e438 <__NVIC_SetPriorityGrouping+0x44>)
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	60d3      	str	r3, [r2, #12]
}
 800e42c:	bf00      	nop
 800e42e:	3714      	adds	r7, #20
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr
 800e438:	e000ed00 	.word	0xe000ed00

0800e43c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e43c:	b480      	push	{r7}
 800e43e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e440:	4b04      	ldr	r3, [pc, #16]	@ (800e454 <__NVIC_GetPriorityGrouping+0x18>)
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	0a1b      	lsrs	r3, r3, #8
 800e446:	f003 0307 	and.w	r3, r3, #7
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	e000ed00 	.word	0xe000ed00

0800e458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e466:	2b00      	cmp	r3, #0
 800e468:	db0b      	blt.n	800e482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	f003 021f 	and.w	r2, r3, #31
 800e470:	4907      	ldr	r1, [pc, #28]	@ (800e490 <__NVIC_EnableIRQ+0x38>)
 800e472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e476:	095b      	lsrs	r3, r3, #5
 800e478:	2001      	movs	r0, #1
 800e47a:	fa00 f202 	lsl.w	r2, r0, r2
 800e47e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e482:	bf00      	nop
 800e484:	370c      	adds	r7, #12
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	e000e100 	.word	0xe000e100

0800e494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	4603      	mov	r3, r0
 800e49c:	6039      	str	r1, [r7, #0]
 800e49e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e4a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	db0a      	blt.n	800e4be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	490c      	ldr	r1, [pc, #48]	@ (800e4e0 <__NVIC_SetPriority+0x4c>)
 800e4ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4b2:	0112      	lsls	r2, r2, #4
 800e4b4:	b2d2      	uxtb	r2, r2
 800e4b6:	440b      	add	r3, r1
 800e4b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e4bc:	e00a      	b.n	800e4d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	b2da      	uxtb	r2, r3
 800e4c2:	4908      	ldr	r1, [pc, #32]	@ (800e4e4 <__NVIC_SetPriority+0x50>)
 800e4c4:	79fb      	ldrb	r3, [r7, #7]
 800e4c6:	f003 030f 	and.w	r3, r3, #15
 800e4ca:	3b04      	subs	r3, #4
 800e4cc:	0112      	lsls	r2, r2, #4
 800e4ce:	b2d2      	uxtb	r2, r2
 800e4d0:	440b      	add	r3, r1
 800e4d2:	761a      	strb	r2, [r3, #24]
}
 800e4d4:	bf00      	nop
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr
 800e4e0:	e000e100 	.word	0xe000e100
 800e4e4:	e000ed00 	.word	0xe000ed00

0800e4e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b089      	sub	sp, #36	@ 0x24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f003 0307 	and.w	r3, r3, #7
 800e4fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	f1c3 0307 	rsb	r3, r3, #7
 800e502:	2b04      	cmp	r3, #4
 800e504:	bf28      	it	cs
 800e506:	2304      	movcs	r3, #4
 800e508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	3304      	adds	r3, #4
 800e50e:	2b06      	cmp	r3, #6
 800e510:	d902      	bls.n	800e518 <NVIC_EncodePriority+0x30>
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	3b03      	subs	r3, #3
 800e516:	e000      	b.n	800e51a <NVIC_EncodePriority+0x32>
 800e518:	2300      	movs	r3, #0
 800e51a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e51c:	f04f 32ff 	mov.w	r2, #4294967295
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	fa02 f303 	lsl.w	r3, r2, r3
 800e526:	43da      	mvns	r2, r3
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	401a      	ands	r2, r3
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e530:	f04f 31ff 	mov.w	r1, #4294967295
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	fa01 f303 	lsl.w	r3, r1, r3
 800e53a:	43d9      	mvns	r1, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e540:	4313      	orrs	r3, r2
         );
}
 800e542:	4618      	mov	r0, r3
 800e544:	3724      	adds	r7, #36	@ 0x24
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
	...

0800e550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e560:	d301      	bcc.n	800e566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e562:	2301      	movs	r3, #1
 800e564:	e00f      	b.n	800e586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e566:	4a0a      	ldr	r2, [pc, #40]	@ (800e590 <SysTick_Config+0x40>)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	3b01      	subs	r3, #1
 800e56c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e56e:	210f      	movs	r1, #15
 800e570:	f04f 30ff 	mov.w	r0, #4294967295
 800e574:	f7ff ff8e 	bl	800e494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e578:	4b05      	ldr	r3, [pc, #20]	@ (800e590 <SysTick_Config+0x40>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e57e:	4b04      	ldr	r3, [pc, #16]	@ (800e590 <SysTick_Config+0x40>)
 800e580:	2207      	movs	r2, #7
 800e582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	e000e010 	.word	0xe000e010

0800e594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff ff29 	bl	800e3f4 <__NVIC_SetPriorityGrouping>
}
 800e5a2:	bf00      	nop
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b086      	sub	sp, #24
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	60b9      	str	r1, [r7, #8]
 800e5b4:	607a      	str	r2, [r7, #4]
 800e5b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e5bc:	f7ff ff3e 	bl	800e43c <__NVIC_GetPriorityGrouping>
 800e5c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	68b9      	ldr	r1, [r7, #8]
 800e5c6:	6978      	ldr	r0, [r7, #20]
 800e5c8:	f7ff ff8e 	bl	800e4e8 <NVIC_EncodePriority>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5d2:	4611      	mov	r1, r2
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7ff ff5d 	bl	800e494 <__NVIC_SetPriority>
}
 800e5da:	bf00      	nop
 800e5dc:	3718      	adds	r7, #24
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b082      	sub	sp, #8
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e5ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7ff ff31 	bl	800e458 <__NVIC_EnableIRQ>
}
 800e5f6:	bf00      	nop
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b082      	sub	sp, #8
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f7ff ffa2 	bl	800e550 <SysTick_Config>
 800e60c:	4603      	mov	r3, r0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b084      	sub	sp, #16
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e622:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e624:	f7ff feb6 	bl	800e394 <HAL_GetTick>
 800e628:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e630:	b2db      	uxtb	r3, r3
 800e632:	2b02      	cmp	r3, #2
 800e634:	d008      	beq.n	800e648 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2280      	movs	r2, #128	@ 0x80
 800e63a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	e052      	b.n	800e6ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f022 0216 	bic.w	r2, r2, #22
 800e656:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	695a      	ldr	r2, [r3, #20]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e666:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d103      	bne.n	800e678 <HAL_DMA_Abort+0x62>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e674:	2b00      	cmp	r3, #0
 800e676:	d007      	beq.n	800e688 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f022 0208 	bic.w	r2, r2, #8
 800e686:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f022 0201 	bic.w	r2, r2, #1
 800e696:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e698:	e013      	b.n	800e6c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e69a:	f7ff fe7b 	bl	800e394 <HAL_GetTick>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	1ad3      	subs	r3, r2, r3
 800e6a4:	2b05      	cmp	r3, #5
 800e6a6:	d90c      	bls.n	800e6c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2220      	movs	r2, #32
 800e6ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2203      	movs	r2, #3
 800e6b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	e015      	b.n	800e6ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f003 0301 	and.w	r3, r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d1e4      	bne.n	800e69a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6d4:	223f      	movs	r2, #63	@ 0x3f
 800e6d6:	409a      	lsls	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e6f6:	b480      	push	{r7}
 800e6f8:	b083      	sub	sp, #12
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e704:	b2db      	uxtb	r3, r3
 800e706:	2b02      	cmp	r3, #2
 800e708:	d004      	beq.n	800e714 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2280      	movs	r2, #128	@ 0x80
 800e70e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800e710:	2301      	movs	r3, #1
 800e712:	e00c      	b.n	800e72e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2205      	movs	r2, #5
 800e718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f022 0201 	bic.w	r2, r2, #1
 800e72a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e72c:	2300      	movs	r3, #0
}
 800e72e:	4618      	mov	r0, r3
 800e730:	370c      	adds	r7, #12
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
	...

0800e73c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b089      	sub	sp, #36	@ 0x24
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e74a:	2300      	movs	r3, #0
 800e74c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e74e:	2300      	movs	r3, #0
 800e750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e752:	2300      	movs	r3, #0
 800e754:	61fb      	str	r3, [r7, #28]
 800e756:	e165      	b.n	800ea24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e758:	2201      	movs	r2, #1
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	fa02 f303 	lsl.w	r3, r2, r3
 800e760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	4013      	ands	r3, r2
 800e76a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e76c:	693a      	ldr	r2, [r7, #16]
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	429a      	cmp	r2, r3
 800e772:	f040 8154 	bne.w	800ea1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	f003 0303 	and.w	r3, r3, #3
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d005      	beq.n	800e78e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	d130      	bne.n	800e7f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	005b      	lsls	r3, r3, #1
 800e798:	2203      	movs	r2, #3
 800e79a:	fa02 f303 	lsl.w	r3, r2, r3
 800e79e:	43db      	mvns	r3, r3
 800e7a0:	69ba      	ldr	r2, [r7, #24]
 800e7a2:	4013      	ands	r3, r2
 800e7a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	68da      	ldr	r2, [r3, #12]
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	005b      	lsls	r3, r3, #1
 800e7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b2:	69ba      	ldr	r2, [r7, #24]
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	69ba      	ldr	r2, [r7, #24]
 800e7bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e7cc:	43db      	mvns	r3, r3
 800e7ce:	69ba      	ldr	r2, [r7, #24]
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	091b      	lsrs	r3, r3, #4
 800e7da:	f003 0201 	and.w	r2, r3, #1
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e4:	69ba      	ldr	r2, [r7, #24]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	69ba      	ldr	r2, [r7, #24]
 800e7ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	f003 0303 	and.w	r3, r3, #3
 800e7f8:	2b03      	cmp	r3, #3
 800e7fa:	d017      	beq.n	800e82c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	2203      	movs	r2, #3
 800e808:	fa02 f303 	lsl.w	r3, r2, r3
 800e80c:	43db      	mvns	r3, r3
 800e80e:	69ba      	ldr	r2, [r7, #24]
 800e810:	4013      	ands	r3, r2
 800e812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	689a      	ldr	r2, [r3, #8]
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	005b      	lsls	r3, r3, #1
 800e81c:	fa02 f303 	lsl.w	r3, r2, r3
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	4313      	orrs	r3, r2
 800e824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	69ba      	ldr	r2, [r7, #24]
 800e82a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	f003 0303 	and.w	r3, r3, #3
 800e834:	2b02      	cmp	r3, #2
 800e836:	d123      	bne.n	800e880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	08da      	lsrs	r2, r3, #3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	3208      	adds	r2, #8
 800e840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	f003 0307 	and.w	r3, r3, #7
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	220f      	movs	r2, #15
 800e850:	fa02 f303 	lsl.w	r3, r2, r3
 800e854:	43db      	mvns	r3, r3
 800e856:	69ba      	ldr	r2, [r7, #24]
 800e858:	4013      	ands	r3, r2
 800e85a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	691a      	ldr	r2, [r3, #16]
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	f003 0307 	and.w	r3, r3, #7
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	fa02 f303 	lsl.w	r3, r2, r3
 800e86c:	69ba      	ldr	r2, [r7, #24]
 800e86e:	4313      	orrs	r3, r2
 800e870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	08da      	lsrs	r2, r3, #3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	3208      	adds	r2, #8
 800e87a:	69b9      	ldr	r1, [r7, #24]
 800e87c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	2203      	movs	r2, #3
 800e88c:	fa02 f303 	lsl.w	r3, r2, r3
 800e890:	43db      	mvns	r3, r3
 800e892:	69ba      	ldr	r2, [r7, #24]
 800e894:	4013      	ands	r3, r2
 800e896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	f003 0203 	and.w	r2, r3, #3
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	005b      	lsls	r3, r3, #1
 800e8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8a8:	69ba      	ldr	r2, [r7, #24]
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	69ba      	ldr	r2, [r7, #24]
 800e8b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 80ae 	beq.w	800ea1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	60fb      	str	r3, [r7, #12]
 800e8c6:	4b5d      	ldr	r3, [pc, #372]	@ (800ea3c <HAL_GPIO_Init+0x300>)
 800e8c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8ca:	4a5c      	ldr	r2, [pc, #368]	@ (800ea3c <HAL_GPIO_Init+0x300>)
 800e8cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e8d0:	6453      	str	r3, [r2, #68]	@ 0x44
 800e8d2:	4b5a      	ldr	r3, [pc, #360]	@ (800ea3c <HAL_GPIO_Init+0x300>)
 800e8d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e8da:	60fb      	str	r3, [r7, #12]
 800e8dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e8de:	4a58      	ldr	r2, [pc, #352]	@ (800ea40 <HAL_GPIO_Init+0x304>)
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	089b      	lsrs	r3, r3, #2
 800e8e4:	3302      	adds	r3, #2
 800e8e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	f003 0303 	and.w	r3, r3, #3
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	220f      	movs	r2, #15
 800e8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8fa:	43db      	mvns	r3, r3
 800e8fc:	69ba      	ldr	r2, [r7, #24]
 800e8fe:	4013      	ands	r3, r2
 800e900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4a4f      	ldr	r2, [pc, #316]	@ (800ea44 <HAL_GPIO_Init+0x308>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d025      	beq.n	800e956 <HAL_GPIO_Init+0x21a>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4a4e      	ldr	r2, [pc, #312]	@ (800ea48 <HAL_GPIO_Init+0x30c>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d01f      	beq.n	800e952 <HAL_GPIO_Init+0x216>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4a4d      	ldr	r2, [pc, #308]	@ (800ea4c <HAL_GPIO_Init+0x310>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d019      	beq.n	800e94e <HAL_GPIO_Init+0x212>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a4c      	ldr	r2, [pc, #304]	@ (800ea50 <HAL_GPIO_Init+0x314>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d013      	beq.n	800e94a <HAL_GPIO_Init+0x20e>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4a4b      	ldr	r2, [pc, #300]	@ (800ea54 <HAL_GPIO_Init+0x318>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d00d      	beq.n	800e946 <HAL_GPIO_Init+0x20a>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4a4a      	ldr	r2, [pc, #296]	@ (800ea58 <HAL_GPIO_Init+0x31c>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d007      	beq.n	800e942 <HAL_GPIO_Init+0x206>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4a49      	ldr	r2, [pc, #292]	@ (800ea5c <HAL_GPIO_Init+0x320>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d101      	bne.n	800e93e <HAL_GPIO_Init+0x202>
 800e93a:	2306      	movs	r3, #6
 800e93c:	e00c      	b.n	800e958 <HAL_GPIO_Init+0x21c>
 800e93e:	2307      	movs	r3, #7
 800e940:	e00a      	b.n	800e958 <HAL_GPIO_Init+0x21c>
 800e942:	2305      	movs	r3, #5
 800e944:	e008      	b.n	800e958 <HAL_GPIO_Init+0x21c>
 800e946:	2304      	movs	r3, #4
 800e948:	e006      	b.n	800e958 <HAL_GPIO_Init+0x21c>
 800e94a:	2303      	movs	r3, #3
 800e94c:	e004      	b.n	800e958 <HAL_GPIO_Init+0x21c>
 800e94e:	2302      	movs	r3, #2
 800e950:	e002      	b.n	800e958 <HAL_GPIO_Init+0x21c>
 800e952:	2301      	movs	r3, #1
 800e954:	e000      	b.n	800e958 <HAL_GPIO_Init+0x21c>
 800e956:	2300      	movs	r3, #0
 800e958:	69fa      	ldr	r2, [r7, #28]
 800e95a:	f002 0203 	and.w	r2, r2, #3
 800e95e:	0092      	lsls	r2, r2, #2
 800e960:	4093      	lsls	r3, r2
 800e962:	69ba      	ldr	r2, [r7, #24]
 800e964:	4313      	orrs	r3, r2
 800e966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e968:	4935      	ldr	r1, [pc, #212]	@ (800ea40 <HAL_GPIO_Init+0x304>)
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	089b      	lsrs	r3, r3, #2
 800e96e:	3302      	adds	r3, #2
 800e970:	69ba      	ldr	r2, [r7, #24]
 800e972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e976:	4b3a      	ldr	r3, [pc, #232]	@ (800ea60 <HAL_GPIO_Init+0x324>)
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	43db      	mvns	r3, r3
 800e980:	69ba      	ldr	r2, [r7, #24]
 800e982:	4013      	ands	r3, r2
 800e984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800e992:	69ba      	ldr	r2, [r7, #24]
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	4313      	orrs	r3, r2
 800e998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e99a:	4a31      	ldr	r2, [pc, #196]	@ (800ea60 <HAL_GPIO_Init+0x324>)
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e9a0:	4b2f      	ldr	r3, [pc, #188]	@ (800ea60 <HAL_GPIO_Init+0x324>)
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	43db      	mvns	r3, r3
 800e9aa:	69ba      	ldr	r2, [r7, #24]
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800e9bc:	69ba      	ldr	r2, [r7, #24]
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e9c4:	4a26      	ldr	r2, [pc, #152]	@ (800ea60 <HAL_GPIO_Init+0x324>)
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e9ca:	4b25      	ldr	r3, [pc, #148]	@ (800ea60 <HAL_GPIO_Init+0x324>)
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	43db      	mvns	r3, r3
 800e9d4:	69ba      	ldr	r2, [r7, #24]
 800e9d6:	4013      	ands	r3, r2
 800e9d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e9ee:	4a1c      	ldr	r2, [pc, #112]	@ (800ea60 <HAL_GPIO_Init+0x324>)
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e9f4:	4b1a      	ldr	r3, [pc, #104]	@ (800ea60 <HAL_GPIO_Init+0x324>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	43db      	mvns	r3, r3
 800e9fe:	69ba      	ldr	r2, [r7, #24]
 800ea00:	4013      	ands	r3, r2
 800ea02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d003      	beq.n	800ea18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ea10:	69ba      	ldr	r2, [r7, #24]
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	4313      	orrs	r3, r2
 800ea16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ea18:	4a11      	ldr	r2, [pc, #68]	@ (800ea60 <HAL_GPIO_Init+0x324>)
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	3301      	adds	r3, #1
 800ea22:	61fb      	str	r3, [r7, #28]
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	2b0f      	cmp	r3, #15
 800ea28:	f67f ae96 	bls.w	800e758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ea2c:	bf00      	nop
 800ea2e:	bf00      	nop
 800ea30:	3724      	adds	r7, #36	@ 0x24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	40023800 	.word	0x40023800
 800ea40:	40013800 	.word	0x40013800
 800ea44:	40020000 	.word	0x40020000
 800ea48:	40020400 	.word	0x40020400
 800ea4c:	40020800 	.word	0x40020800
 800ea50:	40020c00 	.word	0x40020c00
 800ea54:	40021000 	.word	0x40021000
 800ea58:	40021400 	.word	0x40021400
 800ea5c:	40021800 	.word	0x40021800
 800ea60:	40013c00 	.word	0x40013c00

0800ea64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	807b      	strh	r3, [r7, #2]
 800ea70:	4613      	mov	r3, r2
 800ea72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ea74:	787b      	ldrb	r3, [r7, #1]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d003      	beq.n	800ea82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ea7a:	887a      	ldrh	r2, [r7, #2]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ea80:	e003      	b.n	800ea8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ea82:	887b      	ldrh	r3, [r7, #2]
 800ea84:	041a      	lsls	r2, r3, #16
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	619a      	str	r2, [r3, #24]
}
 800ea8a:	bf00      	nop
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
	...

0800ea98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800eaa2:	4b08      	ldr	r3, [pc, #32]	@ (800eac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eaa4:	695a      	ldr	r2, [r3, #20]
 800eaa6:	88fb      	ldrh	r3, [r7, #6]
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d006      	beq.n	800eabc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800eaae:	4a05      	ldr	r2, [pc, #20]	@ (800eac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eab0:	88fb      	ldrh	r3, [r7, #6]
 800eab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800eab4:	88fb      	ldrh	r3, [r7, #6]
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fe ff2e 	bl	800d918 <HAL_GPIO_EXTI_Callback>
  }
}
 800eabc:	bf00      	nop
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	40013c00 	.word	0x40013c00

0800eac8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800eace:	2300      	movs	r3, #0
 800ead0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ead2:	2300      	movs	r3, #0
 800ead4:	603b      	str	r3, [r7, #0]
 800ead6:	4b20      	ldr	r3, [pc, #128]	@ (800eb58 <HAL_PWREx_EnableOverDrive+0x90>)
 800ead8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eada:	4a1f      	ldr	r2, [pc, #124]	@ (800eb58 <HAL_PWREx_EnableOverDrive+0x90>)
 800eadc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eae0:	6413      	str	r3, [r2, #64]	@ 0x40
 800eae2:	4b1d      	ldr	r3, [pc, #116]	@ (800eb58 <HAL_PWREx_EnableOverDrive+0x90>)
 800eae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800eaee:	4b1b      	ldr	r3, [pc, #108]	@ (800eb5c <HAL_PWREx_EnableOverDrive+0x94>)
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800eaf4:	f7ff fc4e 	bl	800e394 <HAL_GetTick>
 800eaf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800eafa:	e009      	b.n	800eb10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800eafc:	f7ff fc4a 	bl	800e394 <HAL_GetTick>
 800eb00:	4602      	mov	r2, r0
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eb0a:	d901      	bls.n	800eb10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800eb0c:	2303      	movs	r3, #3
 800eb0e:	e01f      	b.n	800eb50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800eb10:	4b13      	ldr	r3, [pc, #76]	@ (800eb60 <HAL_PWREx_EnableOverDrive+0x98>)
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb1c:	d1ee      	bne.n	800eafc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800eb1e:	4b11      	ldr	r3, [pc, #68]	@ (800eb64 <HAL_PWREx_EnableOverDrive+0x9c>)
 800eb20:	2201      	movs	r2, #1
 800eb22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800eb24:	f7ff fc36 	bl	800e394 <HAL_GetTick>
 800eb28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800eb2a:	e009      	b.n	800eb40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800eb2c:	f7ff fc32 	bl	800e394 <HAL_GetTick>
 800eb30:	4602      	mov	r2, r0
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eb3a:	d901      	bls.n	800eb40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800eb3c:	2303      	movs	r3, #3
 800eb3e:	e007      	b.n	800eb50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800eb40:	4b07      	ldr	r3, [pc, #28]	@ (800eb60 <HAL_PWREx_EnableOverDrive+0x98>)
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eb4c:	d1ee      	bne.n	800eb2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	40023800 	.word	0x40023800
 800eb5c:	420e0040 	.word	0x420e0040
 800eb60:	40007000 	.word	0x40007000
 800eb64:	420e0044 	.word	0x420e0044

0800eb68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d101      	bne.n	800eb7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e0cc      	b.n	800ed16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eb7c:	4b68      	ldr	r3, [pc, #416]	@ (800ed20 <HAL_RCC_ClockConfig+0x1b8>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f003 030f 	and.w	r3, r3, #15
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d90c      	bls.n	800eba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb8a:	4b65      	ldr	r3, [pc, #404]	@ (800ed20 <HAL_RCC_ClockConfig+0x1b8>)
 800eb8c:	683a      	ldr	r2, [r7, #0]
 800eb8e:	b2d2      	uxtb	r2, r2
 800eb90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb92:	4b63      	ldr	r3, [pc, #396]	@ (800ed20 <HAL_RCC_ClockConfig+0x1b8>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f003 030f 	and.w	r3, r3, #15
 800eb9a:	683a      	ldr	r2, [r7, #0]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d001      	beq.n	800eba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eba0:	2301      	movs	r3, #1
 800eba2:	e0b8      	b.n	800ed16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f003 0302 	and.w	r3, r3, #2
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d020      	beq.n	800ebf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f003 0304 	and.w	r3, r3, #4
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d005      	beq.n	800ebc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ebbc:	4b59      	ldr	r3, [pc, #356]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	4a58      	ldr	r2, [pc, #352]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ebc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ebc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f003 0308 	and.w	r3, r3, #8
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ebd4:	4b53      	ldr	r3, [pc, #332]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	4a52      	ldr	r2, [pc, #328]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ebda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ebde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ebe0:	4b50      	ldr	r3, [pc, #320]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	494d      	ldr	r1, [pc, #308]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d044      	beq.n	800ec88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d107      	bne.n	800ec16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ec06:	4b47      	ldr	r3, [pc, #284]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d119      	bne.n	800ec46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec12:	2301      	movs	r3, #1
 800ec14:	e07f      	b.n	800ed16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	2b02      	cmp	r3, #2
 800ec1c:	d003      	beq.n	800ec26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ec22:	2b03      	cmp	r3, #3
 800ec24:	d107      	bne.n	800ec36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ec26:	4b3f      	ldr	r3, [pc, #252]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d109      	bne.n	800ec46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec32:	2301      	movs	r3, #1
 800ec34:	e06f      	b.n	800ed16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec36:	4b3b      	ldr	r3, [pc, #236]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f003 0302 	and.w	r3, r3, #2
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d101      	bne.n	800ec46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec42:	2301      	movs	r3, #1
 800ec44:	e067      	b.n	800ed16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ec46:	4b37      	ldr	r3, [pc, #220]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	f023 0203 	bic.w	r2, r3, #3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	4934      	ldr	r1, [pc, #208]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ec54:	4313      	orrs	r3, r2
 800ec56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ec58:	f7ff fb9c 	bl	800e394 <HAL_GetTick>
 800ec5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec5e:	e00a      	b.n	800ec76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ec60:	f7ff fb98 	bl	800e394 <HAL_GetTick>
 800ec64:	4602      	mov	r2, r0
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d901      	bls.n	800ec76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e04f      	b.n	800ed16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec76:	4b2b      	ldr	r3, [pc, #172]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	f003 020c 	and.w	r2, r3, #12
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d1eb      	bne.n	800ec60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ec88:	4b25      	ldr	r3, [pc, #148]	@ (800ed20 <HAL_RCC_ClockConfig+0x1b8>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f003 030f 	and.w	r3, r3, #15
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d20c      	bcs.n	800ecb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec96:	4b22      	ldr	r3, [pc, #136]	@ (800ed20 <HAL_RCC_ClockConfig+0x1b8>)
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	b2d2      	uxtb	r2, r2
 800ec9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec9e:	4b20      	ldr	r3, [pc, #128]	@ (800ed20 <HAL_RCC_ClockConfig+0x1b8>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f003 030f 	and.w	r3, r3, #15
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d001      	beq.n	800ecb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ecac:	2301      	movs	r3, #1
 800ecae:	e032      	b.n	800ed16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d008      	beq.n	800ecce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ecbc:	4b19      	ldr	r3, [pc, #100]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	4916      	ldr	r1, [pc, #88]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecca:	4313      	orrs	r3, r2
 800eccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f003 0308 	and.w	r3, r3, #8
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d009      	beq.n	800ecee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ecda:	4b12      	ldr	r3, [pc, #72]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	00db      	lsls	r3, r3, #3
 800ece8:	490e      	ldr	r1, [pc, #56]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecea:	4313      	orrs	r3, r2
 800ecec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ecee:	f000 f855 	bl	800ed9c <HAL_RCC_GetSysClockFreq>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ed24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	091b      	lsrs	r3, r3, #4
 800ecfa:	f003 030f 	and.w	r3, r3, #15
 800ecfe:	490a      	ldr	r1, [pc, #40]	@ (800ed28 <HAL_RCC_ClockConfig+0x1c0>)
 800ed00:	5ccb      	ldrb	r3, [r1, r3]
 800ed02:	fa22 f303 	lsr.w	r3, r2, r3
 800ed06:	4a09      	ldr	r2, [pc, #36]	@ (800ed2c <HAL_RCC_ClockConfig+0x1c4>)
 800ed08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ed0a:	4b09      	ldr	r3, [pc, #36]	@ (800ed30 <HAL_RCC_ClockConfig+0x1c8>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7ff fafc 	bl	800e30c <HAL_InitTick>

  return HAL_OK;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	40023c00 	.word	0x40023c00
 800ed24:	40023800 	.word	0x40023800
 800ed28:	080183f8 	.word	0x080183f8
 800ed2c:	20000008 	.word	0x20000008
 800ed30:	2000000c 	.word	0x2000000c

0800ed34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ed34:	b480      	push	{r7}
 800ed36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ed38:	4b03      	ldr	r3, [pc, #12]	@ (800ed48 <HAL_RCC_GetHCLKFreq+0x14>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	20000008 	.word	0x20000008

0800ed4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ed50:	f7ff fff0 	bl	800ed34 <HAL_RCC_GetHCLKFreq>
 800ed54:	4602      	mov	r2, r0
 800ed56:	4b05      	ldr	r3, [pc, #20]	@ (800ed6c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	0a9b      	lsrs	r3, r3, #10
 800ed5c:	f003 0307 	and.w	r3, r3, #7
 800ed60:	4903      	ldr	r1, [pc, #12]	@ (800ed70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ed62:	5ccb      	ldrb	r3, [r1, r3]
 800ed64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	40023800 	.word	0x40023800
 800ed70:	08018408 	.word	0x08018408

0800ed74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ed78:	f7ff ffdc 	bl	800ed34 <HAL_RCC_GetHCLKFreq>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	4b05      	ldr	r3, [pc, #20]	@ (800ed94 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	0b5b      	lsrs	r3, r3, #13
 800ed84:	f003 0307 	and.w	r3, r3, #7
 800ed88:	4903      	ldr	r1, [pc, #12]	@ (800ed98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ed8a:	5ccb      	ldrb	r3, [r1, r3]
 800ed8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	40023800 	.word	0x40023800
 800ed98:	08018408 	.word	0x08018408

0800ed9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ed9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eda0:	b0ae      	sub	sp, #184	@ 0xb8
 800eda2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800eda4:	2300      	movs	r3, #0
 800eda6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800edaa:	2300      	movs	r3, #0
 800edac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800edb0:	2300      	movs	r3, #0
 800edb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800edb6:	2300      	movs	r3, #0
 800edb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800edbc:	2300      	movs	r3, #0
 800edbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800edc2:	4bcb      	ldr	r3, [pc, #812]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800edc4:	689b      	ldr	r3, [r3, #8]
 800edc6:	f003 030c 	and.w	r3, r3, #12
 800edca:	2b0c      	cmp	r3, #12
 800edcc:	f200 8206 	bhi.w	800f1dc <HAL_RCC_GetSysClockFreq+0x440>
 800edd0:	a201      	add	r2, pc, #4	@ (adr r2, 800edd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800edd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd6:	bf00      	nop
 800edd8:	0800ee0d 	.word	0x0800ee0d
 800eddc:	0800f1dd 	.word	0x0800f1dd
 800ede0:	0800f1dd 	.word	0x0800f1dd
 800ede4:	0800f1dd 	.word	0x0800f1dd
 800ede8:	0800ee15 	.word	0x0800ee15
 800edec:	0800f1dd 	.word	0x0800f1dd
 800edf0:	0800f1dd 	.word	0x0800f1dd
 800edf4:	0800f1dd 	.word	0x0800f1dd
 800edf8:	0800ee1d 	.word	0x0800ee1d
 800edfc:	0800f1dd 	.word	0x0800f1dd
 800ee00:	0800f1dd 	.word	0x0800f1dd
 800ee04:	0800f1dd 	.word	0x0800f1dd
 800ee08:	0800f00d 	.word	0x0800f00d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ee0c:	4bb9      	ldr	r3, [pc, #740]	@ (800f0f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800ee0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800ee12:	e1e7      	b.n	800f1e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ee14:	4bb8      	ldr	r3, [pc, #736]	@ (800f0f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ee16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ee1a:	e1e3      	b.n	800f1e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ee1c:	4bb4      	ldr	r3, [pc, #720]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ee28:	4bb1      	ldr	r3, [pc, #708]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d071      	beq.n	800ef18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee34:	4bae      	ldr	r3, [pc, #696]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	099b      	lsrs	r3, r3, #6
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ee40:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800ee44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ee48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee50:	2300      	movs	r3, #0
 800ee52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ee5a:	4622      	mov	r2, r4
 800ee5c:	462b      	mov	r3, r5
 800ee5e:	f04f 0000 	mov.w	r0, #0
 800ee62:	f04f 0100 	mov.w	r1, #0
 800ee66:	0159      	lsls	r1, r3, #5
 800ee68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ee6c:	0150      	lsls	r0, r2, #5
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4621      	mov	r1, r4
 800ee74:	1a51      	subs	r1, r2, r1
 800ee76:	6439      	str	r1, [r7, #64]	@ 0x40
 800ee78:	4629      	mov	r1, r5
 800ee7a:	eb63 0301 	sbc.w	r3, r3, r1
 800ee7e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee80:	f04f 0200 	mov.w	r2, #0
 800ee84:	f04f 0300 	mov.w	r3, #0
 800ee88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800ee8c:	4649      	mov	r1, r9
 800ee8e:	018b      	lsls	r3, r1, #6
 800ee90:	4641      	mov	r1, r8
 800ee92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ee96:	4641      	mov	r1, r8
 800ee98:	018a      	lsls	r2, r1, #6
 800ee9a:	4641      	mov	r1, r8
 800ee9c:	1a51      	subs	r1, r2, r1
 800ee9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800eea0:	4649      	mov	r1, r9
 800eea2:	eb63 0301 	sbc.w	r3, r3, r1
 800eea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eea8:	f04f 0200 	mov.w	r2, #0
 800eeac:	f04f 0300 	mov.w	r3, #0
 800eeb0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	00cb      	lsls	r3, r1, #3
 800eeb8:	4641      	mov	r1, r8
 800eeba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800eebe:	4641      	mov	r1, r8
 800eec0:	00ca      	lsls	r2, r1, #3
 800eec2:	4610      	mov	r0, r2
 800eec4:	4619      	mov	r1, r3
 800eec6:	4603      	mov	r3, r0
 800eec8:	4622      	mov	r2, r4
 800eeca:	189b      	adds	r3, r3, r2
 800eecc:	633b      	str	r3, [r7, #48]	@ 0x30
 800eece:	462b      	mov	r3, r5
 800eed0:	460a      	mov	r2, r1
 800eed2:	eb42 0303 	adc.w	r3, r2, r3
 800eed6:	637b      	str	r3, [r7, #52]	@ 0x34
 800eed8:	f04f 0200 	mov.w	r2, #0
 800eedc:	f04f 0300 	mov.w	r3, #0
 800eee0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800eee4:	4629      	mov	r1, r5
 800eee6:	024b      	lsls	r3, r1, #9
 800eee8:	4621      	mov	r1, r4
 800eeea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800eeee:	4621      	mov	r1, r4
 800eef0:	024a      	lsls	r2, r1, #9
 800eef2:	4610      	mov	r0, r2
 800eef4:	4619      	mov	r1, r3
 800eef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eefa:	2200      	movs	r2, #0
 800eefc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ef04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ef08:	f7f1 feee 	bl	8000ce8 <__aeabi_uldivmod>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	460b      	mov	r3, r1
 800ef10:	4613      	mov	r3, r2
 800ef12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef16:	e067      	b.n	800efe8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ef18:	4b75      	ldr	r3, [pc, #468]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	099b      	lsrs	r3, r3, #6
 800ef1e:	2200      	movs	r2, #0
 800ef20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef24:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ef28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ef2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef30:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef32:	2300      	movs	r3, #0
 800ef34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	462b      	mov	r3, r5
 800ef3e:	f04f 0000 	mov.w	r0, #0
 800ef42:	f04f 0100 	mov.w	r1, #0
 800ef46:	0159      	lsls	r1, r3, #5
 800ef48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ef4c:	0150      	lsls	r0, r2, #5
 800ef4e:	4602      	mov	r2, r0
 800ef50:	460b      	mov	r3, r1
 800ef52:	4621      	mov	r1, r4
 800ef54:	1a51      	subs	r1, r2, r1
 800ef56:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ef58:	4629      	mov	r1, r5
 800ef5a:	eb63 0301 	sbc.w	r3, r3, r1
 800ef5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef60:	f04f 0200 	mov.w	r2, #0
 800ef64:	f04f 0300 	mov.w	r3, #0
 800ef68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800ef6c:	4649      	mov	r1, r9
 800ef6e:	018b      	lsls	r3, r1, #6
 800ef70:	4641      	mov	r1, r8
 800ef72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ef76:	4641      	mov	r1, r8
 800ef78:	018a      	lsls	r2, r1, #6
 800ef7a:	4641      	mov	r1, r8
 800ef7c:	ebb2 0a01 	subs.w	sl, r2, r1
 800ef80:	4649      	mov	r1, r9
 800ef82:	eb63 0b01 	sbc.w	fp, r3, r1
 800ef86:	f04f 0200 	mov.w	r2, #0
 800ef8a:	f04f 0300 	mov.w	r3, #0
 800ef8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ef92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ef96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef9a:	4692      	mov	sl, r2
 800ef9c:	469b      	mov	fp, r3
 800ef9e:	4623      	mov	r3, r4
 800efa0:	eb1a 0303 	adds.w	r3, sl, r3
 800efa4:	623b      	str	r3, [r7, #32]
 800efa6:	462b      	mov	r3, r5
 800efa8:	eb4b 0303 	adc.w	r3, fp, r3
 800efac:	627b      	str	r3, [r7, #36]	@ 0x24
 800efae:	f04f 0200 	mov.w	r2, #0
 800efb2:	f04f 0300 	mov.w	r3, #0
 800efb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800efba:	4629      	mov	r1, r5
 800efbc:	028b      	lsls	r3, r1, #10
 800efbe:	4621      	mov	r1, r4
 800efc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800efc4:	4621      	mov	r1, r4
 800efc6:	028a      	lsls	r2, r1, #10
 800efc8:	4610      	mov	r0, r2
 800efca:	4619      	mov	r1, r3
 800efcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efd0:	2200      	movs	r2, #0
 800efd2:	673b      	str	r3, [r7, #112]	@ 0x70
 800efd4:	677a      	str	r2, [r7, #116]	@ 0x74
 800efd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800efda:	f7f1 fe85 	bl	8000ce8 <__aeabi_uldivmod>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4613      	mov	r3, r2
 800efe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800efe8:	4b41      	ldr	r3, [pc, #260]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	0c1b      	lsrs	r3, r3, #16
 800efee:	f003 0303 	and.w	r3, r3, #3
 800eff2:	3301      	adds	r3, #1
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800effa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800effe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f002:	fbb2 f3f3 	udiv	r3, r2, r3
 800f006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800f00a:	e0eb      	b.n	800f1e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f00c:	4b38      	ldr	r3, [pc, #224]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f018:	4b35      	ldr	r3, [pc, #212]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f020:	2b00      	cmp	r3, #0
 800f022:	d06b      	beq.n	800f0fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f024:	4b32      	ldr	r3, [pc, #200]	@ (800f0f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	099b      	lsrs	r3, r3, #6
 800f02a:	2200      	movs	r2, #0
 800f02c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f02e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f036:	663b      	str	r3, [r7, #96]	@ 0x60
 800f038:	2300      	movs	r3, #0
 800f03a:	667b      	str	r3, [r7, #100]	@ 0x64
 800f03c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800f040:	4622      	mov	r2, r4
 800f042:	462b      	mov	r3, r5
 800f044:	f04f 0000 	mov.w	r0, #0
 800f048:	f04f 0100 	mov.w	r1, #0
 800f04c:	0159      	lsls	r1, r3, #5
 800f04e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f052:	0150      	lsls	r0, r2, #5
 800f054:	4602      	mov	r2, r0
 800f056:	460b      	mov	r3, r1
 800f058:	4621      	mov	r1, r4
 800f05a:	1a51      	subs	r1, r2, r1
 800f05c:	61b9      	str	r1, [r7, #24]
 800f05e:	4629      	mov	r1, r5
 800f060:	eb63 0301 	sbc.w	r3, r3, r1
 800f064:	61fb      	str	r3, [r7, #28]
 800f066:	f04f 0200 	mov.w	r2, #0
 800f06a:	f04f 0300 	mov.w	r3, #0
 800f06e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800f072:	4659      	mov	r1, fp
 800f074:	018b      	lsls	r3, r1, #6
 800f076:	4651      	mov	r1, sl
 800f078:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f07c:	4651      	mov	r1, sl
 800f07e:	018a      	lsls	r2, r1, #6
 800f080:	4651      	mov	r1, sl
 800f082:	ebb2 0801 	subs.w	r8, r2, r1
 800f086:	4659      	mov	r1, fp
 800f088:	eb63 0901 	sbc.w	r9, r3, r1
 800f08c:	f04f 0200 	mov.w	r2, #0
 800f090:	f04f 0300 	mov.w	r3, #0
 800f094:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f098:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f09c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f0a0:	4690      	mov	r8, r2
 800f0a2:	4699      	mov	r9, r3
 800f0a4:	4623      	mov	r3, r4
 800f0a6:	eb18 0303 	adds.w	r3, r8, r3
 800f0aa:	613b      	str	r3, [r7, #16]
 800f0ac:	462b      	mov	r3, r5
 800f0ae:	eb49 0303 	adc.w	r3, r9, r3
 800f0b2:	617b      	str	r3, [r7, #20]
 800f0b4:	f04f 0200 	mov.w	r2, #0
 800f0b8:	f04f 0300 	mov.w	r3, #0
 800f0bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	024b      	lsls	r3, r1, #9
 800f0c4:	4621      	mov	r1, r4
 800f0c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	024a      	lsls	r2, r1, #9
 800f0ce:	4610      	mov	r0, r2
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f0da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800f0dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f0e0:	f7f1 fe02 	bl	8000ce8 <__aeabi_uldivmod>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f0ee:	e065      	b.n	800f1bc <HAL_RCC_GetSysClockFreq+0x420>
 800f0f0:	40023800 	.word	0x40023800
 800f0f4:	00f42400 	.word	0x00f42400
 800f0f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f0fc:	4b3d      	ldr	r3, [pc, #244]	@ (800f1f4 <HAL_RCC_GetSysClockFreq+0x458>)
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	099b      	lsrs	r3, r3, #6
 800f102:	2200      	movs	r2, #0
 800f104:	4618      	mov	r0, r3
 800f106:	4611      	mov	r1, r2
 800f108:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f10c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f10e:	2300      	movs	r3, #0
 800f110:	657b      	str	r3, [r7, #84]	@ 0x54
 800f112:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800f116:	4642      	mov	r2, r8
 800f118:	464b      	mov	r3, r9
 800f11a:	f04f 0000 	mov.w	r0, #0
 800f11e:	f04f 0100 	mov.w	r1, #0
 800f122:	0159      	lsls	r1, r3, #5
 800f124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f128:	0150      	lsls	r0, r2, #5
 800f12a:	4602      	mov	r2, r0
 800f12c:	460b      	mov	r3, r1
 800f12e:	4641      	mov	r1, r8
 800f130:	1a51      	subs	r1, r2, r1
 800f132:	60b9      	str	r1, [r7, #8]
 800f134:	4649      	mov	r1, r9
 800f136:	eb63 0301 	sbc.w	r3, r3, r1
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	f04f 0200 	mov.w	r2, #0
 800f140:	f04f 0300 	mov.w	r3, #0
 800f144:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800f148:	4659      	mov	r1, fp
 800f14a:	018b      	lsls	r3, r1, #6
 800f14c:	4651      	mov	r1, sl
 800f14e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f152:	4651      	mov	r1, sl
 800f154:	018a      	lsls	r2, r1, #6
 800f156:	4651      	mov	r1, sl
 800f158:	1a54      	subs	r4, r2, r1
 800f15a:	4659      	mov	r1, fp
 800f15c:	eb63 0501 	sbc.w	r5, r3, r1
 800f160:	f04f 0200 	mov.w	r2, #0
 800f164:	f04f 0300 	mov.w	r3, #0
 800f168:	00eb      	lsls	r3, r5, #3
 800f16a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f16e:	00e2      	lsls	r2, r4, #3
 800f170:	4614      	mov	r4, r2
 800f172:	461d      	mov	r5, r3
 800f174:	4643      	mov	r3, r8
 800f176:	18e3      	adds	r3, r4, r3
 800f178:	603b      	str	r3, [r7, #0]
 800f17a:	464b      	mov	r3, r9
 800f17c:	eb45 0303 	adc.w	r3, r5, r3
 800f180:	607b      	str	r3, [r7, #4]
 800f182:	f04f 0200 	mov.w	r2, #0
 800f186:	f04f 0300 	mov.w	r3, #0
 800f18a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f18e:	4629      	mov	r1, r5
 800f190:	028b      	lsls	r3, r1, #10
 800f192:	4621      	mov	r1, r4
 800f194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f198:	4621      	mov	r1, r4
 800f19a:	028a      	lsls	r2, r1, #10
 800f19c:	4610      	mov	r0, r2
 800f19e:	4619      	mov	r1, r3
 800f1a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f1aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800f1ae:	f7f1 fd9b 	bl	8000ce8 <__aeabi_uldivmod>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800f1bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f1f4 <HAL_RCC_GetSysClockFreq+0x458>)
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	0f1b      	lsrs	r3, r3, #28
 800f1c2:	f003 0307 	and.w	r3, r3, #7
 800f1c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800f1ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f1ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800f1da:	e003      	b.n	800f1e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f1dc:	4b06      	ldr	r3, [pc, #24]	@ (800f1f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800f1de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800f1e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f1e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	37b8      	adds	r7, #184	@ 0xb8
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1f2:	bf00      	nop
 800f1f4:	40023800 	.word	0x40023800
 800f1f8:	00f42400 	.word	0x00f42400

0800f1fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b086      	sub	sp, #24
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d101      	bne.n	800f20e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e28d      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f003 0301 	and.w	r3, r3, #1
 800f216:	2b00      	cmp	r3, #0
 800f218:	f000 8083 	beq.w	800f322 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800f21c:	4b94      	ldr	r3, [pc, #592]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	f003 030c 	and.w	r3, r3, #12
 800f224:	2b04      	cmp	r3, #4
 800f226:	d019      	beq.n	800f25c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f228:	4b91      	ldr	r3, [pc, #580]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800f230:	2b08      	cmp	r3, #8
 800f232:	d106      	bne.n	800f242 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f234:	4b8e      	ldr	r3, [pc, #568]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f23c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f240:	d00c      	beq.n	800f25c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f242:	4b8b      	ldr	r3, [pc, #556]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800f24a:	2b0c      	cmp	r3, #12
 800f24c:	d112      	bne.n	800f274 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f24e:	4b88      	ldr	r3, [pc, #544]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f25a:	d10b      	bne.n	800f274 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f25c:	4b84      	ldr	r3, [pc, #528]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f264:	2b00      	cmp	r3, #0
 800f266:	d05b      	beq.n	800f320 <HAL_RCC_OscConfig+0x124>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d157      	bne.n	800f320 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800f270:	2301      	movs	r3, #1
 800f272:	e25a      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f27c:	d106      	bne.n	800f28c <HAL_RCC_OscConfig+0x90>
 800f27e:	4b7c      	ldr	r3, [pc, #496]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4a7b      	ldr	r2, [pc, #492]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f288:	6013      	str	r3, [r2, #0]
 800f28a:	e01d      	b.n	800f2c8 <HAL_RCC_OscConfig+0xcc>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f294:	d10c      	bne.n	800f2b0 <HAL_RCC_OscConfig+0xb4>
 800f296:	4b76      	ldr	r3, [pc, #472]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4a75      	ldr	r2, [pc, #468]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f29c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f2a0:	6013      	str	r3, [r2, #0]
 800f2a2:	4b73      	ldr	r3, [pc, #460]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a72      	ldr	r2, [pc, #456]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f2a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f2ac:	6013      	str	r3, [r2, #0]
 800f2ae:	e00b      	b.n	800f2c8 <HAL_RCC_OscConfig+0xcc>
 800f2b0:	4b6f      	ldr	r3, [pc, #444]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4a6e      	ldr	r2, [pc, #440]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f2b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f2ba:	6013      	str	r3, [r2, #0]
 800f2bc:	4b6c      	ldr	r3, [pc, #432]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4a6b      	ldr	r2, [pc, #428]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f2c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f2c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d013      	beq.n	800f2f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2d0:	f7ff f860 	bl	800e394 <HAL_GetTick>
 800f2d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f2d6:	e008      	b.n	800f2ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f2d8:	f7ff f85c 	bl	800e394 <HAL_GetTick>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	1ad3      	subs	r3, r2, r3
 800f2e2:	2b64      	cmp	r3, #100	@ 0x64
 800f2e4:	d901      	bls.n	800f2ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800f2e6:	2303      	movs	r3, #3
 800f2e8:	e21f      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f2ea:	4b61      	ldr	r3, [pc, #388]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d0f0      	beq.n	800f2d8 <HAL_RCC_OscConfig+0xdc>
 800f2f6:	e014      	b.n	800f322 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2f8:	f7ff f84c 	bl	800e394 <HAL_GetTick>
 800f2fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f2fe:	e008      	b.n	800f312 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f300:	f7ff f848 	bl	800e394 <HAL_GetTick>
 800f304:	4602      	mov	r2, r0
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	1ad3      	subs	r3, r2, r3
 800f30a:	2b64      	cmp	r3, #100	@ 0x64
 800f30c:	d901      	bls.n	800f312 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800f30e:	2303      	movs	r3, #3
 800f310:	e20b      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f312:	4b57      	ldr	r3, [pc, #348]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1f0      	bne.n	800f300 <HAL_RCC_OscConfig+0x104>
 800f31e:	e000      	b.n	800f322 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f003 0302 	and.w	r3, r3, #2
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d06f      	beq.n	800f40e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800f32e:	4b50      	ldr	r3, [pc, #320]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	f003 030c 	and.w	r3, r3, #12
 800f336:	2b00      	cmp	r3, #0
 800f338:	d017      	beq.n	800f36a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f33a:	4b4d      	ldr	r3, [pc, #308]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800f342:	2b08      	cmp	r3, #8
 800f344:	d105      	bne.n	800f352 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f346:	4b4a      	ldr	r3, [pc, #296]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00b      	beq.n	800f36a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f352:	4b47      	ldr	r3, [pc, #284]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800f35a:	2b0c      	cmp	r3, #12
 800f35c:	d11c      	bne.n	800f398 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f35e:	4b44      	ldr	r3, [pc, #272]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f366:	2b00      	cmp	r3, #0
 800f368:	d116      	bne.n	800f398 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f36a:	4b41      	ldr	r3, [pc, #260]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f003 0302 	and.w	r3, r3, #2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d005      	beq.n	800f382 <HAL_RCC_OscConfig+0x186>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d001      	beq.n	800f382 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800f37e:	2301      	movs	r3, #1
 800f380:	e1d3      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f382:	4b3b      	ldr	r3, [pc, #236]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	4937      	ldr	r1, [pc, #220]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f392:	4313      	orrs	r3, r2
 800f394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f396:	e03a      	b.n	800f40e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d020      	beq.n	800f3e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f3a0:	4b34      	ldr	r3, [pc, #208]	@ (800f474 <HAL_RCC_OscConfig+0x278>)
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3a6:	f7fe fff5 	bl	800e394 <HAL_GetTick>
 800f3aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3ac:	e008      	b.n	800f3c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f3ae:	f7fe fff1 	bl	800e394 <HAL_GetTick>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	1ad3      	subs	r3, r2, r3
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	d901      	bls.n	800f3c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800f3bc:	2303      	movs	r3, #3
 800f3be:	e1b4      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3c0:	4b2b      	ldr	r3, [pc, #172]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f003 0302 	and.w	r3, r3, #2
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d0f0      	beq.n	800f3ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f3cc:	4b28      	ldr	r3, [pc, #160]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	00db      	lsls	r3, r3, #3
 800f3da:	4925      	ldr	r1, [pc, #148]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	600b      	str	r3, [r1, #0]
 800f3e0:	e015      	b.n	800f40e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f3e2:	4b24      	ldr	r3, [pc, #144]	@ (800f474 <HAL_RCC_OscConfig+0x278>)
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3e8:	f7fe ffd4 	bl	800e394 <HAL_GetTick>
 800f3ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f3ee:	e008      	b.n	800f402 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f3f0:	f7fe ffd0 	bl	800e394 <HAL_GetTick>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d901      	bls.n	800f402 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800f3fe:	2303      	movs	r3, #3
 800f400:	e193      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f402:	4b1b      	ldr	r3, [pc, #108]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f003 0302 	and.w	r3, r3, #2
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1f0      	bne.n	800f3f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f003 0308 	and.w	r3, r3, #8
 800f416:	2b00      	cmp	r3, #0
 800f418:	d036      	beq.n	800f488 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	695b      	ldr	r3, [r3, #20]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d016      	beq.n	800f450 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f422:	4b15      	ldr	r3, [pc, #84]	@ (800f478 <HAL_RCC_OscConfig+0x27c>)
 800f424:	2201      	movs	r2, #1
 800f426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f428:	f7fe ffb4 	bl	800e394 <HAL_GetTick>
 800f42c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f42e:	e008      	b.n	800f442 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f430:	f7fe ffb0 	bl	800e394 <HAL_GetTick>
 800f434:	4602      	mov	r2, r0
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	2b02      	cmp	r3, #2
 800f43c:	d901      	bls.n	800f442 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800f43e:	2303      	movs	r3, #3
 800f440:	e173      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f442:	4b0b      	ldr	r3, [pc, #44]	@ (800f470 <HAL_RCC_OscConfig+0x274>)
 800f444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f446:	f003 0302 	and.w	r3, r3, #2
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d0f0      	beq.n	800f430 <HAL_RCC_OscConfig+0x234>
 800f44e:	e01b      	b.n	800f488 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f450:	4b09      	ldr	r3, [pc, #36]	@ (800f478 <HAL_RCC_OscConfig+0x27c>)
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f456:	f7fe ff9d 	bl	800e394 <HAL_GetTick>
 800f45a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f45c:	e00e      	b.n	800f47c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f45e:	f7fe ff99 	bl	800e394 <HAL_GetTick>
 800f462:	4602      	mov	r2, r0
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	1ad3      	subs	r3, r2, r3
 800f468:	2b02      	cmp	r3, #2
 800f46a:	d907      	bls.n	800f47c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800f46c:	2303      	movs	r3, #3
 800f46e:	e15c      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
 800f470:	40023800 	.word	0x40023800
 800f474:	42470000 	.word	0x42470000
 800f478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f47c:	4b8a      	ldr	r3, [pc, #552]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f47e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f480:	f003 0302 	and.w	r3, r3, #2
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1ea      	bne.n	800f45e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f003 0304 	and.w	r3, r3, #4
 800f490:	2b00      	cmp	r3, #0
 800f492:	f000 8097 	beq.w	800f5c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f496:	2300      	movs	r3, #0
 800f498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f49a:	4b83      	ldr	r3, [pc, #524]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f49c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f49e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d10f      	bne.n	800f4c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	60bb      	str	r3, [r7, #8]
 800f4aa:	4b7f      	ldr	r3, [pc, #508]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4ae:	4a7e      	ldr	r2, [pc, #504]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f4b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f4b4:	6413      	str	r3, [r2, #64]	@ 0x40
 800f4b6:	4b7c      	ldr	r3, [pc, #496]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f4be:	60bb      	str	r3, [r7, #8]
 800f4c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f4c6:	4b79      	ldr	r3, [pc, #484]	@ (800f6ac <HAL_RCC_OscConfig+0x4b0>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d118      	bne.n	800f504 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f4d2:	4b76      	ldr	r3, [pc, #472]	@ (800f6ac <HAL_RCC_OscConfig+0x4b0>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4a75      	ldr	r2, [pc, #468]	@ (800f6ac <HAL_RCC_OscConfig+0x4b0>)
 800f4d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f4dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f4de:	f7fe ff59 	bl	800e394 <HAL_GetTick>
 800f4e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f4e4:	e008      	b.n	800f4f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f4e6:	f7fe ff55 	bl	800e394 <HAL_GetTick>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	2b02      	cmp	r3, #2
 800f4f2:	d901      	bls.n	800f4f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800f4f4:	2303      	movs	r3, #3
 800f4f6:	e118      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f4f8:	4b6c      	ldr	r3, [pc, #432]	@ (800f6ac <HAL_RCC_OscConfig+0x4b0>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f500:	2b00      	cmp	r3, #0
 800f502:	d0f0      	beq.n	800f4e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d106      	bne.n	800f51a <HAL_RCC_OscConfig+0x31e>
 800f50c:	4b66      	ldr	r3, [pc, #408]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f50e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f510:	4a65      	ldr	r2, [pc, #404]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f512:	f043 0301 	orr.w	r3, r3, #1
 800f516:	6713      	str	r3, [r2, #112]	@ 0x70
 800f518:	e01c      	b.n	800f554 <HAL_RCC_OscConfig+0x358>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	2b05      	cmp	r3, #5
 800f520:	d10c      	bne.n	800f53c <HAL_RCC_OscConfig+0x340>
 800f522:	4b61      	ldr	r3, [pc, #388]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f526:	4a60      	ldr	r2, [pc, #384]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f528:	f043 0304 	orr.w	r3, r3, #4
 800f52c:	6713      	str	r3, [r2, #112]	@ 0x70
 800f52e:	4b5e      	ldr	r3, [pc, #376]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f532:	4a5d      	ldr	r2, [pc, #372]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f534:	f043 0301 	orr.w	r3, r3, #1
 800f538:	6713      	str	r3, [r2, #112]	@ 0x70
 800f53a:	e00b      	b.n	800f554 <HAL_RCC_OscConfig+0x358>
 800f53c:	4b5a      	ldr	r3, [pc, #360]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f53e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f540:	4a59      	ldr	r2, [pc, #356]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f542:	f023 0301 	bic.w	r3, r3, #1
 800f546:	6713      	str	r3, [r2, #112]	@ 0x70
 800f548:	4b57      	ldr	r3, [pc, #348]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f54a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f54c:	4a56      	ldr	r2, [pc, #344]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f54e:	f023 0304 	bic.w	r3, r3, #4
 800f552:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	689b      	ldr	r3, [r3, #8]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d015      	beq.n	800f588 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f55c:	f7fe ff1a 	bl	800e394 <HAL_GetTick>
 800f560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f562:	e00a      	b.n	800f57a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f564:	f7fe ff16 	bl	800e394 <HAL_GetTick>
 800f568:	4602      	mov	r2, r0
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f572:	4293      	cmp	r3, r2
 800f574:	d901      	bls.n	800f57a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800f576:	2303      	movs	r3, #3
 800f578:	e0d7      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f57a:	4b4b      	ldr	r3, [pc, #300]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f57e:	f003 0302 	and.w	r3, r3, #2
 800f582:	2b00      	cmp	r3, #0
 800f584:	d0ee      	beq.n	800f564 <HAL_RCC_OscConfig+0x368>
 800f586:	e014      	b.n	800f5b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f588:	f7fe ff04 	bl	800e394 <HAL_GetTick>
 800f58c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f58e:	e00a      	b.n	800f5a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f590:	f7fe ff00 	bl	800e394 <HAL_GetTick>
 800f594:	4602      	mov	r2, r0
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	1ad3      	subs	r3, r2, r3
 800f59a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d901      	bls.n	800f5a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800f5a2:	2303      	movs	r3, #3
 800f5a4:	e0c1      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f5a6:	4b40      	ldr	r3, [pc, #256]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f5a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5aa:	f003 0302 	and.w	r3, r3, #2
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1ee      	bne.n	800f590 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d105      	bne.n	800f5c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5bc:	4a3a      	ldr	r2, [pc, #232]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f5be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f5c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	699b      	ldr	r3, [r3, #24]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 80ad 	beq.w	800f728 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f5ce:	4b36      	ldr	r3, [pc, #216]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	f003 030c 	and.w	r3, r3, #12
 800f5d6:	2b08      	cmp	r3, #8
 800f5d8:	d060      	beq.n	800f69c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	699b      	ldr	r3, [r3, #24]
 800f5de:	2b02      	cmp	r3, #2
 800f5e0:	d145      	bne.n	800f66e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f5e2:	4b33      	ldr	r3, [pc, #204]	@ (800f6b0 <HAL_RCC_OscConfig+0x4b4>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5e8:	f7fe fed4 	bl	800e394 <HAL_GetTick>
 800f5ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f5ee:	e008      	b.n	800f602 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f5f0:	f7fe fed0 	bl	800e394 <HAL_GetTick>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	2b02      	cmp	r3, #2
 800f5fc:	d901      	bls.n	800f602 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800f5fe:	2303      	movs	r3, #3
 800f600:	e093      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f602:	4b29      	ldr	r3, [pc, #164]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d1f0      	bne.n	800f5f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	69da      	ldr	r2, [r3, #28]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6a1b      	ldr	r3, [r3, #32]
 800f616:	431a      	orrs	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f61c:	019b      	lsls	r3, r3, #6
 800f61e:	431a      	orrs	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f624:	085b      	lsrs	r3, r3, #1
 800f626:	3b01      	subs	r3, #1
 800f628:	041b      	lsls	r3, r3, #16
 800f62a:	431a      	orrs	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f630:	061b      	lsls	r3, r3, #24
 800f632:	431a      	orrs	r2, r3
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f638:	071b      	lsls	r3, r3, #28
 800f63a:	491b      	ldr	r1, [pc, #108]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f63c:	4313      	orrs	r3, r2
 800f63e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f640:	4b1b      	ldr	r3, [pc, #108]	@ (800f6b0 <HAL_RCC_OscConfig+0x4b4>)
 800f642:	2201      	movs	r2, #1
 800f644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f646:	f7fe fea5 	bl	800e394 <HAL_GetTick>
 800f64a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f64c:	e008      	b.n	800f660 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f64e:	f7fe fea1 	bl	800e394 <HAL_GetTick>
 800f652:	4602      	mov	r2, r0
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	1ad3      	subs	r3, r2, r3
 800f658:	2b02      	cmp	r3, #2
 800f65a:	d901      	bls.n	800f660 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800f65c:	2303      	movs	r3, #3
 800f65e:	e064      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f660:	4b11      	ldr	r3, [pc, #68]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d0f0      	beq.n	800f64e <HAL_RCC_OscConfig+0x452>
 800f66c:	e05c      	b.n	800f728 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f66e:	4b10      	ldr	r3, [pc, #64]	@ (800f6b0 <HAL_RCC_OscConfig+0x4b4>)
 800f670:	2200      	movs	r2, #0
 800f672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f674:	f7fe fe8e 	bl	800e394 <HAL_GetTick>
 800f678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f67a:	e008      	b.n	800f68e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f67c:	f7fe fe8a 	bl	800e394 <HAL_GetTick>
 800f680:	4602      	mov	r2, r0
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	2b02      	cmp	r3, #2
 800f688:	d901      	bls.n	800f68e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800f68a:	2303      	movs	r3, #3
 800f68c:	e04d      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f68e:	4b06      	ldr	r3, [pc, #24]	@ (800f6a8 <HAL_RCC_OscConfig+0x4ac>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1f0      	bne.n	800f67c <HAL_RCC_OscConfig+0x480>
 800f69a:	e045      	b.n	800f728 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	699b      	ldr	r3, [r3, #24]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d107      	bne.n	800f6b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	e040      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
 800f6a8:	40023800 	.word	0x40023800
 800f6ac:	40007000 	.word	0x40007000
 800f6b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f6b4:	4b1f      	ldr	r3, [pc, #124]	@ (800f734 <HAL_RCC_OscConfig+0x538>)
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	699b      	ldr	r3, [r3, #24]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d030      	beq.n	800f724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d129      	bne.n	800f724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d122      	bne.n	800f724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f6ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d119      	bne.n	800f724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6fa:	085b      	lsrs	r3, r3, #1
 800f6fc:	3b01      	subs	r3, #1
 800f6fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f700:	429a      	cmp	r2, r3
 800f702:	d10f      	bne.n	800f724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f70e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f710:	429a      	cmp	r2, r3
 800f712:	d107      	bne.n	800f724 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f71e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f720:	429a      	cmp	r2, r3
 800f722:	d001      	beq.n	800f728 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800f724:	2301      	movs	r3, #1
 800f726:	e000      	b.n	800f72a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3718      	adds	r7, #24
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	40023800 	.word	0x40023800

0800f738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d101      	bne.n	800f74a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f746:	2301      	movs	r3, #1
 800f748:	e07b      	b.n	800f842 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d108      	bne.n	800f764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f75a:	d009      	beq.n	800f770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	61da      	str	r2, [r3, #28]
 800f762:	e005      	b.n	800f770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2200      	movs	r2, #0
 800f76e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7fe f99e 	bl	800dacc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2202      	movs	r2, #2
 800f794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	689b      	ldr	r3, [r3, #8]
 800f7b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f7b8:	431a      	orrs	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f7c2:	431a      	orrs	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	691b      	ldr	r3, [r3, #16]
 800f7c8:	f003 0302 	and.w	r3, r3, #2
 800f7cc:	431a      	orrs	r2, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	695b      	ldr	r3, [r3, #20]
 800f7d2:	f003 0301 	and.w	r3, r3, #1
 800f7d6:	431a      	orrs	r2, r3
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	699b      	ldr	r3, [r3, #24]
 800f7dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f7e0:	431a      	orrs	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	69db      	ldr	r3, [r3, #28]
 800f7e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f7ea:	431a      	orrs	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6a1b      	ldr	r3, [r3, #32]
 800f7f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7f4:	ea42 0103 	orr.w	r1, r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	430a      	orrs	r2, r1
 800f806:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	699b      	ldr	r3, [r3, #24]
 800f80c:	0c1b      	lsrs	r3, r3, #16
 800f80e:	f003 0104 	and.w	r1, r3, #4
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f816:	f003 0210 	and.w	r2, r3, #16
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	430a      	orrs	r2, r1
 800f820:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	69da      	ldr	r2, [r3, #28]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f830:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2201      	movs	r2, #1
 800f83c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f840:	2300      	movs	r3, #0
}
 800f842:	4618      	mov	r0, r3
 800f844:	3708      	adds	r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f84a:	b580      	push	{r7, lr}
 800f84c:	b088      	sub	sp, #32
 800f84e:	af00      	add	r7, sp, #0
 800f850:	60f8      	str	r0, [r7, #12]
 800f852:	60b9      	str	r1, [r7, #8]
 800f854:	603b      	str	r3, [r7, #0]
 800f856:	4613      	mov	r3, r2
 800f858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f85a:	2300      	movs	r3, #0
 800f85c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f864:	2b01      	cmp	r3, #1
 800f866:	d101      	bne.n	800f86c <HAL_SPI_Transmit+0x22>
 800f868:	2302      	movs	r3, #2
 800f86a:	e126      	b.n	800faba <HAL_SPI_Transmit+0x270>
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f874:	f7fe fd8e 	bl	800e394 <HAL_GetTick>
 800f878:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f87a:	88fb      	ldrh	r3, [r7, #6]
 800f87c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b01      	cmp	r3, #1
 800f888:	d002      	beq.n	800f890 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f88a:	2302      	movs	r3, #2
 800f88c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f88e:	e10b      	b.n	800faa8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <HAL_SPI_Transmit+0x52>
 800f896:	88fb      	ldrh	r3, [r7, #6]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d102      	bne.n	800f8a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f89c:	2301      	movs	r3, #1
 800f89e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f8a0:	e102      	b.n	800faa8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2203      	movs	r2, #3
 800f8a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	68ba      	ldr	r2, [r7, #8]
 800f8b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	88fa      	ldrh	r2, [r7, #6]
 800f8ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	88fa      	ldrh	r2, [r7, #6]
 800f8c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	689b      	ldr	r3, [r3, #8]
 800f8e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f8e8:	d10f      	bne.n	800f90a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f8f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f914:	2b40      	cmp	r3, #64	@ 0x40
 800f916:	d007      	beq.n	800f928 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f930:	d14b      	bne.n	800f9ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d002      	beq.n	800f940 <HAL_SPI_Transmit+0xf6>
 800f93a:	8afb      	ldrh	r3, [r7, #22]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d13e      	bne.n	800f9be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f944:	881a      	ldrh	r2, [r3, #0]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f950:	1c9a      	adds	r2, r3, #2
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	3b01      	subs	r3, #1
 800f95e:	b29a      	uxth	r2, r3
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f964:	e02b      	b.n	800f9be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	689b      	ldr	r3, [r3, #8]
 800f96c:	f003 0302 	and.w	r3, r3, #2
 800f970:	2b02      	cmp	r3, #2
 800f972:	d112      	bne.n	800f99a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f978:	881a      	ldrh	r2, [r3, #0]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f984:	1c9a      	adds	r2, r3, #2
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f98e:	b29b      	uxth	r3, r3
 800f990:	3b01      	subs	r3, #1
 800f992:	b29a      	uxth	r2, r3
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f998:	e011      	b.n	800f9be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f99a:	f7fe fcfb 	bl	800e394 <HAL_GetTick>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	1ad3      	subs	r3, r2, r3
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d803      	bhi.n	800f9b2 <HAL_SPI_Transmit+0x168>
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b0:	d102      	bne.n	800f9b8 <HAL_SPI_Transmit+0x16e>
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d102      	bne.n	800f9be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800f9b8:	2303      	movs	r3, #3
 800f9ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f9bc:	e074      	b.n	800faa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d1ce      	bne.n	800f966 <HAL_SPI_Transmit+0x11c>
 800f9c8:	e04c      	b.n	800fa64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d002      	beq.n	800f9d8 <HAL_SPI_Transmit+0x18e>
 800f9d2:	8afb      	ldrh	r3, [r7, #22]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d140      	bne.n	800fa5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	330c      	adds	r3, #12
 800f9e2:	7812      	ldrb	r2, [r2, #0]
 800f9e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9ea:	1c5a      	adds	r2, r3, #1
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	b29a      	uxth	r2, r3
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f9fe:	e02c      	b.n	800fa5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	f003 0302 	and.w	r3, r3, #2
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	d113      	bne.n	800fa36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	330c      	adds	r3, #12
 800fa18:	7812      	ldrb	r2, [r2, #0]
 800fa1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa20:	1c5a      	adds	r2, r3, #1
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	86da      	strh	r2, [r3, #54]	@ 0x36
 800fa34:	e011      	b.n	800fa5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa36:	f7fe fcad 	bl	800e394 <HAL_GetTick>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	683a      	ldr	r2, [r7, #0]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d803      	bhi.n	800fa4e <HAL_SPI_Transmit+0x204>
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4c:	d102      	bne.n	800fa54 <HAL_SPI_Transmit+0x20a>
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d102      	bne.n	800fa5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800fa54:	2303      	movs	r3, #3
 800fa56:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fa58:	e026      	b.n	800faa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d1cd      	bne.n	800fa00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fa64:	69ba      	ldr	r2, [r7, #24]
 800fa66:	6839      	ldr	r1, [r7, #0]
 800fa68:	68f8      	ldr	r0, [r7, #12]
 800fa6a:	f000 fcdd 	bl	8010428 <SPI_EndRxTxTransaction>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2220      	movs	r2, #32
 800fa78:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10a      	bne.n	800fa98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fa82:	2300      	movs	r3, #0
 800fa84:	613b      	str	r3, [r7, #16]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	613b      	str	r3, [r7, #16]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	689b      	ldr	r3, [r3, #8]
 800fa94:	613b      	str	r3, [r7, #16]
 800fa96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d002      	beq.n	800faa6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	77fb      	strb	r3, [r7, #31]
 800faa4:	e000      	b.n	800faa8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800faa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2201      	movs	r2, #1
 800faac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800fab8:	7ffb      	ldrb	r3, [r7, #31]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3720      	adds	r7, #32
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b088      	sub	sp, #32
 800fac6:	af02      	add	r7, sp, #8
 800fac8:	60f8      	str	r0, [r7, #12]
 800faca:	60b9      	str	r1, [r7, #8]
 800facc:	603b      	str	r3, [r7, #0]
 800face:	4613      	mov	r3, r2
 800fad0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fade:	d112      	bne.n	800fb06 <HAL_SPI_Receive+0x44>
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d10e      	bne.n	800fb06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2204      	movs	r2, #4
 800faec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800faf0:	88fa      	ldrh	r2, [r7, #6]
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	4613      	mov	r3, r2
 800faf8:	68ba      	ldr	r2, [r7, #8]
 800fafa:	68b9      	ldr	r1, [r7, #8]
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f000 f8f1 	bl	800fce4 <HAL_SPI_TransmitReceive>
 800fb02:	4603      	mov	r3, r0
 800fb04:	e0ea      	b.n	800fcdc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d101      	bne.n	800fb14 <HAL_SPI_Receive+0x52>
 800fb10:	2302      	movs	r3, #2
 800fb12:	e0e3      	b.n	800fcdc <HAL_SPI_Receive+0x21a>
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2201      	movs	r2, #1
 800fb18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb1c:	f7fe fc3a 	bl	800e394 <HAL_GetTick>
 800fb20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d002      	beq.n	800fb34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800fb2e:	2302      	movs	r3, #2
 800fb30:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fb32:	e0ca      	b.n	800fcca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d002      	beq.n	800fb40 <HAL_SPI_Receive+0x7e>
 800fb3a:	88fb      	ldrh	r3, [r7, #6]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d102      	bne.n	800fb46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800fb40:	2301      	movs	r3, #1
 800fb42:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fb44:	e0c1      	b.n	800fcca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2204      	movs	r2, #4
 800fb4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2200      	movs	r2, #0
 800fb52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	68ba      	ldr	r2, [r7, #8]
 800fb58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	88fa      	ldrh	r2, [r7, #6]
 800fb5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	88fa      	ldrh	r2, [r7, #6]
 800fb64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2200      	movs	r2, #0
 800fb76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2200      	movs	r2, #0
 800fb82:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fb8c:	d10f      	bne.n	800fbae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fb9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fbac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbb8:	2b40      	cmp	r3, #64	@ 0x40
 800fbba:	d007      	beq.n	800fbcc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fbca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d162      	bne.n	800fc9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800fbd4:	e02e      	b.n	800fc34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	689b      	ldr	r3, [r3, #8]
 800fbdc:	f003 0301 	and.w	r3, r3, #1
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d115      	bne.n	800fc10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f103 020c 	add.w	r2, r3, #12
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbf0:	7812      	ldrb	r2, [r2, #0]
 800fbf2:	b2d2      	uxtb	r2, r2
 800fbf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	3b01      	subs	r3, #1
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fc0e:	e011      	b.n	800fc34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc10:	f7fe fbc0 	bl	800e394 <HAL_GetTick>
 800fc14:	4602      	mov	r2, r0
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	683a      	ldr	r2, [r7, #0]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d803      	bhi.n	800fc28 <HAL_SPI_Receive+0x166>
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc26:	d102      	bne.n	800fc2e <HAL_SPI_Receive+0x16c>
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d102      	bne.n	800fc34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800fc2e:	2303      	movs	r3, #3
 800fc30:	75fb      	strb	r3, [r7, #23]
          goto error;
 800fc32:	e04a      	b.n	800fcca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1cb      	bne.n	800fbd6 <HAL_SPI_Receive+0x114>
 800fc3e:	e031      	b.n	800fca4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	f003 0301 	and.w	r3, r3, #1
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d113      	bne.n	800fc76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68da      	ldr	r2, [r3, #12]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc58:	b292      	uxth	r2, r2
 800fc5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc60:	1c9a      	adds	r2, r3, #2
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	3b01      	subs	r3, #1
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fc74:	e011      	b.n	800fc9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc76:	f7fe fb8d 	bl	800e394 <HAL_GetTick>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	683a      	ldr	r2, [r7, #0]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d803      	bhi.n	800fc8e <HAL_SPI_Receive+0x1cc>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8c:	d102      	bne.n	800fc94 <HAL_SPI_Receive+0x1d2>
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d102      	bne.n	800fc9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800fc94:	2303      	movs	r3, #3
 800fc96:	75fb      	strb	r3, [r7, #23]
          goto error;
 800fc98:	e017      	b.n	800fcca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d1cd      	bne.n	800fc40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fca4:	693a      	ldr	r2, [r7, #16]
 800fca6:	6839      	ldr	r1, [r7, #0]
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f000 fb57 	bl	801035c <SPI_EndRxTransaction>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d002      	beq.n	800fcba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2220      	movs	r2, #32
 800fcb8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d002      	beq.n	800fcc8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	75fb      	strb	r3, [r7, #23]
 800fcc6:	e000      	b.n	800fcca <HAL_SPI_Receive+0x208>
  }

error :
 800fcc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2201      	movs	r2, #1
 800fcce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800fcda:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3718      	adds	r7, #24
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b08c      	sub	sp, #48	@ 0x30
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
 800fcf0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d101      	bne.n	800fd0a <HAL_SPI_TransmitReceive+0x26>
 800fd06:	2302      	movs	r3, #2
 800fd08:	e18a      	b.n	8010020 <HAL_SPI_TransmitReceive+0x33c>
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fd12:	f7fe fb3f 	bl	800e394 <HAL_GetTick>
 800fd16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fd1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800fd28:	887b      	ldrh	r3, [r7, #2]
 800fd2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fd2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d00f      	beq.n	800fd54 <HAL_SPI_TransmitReceive+0x70>
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd3a:	d107      	bne.n	800fd4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d103      	bne.n	800fd4c <HAL_SPI_TransmitReceive+0x68>
 800fd44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fd48:	2b04      	cmp	r3, #4
 800fd4a:	d003      	beq.n	800fd54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800fd4c:	2302      	movs	r3, #2
 800fd4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800fd52:	e15b      	b.n	801000c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d005      	beq.n	800fd66 <HAL_SPI_TransmitReceive+0x82>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d002      	beq.n	800fd66 <HAL_SPI_TransmitReceive+0x82>
 800fd60:	887b      	ldrh	r3, [r7, #2]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d103      	bne.n	800fd6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800fd66:	2301      	movs	r3, #1
 800fd68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800fd6c:	e14e      	b.n	801000c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b04      	cmp	r3, #4
 800fd78:	d003      	beq.n	800fd82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2205      	movs	r2, #5
 800fd7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2200      	movs	r2, #0
 800fd86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	887a      	ldrh	r2, [r7, #2]
 800fd92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	887a      	ldrh	r2, [r7, #2]
 800fd98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	887a      	ldrh	r2, [r7, #2]
 800fda4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	887a      	ldrh	r2, [r7, #2]
 800fdaa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdc2:	2b40      	cmp	r3, #64	@ 0x40
 800fdc4:	d007      	beq.n	800fdd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fdd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	68db      	ldr	r3, [r3, #12]
 800fdda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fdde:	d178      	bne.n	800fed2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d002      	beq.n	800fdee <HAL_SPI_TransmitReceive+0x10a>
 800fde8:	8b7b      	ldrh	r3, [r7, #26]
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	d166      	bne.n	800febc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdf2:	881a      	ldrh	r2, [r3, #0]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdfe:	1c9a      	adds	r2, r3, #2
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	b29a      	uxth	r2, r3
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fe12:	e053      	b.n	800febc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	f003 0302 	and.w	r3, r3, #2
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d11b      	bne.n	800fe5a <HAL_SPI_TransmitReceive+0x176>
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d016      	beq.n	800fe5a <HAL_SPI_TransmitReceive+0x176>
 800fe2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d113      	bne.n	800fe5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe36:	881a      	ldrh	r2, [r3, #0]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe42:	1c9a      	adds	r2, r3, #2
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fe56:	2300      	movs	r3, #0
 800fe58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	f003 0301 	and.w	r3, r3, #1
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d119      	bne.n	800fe9c <HAL_SPI_TransmitReceive+0x1b8>
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d014      	beq.n	800fe9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	68da      	ldr	r2, [r3, #12]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe7c:	b292      	uxth	r2, r2
 800fe7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe84:	1c9a      	adds	r2, r3, #2
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	3b01      	subs	r3, #1
 800fe92:	b29a      	uxth	r2, r3
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fe9c:	f7fe fa7a 	bl	800e394 <HAL_GetTick>
 800fea0:	4602      	mov	r2, r0
 800fea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fea4:	1ad3      	subs	r3, r2, r3
 800fea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d807      	bhi.n	800febc <HAL_SPI_TransmitReceive+0x1d8>
 800feac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feb2:	d003      	beq.n	800febc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800feb4:	2303      	movs	r3, #3
 800feb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800feba:	e0a7      	b.n	801000c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d1a6      	bne.n	800fe14 <HAL_SPI_TransmitReceive+0x130>
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800feca:	b29b      	uxth	r3, r3
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1a1      	bne.n	800fe14 <HAL_SPI_TransmitReceive+0x130>
 800fed0:	e07c      	b.n	800ffcc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d002      	beq.n	800fee0 <HAL_SPI_TransmitReceive+0x1fc>
 800feda:	8b7b      	ldrh	r3, [r7, #26]
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d16b      	bne.n	800ffb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	330c      	adds	r3, #12
 800feea:	7812      	ldrb	r2, [r2, #0]
 800feec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fef2:	1c5a      	adds	r2, r3, #1
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	3b01      	subs	r3, #1
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ff06:	e057      	b.n	800ffb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	f003 0302 	and.w	r3, r3, #2
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d11c      	bne.n	800ff50 <HAL_SPI_TransmitReceive+0x26c>
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d017      	beq.n	800ff50 <HAL_SPI_TransmitReceive+0x26c>
 800ff20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d114      	bne.n	800ff50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	330c      	adds	r3, #12
 800ff30:	7812      	ldrb	r2, [r2, #0]
 800ff32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff38:	1c5a      	adds	r2, r3, #1
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	3b01      	subs	r3, #1
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	689b      	ldr	r3, [r3, #8]
 800ff56:	f003 0301 	and.w	r3, r3, #1
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d119      	bne.n	800ff92 <HAL_SPI_TransmitReceive+0x2ae>
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d014      	beq.n	800ff92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	68da      	ldr	r2, [r3, #12]
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff72:	b2d2      	uxtb	r2, r2
 800ff74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff7a:	1c5a      	adds	r2, r3, #1
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	3b01      	subs	r3, #1
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ff92:	f7fe f9ff 	bl	800e394 <HAL_GetTick>
 800ff96:	4602      	mov	r2, r0
 800ff98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d803      	bhi.n	800ffaa <HAL_SPI_TransmitReceive+0x2c6>
 800ffa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa8:	d102      	bne.n	800ffb0 <HAL_SPI_TransmitReceive+0x2cc>
 800ffaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d103      	bne.n	800ffb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ffb0:	2303      	movs	r3, #3
 800ffb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800ffb6:	e029      	b.n	801000c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d1a2      	bne.n	800ff08 <HAL_SPI_TransmitReceive+0x224>
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d19d      	bne.n	800ff08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ffcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f000 fa29 	bl	8010428 <SPI_EndRxTxTransaction>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d006      	beq.n	800ffea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2220      	movs	r2, #32
 800ffe6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800ffe8:	e010      	b.n	801000c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d10b      	bne.n	801000a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fff2:	2300      	movs	r3, #0
 800fff4:	617b      	str	r3, [r7, #20]
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	617b      	str	r3, [r7, #20]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	689b      	ldr	r3, [r3, #8]
 8010004:	617b      	str	r3, [r7, #20]
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	e000      	b.n	801000c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801000a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2201      	movs	r2, #1
 8010010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2200      	movs	r2, #0
 8010018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 801001c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8010020:	4618      	mov	r0, r3
 8010022:	3730      	adds	r7, #48	@ 0x30
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b088      	sub	sp, #32
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010046:	2b00      	cmp	r3, #0
 8010048:	d10e      	bne.n	8010068 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010050:	2b00      	cmp	r3, #0
 8010052:	d009      	beq.n	8010068 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801005a:	2b00      	cmp	r3, #0
 801005c:	d004      	beq.n	8010068 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	4798      	blx	r3
    return;
 8010066:	e0ce      	b.n	8010206 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	f003 0302 	and.w	r3, r3, #2
 801006e:	2b00      	cmp	r3, #0
 8010070:	d009      	beq.n	8010086 <HAL_SPI_IRQHandler+0x5e>
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010078:	2b00      	cmp	r3, #0
 801007a:	d004      	beq.n	8010086 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	4798      	blx	r3
    return;
 8010084:	e0bf      	b.n	8010206 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	f003 0320 	and.w	r3, r3, #32
 801008c:	2b00      	cmp	r3, #0
 801008e:	d10a      	bne.n	80100a6 <HAL_SPI_IRQHandler+0x7e>
 8010090:	69bb      	ldr	r3, [r7, #24]
 8010092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010096:	2b00      	cmp	r3, #0
 8010098:	d105      	bne.n	80100a6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	f000 80b0 	beq.w	8010206 <HAL_SPI_IRQHandler+0x1de>
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	f003 0320 	and.w	r3, r3, #32
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f000 80aa 	beq.w	8010206 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d023      	beq.n	8010104 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b03      	cmp	r3, #3
 80100c6:	d011      	beq.n	80100ec <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100cc:	f043 0204 	orr.w	r2, r3, #4
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80100d4:	2300      	movs	r3, #0
 80100d6:	617b      	str	r3, [r7, #20]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	617b      	str	r3, [r7, #20]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	617b      	str	r3, [r7, #20]
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	e00b      	b.n	8010104 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80100ec:	2300      	movs	r3, #0
 80100ee:	613b      	str	r3, [r7, #16]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	613b      	str	r3, [r7, #16]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	613b      	str	r3, [r7, #16]
 8010100:	693b      	ldr	r3, [r7, #16]
        return;
 8010102:	e080      	b.n	8010206 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	f003 0320 	and.w	r3, r3, #32
 801010a:	2b00      	cmp	r3, #0
 801010c:	d014      	beq.n	8010138 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010112:	f043 0201 	orr.w	r2, r3, #1
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801011a:	2300      	movs	r3, #0
 801011c:	60fb      	str	r3, [r7, #12]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	60fb      	str	r3, [r7, #12]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00c      	beq.n	801015c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010146:	f043 0208 	orr.w	r2, r3, #8
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801014e:	2300      	movs	r3, #0
 8010150:	60bb      	str	r3, [r7, #8]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	60bb      	str	r3, [r7, #8]
 801015a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010160:	2b00      	cmp	r3, #0
 8010162:	d04f      	beq.n	8010204 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	685a      	ldr	r2, [r3, #4]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010172:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2201      	movs	r2, #1
 8010178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	f003 0302 	and.w	r3, r3, #2
 8010182:	2b00      	cmp	r3, #0
 8010184:	d104      	bne.n	8010190 <HAL_SPI_IRQHandler+0x168>
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	f003 0301 	and.w	r3, r3, #1
 801018c:	2b00      	cmp	r3, #0
 801018e:	d034      	beq.n	80101fa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	685a      	ldr	r2, [r3, #4]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f022 0203 	bic.w	r2, r2, #3
 801019e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d011      	beq.n	80101cc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101ac:	4a17      	ldr	r2, [pc, #92]	@ (801020c <HAL_SPI_IRQHandler+0x1e4>)
 80101ae:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fe fa9e 	bl	800e6f6 <HAL_DMA_Abort_IT>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d005      	beq.n	80101cc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d016      	beq.n	8010202 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101d8:	4a0c      	ldr	r2, [pc, #48]	@ (801020c <HAL_SPI_IRQHandler+0x1e4>)
 80101da:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fe fa88 	bl	800e6f6 <HAL_DMA_Abort_IT>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00a      	beq.n	8010202 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80101f8:	e003      	b.n	8010202 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 f808 	bl	8010210 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010200:	e000      	b.n	8010204 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8010202:	bf00      	nop
    return;
 8010204:	bf00      	nop
  }
}
 8010206:	3720      	adds	r7, #32
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	08010225 	.word	0x08010225

08010210 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010218:	bf00      	nop
 801021a:	370c      	adds	r7, #12
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010230:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2200      	movs	r2, #0
 8010236:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2200      	movs	r2, #0
 801023c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	f7ff ffe6 	bl	8010210 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010244:	bf00      	nop
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b088      	sub	sp, #32
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	603b      	str	r3, [r7, #0]
 8010258:	4613      	mov	r3, r2
 801025a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801025c:	f7fe f89a 	bl	800e394 <HAL_GetTick>
 8010260:	4602      	mov	r2, r0
 8010262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010264:	1a9b      	subs	r3, r3, r2
 8010266:	683a      	ldr	r2, [r7, #0]
 8010268:	4413      	add	r3, r2
 801026a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801026c:	f7fe f892 	bl	800e394 <HAL_GetTick>
 8010270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010272:	4b39      	ldr	r3, [pc, #228]	@ (8010358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	015b      	lsls	r3, r3, #5
 8010278:	0d1b      	lsrs	r3, r3, #20
 801027a:	69fa      	ldr	r2, [r7, #28]
 801027c:	fb02 f303 	mul.w	r3, r2, r3
 8010280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010282:	e054      	b.n	801032e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801028a:	d050      	beq.n	801032e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801028c:	f7fe f882 	bl	800e394 <HAL_GetTick>
 8010290:	4602      	mov	r2, r0
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	1ad3      	subs	r3, r2, r3
 8010296:	69fa      	ldr	r2, [r7, #28]
 8010298:	429a      	cmp	r2, r3
 801029a:	d902      	bls.n	80102a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d13d      	bne.n	801031e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	685a      	ldr	r2, [r3, #4]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80102b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102ba:	d111      	bne.n	80102e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80102c4:	d004      	beq.n	80102d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102ce:	d107      	bne.n	80102e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80102de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102e8:	d10f      	bne.n	801030a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2201      	movs	r2, #1
 801030e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2200      	movs	r2, #0
 8010316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801031a:	2303      	movs	r3, #3
 801031c:	e017      	b.n	801034e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d101      	bne.n	8010328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010324:	2300      	movs	r3, #0
 8010326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	3b01      	subs	r3, #1
 801032c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	689a      	ldr	r2, [r3, #8]
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	4013      	ands	r3, r2
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	429a      	cmp	r2, r3
 801033c:	bf0c      	ite	eq
 801033e:	2301      	moveq	r3, #1
 8010340:	2300      	movne	r3, #0
 8010342:	b2db      	uxtb	r3, r3
 8010344:	461a      	mov	r2, r3
 8010346:	79fb      	ldrb	r3, [r7, #7]
 8010348:	429a      	cmp	r2, r3
 801034a:	d19b      	bne.n	8010284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3720      	adds	r7, #32
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	20000008 	.word	0x20000008

0801035c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af02      	add	r7, sp, #8
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010370:	d111      	bne.n	8010396 <SPI_EndRxTransaction+0x3a>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801037a:	d004      	beq.n	8010386 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	689b      	ldr	r3, [r3, #8]
 8010380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010384:	d107      	bne.n	8010396 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010394:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801039e:	d12a      	bne.n	80103f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103a8:	d012      	beq.n	80103d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	9300      	str	r3, [sp, #0]
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	2200      	movs	r2, #0
 80103b2:	2180      	movs	r1, #128	@ 0x80
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f7ff ff49 	bl	801024c <SPI_WaitFlagStateUntilTimeout>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d02d      	beq.n	801041c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103c4:	f043 0220 	orr.w	r2, r3, #32
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80103cc:	2303      	movs	r3, #3
 80103ce:	e026      	b.n	801041e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	2200      	movs	r2, #0
 80103d8:	2101      	movs	r1, #1
 80103da:	68f8      	ldr	r0, [r7, #12]
 80103dc:	f7ff ff36 	bl	801024c <SPI_WaitFlagStateUntilTimeout>
 80103e0:	4603      	mov	r3, r0
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d01a      	beq.n	801041c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103ea:	f043 0220 	orr.w	r2, r3, #32
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80103f2:	2303      	movs	r3, #3
 80103f4:	e013      	b.n	801041e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	9300      	str	r3, [sp, #0]
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	2200      	movs	r2, #0
 80103fe:	2101      	movs	r1, #1
 8010400:	68f8      	ldr	r0, [r7, #12]
 8010402:	f7ff ff23 	bl	801024c <SPI_WaitFlagStateUntilTimeout>
 8010406:	4603      	mov	r3, r0
 8010408:	2b00      	cmp	r3, #0
 801040a:	d007      	beq.n	801041c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010410:	f043 0220 	orr.w	r2, r3, #32
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010418:	2303      	movs	r3, #3
 801041a:	e000      	b.n	801041e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
	...

08010428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af02      	add	r7, sp, #8
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010434:	4b1b      	ldr	r3, [pc, #108]	@ (80104a4 <SPI_EndRxTxTransaction+0x7c>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	4a1b      	ldr	r2, [pc, #108]	@ (80104a8 <SPI_EndRxTxTransaction+0x80>)
 801043a:	fba2 2303 	umull	r2, r3, r2, r3
 801043e:	0d5b      	lsrs	r3, r3, #21
 8010440:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010444:	fb02 f303 	mul.w	r3, r2, r3
 8010448:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010452:	d112      	bne.n	801047a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	2200      	movs	r2, #0
 801045c:	2180      	movs	r1, #128	@ 0x80
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f7ff fef4 	bl	801024c <SPI_WaitFlagStateUntilTimeout>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d016      	beq.n	8010498 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801046e:	f043 0220 	orr.w	r2, r3, #32
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010476:	2303      	movs	r3, #3
 8010478:	e00f      	b.n	801049a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d00a      	beq.n	8010496 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	3b01      	subs	r3, #1
 8010484:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010490:	2b80      	cmp	r3, #128	@ 0x80
 8010492:	d0f2      	beq.n	801047a <SPI_EndRxTxTransaction+0x52>
 8010494:	e000      	b.n	8010498 <SPI_EndRxTxTransaction+0x70>
        break;
 8010496:	bf00      	nop
  }

  return HAL_OK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3718      	adds	r7, #24
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	20000008 	.word	0x20000008
 80104a8:	165e9f81 	.word	0x165e9f81

080104ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d101      	bne.n	80104be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e041      	b.n	8010542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d106      	bne.n	80104d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2200      	movs	r2, #0
 80104ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f7fd fbee 	bl	800dcb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2202      	movs	r2, #2
 80104dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	3304      	adds	r3, #4
 80104e8:	4619      	mov	r1, r3
 80104ea:	4610      	mov	r0, r2
 80104ec:	f000 fba8 	bl	8010c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2201      	movs	r2, #1
 80104fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2201      	movs	r2, #1
 8010504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2201      	movs	r2, #1
 801050c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2201      	movs	r2, #1
 8010514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2201      	movs	r2, #1
 801051c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2201      	movs	r2, #1
 8010524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2201      	movs	r2, #1
 801052c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2201      	movs	r2, #1
 8010534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2201      	movs	r2, #1
 801053c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010540:	2300      	movs	r3, #0
}
 8010542:	4618      	mov	r0, r3
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
	...

0801054c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801054c:	b480      	push	{r7}
 801054e:	b085      	sub	sp, #20
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801055a:	b2db      	uxtb	r3, r3
 801055c:	2b01      	cmp	r3, #1
 801055e:	d001      	beq.n	8010564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010560:	2301      	movs	r3, #1
 8010562:	e04e      	b.n	8010602 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2202      	movs	r2, #2
 8010568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	68da      	ldr	r2, [r3, #12]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f042 0201 	orr.w	r2, r2, #1
 801057a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4a23      	ldr	r2, [pc, #140]	@ (8010610 <HAL_TIM_Base_Start_IT+0xc4>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d022      	beq.n	80105cc <HAL_TIM_Base_Start_IT+0x80>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801058e:	d01d      	beq.n	80105cc <HAL_TIM_Base_Start_IT+0x80>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a1f      	ldr	r2, [pc, #124]	@ (8010614 <HAL_TIM_Base_Start_IT+0xc8>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d018      	beq.n	80105cc <HAL_TIM_Base_Start_IT+0x80>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4a1e      	ldr	r2, [pc, #120]	@ (8010618 <HAL_TIM_Base_Start_IT+0xcc>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d013      	beq.n	80105cc <HAL_TIM_Base_Start_IT+0x80>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4a1c      	ldr	r2, [pc, #112]	@ (801061c <HAL_TIM_Base_Start_IT+0xd0>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d00e      	beq.n	80105cc <HAL_TIM_Base_Start_IT+0x80>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	4a1b      	ldr	r2, [pc, #108]	@ (8010620 <HAL_TIM_Base_Start_IT+0xd4>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d009      	beq.n	80105cc <HAL_TIM_Base_Start_IT+0x80>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4a19      	ldr	r2, [pc, #100]	@ (8010624 <HAL_TIM_Base_Start_IT+0xd8>)
 80105be:	4293      	cmp	r3, r2
 80105c0:	d004      	beq.n	80105cc <HAL_TIM_Base_Start_IT+0x80>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4a18      	ldr	r2, [pc, #96]	@ (8010628 <HAL_TIM_Base_Start_IT+0xdc>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d111      	bne.n	80105f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	f003 0307 	and.w	r3, r3, #7
 80105d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2b06      	cmp	r3, #6
 80105dc:	d010      	beq.n	8010600 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f042 0201 	orr.w	r2, r2, #1
 80105ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105ee:	e007      	b.n	8010600 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f042 0201 	orr.w	r2, r2, #1
 80105fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3714      	adds	r7, #20
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	40010000 	.word	0x40010000
 8010614:	40000400 	.word	0x40000400
 8010618:	40000800 	.word	0x40000800
 801061c:	40000c00 	.word	0x40000c00
 8010620:	40010400 	.word	0x40010400
 8010624:	40014000 	.word	0x40014000
 8010628:	40001800 	.word	0x40001800

0801062c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d101      	bne.n	801063e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801063a:	2301      	movs	r3, #1
 801063c:	e041      	b.n	80106c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7fd fae0 	bl	800dc18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2202      	movs	r2, #2
 801065c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	3304      	adds	r3, #4
 8010668:	4619      	mov	r1, r3
 801066a:	4610      	mov	r0, r2
 801066c:	f000 fae8 	bl	8010c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2201      	movs	r2, #1
 8010674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2201      	movs	r2, #1
 801067c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2201      	movs	r2, #1
 8010684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2201      	movs	r2, #1
 801068c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2201      	movs	r2, #1
 8010694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2201      	movs	r2, #1
 801069c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2201      	movs	r2, #1
 80106ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2201      	movs	r2, #1
 80106b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2201      	movs	r2, #1
 80106bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b082      	sub	sp, #8
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	691b      	ldr	r3, [r3, #16]
 80106d8:	f003 0302 	and.w	r3, r3, #2
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d122      	bne.n	8010726 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	68db      	ldr	r3, [r3, #12]
 80106e6:	f003 0302 	and.w	r3, r3, #2
 80106ea:	2b02      	cmp	r3, #2
 80106ec:	d11b      	bne.n	8010726 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f06f 0202 	mvn.w	r2, #2
 80106f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2201      	movs	r2, #1
 80106fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	699b      	ldr	r3, [r3, #24]
 8010704:	f003 0303 	and.w	r3, r3, #3
 8010708:	2b00      	cmp	r3, #0
 801070a:	d003      	beq.n	8010714 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 fa78 	bl	8010c02 <HAL_TIM_IC_CaptureCallback>
 8010712:	e005      	b.n	8010720 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fa6a 	bl	8010bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f000 fa7b 	bl	8010c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2200      	movs	r2, #0
 8010724:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	f003 0304 	and.w	r3, r3, #4
 8010730:	2b04      	cmp	r3, #4
 8010732:	d122      	bne.n	801077a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	f003 0304 	and.w	r3, r3, #4
 801073e:	2b04      	cmp	r3, #4
 8010740:	d11b      	bne.n	801077a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f06f 0204 	mvn.w	r2, #4
 801074a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2202      	movs	r2, #2
 8010750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	699b      	ldr	r3, [r3, #24]
 8010758:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801075c:	2b00      	cmp	r3, #0
 801075e:	d003      	beq.n	8010768 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f000 fa4e 	bl	8010c02 <HAL_TIM_IC_CaptureCallback>
 8010766:	e005      	b.n	8010774 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 fa40 	bl	8010bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fa51 	bl	8010c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2200      	movs	r2, #0
 8010778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	691b      	ldr	r3, [r3, #16]
 8010780:	f003 0308 	and.w	r3, r3, #8
 8010784:	2b08      	cmp	r3, #8
 8010786:	d122      	bne.n	80107ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	f003 0308 	and.w	r3, r3, #8
 8010792:	2b08      	cmp	r3, #8
 8010794:	d11b      	bne.n	80107ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f06f 0208 	mvn.w	r2, #8
 801079e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2204      	movs	r2, #4
 80107a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	69db      	ldr	r3, [r3, #28]
 80107ac:	f003 0303 	and.w	r3, r3, #3
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d003      	beq.n	80107bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 fa24 	bl	8010c02 <HAL_TIM_IC_CaptureCallback>
 80107ba:	e005      	b.n	80107c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 fa16 	bl	8010bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f000 fa27 	bl	8010c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	691b      	ldr	r3, [r3, #16]
 80107d4:	f003 0310 	and.w	r3, r3, #16
 80107d8:	2b10      	cmp	r3, #16
 80107da:	d122      	bne.n	8010822 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	f003 0310 	and.w	r3, r3, #16
 80107e6:	2b10      	cmp	r3, #16
 80107e8:	d11b      	bne.n	8010822 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f06f 0210 	mvn.w	r2, #16
 80107f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2208      	movs	r2, #8
 80107f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	69db      	ldr	r3, [r3, #28]
 8010800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010804:	2b00      	cmp	r3, #0
 8010806:	d003      	beq.n	8010810 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 f9fa 	bl	8010c02 <HAL_TIM_IC_CaptureCallback>
 801080e:	e005      	b.n	801081c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 f9ec 	bl	8010bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 f9fd 	bl	8010c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	691b      	ldr	r3, [r3, #16]
 8010828:	f003 0301 	and.w	r3, r3, #1
 801082c:	2b01      	cmp	r3, #1
 801082e:	d10e      	bne.n	801084e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	f003 0301 	and.w	r3, r3, #1
 801083a:	2b01      	cmp	r3, #1
 801083c:	d107      	bne.n	801084e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f06f 0201 	mvn.w	r2, #1
 8010846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7fd f907 	bl	800da5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	691b      	ldr	r3, [r3, #16]
 8010854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010858:	2b80      	cmp	r3, #128	@ 0x80
 801085a:	d10e      	bne.n	801087a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010866:	2b80      	cmp	r3, #128	@ 0x80
 8010868:	d107      	bne.n	801087a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fda5 	bl	80113c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010884:	2b40      	cmp	r3, #64	@ 0x40
 8010886:	d10e      	bne.n	80108a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010892:	2b40      	cmp	r3, #64	@ 0x40
 8010894:	d107      	bne.n	80108a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801089e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 f9c2 	bl	8010c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	f003 0320 	and.w	r3, r3, #32
 80108b0:	2b20      	cmp	r3, #32
 80108b2:	d10e      	bne.n	80108d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	f003 0320 	and.w	r3, r3, #32
 80108be:	2b20      	cmp	r3, #32
 80108c0:	d107      	bne.n	80108d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f06f 0220 	mvn.w	r2, #32
 80108ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 fd6f 	bl	80113b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80108d2:	bf00      	nop
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
	...

080108dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b086      	sub	sp, #24
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108e8:	2300      	movs	r3, #0
 80108ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d101      	bne.n	80108fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80108f6:	2302      	movs	r3, #2
 80108f8:	e0ae      	b.n	8010a58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2201      	movs	r2, #1
 80108fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2b0c      	cmp	r3, #12
 8010906:	f200 809f 	bhi.w	8010a48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801090a:	a201      	add	r2, pc, #4	@ (adr r2, 8010910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010910:	08010945 	.word	0x08010945
 8010914:	08010a49 	.word	0x08010a49
 8010918:	08010a49 	.word	0x08010a49
 801091c:	08010a49 	.word	0x08010a49
 8010920:	08010985 	.word	0x08010985
 8010924:	08010a49 	.word	0x08010a49
 8010928:	08010a49 	.word	0x08010a49
 801092c:	08010a49 	.word	0x08010a49
 8010930:	080109c7 	.word	0x080109c7
 8010934:	08010a49 	.word	0x08010a49
 8010938:	08010a49 	.word	0x08010a49
 801093c:	08010a49 	.word	0x08010a49
 8010940:	08010a07 	.word	0x08010a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68b9      	ldr	r1, [r7, #8]
 801094a:	4618      	mov	r0, r3
 801094c:	f000 fa18 	bl	8010d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	699a      	ldr	r2, [r3, #24]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f042 0208 	orr.w	r2, r2, #8
 801095e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	699a      	ldr	r2, [r3, #24]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	f022 0204 	bic.w	r2, r2, #4
 801096e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	6999      	ldr	r1, [r3, #24]
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	691a      	ldr	r2, [r3, #16]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	430a      	orrs	r2, r1
 8010980:	619a      	str	r2, [r3, #24]
      break;
 8010982:	e064      	b.n	8010a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	68b9      	ldr	r1, [r7, #8]
 801098a:	4618      	mov	r0, r3
 801098c:	f000 fa68 	bl	8010e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	699a      	ldr	r2, [r3, #24]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801099e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	699a      	ldr	r2, [r3, #24]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80109ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	6999      	ldr	r1, [r3, #24]
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	691b      	ldr	r3, [r3, #16]
 80109ba:	021a      	lsls	r2, r3, #8
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	430a      	orrs	r2, r1
 80109c2:	619a      	str	r2, [r3, #24]
      break;
 80109c4:	e043      	b.n	8010a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	68b9      	ldr	r1, [r7, #8]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f000 fabd 	bl	8010f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	69da      	ldr	r2, [r3, #28]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f042 0208 	orr.w	r2, r2, #8
 80109e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	69da      	ldr	r2, [r3, #28]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f022 0204 	bic.w	r2, r2, #4
 80109f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	69d9      	ldr	r1, [r3, #28]
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	691a      	ldr	r2, [r3, #16]
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	430a      	orrs	r2, r1
 8010a02:	61da      	str	r2, [r3, #28]
      break;
 8010a04:	e023      	b.n	8010a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68b9      	ldr	r1, [r7, #8]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f000 fb11 	bl	8011034 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	69da      	ldr	r2, [r3, #28]
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	69da      	ldr	r2, [r3, #28]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	69d9      	ldr	r1, [r3, #28]
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	691b      	ldr	r3, [r3, #16]
 8010a3c:	021a      	lsls	r2, r3, #8
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	430a      	orrs	r2, r1
 8010a44:	61da      	str	r2, [r3, #28]
      break;
 8010a46:	e002      	b.n	8010a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010a48:	2301      	movs	r3, #1
 8010a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8010a4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2200      	movs	r2, #0
 8010a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3718      	adds	r7, #24
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d101      	bne.n	8010a7c <HAL_TIM_ConfigClockSource+0x1c>
 8010a78:	2302      	movs	r3, #2
 8010a7a:	e0b4      	b.n	8010be6 <HAL_TIM_ConfigClockSource+0x186>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2202      	movs	r2, #2
 8010a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	689b      	ldr	r3, [r3, #8]
 8010a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68ba      	ldr	r2, [r7, #8]
 8010aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010ab4:	d03e      	beq.n	8010b34 <HAL_TIM_ConfigClockSource+0xd4>
 8010ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010aba:	f200 8087 	bhi.w	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
 8010abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ac2:	f000 8086 	beq.w	8010bd2 <HAL_TIM_ConfigClockSource+0x172>
 8010ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010aca:	d87f      	bhi.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
 8010acc:	2b70      	cmp	r3, #112	@ 0x70
 8010ace:	d01a      	beq.n	8010b06 <HAL_TIM_ConfigClockSource+0xa6>
 8010ad0:	2b70      	cmp	r3, #112	@ 0x70
 8010ad2:	d87b      	bhi.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
 8010ad4:	2b60      	cmp	r3, #96	@ 0x60
 8010ad6:	d050      	beq.n	8010b7a <HAL_TIM_ConfigClockSource+0x11a>
 8010ad8:	2b60      	cmp	r3, #96	@ 0x60
 8010ada:	d877      	bhi.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
 8010adc:	2b50      	cmp	r3, #80	@ 0x50
 8010ade:	d03c      	beq.n	8010b5a <HAL_TIM_ConfigClockSource+0xfa>
 8010ae0:	2b50      	cmp	r3, #80	@ 0x50
 8010ae2:	d873      	bhi.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
 8010ae4:	2b40      	cmp	r3, #64	@ 0x40
 8010ae6:	d058      	beq.n	8010b9a <HAL_TIM_ConfigClockSource+0x13a>
 8010ae8:	2b40      	cmp	r3, #64	@ 0x40
 8010aea:	d86f      	bhi.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
 8010aec:	2b30      	cmp	r3, #48	@ 0x30
 8010aee:	d064      	beq.n	8010bba <HAL_TIM_ConfigClockSource+0x15a>
 8010af0:	2b30      	cmp	r3, #48	@ 0x30
 8010af2:	d86b      	bhi.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
 8010af4:	2b20      	cmp	r3, #32
 8010af6:	d060      	beq.n	8010bba <HAL_TIM_ConfigClockSource+0x15a>
 8010af8:	2b20      	cmp	r3, #32
 8010afa:	d867      	bhi.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d05c      	beq.n	8010bba <HAL_TIM_ConfigClockSource+0x15a>
 8010b00:	2b10      	cmp	r3, #16
 8010b02:	d05a      	beq.n	8010bba <HAL_TIM_ConfigClockSource+0x15a>
 8010b04:	e062      	b.n	8010bcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6818      	ldr	r0, [r3, #0]
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	6899      	ldr	r1, [r3, #8]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	685a      	ldr	r2, [r3, #4]
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	f000 fb5d 	bl	80111d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	609a      	str	r2, [r3, #8]
      break;
 8010b32:	e04f      	b.n	8010bd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6818      	ldr	r0, [r3, #0]
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	6899      	ldr	r1, [r3, #8]
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	685a      	ldr	r2, [r3, #4]
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	f000 fb46 	bl	80111d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	689a      	ldr	r2, [r3, #8]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010b56:	609a      	str	r2, [r3, #8]
      break;
 8010b58:	e03c      	b.n	8010bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6818      	ldr	r0, [r3, #0]
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	6859      	ldr	r1, [r3, #4]
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	461a      	mov	r2, r3
 8010b68:	f000 faba 	bl	80110e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	2150      	movs	r1, #80	@ 0x50
 8010b72:	4618      	mov	r0, r3
 8010b74:	f000 fb13 	bl	801119e <TIM_ITRx_SetConfig>
      break;
 8010b78:	e02c      	b.n	8010bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6818      	ldr	r0, [r3, #0]
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	6859      	ldr	r1, [r3, #4]
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	461a      	mov	r2, r3
 8010b88:	f000 fad9 	bl	801113e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	2160      	movs	r1, #96	@ 0x60
 8010b92:	4618      	mov	r0, r3
 8010b94:	f000 fb03 	bl	801119e <TIM_ITRx_SetConfig>
      break;
 8010b98:	e01c      	b.n	8010bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6818      	ldr	r0, [r3, #0]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	6859      	ldr	r1, [r3, #4]
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	f000 fa9a 	bl	80110e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2140      	movs	r1, #64	@ 0x40
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f000 faf3 	bl	801119e <TIM_ITRx_SetConfig>
      break;
 8010bb8:	e00c      	b.n	8010bd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	4610      	mov	r0, r2
 8010bc6:	f000 faea 	bl	801119e <TIM_ITRx_SetConfig>
      break;
 8010bca:	e003      	b.n	8010bd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	73fb      	strb	r3, [r7, #15]
      break;
 8010bd0:	e000      	b.n	8010bd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010bee:	b480      	push	{r7}
 8010bf0:	b083      	sub	sp, #12
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010bf6:	bf00      	nop
 8010bf8:	370c      	adds	r7, #12
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr

08010c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010c02:	b480      	push	{r7}
 8010c04:	b083      	sub	sp, #12
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010c0a:	bf00      	nop
 8010c0c:	370c      	adds	r7, #12
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010c16:	b480      	push	{r7}
 8010c18:	b083      	sub	sp, #12
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010c1e:	bf00      	nop
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010c2a:	b480      	push	{r7}
 8010c2c:	b083      	sub	sp, #12
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010c32:	bf00      	nop
 8010c34:	370c      	adds	r7, #12
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr
	...

08010c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4a40      	ldr	r2, [pc, #256]	@ (8010d54 <TIM_Base_SetConfig+0x114>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d013      	beq.n	8010c80 <TIM_Base_SetConfig+0x40>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c5e:	d00f      	beq.n	8010c80 <TIM_Base_SetConfig+0x40>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	4a3d      	ldr	r2, [pc, #244]	@ (8010d58 <TIM_Base_SetConfig+0x118>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d00b      	beq.n	8010c80 <TIM_Base_SetConfig+0x40>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8010d5c <TIM_Base_SetConfig+0x11c>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d007      	beq.n	8010c80 <TIM_Base_SetConfig+0x40>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4a3b      	ldr	r2, [pc, #236]	@ (8010d60 <TIM_Base_SetConfig+0x120>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d003      	beq.n	8010c80 <TIM_Base_SetConfig+0x40>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4a3a      	ldr	r2, [pc, #232]	@ (8010d64 <TIM_Base_SetConfig+0x124>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d108      	bne.n	8010c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	4a2f      	ldr	r2, [pc, #188]	@ (8010d54 <TIM_Base_SetConfig+0x114>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d02b      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ca0:	d027      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8010d58 <TIM_Base_SetConfig+0x118>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d023      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a2b      	ldr	r2, [pc, #172]	@ (8010d5c <TIM_Base_SetConfig+0x11c>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d01f      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8010d60 <TIM_Base_SetConfig+0x120>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d01b      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4a29      	ldr	r2, [pc, #164]	@ (8010d64 <TIM_Base_SetConfig+0x124>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d017      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	4a28      	ldr	r2, [pc, #160]	@ (8010d68 <TIM_Base_SetConfig+0x128>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d013      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4a27      	ldr	r2, [pc, #156]	@ (8010d6c <TIM_Base_SetConfig+0x12c>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d00f      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	4a26      	ldr	r2, [pc, #152]	@ (8010d70 <TIM_Base_SetConfig+0x130>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d00b      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4a25      	ldr	r2, [pc, #148]	@ (8010d74 <TIM_Base_SetConfig+0x134>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d007      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4a24      	ldr	r2, [pc, #144]	@ (8010d78 <TIM_Base_SetConfig+0x138>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d003      	beq.n	8010cf2 <TIM_Base_SetConfig+0xb2>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4a23      	ldr	r2, [pc, #140]	@ (8010d7c <TIM_Base_SetConfig+0x13c>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d108      	bne.n	8010d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	68fa      	ldr	r2, [r7, #12]
 8010d00:	4313      	orrs	r3, r2
 8010d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	695b      	ldr	r3, [r3, #20]
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	68fa      	ldr	r2, [r7, #12]
 8010d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	689a      	ldr	r2, [r3, #8]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8010d54 <TIM_Base_SetConfig+0x114>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d003      	beq.n	8010d38 <TIM_Base_SetConfig+0xf8>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	4a0c      	ldr	r2, [pc, #48]	@ (8010d64 <TIM_Base_SetConfig+0x124>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d103      	bne.n	8010d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	691a      	ldr	r2, [r3, #16]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2201      	movs	r2, #1
 8010d44:	615a      	str	r2, [r3, #20]
}
 8010d46:	bf00      	nop
 8010d48:	3714      	adds	r7, #20
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop
 8010d54:	40010000 	.word	0x40010000
 8010d58:	40000400 	.word	0x40000400
 8010d5c:	40000800 	.word	0x40000800
 8010d60:	40000c00 	.word	0x40000c00
 8010d64:	40010400 	.word	0x40010400
 8010d68:	40014000 	.word	0x40014000
 8010d6c:	40014400 	.word	0x40014400
 8010d70:	40014800 	.word	0x40014800
 8010d74:	40001800 	.word	0x40001800
 8010d78:	40001c00 	.word	0x40001c00
 8010d7c:	40002000 	.word	0x40002000

08010d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b087      	sub	sp, #28
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6a1b      	ldr	r3, [r3, #32]
 8010d8e:	f023 0201 	bic.w	r2, r3, #1
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6a1b      	ldr	r3, [r3, #32]
 8010d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	699b      	ldr	r3, [r3, #24]
 8010da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f023 0303 	bic.w	r3, r3, #3
 8010db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68fa      	ldr	r2, [r7, #12]
 8010dbe:	4313      	orrs	r3, r2
 8010dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	f023 0302 	bic.w	r3, r3, #2
 8010dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	697a      	ldr	r2, [r7, #20]
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4a20      	ldr	r2, [pc, #128]	@ (8010e58 <TIM_OC1_SetConfig+0xd8>)
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d003      	beq.n	8010de4 <TIM_OC1_SetConfig+0x64>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4a1f      	ldr	r2, [pc, #124]	@ (8010e5c <TIM_OC1_SetConfig+0xdc>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d10c      	bne.n	8010dfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	f023 0308 	bic.w	r3, r3, #8
 8010dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	697a      	ldr	r2, [r7, #20]
 8010df2:	4313      	orrs	r3, r2
 8010df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f023 0304 	bic.w	r3, r3, #4
 8010dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	4a15      	ldr	r2, [pc, #84]	@ (8010e58 <TIM_OC1_SetConfig+0xd8>)
 8010e02:	4293      	cmp	r3, r2
 8010e04:	d003      	beq.n	8010e0e <TIM_OC1_SetConfig+0x8e>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4a14      	ldr	r2, [pc, #80]	@ (8010e5c <TIM_OC1_SetConfig+0xdc>)
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	d111      	bne.n	8010e32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	695b      	ldr	r3, [r3, #20]
 8010e22:	693a      	ldr	r2, [r7, #16]
 8010e24:	4313      	orrs	r3, r2
 8010e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	699b      	ldr	r3, [r3, #24]
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	693a      	ldr	r2, [r7, #16]
 8010e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	68fa      	ldr	r2, [r7, #12]
 8010e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	685a      	ldr	r2, [r3, #4]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	697a      	ldr	r2, [r7, #20]
 8010e4a:	621a      	str	r2, [r3, #32]
}
 8010e4c:	bf00      	nop
 8010e4e:	371c      	adds	r7, #28
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr
 8010e58:	40010000 	.word	0x40010000
 8010e5c:	40010400 	.word	0x40010400

08010e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b087      	sub	sp, #28
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6a1b      	ldr	r3, [r3, #32]
 8010e6e:	f023 0210 	bic.w	r2, r3, #16
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a1b      	ldr	r3, [r3, #32]
 8010e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	699b      	ldr	r3, [r3, #24]
 8010e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	021b      	lsls	r3, r3, #8
 8010e9e:	68fa      	ldr	r2, [r7, #12]
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	f023 0320 	bic.w	r3, r3, #32
 8010eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	689b      	ldr	r3, [r3, #8]
 8010eb0:	011b      	lsls	r3, r3, #4
 8010eb2:	697a      	ldr	r2, [r7, #20]
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	4a22      	ldr	r2, [pc, #136]	@ (8010f44 <TIM_OC2_SetConfig+0xe4>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d003      	beq.n	8010ec8 <TIM_OC2_SetConfig+0x68>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	4a21      	ldr	r2, [pc, #132]	@ (8010f48 <TIM_OC2_SetConfig+0xe8>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d10d      	bne.n	8010ee4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	011b      	lsls	r3, r3, #4
 8010ed6:	697a      	ldr	r2, [r7, #20]
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ee2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4a17      	ldr	r2, [pc, #92]	@ (8010f44 <TIM_OC2_SetConfig+0xe4>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d003      	beq.n	8010ef4 <TIM_OC2_SetConfig+0x94>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4a16      	ldr	r2, [pc, #88]	@ (8010f48 <TIM_OC2_SetConfig+0xe8>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d113      	bne.n	8010f1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	695b      	ldr	r3, [r3, #20]
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	693a      	ldr	r2, [r7, #16]
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	699b      	ldr	r3, [r3, #24]
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	693a      	ldr	r2, [r7, #16]
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	693a      	ldr	r2, [r7, #16]
 8010f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	68fa      	ldr	r2, [r7, #12]
 8010f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	697a      	ldr	r2, [r7, #20]
 8010f34:	621a      	str	r2, [r3, #32]
}
 8010f36:	bf00      	nop
 8010f38:	371c      	adds	r7, #28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop
 8010f44:	40010000 	.word	0x40010000
 8010f48:	40010400 	.word	0x40010400

08010f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b087      	sub	sp, #28
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6a1b      	ldr	r3, [r3, #32]
 8010f5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6a1b      	ldr	r3, [r3, #32]
 8010f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	69db      	ldr	r3, [r3, #28]
 8010f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	f023 0303 	bic.w	r3, r3, #3
 8010f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	021b      	lsls	r3, r3, #8
 8010f9c:	697a      	ldr	r2, [r7, #20]
 8010f9e:	4313      	orrs	r3, r2
 8010fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4a21      	ldr	r2, [pc, #132]	@ (801102c <TIM_OC3_SetConfig+0xe0>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d003      	beq.n	8010fb2 <TIM_OC3_SetConfig+0x66>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4a20      	ldr	r2, [pc, #128]	@ (8011030 <TIM_OC3_SetConfig+0xe4>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d10d      	bne.n	8010fce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	021b      	lsls	r3, r3, #8
 8010fc0:	697a      	ldr	r2, [r7, #20]
 8010fc2:	4313      	orrs	r3, r2
 8010fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4a16      	ldr	r2, [pc, #88]	@ (801102c <TIM_OC3_SetConfig+0xe0>)
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d003      	beq.n	8010fde <TIM_OC3_SetConfig+0x92>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4a15      	ldr	r2, [pc, #84]	@ (8011030 <TIM_OC3_SetConfig+0xe4>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d113      	bne.n	8011006 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	695b      	ldr	r3, [r3, #20]
 8010ff2:	011b      	lsls	r3, r3, #4
 8010ff4:	693a      	ldr	r2, [r7, #16]
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	699b      	ldr	r3, [r3, #24]
 8010ffe:	011b      	lsls	r3, r3, #4
 8011000:	693a      	ldr	r2, [r7, #16]
 8011002:	4313      	orrs	r3, r2
 8011004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	693a      	ldr	r2, [r7, #16]
 801100a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	68fa      	ldr	r2, [r7, #12]
 8011010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	685a      	ldr	r2, [r3, #4]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	697a      	ldr	r2, [r7, #20]
 801101e:	621a      	str	r2, [r3, #32]
}
 8011020:	bf00      	nop
 8011022:	371c      	adds	r7, #28
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr
 801102c:	40010000 	.word	0x40010000
 8011030:	40010400 	.word	0x40010400

08011034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011034:	b480      	push	{r7}
 8011036:	b087      	sub	sp, #28
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a1b      	ldr	r3, [r3, #32]
 8011042:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6a1b      	ldr	r3, [r3, #32]
 801104e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	69db      	ldr	r3, [r3, #28]
 801105a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801106a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	021b      	lsls	r3, r3, #8
 8011072:	68fa      	ldr	r2, [r7, #12]
 8011074:	4313      	orrs	r3, r2
 8011076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801107e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	689b      	ldr	r3, [r3, #8]
 8011084:	031b      	lsls	r3, r3, #12
 8011086:	693a      	ldr	r2, [r7, #16]
 8011088:	4313      	orrs	r3, r2
 801108a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	4a12      	ldr	r2, [pc, #72]	@ (80110d8 <TIM_OC4_SetConfig+0xa4>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d003      	beq.n	801109c <TIM_OC4_SetConfig+0x68>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	4a11      	ldr	r2, [pc, #68]	@ (80110dc <TIM_OC4_SetConfig+0xa8>)
 8011098:	4293      	cmp	r3, r2
 801109a:	d109      	bne.n	80110b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80110a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	695b      	ldr	r3, [r3, #20]
 80110a8:	019b      	lsls	r3, r3, #6
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	4313      	orrs	r3, r2
 80110ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	685a      	ldr	r2, [r3, #4]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	693a      	ldr	r2, [r7, #16]
 80110c8:	621a      	str	r2, [r3, #32]
}
 80110ca:	bf00      	nop
 80110cc:	371c      	adds	r7, #28
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop
 80110d8:	40010000 	.word	0x40010000
 80110dc:	40010400 	.word	0x40010400

080110e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b087      	sub	sp, #28
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	6a1b      	ldr	r3, [r3, #32]
 80110f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6a1b      	ldr	r3, [r3, #32]
 80110f6:	f023 0201 	bic.w	r2, r3, #1
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	699b      	ldr	r3, [r3, #24]
 8011102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801110a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	011b      	lsls	r3, r3, #4
 8011110:	693a      	ldr	r2, [r7, #16]
 8011112:	4313      	orrs	r3, r2
 8011114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	f023 030a 	bic.w	r3, r3, #10
 801111c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801111e:	697a      	ldr	r2, [r7, #20]
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	4313      	orrs	r3, r2
 8011124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	693a      	ldr	r2, [r7, #16]
 801112a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	697a      	ldr	r2, [r7, #20]
 8011130:	621a      	str	r2, [r3, #32]
}
 8011132:	bf00      	nop
 8011134:	371c      	adds	r7, #28
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr

0801113e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801113e:	b480      	push	{r7}
 8011140:	b087      	sub	sp, #28
 8011142:	af00      	add	r7, sp, #0
 8011144:	60f8      	str	r0, [r7, #12]
 8011146:	60b9      	str	r1, [r7, #8]
 8011148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6a1b      	ldr	r3, [r3, #32]
 801114e:	f023 0210 	bic.w	r2, r3, #16
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	699b      	ldr	r3, [r3, #24]
 801115a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6a1b      	ldr	r3, [r3, #32]
 8011160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	031b      	lsls	r3, r3, #12
 801116e:	697a      	ldr	r2, [r7, #20]
 8011170:	4313      	orrs	r3, r2
 8011172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801117a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	011b      	lsls	r3, r3, #4
 8011180:	693a      	ldr	r2, [r7, #16]
 8011182:	4313      	orrs	r3, r2
 8011184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	697a      	ldr	r2, [r7, #20]
 801118a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	693a      	ldr	r2, [r7, #16]
 8011190:	621a      	str	r2, [r3, #32]
}
 8011192:	bf00      	nop
 8011194:	371c      	adds	r7, #28
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr

0801119e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801119e:	b480      	push	{r7}
 80111a0:	b085      	sub	sp, #20
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	689b      	ldr	r3, [r3, #8]
 80111ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80111b6:	683a      	ldr	r2, [r7, #0]
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	4313      	orrs	r3, r2
 80111bc:	f043 0307 	orr.w	r3, r3, #7
 80111c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	68fa      	ldr	r2, [r7, #12]
 80111c6:	609a      	str	r2, [r3, #8]
}
 80111c8:	bf00      	nop
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b087      	sub	sp, #28
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80111ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	021a      	lsls	r2, r3, #8
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	431a      	orrs	r2, r3
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	4313      	orrs	r3, r2
 80111fc:	697a      	ldr	r2, [r7, #20]
 80111fe:	4313      	orrs	r3, r2
 8011200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	697a      	ldr	r2, [r7, #20]
 8011206:	609a      	str	r2, [r3, #8]
}
 8011208:	bf00      	nop
 801120a:	371c      	adds	r7, #28
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011214:	b480      	push	{r7}
 8011216:	b085      	sub	sp, #20
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011224:	2b01      	cmp	r3, #1
 8011226:	d101      	bne.n	801122c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011228:	2302      	movs	r3, #2
 801122a:	e05a      	b.n	80112e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2201      	movs	r2, #1
 8011230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2202      	movs	r2, #2
 8011238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	689b      	ldr	r3, [r3, #8]
 801124a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	68fa      	ldr	r2, [r7, #12]
 801125a:	4313      	orrs	r3, r2
 801125c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	68fa      	ldr	r2, [r7, #12]
 8011264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	4a21      	ldr	r2, [pc, #132]	@ (80112f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801126c:	4293      	cmp	r3, r2
 801126e:	d022      	beq.n	80112b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011278:	d01d      	beq.n	80112b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4a1d      	ldr	r2, [pc, #116]	@ (80112f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d018      	beq.n	80112b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4a1b      	ldr	r2, [pc, #108]	@ (80112f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d013      	beq.n	80112b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4a1a      	ldr	r2, [pc, #104]	@ (80112fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011294:	4293      	cmp	r3, r2
 8011296:	d00e      	beq.n	80112b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4a18      	ldr	r2, [pc, #96]	@ (8011300 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801129e:	4293      	cmp	r3, r2
 80112a0:	d009      	beq.n	80112b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	4a17      	ldr	r2, [pc, #92]	@ (8011304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d004      	beq.n	80112b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4a15      	ldr	r2, [pc, #84]	@ (8011308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d10c      	bne.n	80112d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80112bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	68ba      	ldr	r2, [r7, #8]
 80112c4:	4313      	orrs	r3, r2
 80112c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2201      	movs	r2, #1
 80112d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80112e0:	2300      	movs	r3, #0
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3714      	adds	r7, #20
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop
 80112f0:	40010000 	.word	0x40010000
 80112f4:	40000400 	.word	0x40000400
 80112f8:	40000800 	.word	0x40000800
 80112fc:	40000c00 	.word	0x40000c00
 8011300:	40010400 	.word	0x40010400
 8011304:	40014000 	.word	0x40014000
 8011308:	40001800 	.word	0x40001800

0801130c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801130c:	b480      	push	{r7}
 801130e:	b085      	sub	sp, #20
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011316:	2300      	movs	r3, #0
 8011318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011320:	2b01      	cmp	r3, #1
 8011322:	d101      	bne.n	8011328 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011324:	2302      	movs	r3, #2
 8011326:	e03d      	b.n	80113a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2201      	movs	r2, #1
 801132c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	4313      	orrs	r3, r2
 801133c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	4313      	orrs	r3, r2
 801134a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	4313      	orrs	r3, r2
 8011358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	4313      	orrs	r3, r2
 8011366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	4313      	orrs	r3, r2
 8011374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	695b      	ldr	r3, [r3, #20]
 8011380:	4313      	orrs	r3, r2
 8011382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	69db      	ldr	r3, [r3, #28]
 801138e:	4313      	orrs	r3, r2
 8011390:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	68fa      	ldr	r2, [r7, #12]
 8011398:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2200      	movs	r2, #0
 801139e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80113a2:	2300      	movs	r3, #0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3714      	adds	r7, #20
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80113b8:	bf00      	nop
 80113ba:	370c      	adds	r7, #12
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr

080113c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80113cc:	bf00      	nop
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80113e6:	2301      	movs	r3, #1
 80113e8:	e03f      	b.n	801146a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d106      	bne.n	8011404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2200      	movs	r2, #0
 80113fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f7fc fd4a 	bl	800de98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2224      	movs	r2, #36	@ 0x24
 8011408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	68da      	ldr	r2, [r3, #12]
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801141a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 fdd5 	bl	8011fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	691a      	ldr	r2, [r3, #16]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	695a      	ldr	r2, [r3, #20]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	68da      	ldr	r2, [r3, #12]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2200      	movs	r2, #0
 8011456:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2220      	movs	r2, #32
 801145c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2220      	movs	r2, #32
 8011464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8011468:	2300      	movs	r3, #0
}
 801146a:	4618      	mov	r0, r3
 801146c:	3708      	adds	r7, #8
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b08a      	sub	sp, #40	@ 0x28
 8011476:	af02      	add	r7, sp, #8
 8011478:	60f8      	str	r0, [r7, #12]
 801147a:	60b9      	str	r1, [r7, #8]
 801147c:	603b      	str	r3, [r7, #0]
 801147e:	4613      	mov	r3, r2
 8011480:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011482:	2300      	movs	r3, #0
 8011484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801148c:	b2db      	uxtb	r3, r3
 801148e:	2b20      	cmp	r3, #32
 8011490:	d17c      	bne.n	801158c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d002      	beq.n	801149e <HAL_UART_Transmit+0x2c>
 8011498:	88fb      	ldrh	r3, [r7, #6]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d101      	bne.n	80114a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801149e:	2301      	movs	r3, #1
 80114a0:	e075      	b.n	801158e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d101      	bne.n	80114b0 <HAL_UART_Transmit+0x3e>
 80114ac:	2302      	movs	r3, #2
 80114ae:	e06e      	b.n	801158e <HAL_UART_Transmit+0x11c>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2201      	movs	r2, #1
 80114b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2200      	movs	r2, #0
 80114bc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2221      	movs	r2, #33	@ 0x21
 80114c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80114c6:	f7fc ff65 	bl	800e394 <HAL_GetTick>
 80114ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	88fa      	ldrh	r2, [r7, #6]
 80114d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	88fa      	ldrh	r2, [r7, #6]
 80114d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114e0:	d108      	bne.n	80114f4 <HAL_UART_Transmit+0x82>
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	691b      	ldr	r3, [r3, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d104      	bne.n	80114f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80114ea:	2300      	movs	r3, #0
 80114ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	61bb      	str	r3, [r7, #24]
 80114f2:	e003      	b.n	80114fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80114f8:	2300      	movs	r3, #0
 80114fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2200      	movs	r2, #0
 8011500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8011504:	e02a      	b.n	801155c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	2200      	movs	r2, #0
 801150e:	2180      	movs	r1, #128	@ 0x80
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f000 fb15 	bl	8011b40 <UART_WaitOnFlagUntilTimeout>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801151c:	2303      	movs	r3, #3
 801151e:	e036      	b.n	801158e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10b      	bne.n	801153e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	461a      	mov	r2, r3
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	3302      	adds	r3, #2
 801153a:	61bb      	str	r3, [r7, #24]
 801153c:	e007      	b.n	801154e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	781a      	ldrb	r2, [r3, #0]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	3301      	adds	r3, #1
 801154c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011552:	b29b      	uxth	r3, r3
 8011554:	3b01      	subs	r3, #1
 8011556:	b29a      	uxth	r2, r3
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011560:	b29b      	uxth	r3, r3
 8011562:	2b00      	cmp	r3, #0
 8011564:	d1cf      	bne.n	8011506 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	9300      	str	r3, [sp, #0]
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	2200      	movs	r2, #0
 801156e:	2140      	movs	r1, #64	@ 0x40
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f000 fae5 	bl	8011b40 <UART_WaitOnFlagUntilTimeout>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d001      	beq.n	8011580 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801157c:	2303      	movs	r3, #3
 801157e:	e006      	b.n	801158e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2220      	movs	r2, #32
 8011584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8011588:	2300      	movs	r3, #0
 801158a:	e000      	b.n	801158e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801158c:	2302      	movs	r3, #2
  }
}
 801158e:	4618      	mov	r0, r3
 8011590:	3720      	adds	r7, #32
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	60f8      	str	r0, [r7, #12]
 801159e:	60b9      	str	r1, [r7, #8]
 80115a0:	4613      	mov	r3, r2
 80115a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	2b20      	cmp	r3, #32
 80115ae:	d11d      	bne.n	80115ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d002      	beq.n	80115bc <HAL_UART_Receive_IT+0x26>
 80115b6:	88fb      	ldrh	r3, [r7, #6]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d101      	bne.n	80115c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80115bc:	2301      	movs	r3, #1
 80115be:	e016      	b.n	80115ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d101      	bne.n	80115ce <HAL_UART_Receive_IT+0x38>
 80115ca:	2302      	movs	r3, #2
 80115cc:	e00f      	b.n	80115ee <HAL_UART_Receive_IT+0x58>
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2201      	movs	r2, #1
 80115d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2200      	movs	r2, #0
 80115da:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80115dc:	88fb      	ldrh	r3, [r7, #6]
 80115de:	461a      	mov	r2, r3
 80115e0:	68b9      	ldr	r1, [r7, #8]
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f000 fb1a 	bl	8011c1c <UART_Start_Receive_IT>
 80115e8:	4603      	mov	r3, r0
 80115ea:	e000      	b.n	80115ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80115ec:	2302      	movs	r3, #2
  }
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3710      	adds	r7, #16
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
	...

080115f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b0ba      	sub	sp, #232	@ 0xe8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	695b      	ldr	r3, [r3, #20]
 801161a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801161e:	2300      	movs	r3, #0
 8011620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8011624:	2300      	movs	r3, #0
 8011626:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801162a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801162e:	f003 030f 	and.w	r3, r3, #15
 8011632:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8011636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801163a:	2b00      	cmp	r3, #0
 801163c:	d10f      	bne.n	801165e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801163e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011642:	f003 0320 	and.w	r3, r3, #32
 8011646:	2b00      	cmp	r3, #0
 8011648:	d009      	beq.n	801165e <HAL_UART_IRQHandler+0x66>
 801164a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801164e:	f003 0320 	and.w	r3, r3, #32
 8011652:	2b00      	cmp	r3, #0
 8011654:	d003      	beq.n	801165e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f000 fbfd 	bl	8011e56 <UART_Receive_IT>
      return;
 801165c:	e256      	b.n	8011b0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801165e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011662:	2b00      	cmp	r3, #0
 8011664:	f000 80de 	beq.w	8011824 <HAL_UART_IRQHandler+0x22c>
 8011668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801166c:	f003 0301 	and.w	r3, r3, #1
 8011670:	2b00      	cmp	r3, #0
 8011672:	d106      	bne.n	8011682 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011678:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 801167c:	2b00      	cmp	r3, #0
 801167e:	f000 80d1 	beq.w	8011824 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011686:	f003 0301 	and.w	r3, r3, #1
 801168a:	2b00      	cmp	r3, #0
 801168c:	d00b      	beq.n	80116a6 <HAL_UART_IRQHandler+0xae>
 801168e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011696:	2b00      	cmp	r3, #0
 8011698:	d005      	beq.n	80116a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801169e:	f043 0201 	orr.w	r2, r3, #1
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80116a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116aa:	f003 0304 	and.w	r3, r3, #4
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00b      	beq.n	80116ca <HAL_UART_IRQHandler+0xd2>
 80116b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80116b6:	f003 0301 	and.w	r3, r3, #1
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d005      	beq.n	80116ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116c2:	f043 0202 	orr.w	r2, r3, #2
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80116ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116ce:	f003 0302 	and.w	r3, r3, #2
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00b      	beq.n	80116ee <HAL_UART_IRQHandler+0xf6>
 80116d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80116da:	f003 0301 	and.w	r3, r3, #1
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d005      	beq.n	80116ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116e6:	f043 0204 	orr.w	r2, r3, #4
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80116ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116f2:	f003 0308 	and.w	r3, r3, #8
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d011      	beq.n	801171e <HAL_UART_IRQHandler+0x126>
 80116fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116fe:	f003 0320 	and.w	r3, r3, #32
 8011702:	2b00      	cmp	r3, #0
 8011704:	d105      	bne.n	8011712 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801170a:	f003 0301 	and.w	r3, r3, #1
 801170e:	2b00      	cmp	r3, #0
 8011710:	d005      	beq.n	801171e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011716:	f043 0208 	orr.w	r2, r3, #8
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011722:	2b00      	cmp	r3, #0
 8011724:	f000 81ed 	beq.w	8011b02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801172c:	f003 0320 	and.w	r3, r3, #32
 8011730:	2b00      	cmp	r3, #0
 8011732:	d008      	beq.n	8011746 <HAL_UART_IRQHandler+0x14e>
 8011734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011738:	f003 0320 	and.w	r3, r3, #32
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f000 fb88 	bl	8011e56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	695b      	ldr	r3, [r3, #20]
 801174c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011750:	2b40      	cmp	r3, #64	@ 0x40
 8011752:	bf0c      	ite	eq
 8011754:	2301      	moveq	r3, #1
 8011756:	2300      	movne	r3, #0
 8011758:	b2db      	uxtb	r3, r3
 801175a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011762:	f003 0308 	and.w	r3, r3, #8
 8011766:	2b00      	cmp	r3, #0
 8011768:	d103      	bne.n	8011772 <HAL_UART_IRQHandler+0x17a>
 801176a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801176e:	2b00      	cmp	r3, #0
 8011770:	d04f      	beq.n	8011812 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f000 fa90 	bl	8011c98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	695b      	ldr	r3, [r3, #20]
 801177e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011782:	2b40      	cmp	r3, #64	@ 0x40
 8011784:	d141      	bne.n	801180a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	3314      	adds	r3, #20
 801178c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011794:	e853 3f00 	ldrex	r3, [r3]
 8011798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801179c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80117a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	3314      	adds	r3, #20
 80117ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80117b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80117b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80117be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80117c2:	e841 2300 	strex	r3, r2, [r1]
 80117c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80117ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1d9      	bne.n	8011786 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d013      	beq.n	8011802 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117de:	4a7d      	ldr	r2, [pc, #500]	@ (80119d4 <HAL_UART_IRQHandler+0x3dc>)
 80117e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fc ff85 	bl	800e6f6 <HAL_DMA_Abort_IT>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d016      	beq.n	8011820 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80117fc:	4610      	mov	r0, r2
 80117fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011800:	e00e      	b.n	8011820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 f986 	bl	8011b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011808:	e00a      	b.n	8011820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 f982 	bl	8011b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011810:	e006      	b.n	8011820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f000 f97e 	bl	8011b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2200      	movs	r2, #0
 801181c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 801181e:	e170      	b.n	8011b02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011820:	bf00      	nop
    return;
 8011822:	e16e      	b.n	8011b02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011828:	2b01      	cmp	r3, #1
 801182a:	f040 814a 	bne.w	8011ac2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801182e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011832:	f003 0310 	and.w	r3, r3, #16
 8011836:	2b00      	cmp	r3, #0
 8011838:	f000 8143 	beq.w	8011ac2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801183c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011840:	f003 0310 	and.w	r3, r3, #16
 8011844:	2b00      	cmp	r3, #0
 8011846:	f000 813c 	beq.w	8011ac2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801184a:	2300      	movs	r3, #0
 801184c:	60bb      	str	r3, [r7, #8]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	60bb      	str	r3, [r7, #8]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	60bb      	str	r3, [r7, #8]
 801185e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	695b      	ldr	r3, [r3, #20]
 8011866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801186a:	2b40      	cmp	r3, #64	@ 0x40
 801186c:	f040 80b4 	bne.w	80119d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801187c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011880:	2b00      	cmp	r3, #0
 8011882:	f000 8140 	beq.w	8011b06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801188a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801188e:	429a      	cmp	r2, r3
 8011890:	f080 8139 	bcs.w	8011b06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801189a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118a0:	69db      	ldr	r3, [r3, #28]
 80118a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80118a6:	f000 8088 	beq.w	80119ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	330c      	adds	r3, #12
 80118b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80118b8:	e853 3f00 	ldrex	r3, [r3]
 80118bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80118c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80118c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80118c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	330c      	adds	r3, #12
 80118d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80118d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80118da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80118e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80118e6:	e841 2300 	strex	r3, r2, [r1]
 80118ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80118ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1d9      	bne.n	80118aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	3314      	adds	r3, #20
 80118fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011900:	e853 3f00 	ldrex	r3, [r3]
 8011904:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011906:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011908:	f023 0301 	bic.w	r3, r3, #1
 801190c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	3314      	adds	r3, #20
 8011916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801191a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801191e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011920:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011922:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011926:	e841 2300 	strex	r3, r2, [r1]
 801192a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801192c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801192e:	2b00      	cmp	r3, #0
 8011930:	d1e1      	bne.n	80118f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	3314      	adds	r3, #20
 8011938:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801193a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801193c:	e853 3f00 	ldrex	r3, [r3]
 8011940:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011948:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	3314      	adds	r3, #20
 8011952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011956:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011958:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801195a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801195c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801195e:	e841 2300 	strex	r3, r2, [r1]
 8011962:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011966:	2b00      	cmp	r3, #0
 8011968:	d1e3      	bne.n	8011932 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2220      	movs	r2, #32
 801196e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2200      	movs	r2, #0
 8011976:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	330c      	adds	r3, #12
 801197e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011982:	e853 3f00 	ldrex	r3, [r3]
 8011986:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801198a:	f023 0310 	bic.w	r3, r3, #16
 801198e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	330c      	adds	r3, #12
 8011998:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801199c:	65ba      	str	r2, [r7, #88]	@ 0x58
 801199e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80119a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119a4:	e841 2300 	strex	r3, r2, [r1]
 80119a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80119aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d1e3      	bne.n	8011978 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7fc fe2e 	bl	800e616 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	1ad3      	subs	r3, r2, r3
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	4619      	mov	r1, r3
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 f8ac 	bl	8011b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80119d0:	e099      	b.n	8011b06 <HAL_UART_IRQHandler+0x50e>
 80119d2:	bf00      	nop
 80119d4:	08011d5f 	.word	0x08011d5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	1ad3      	subs	r3, r2, r3
 80119e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f000 808b 	beq.w	8011b0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80119f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	f000 8086 	beq.w	8011b0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	330c      	adds	r3, #12
 8011a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a08:	e853 3f00 	ldrex	r3, [r3]
 8011a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	330c      	adds	r3, #12
 8011a1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8011a22:	647a      	str	r2, [r7, #68]	@ 0x44
 8011a24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a2a:	e841 2300 	strex	r3, r2, [r1]
 8011a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d1e3      	bne.n	80119fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	3314      	adds	r3, #20
 8011a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a40:	e853 3f00 	ldrex	r3, [r3]
 8011a44:	623b      	str	r3, [r7, #32]
   return(result);
 8011a46:	6a3b      	ldr	r3, [r7, #32]
 8011a48:	f023 0301 	bic.w	r3, r3, #1
 8011a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	3314      	adds	r3, #20
 8011a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011a5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8011a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a62:	e841 2300 	strex	r3, r2, [r1]
 8011a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d1e3      	bne.n	8011a36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2220      	movs	r2, #32
 8011a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	330c      	adds	r3, #12
 8011a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	e853 3f00 	ldrex	r3, [r3]
 8011a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f023 0310 	bic.w	r3, r3, #16
 8011a92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	330c      	adds	r3, #12
 8011a9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8011aa0:	61fa      	str	r2, [r7, #28]
 8011aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aa4:	69b9      	ldr	r1, [r7, #24]
 8011aa6:	69fa      	ldr	r2, [r7, #28]
 8011aa8:	e841 2300 	strex	r3, r2, [r1]
 8011aac:	617b      	str	r3, [r7, #20]
   return(result);
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d1e3      	bne.n	8011a7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011ab8:	4619      	mov	r1, r3
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 f834 	bl	8011b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011ac0:	e023      	b.n	8011b0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d009      	beq.n	8011ae2 <HAL_UART_IRQHandler+0x4ea>
 8011ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d003      	beq.n	8011ae2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f000 f953 	bl	8011d86 <UART_Transmit_IT>
    return;
 8011ae0:	e014      	b.n	8011b0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d00e      	beq.n	8011b0c <HAL_UART_IRQHandler+0x514>
 8011aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d008      	beq.n	8011b0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f000 f993 	bl	8011e26 <UART_EndTransmit_IT>
    return;
 8011b00:	e004      	b.n	8011b0c <HAL_UART_IRQHandler+0x514>
    return;
 8011b02:	bf00      	nop
 8011b04:	e002      	b.n	8011b0c <HAL_UART_IRQHandler+0x514>
      return;
 8011b06:	bf00      	nop
 8011b08:	e000      	b.n	8011b0c <HAL_UART_IRQHandler+0x514>
      return;
 8011b0a:	bf00      	nop
  }
}
 8011b0c:	37e8      	adds	r7, #232	@ 0xe8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop

08011b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011b1c:	bf00      	nop
 8011b1e:	370c      	adds	r7, #12
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	460b      	mov	r3, r1
 8011b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011b34:	bf00      	nop
 8011b36:	370c      	adds	r7, #12
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3e:	4770      	bx	lr

08011b40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b090      	sub	sp, #64	@ 0x40
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	603b      	str	r3, [r7, #0]
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b50:	e050      	b.n	8011bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b58:	d04c      	beq.n	8011bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d007      	beq.n	8011b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8011b60:	f7fc fc18 	bl	800e394 <HAL_GetTick>
 8011b64:	4602      	mov	r2, r0
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	1ad3      	subs	r3, r2, r3
 8011b6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d241      	bcs.n	8011bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	330c      	adds	r3, #12
 8011b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b7a:	e853 3f00 	ldrex	r3, [r3]
 8011b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b82:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	330c      	adds	r3, #12
 8011b8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b90:	637a      	str	r2, [r7, #52]	@ 0x34
 8011b92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011b96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b98:	e841 2300 	strex	r3, r2, [r1]
 8011b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d1e5      	bne.n	8011b70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	3314      	adds	r3, #20
 8011baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	e853 3f00 	ldrex	r3, [r3]
 8011bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	f023 0301 	bic.w	r3, r3, #1
 8011bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	3314      	adds	r3, #20
 8011bc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011bc4:	623a      	str	r2, [r7, #32]
 8011bc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bc8:	69f9      	ldr	r1, [r7, #28]
 8011bca:	6a3a      	ldr	r2, [r7, #32]
 8011bcc:	e841 2300 	strex	r3, r2, [r1]
 8011bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d1e5      	bne.n	8011ba4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	2220      	movs	r2, #32
 8011bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2220      	movs	r2, #32
 8011be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2200      	movs	r2, #0
 8011bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8011bf0:	2303      	movs	r3, #3
 8011bf2:	e00f      	b.n	8011c14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	4013      	ands	r3, r2
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	bf0c      	ite	eq
 8011c04:	2301      	moveq	r3, #1
 8011c06:	2300      	movne	r3, #0
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	79fb      	ldrb	r3, [r7, #7]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d09f      	beq.n	8011b52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3740      	adds	r7, #64	@ 0x40
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b085      	sub	sp, #20
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	4613      	mov	r3, r2
 8011c28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	68ba      	ldr	r2, [r7, #8]
 8011c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	88fa      	ldrh	r2, [r7, #6]
 8011c34:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	88fa      	ldrh	r2, [r7, #6]
 8011c3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	2222      	movs	r2, #34	@ 0x22
 8011c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	691b      	ldr	r3, [r3, #16]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d007      	beq.n	8011c6a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	68da      	ldr	r2, [r3, #12]
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011c68:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	695a      	ldr	r2, [r3, #20]
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f042 0201 	orr.w	r2, r2, #1
 8011c78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	68da      	ldr	r2, [r3, #12]
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	f042 0220 	orr.w	r2, r2, #32
 8011c88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b095      	sub	sp, #84	@ 0x54
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	330c      	adds	r3, #12
 8011ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011caa:	e853 3f00 	ldrex	r3, [r3]
 8011cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	330c      	adds	r3, #12
 8011cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011cc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8011cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011cc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011cc8:	e841 2300 	strex	r3, r2, [r1]
 8011ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1e5      	bne.n	8011ca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	3314      	adds	r3, #20
 8011cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	e853 3f00 	ldrex	r3, [r3]
 8011ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	f023 0301 	bic.w	r3, r3, #1
 8011cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	3314      	adds	r3, #20
 8011cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cfc:	e841 2300 	strex	r3, r2, [r1]
 8011d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d1e5      	bne.n	8011cd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d119      	bne.n	8011d44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	330c      	adds	r3, #12
 8011d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	e853 3f00 	ldrex	r3, [r3]
 8011d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	f023 0310 	bic.w	r3, r3, #16
 8011d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	330c      	adds	r3, #12
 8011d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d30:	61ba      	str	r2, [r7, #24]
 8011d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d34:	6979      	ldr	r1, [r7, #20]
 8011d36:	69ba      	ldr	r2, [r7, #24]
 8011d38:	e841 2300 	strex	r3, r2, [r1]
 8011d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d1e5      	bne.n	8011d10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2220      	movs	r2, #32
 8011d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011d52:	bf00      	nop
 8011d54:	3754      	adds	r7, #84	@ 0x54
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr

08011d5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b084      	sub	sp, #16
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2200      	movs	r2, #0
 8011d76:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f7ff fecb 	bl	8011b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d7e:	bf00      	nop
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}

08011d86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011d86:	b480      	push	{r7}
 8011d88:	b085      	sub	sp, #20
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	2b21      	cmp	r3, #33	@ 0x21
 8011d98:	d13e      	bne.n	8011e18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	689b      	ldr	r3, [r3, #8]
 8011d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011da2:	d114      	bne.n	8011dce <UART_Transmit_IT+0x48>
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	691b      	ldr	r3, [r3, #16]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d110      	bne.n	8011dce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6a1b      	ldr	r3, [r3, #32]
 8011db0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	881b      	ldrh	r3, [r3, #0]
 8011db6:	461a      	mov	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011dc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6a1b      	ldr	r3, [r3, #32]
 8011dc6:	1c9a      	adds	r2, r3, #2
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	621a      	str	r2, [r3, #32]
 8011dcc:	e008      	b.n	8011de0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6a1b      	ldr	r3, [r3, #32]
 8011dd2:	1c59      	adds	r1, r3, #1
 8011dd4:	687a      	ldr	r2, [r7, #4]
 8011dd6:	6211      	str	r1, [r2, #32]
 8011dd8:	781a      	ldrb	r2, [r3, #0]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	3b01      	subs	r3, #1
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	4619      	mov	r1, r3
 8011dee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d10f      	bne.n	8011e14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	68da      	ldr	r2, [r3, #12]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011e02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	68da      	ldr	r2, [r3, #12]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011e12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011e14:	2300      	movs	r3, #0
 8011e16:	e000      	b.n	8011e1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011e18:	2302      	movs	r3, #2
  }
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3714      	adds	r7, #20
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e24:	4770      	bx	lr

08011e26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011e26:	b580      	push	{r7, lr}
 8011e28:	b082      	sub	sp, #8
 8011e2a:	af00      	add	r7, sp, #0
 8011e2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	68da      	ldr	r2, [r3, #12]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011e3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2220      	movs	r2, #32
 8011e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7fb fd7a 	bl	800d940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011e4c:	2300      	movs	r3, #0
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3708      	adds	r7, #8
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b08c      	sub	sp, #48	@ 0x30
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	2b22      	cmp	r3, #34	@ 0x22
 8011e68:	f040 80ab 	bne.w	8011fc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	689b      	ldr	r3, [r3, #8]
 8011e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011e74:	d117      	bne.n	8011ea6 <UART_Receive_IT+0x50>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	691b      	ldr	r3, [r3, #16]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d113      	bne.n	8011ea6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e86:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e9e:	1c9a      	adds	r2, r3, #2
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	629a      	str	r2, [r3, #40]	@ 0x28
 8011ea4:	e026      	b.n	8011ef4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011eac:	2300      	movs	r3, #0
 8011eae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011eb8:	d007      	beq.n	8011eca <UART_Receive_IT+0x74>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d10a      	bne.n	8011ed8 <UART_Receive_IT+0x82>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	691b      	ldr	r3, [r3, #16]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d106      	bne.n	8011ed8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	b2da      	uxtb	r2, r3
 8011ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ed4:	701a      	strb	r2, [r3, #0]
 8011ed6:	e008      	b.n	8011eea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ee4:	b2da      	uxtb	r2, r3
 8011ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ee8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011eee:	1c5a      	adds	r2, r3, #1
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	3b01      	subs	r3, #1
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	687a      	ldr	r2, [r7, #4]
 8011f00:	4619      	mov	r1, r3
 8011f02:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d15a      	bne.n	8011fbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	68da      	ldr	r2, [r3, #12]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f022 0220 	bic.w	r2, r2, #32
 8011f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	68da      	ldr	r2, [r3, #12]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011f26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	695a      	ldr	r2, [r3, #20]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	f022 0201 	bic.w	r2, r2, #1
 8011f36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2220      	movs	r2, #32
 8011f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	d135      	bne.n	8011fb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	330c      	adds	r3, #12
 8011f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	e853 3f00 	ldrex	r3, [r3]
 8011f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	f023 0310 	bic.w	r3, r3, #16
 8011f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	330c      	adds	r3, #12
 8011f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f6e:	623a      	str	r2, [r7, #32]
 8011f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f72:	69f9      	ldr	r1, [r7, #28]
 8011f74:	6a3a      	ldr	r2, [r7, #32]
 8011f76:	e841 2300 	strex	r3, r2, [r1]
 8011f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d1e5      	bne.n	8011f4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	f003 0310 	and.w	r3, r3, #16
 8011f8c:	2b10      	cmp	r3, #16
 8011f8e:	d10a      	bne.n	8011fa6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011f90:	2300      	movs	r3, #0
 8011f92:	60fb      	str	r3, [r7, #12]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	60fb      	str	r3, [r7, #12]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	60fb      	str	r3, [r7, #12]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011faa:	4619      	mov	r1, r3
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f7ff fdbb 	bl	8011b28 <HAL_UARTEx_RxEventCallback>
 8011fb2:	e002      	b.n	8011fba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7fb fccd 	bl	800d954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e002      	b.n	8011fc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	e000      	b.n	8011fc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011fc2:	2302      	movs	r3, #2
  }
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3730      	adds	r7, #48	@ 0x30
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011fd0:	b0c0      	sub	sp, #256	@ 0x100
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	691b      	ldr	r3, [r3, #16]
 8011fe0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fe8:	68d9      	ldr	r1, [r3, #12]
 8011fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	ea40 0301 	orr.w	r3, r0, r1
 8011ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ffa:	689a      	ldr	r2, [r3, #8]
 8011ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012000:	691b      	ldr	r3, [r3, #16]
 8012002:	431a      	orrs	r2, r3
 8012004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012008:	695b      	ldr	r3, [r3, #20]
 801200a:	431a      	orrs	r2, r3
 801200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012010:	69db      	ldr	r3, [r3, #28]
 8012012:	4313      	orrs	r3, r2
 8012014:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8012024:	f021 010c 	bic.w	r1, r1, #12
 8012028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012032:	430b      	orrs	r3, r1
 8012034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	695b      	ldr	r3, [r3, #20]
 801203e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8012042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012046:	6999      	ldr	r1, [r3, #24]
 8012048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	ea40 0301 	orr.w	r3, r0, r1
 8012052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	4b8f      	ldr	r3, [pc, #572]	@ (8012298 <UART_SetConfig+0x2cc>)
 801205c:	429a      	cmp	r2, r3
 801205e:	d005      	beq.n	801206c <UART_SetConfig+0xa0>
 8012060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	4b8d      	ldr	r3, [pc, #564]	@ (801229c <UART_SetConfig+0x2d0>)
 8012068:	429a      	cmp	r2, r3
 801206a:	d104      	bne.n	8012076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801206c:	f7fc fe82 	bl	800ed74 <HAL_RCC_GetPCLK2Freq>
 8012070:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8012074:	e003      	b.n	801207e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012076:	f7fc fe69 	bl	800ed4c <HAL_RCC_GetPCLK1Freq>
 801207a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012082:	69db      	ldr	r3, [r3, #28]
 8012084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012088:	f040 810c 	bne.w	80122a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801208c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012090:	2200      	movs	r2, #0
 8012092:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8012096:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801209a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801209e:	4622      	mov	r2, r4
 80120a0:	462b      	mov	r3, r5
 80120a2:	1891      	adds	r1, r2, r2
 80120a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80120a6:	415b      	adcs	r3, r3
 80120a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80120aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80120ae:	4621      	mov	r1, r4
 80120b0:	eb12 0801 	adds.w	r8, r2, r1
 80120b4:	4629      	mov	r1, r5
 80120b6:	eb43 0901 	adc.w	r9, r3, r1
 80120ba:	f04f 0200 	mov.w	r2, #0
 80120be:	f04f 0300 	mov.w	r3, #0
 80120c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80120c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80120ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80120ce:	4690      	mov	r8, r2
 80120d0:	4699      	mov	r9, r3
 80120d2:	4623      	mov	r3, r4
 80120d4:	eb18 0303 	adds.w	r3, r8, r3
 80120d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80120dc:	462b      	mov	r3, r5
 80120de:	eb49 0303 	adc.w	r3, r9, r3
 80120e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80120e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	2200      	movs	r2, #0
 80120ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80120f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80120f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80120fa:	460b      	mov	r3, r1
 80120fc:	18db      	adds	r3, r3, r3
 80120fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8012100:	4613      	mov	r3, r2
 8012102:	eb42 0303 	adc.w	r3, r2, r3
 8012106:	657b      	str	r3, [r7, #84]	@ 0x54
 8012108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801210c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8012110:	f7ee fdea 	bl	8000ce8 <__aeabi_uldivmod>
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	4b61      	ldr	r3, [pc, #388]	@ (80122a0 <UART_SetConfig+0x2d4>)
 801211a:	fba3 2302 	umull	r2, r3, r3, r2
 801211e:	095b      	lsrs	r3, r3, #5
 8012120:	011c      	lsls	r4, r3, #4
 8012122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012126:	2200      	movs	r2, #0
 8012128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801212c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8012130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8012134:	4642      	mov	r2, r8
 8012136:	464b      	mov	r3, r9
 8012138:	1891      	adds	r1, r2, r2
 801213a:	64b9      	str	r1, [r7, #72]	@ 0x48
 801213c:	415b      	adcs	r3, r3
 801213e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8012144:	4641      	mov	r1, r8
 8012146:	eb12 0a01 	adds.w	sl, r2, r1
 801214a:	4649      	mov	r1, r9
 801214c:	eb43 0b01 	adc.w	fp, r3, r1
 8012150:	f04f 0200 	mov.w	r2, #0
 8012154:	f04f 0300 	mov.w	r3, #0
 8012158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801215c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012164:	4692      	mov	sl, r2
 8012166:	469b      	mov	fp, r3
 8012168:	4643      	mov	r3, r8
 801216a:	eb1a 0303 	adds.w	r3, sl, r3
 801216e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012172:	464b      	mov	r3, r9
 8012174:	eb4b 0303 	adc.w	r3, fp, r3
 8012178:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	2200      	movs	r2, #0
 8012184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012188:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 801218c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8012190:	460b      	mov	r3, r1
 8012192:	18db      	adds	r3, r3, r3
 8012194:	643b      	str	r3, [r7, #64]	@ 0x40
 8012196:	4613      	mov	r3, r2
 8012198:	eb42 0303 	adc.w	r3, r2, r3
 801219c:	647b      	str	r3, [r7, #68]	@ 0x44
 801219e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80121a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80121a6:	f7ee fd9f 	bl	8000ce8 <__aeabi_uldivmod>
 80121aa:	4602      	mov	r2, r0
 80121ac:	460b      	mov	r3, r1
 80121ae:	4611      	mov	r1, r2
 80121b0:	4b3b      	ldr	r3, [pc, #236]	@ (80122a0 <UART_SetConfig+0x2d4>)
 80121b2:	fba3 2301 	umull	r2, r3, r3, r1
 80121b6:	095b      	lsrs	r3, r3, #5
 80121b8:	2264      	movs	r2, #100	@ 0x64
 80121ba:	fb02 f303 	mul.w	r3, r2, r3
 80121be:	1acb      	subs	r3, r1, r3
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80121c6:	4b36      	ldr	r3, [pc, #216]	@ (80122a0 <UART_SetConfig+0x2d4>)
 80121c8:	fba3 2302 	umull	r2, r3, r3, r2
 80121cc:	095b      	lsrs	r3, r3, #5
 80121ce:	005b      	lsls	r3, r3, #1
 80121d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80121d4:	441c      	add	r4, r3
 80121d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80121da:	2200      	movs	r2, #0
 80121dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80121e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80121e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80121e8:	4642      	mov	r2, r8
 80121ea:	464b      	mov	r3, r9
 80121ec:	1891      	adds	r1, r2, r2
 80121ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80121f0:	415b      	adcs	r3, r3
 80121f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80121f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80121f8:	4641      	mov	r1, r8
 80121fa:	1851      	adds	r1, r2, r1
 80121fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80121fe:	4649      	mov	r1, r9
 8012200:	414b      	adcs	r3, r1
 8012202:	637b      	str	r3, [r7, #52]	@ 0x34
 8012204:	f04f 0200 	mov.w	r2, #0
 8012208:	f04f 0300 	mov.w	r3, #0
 801220c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8012210:	4659      	mov	r1, fp
 8012212:	00cb      	lsls	r3, r1, #3
 8012214:	4651      	mov	r1, sl
 8012216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801221a:	4651      	mov	r1, sl
 801221c:	00ca      	lsls	r2, r1, #3
 801221e:	4610      	mov	r0, r2
 8012220:	4619      	mov	r1, r3
 8012222:	4603      	mov	r3, r0
 8012224:	4642      	mov	r2, r8
 8012226:	189b      	adds	r3, r3, r2
 8012228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801222c:	464b      	mov	r3, r9
 801222e:	460a      	mov	r2, r1
 8012230:	eb42 0303 	adc.w	r3, r2, r3
 8012234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	2200      	movs	r2, #0
 8012240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012244:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801224c:	460b      	mov	r3, r1
 801224e:	18db      	adds	r3, r3, r3
 8012250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012252:	4613      	mov	r3, r2
 8012254:	eb42 0303 	adc.w	r3, r2, r3
 8012258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801225a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801225e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8012262:	f7ee fd41 	bl	8000ce8 <__aeabi_uldivmod>
 8012266:	4602      	mov	r2, r0
 8012268:	460b      	mov	r3, r1
 801226a:	4b0d      	ldr	r3, [pc, #52]	@ (80122a0 <UART_SetConfig+0x2d4>)
 801226c:	fba3 1302 	umull	r1, r3, r3, r2
 8012270:	095b      	lsrs	r3, r3, #5
 8012272:	2164      	movs	r1, #100	@ 0x64
 8012274:	fb01 f303 	mul.w	r3, r1, r3
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	00db      	lsls	r3, r3, #3
 801227c:	3332      	adds	r3, #50	@ 0x32
 801227e:	4a08      	ldr	r2, [pc, #32]	@ (80122a0 <UART_SetConfig+0x2d4>)
 8012280:	fba2 2303 	umull	r2, r3, r2, r3
 8012284:	095b      	lsrs	r3, r3, #5
 8012286:	f003 0207 	and.w	r2, r3, #7
 801228a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4422      	add	r2, r4
 8012292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012294:	e106      	b.n	80124a4 <UART_SetConfig+0x4d8>
 8012296:	bf00      	nop
 8012298:	40011000 	.word	0x40011000
 801229c:	40011400 	.word	0x40011400
 80122a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80122a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80122a8:	2200      	movs	r2, #0
 80122aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80122ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80122b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80122b6:	4642      	mov	r2, r8
 80122b8:	464b      	mov	r3, r9
 80122ba:	1891      	adds	r1, r2, r2
 80122bc:	6239      	str	r1, [r7, #32]
 80122be:	415b      	adcs	r3, r3
 80122c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80122c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80122c6:	4641      	mov	r1, r8
 80122c8:	1854      	adds	r4, r2, r1
 80122ca:	4649      	mov	r1, r9
 80122cc:	eb43 0501 	adc.w	r5, r3, r1
 80122d0:	f04f 0200 	mov.w	r2, #0
 80122d4:	f04f 0300 	mov.w	r3, #0
 80122d8:	00eb      	lsls	r3, r5, #3
 80122da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80122de:	00e2      	lsls	r2, r4, #3
 80122e0:	4614      	mov	r4, r2
 80122e2:	461d      	mov	r5, r3
 80122e4:	4643      	mov	r3, r8
 80122e6:	18e3      	adds	r3, r4, r3
 80122e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80122ec:	464b      	mov	r3, r9
 80122ee:	eb45 0303 	adc.w	r3, r5, r3
 80122f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80122f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	2200      	movs	r2, #0
 80122fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012306:	f04f 0200 	mov.w	r2, #0
 801230a:	f04f 0300 	mov.w	r3, #0
 801230e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8012312:	4629      	mov	r1, r5
 8012314:	008b      	lsls	r3, r1, #2
 8012316:	4621      	mov	r1, r4
 8012318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801231c:	4621      	mov	r1, r4
 801231e:	008a      	lsls	r2, r1, #2
 8012320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8012324:	f7ee fce0 	bl	8000ce8 <__aeabi_uldivmod>
 8012328:	4602      	mov	r2, r0
 801232a:	460b      	mov	r3, r1
 801232c:	4b60      	ldr	r3, [pc, #384]	@ (80124b0 <UART_SetConfig+0x4e4>)
 801232e:	fba3 2302 	umull	r2, r3, r3, r2
 8012332:	095b      	lsrs	r3, r3, #5
 8012334:	011c      	lsls	r4, r3, #4
 8012336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801233a:	2200      	movs	r2, #0
 801233c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012340:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8012348:	4642      	mov	r2, r8
 801234a:	464b      	mov	r3, r9
 801234c:	1891      	adds	r1, r2, r2
 801234e:	61b9      	str	r1, [r7, #24]
 8012350:	415b      	adcs	r3, r3
 8012352:	61fb      	str	r3, [r7, #28]
 8012354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012358:	4641      	mov	r1, r8
 801235a:	1851      	adds	r1, r2, r1
 801235c:	6139      	str	r1, [r7, #16]
 801235e:	4649      	mov	r1, r9
 8012360:	414b      	adcs	r3, r1
 8012362:	617b      	str	r3, [r7, #20]
 8012364:	f04f 0200 	mov.w	r2, #0
 8012368:	f04f 0300 	mov.w	r3, #0
 801236c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012370:	4659      	mov	r1, fp
 8012372:	00cb      	lsls	r3, r1, #3
 8012374:	4651      	mov	r1, sl
 8012376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801237a:	4651      	mov	r1, sl
 801237c:	00ca      	lsls	r2, r1, #3
 801237e:	4610      	mov	r0, r2
 8012380:	4619      	mov	r1, r3
 8012382:	4603      	mov	r3, r0
 8012384:	4642      	mov	r2, r8
 8012386:	189b      	adds	r3, r3, r2
 8012388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801238c:	464b      	mov	r3, r9
 801238e:	460a      	mov	r2, r1
 8012390:	eb42 0303 	adc.w	r3, r2, r3
 8012394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80123a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80123a4:	f04f 0200 	mov.w	r2, #0
 80123a8:	f04f 0300 	mov.w	r3, #0
 80123ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80123b0:	4649      	mov	r1, r9
 80123b2:	008b      	lsls	r3, r1, #2
 80123b4:	4641      	mov	r1, r8
 80123b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80123ba:	4641      	mov	r1, r8
 80123bc:	008a      	lsls	r2, r1, #2
 80123be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80123c2:	f7ee fc91 	bl	8000ce8 <__aeabi_uldivmod>
 80123c6:	4602      	mov	r2, r0
 80123c8:	460b      	mov	r3, r1
 80123ca:	4611      	mov	r1, r2
 80123cc:	4b38      	ldr	r3, [pc, #224]	@ (80124b0 <UART_SetConfig+0x4e4>)
 80123ce:	fba3 2301 	umull	r2, r3, r3, r1
 80123d2:	095b      	lsrs	r3, r3, #5
 80123d4:	2264      	movs	r2, #100	@ 0x64
 80123d6:	fb02 f303 	mul.w	r3, r2, r3
 80123da:	1acb      	subs	r3, r1, r3
 80123dc:	011b      	lsls	r3, r3, #4
 80123de:	3332      	adds	r3, #50	@ 0x32
 80123e0:	4a33      	ldr	r2, [pc, #204]	@ (80124b0 <UART_SetConfig+0x4e4>)
 80123e2:	fba2 2303 	umull	r2, r3, r2, r3
 80123e6:	095b      	lsrs	r3, r3, #5
 80123e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80123ec:	441c      	add	r4, r3
 80123ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80123f2:	2200      	movs	r2, #0
 80123f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80123f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80123f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80123fc:	4642      	mov	r2, r8
 80123fe:	464b      	mov	r3, r9
 8012400:	1891      	adds	r1, r2, r2
 8012402:	60b9      	str	r1, [r7, #8]
 8012404:	415b      	adcs	r3, r3
 8012406:	60fb      	str	r3, [r7, #12]
 8012408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801240c:	4641      	mov	r1, r8
 801240e:	1851      	adds	r1, r2, r1
 8012410:	6039      	str	r1, [r7, #0]
 8012412:	4649      	mov	r1, r9
 8012414:	414b      	adcs	r3, r1
 8012416:	607b      	str	r3, [r7, #4]
 8012418:	f04f 0200 	mov.w	r2, #0
 801241c:	f04f 0300 	mov.w	r3, #0
 8012420:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012424:	4659      	mov	r1, fp
 8012426:	00cb      	lsls	r3, r1, #3
 8012428:	4651      	mov	r1, sl
 801242a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801242e:	4651      	mov	r1, sl
 8012430:	00ca      	lsls	r2, r1, #3
 8012432:	4610      	mov	r0, r2
 8012434:	4619      	mov	r1, r3
 8012436:	4603      	mov	r3, r0
 8012438:	4642      	mov	r2, r8
 801243a:	189b      	adds	r3, r3, r2
 801243c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801243e:	464b      	mov	r3, r9
 8012440:	460a      	mov	r2, r1
 8012442:	eb42 0303 	adc.w	r3, r2, r3
 8012446:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	2200      	movs	r2, #0
 8012450:	663b      	str	r3, [r7, #96]	@ 0x60
 8012452:	667a      	str	r2, [r7, #100]	@ 0x64
 8012454:	f04f 0200 	mov.w	r2, #0
 8012458:	f04f 0300 	mov.w	r3, #0
 801245c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8012460:	4649      	mov	r1, r9
 8012462:	008b      	lsls	r3, r1, #2
 8012464:	4641      	mov	r1, r8
 8012466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801246a:	4641      	mov	r1, r8
 801246c:	008a      	lsls	r2, r1, #2
 801246e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8012472:	f7ee fc39 	bl	8000ce8 <__aeabi_uldivmod>
 8012476:	4602      	mov	r2, r0
 8012478:	460b      	mov	r3, r1
 801247a:	4b0d      	ldr	r3, [pc, #52]	@ (80124b0 <UART_SetConfig+0x4e4>)
 801247c:	fba3 1302 	umull	r1, r3, r3, r2
 8012480:	095b      	lsrs	r3, r3, #5
 8012482:	2164      	movs	r1, #100	@ 0x64
 8012484:	fb01 f303 	mul.w	r3, r1, r3
 8012488:	1ad3      	subs	r3, r2, r3
 801248a:	011b      	lsls	r3, r3, #4
 801248c:	3332      	adds	r3, #50	@ 0x32
 801248e:	4a08      	ldr	r2, [pc, #32]	@ (80124b0 <UART_SetConfig+0x4e4>)
 8012490:	fba2 2303 	umull	r2, r3, r2, r3
 8012494:	095b      	lsrs	r3, r3, #5
 8012496:	f003 020f 	and.w	r2, r3, #15
 801249a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4422      	add	r2, r4
 80124a2:	609a      	str	r2, [r3, #8]
}
 80124a4:	bf00      	nop
 80124a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80124aa:	46bd      	mov	sp, r7
 80124ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80124b0:	51eb851f 	.word	0x51eb851f

080124b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80124b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80124b6:	2400      	movs	r4, #0
 80124b8:	2310      	movs	r3, #16
 80124ba:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80124be:	6803      	ldr	r3, [r0, #0]
 80124c0:	4615      	mov	r5, r2
 80124c2:	699e      	ldr	r6, [r3, #24]
 80124c4:	6812      	ldr	r2, [r2, #0]
 80124c6:	466b      	mov	r3, sp
 80124c8:	e9cd 4400 	strd	r4, r4, [sp]
 80124cc:	47b0      	blx	r6
 80124ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80124d2:	f003 0306 	and.w	r3, r3, #6
 80124d6:	2b06      	cmp	r3, #6
 80124d8:	bf03      	ittte	eq
 80124da:	9b00      	ldreq	r3, [sp, #0]
 80124dc:	602b      	streq	r3, [r5, #0]
 80124de:	2001      	moveq	r0, #1
 80124e0:	4620      	movne	r0, r4
 80124e2:	b004      	add	sp, #16
 80124e4:	bd70      	pop	{r4, r5, r6, pc}

080124e6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80124e6:	9800      	ldr	r0, [sp, #0]
 80124e8:	4290      	cmp	r0, r2
 80124ea:	bf0c      	ite	eq
 80124ec:	2006      	moveq	r0, #6
 80124ee:	2001      	movne	r0, #1
 80124f0:	4770      	bx	lr
	...

080124f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80124f4:	b510      	push	{r4, lr}
 80124f6:	4b03      	ldr	r3, [pc, #12]	@ (8012504 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80124f8:	6003      	str	r3, [r0, #0]
 80124fa:	4604      	mov	r4, r0
 80124fc:	f000 fd3b 	bl	8012f76 <_ZNSt9type_infoD1Ev>
 8012500:	4620      	mov	r0, r4
 8012502:	bd10      	pop	{r4, pc}
 8012504:	08018448 	.word	0x08018448

08012508 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8012508:	b510      	push	{r4, lr}
 801250a:	4604      	mov	r4, r0
 801250c:	f7ff fff2 	bl	80124f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012510:	4620      	mov	r0, r4
 8012512:	2108      	movs	r1, #8
 8012514:	f000 f842 	bl	801259c <_ZdlPvj>
 8012518:	4620      	mov	r0, r4
 801251a:	bd10      	pop	{r4, pc}

0801251c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801251c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012520:	461f      	mov	r7, r3
 8012522:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8012526:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801252a:	4598      	cmp	r8, r3
 801252c:	4606      	mov	r6, r0
 801252e:	4615      	mov	r5, r2
 8012530:	d107      	bne.n	8012542 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8012532:	9907      	ldr	r1, [sp, #28]
 8012534:	f000 fd22 	bl	8012f7c <_ZNKSt9type_info7__equalERKS_>
 8012538:	b118      	cbz	r0, 8012542 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801253a:	7165      	strb	r5, [r4, #5]
 801253c:	2000      	movs	r0, #0
 801253e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012542:	4639      	mov	r1, r7
 8012544:	4630      	mov	r0, r6
 8012546:	f000 fd19 	bl	8012f7c <_ZNKSt9type_info7__equalERKS_>
 801254a:	2800      	cmp	r0, #0
 801254c:	d0f6      	beq.n	801253c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801254e:	2301      	movs	r3, #1
 8012550:	f8c4 8000 	str.w	r8, [r4]
 8012554:	7125      	strb	r5, [r4, #4]
 8012556:	71a3      	strb	r3, [r4, #6]
 8012558:	e7f0      	b.n	801253c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801255a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801255a:	b538      	push	{r3, r4, r5, lr}
 801255c:	4615      	mov	r5, r2
 801255e:	461c      	mov	r4, r3
 8012560:	f000 fd0c 	bl	8012f7c <_ZNKSt9type_info7__equalERKS_>
 8012564:	b120      	cbz	r0, 8012570 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8012566:	2308      	movs	r3, #8
 8012568:	60e3      	str	r3, [r4, #12]
 801256a:	2306      	movs	r3, #6
 801256c:	6025      	str	r5, [r4, #0]
 801256e:	7123      	strb	r3, [r4, #4]
 8012570:	bd38      	pop	{r3, r4, r5, pc}

08012572 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8012572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012576:	4605      	mov	r5, r0
 8012578:	460c      	mov	r4, r1
 801257a:	4616      	mov	r6, r2
 801257c:	461f      	mov	r7, r3
 801257e:	f000 fcfd 	bl	8012f7c <_ZNKSt9type_info7__equalERKS_>
 8012582:	b948      	cbnz	r0, 8012598 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8012584:	2f03      	cmp	r7, #3
 8012586:	d807      	bhi.n	8012598 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8012588:	6823      	ldr	r3, [r4, #0]
 801258a:	4632      	mov	r2, r6
 801258c:	4629      	mov	r1, r5
 801258e:	4620      	mov	r0, r4
 8012590:	695b      	ldr	r3, [r3, #20]
 8012592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012596:	4718      	bx	r3
 8012598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801259c <_ZdlPvj>:
 801259c:	f000 bdd4 	b.w	8013148 <_ZdlPv>

080125a0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 80125a0:	4a19      	ldr	r2, [pc, #100]	@ (8012608 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 80125a2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80125a6:	6853      	ldr	r3, [r2, #4]
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	f1a0 0408 	sub.w	r4, r0, #8
 80125ae:	b113      	cbz	r3, 80125b6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 80125b0:	1865      	adds	r5, r4, r1
 80125b2:	42ab      	cmp	r3, r5
 80125b4:	d903      	bls.n	80125be <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 80125b6:	f840 3c04 	str.w	r3, [r0, #-4]
 80125ba:	6054      	str	r4, [r2, #4]
 80125bc:	bd70      	pop	{r4, r5, r6, pc}
 80125be:	685e      	ldr	r6, [r3, #4]
 80125c0:	d11f      	bne.n	8012602 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x62>
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	440b      	add	r3, r1
 80125c6:	e940 3602 	strd	r3, r6, [r0, #-8]
 80125ca:	e7f6      	b.n	80125ba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 80125cc:	1d1a      	adds	r2, r3, #4
 80125ce:	4633      	mov	r3, r6
 80125d0:	685e      	ldr	r6, [r3, #4]
 80125d2:	b136      	cbz	r6, 80125e2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
 80125d4:	42b5      	cmp	r5, r6
 80125d6:	d3f9      	bcc.n	80125cc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 80125d8:	bf01      	itttt	eq
 80125da:	682e      	ldreq	r6, [r5, #0]
 80125dc:	686d      	ldreq	r5, [r5, #4]
 80125de:	605d      	streq	r5, [r3, #4]
 80125e0:	1989      	addeq	r1, r1, r6
 80125e2:	6813      	ldr	r3, [r2, #0]
 80125e4:	681d      	ldr	r5, [r3, #0]
 80125e6:	195e      	adds	r6, r3, r5
 80125e8:	42b4      	cmp	r4, r6
 80125ea:	bf1f      	itttt	ne
 80125ec:	685b      	ldrne	r3, [r3, #4]
 80125ee:	f840 3c04 	strne.w	r3, [r0, #-4]
 80125f2:	6813      	ldrne	r3, [r2, #0]
 80125f4:	f840 1c08 	strne.w	r1, [r0, #-8]
 80125f8:	bf06      	itte	eq
 80125fa:	186d      	addeq	r5, r5, r1
 80125fc:	601d      	streq	r5, [r3, #0]
 80125fe:	605c      	strne	r4, [r3, #4]
 8012600:	e7dc      	b.n	80125bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 8012602:	3204      	adds	r2, #4
 8012604:	e7e4      	b.n	80125d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 8012606:	bf00      	nop
 8012608:	20000568 	.word	0x20000568

0801260c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 801260c:	3008      	adds	r0, #8
 801260e:	2808      	cmp	r0, #8
 8012610:	b530      	push	{r4, r5, lr}
 8012612:	4a0f      	ldr	r2, [pc, #60]	@ (8012650 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 8012614:	bf38      	it	cc
 8012616:	2008      	movcc	r0, #8
 8012618:	3007      	adds	r0, #7
 801261a:	f020 0307 	bic.w	r3, r0, #7
 801261e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012622:	b198      	cbz	r0, 801264c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x40>
 8012624:	6801      	ldr	r1, [r0, #0]
 8012626:	428b      	cmp	r3, r1
 8012628:	d806      	bhi.n	8012638 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x2c>
 801262a:	1acd      	subs	r5, r1, r3
 801262c:	2d07      	cmp	r5, #7
 801262e:	6844      	ldr	r4, [r0, #4]
 8012630:	d805      	bhi.n	801263e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x32>
 8012632:	6001      	str	r1, [r0, #0]
 8012634:	4621      	mov	r1, r4
 8012636:	e007      	b.n	8012648 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 8012638:	1d02      	adds	r2, r0, #4
 801263a:	6840      	ldr	r0, [r0, #4]
 801263c:	e7f1      	b.n	8012622 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x16>
 801263e:	18c1      	adds	r1, r0, r3
 8012640:	604c      	str	r4, [r1, #4]
 8012642:	50c5      	str	r5, [r0, r3]
 8012644:	6810      	ldr	r0, [r2, #0]
 8012646:	6003      	str	r3, [r0, #0]
 8012648:	6011      	str	r1, [r2, #0]
 801264a:	3008      	adds	r0, #8
 801264c:	bd30      	pop	{r4, r5, pc}
 801264e:	bf00      	nop
 8012650:	20000568 	.word	0x20000568

08012654 <__cxa_allocate_exception>:
 8012654:	b510      	push	{r4, lr}
 8012656:	f100 0480 	add.w	r4, r0, #128	@ 0x80
 801265a:	4620      	mov	r0, r4
 801265c:	f001 fff8 	bl	8014650 <malloc>
 8012660:	4603      	mov	r3, r0
 8012662:	b930      	cbnz	r0, 8012672 <__cxa_allocate_exception+0x1e>
 8012664:	4620      	mov	r0, r4
 8012666:	f7ff ffd1 	bl	801260c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 801266a:	4603      	mov	r3, r0
 801266c:	b908      	cbnz	r0, 8012672 <__cxa_allocate_exception+0x1e>
 801266e:	f000 fb6d 	bl	8012d4c <_ZSt9terminatev>
 8012672:	2280      	movs	r2, #128	@ 0x80
 8012674:	2100      	movs	r1, #0
 8012676:	4618      	mov	r0, r3
 8012678:	f002 fe13 	bl	80152a2 <memset>
 801267c:	3080      	adds	r0, #128	@ 0x80
 801267e:	bd10      	pop	{r4, pc}

08012680 <__cxa_free_exception>:
 8012680:	4a06      	ldr	r2, [pc, #24]	@ (801269c <__cxa_free_exception+0x1c>)
 8012682:	6893      	ldr	r3, [r2, #8]
 8012684:	3880      	subs	r0, #128	@ 0x80
 8012686:	4298      	cmp	r0, r3
 8012688:	d905      	bls.n	8012696 <__cxa_free_exception+0x16>
 801268a:	68d2      	ldr	r2, [r2, #12]
 801268c:	4413      	add	r3, r2
 801268e:	4298      	cmp	r0, r3
 8012690:	d201      	bcs.n	8012696 <__cxa_free_exception+0x16>
 8012692:	f7ff bf85 	b.w	80125a0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 8012696:	f001 bfe3 	b.w	8014660 <free>
 801269a:	bf00      	nop
 801269c:	20000568 	.word	0x20000568

080126a0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80126a0:	b538      	push	{r3, r4, r5, lr}
 80126a2:	4c08      	ldr	r4, [pc, #32]	@ (80126c4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80126a4:	f44f 651e 	mov.w	r5, #2528	@ 0x9e0
 80126a8:	4628      	mov	r0, r5
 80126aa:	60e5      	str	r5, [r4, #12]
 80126ac:	f001 ffd0 	bl	8014650 <malloc>
 80126b0:	60a0      	str	r0, [r4, #8]
 80126b2:	b910      	cbnz	r0, 80126ba <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80126b4:	60e0      	str	r0, [r4, #12]
 80126b6:	6060      	str	r0, [r4, #4]
 80126b8:	bd38      	pop	{r3, r4, r5, pc}
 80126ba:	2300      	movs	r3, #0
 80126bc:	6060      	str	r0, [r4, #4]
 80126be:	6005      	str	r5, [r0, #0]
 80126c0:	6043      	str	r3, [r0, #4]
 80126c2:	e7f9      	b.n	80126b8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 80126c4:	20000568 	.word	0x20000568

080126c8 <__cxa_end_cleanup>:
 80126c8:	b41e      	push	{r1, r2, r3, r4}
 80126ca:	f000 f89c 	bl	8012806 <__gnu_end_cleanup>
 80126ce:	bc1e      	pop	{r1, r2, r3, r4}
 80126d0:	f7ef fa08 	bl	8001ae4 <_Unwind_Resume>

080126d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80126d4:	7803      	ldrb	r3, [r0, #0]
 80126d6:	2b47      	cmp	r3, #71	@ 0x47
 80126d8:	d117      	bne.n	801270a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80126da:	7843      	ldrb	r3, [r0, #1]
 80126dc:	2b4e      	cmp	r3, #78	@ 0x4e
 80126de:	d114      	bne.n	801270a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80126e0:	7883      	ldrb	r3, [r0, #2]
 80126e2:	2b55      	cmp	r3, #85	@ 0x55
 80126e4:	d111      	bne.n	801270a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80126e6:	78c3      	ldrb	r3, [r0, #3]
 80126e8:	2b43      	cmp	r3, #67	@ 0x43
 80126ea:	d10e      	bne.n	801270a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80126ec:	7903      	ldrb	r3, [r0, #4]
 80126ee:	2b43      	cmp	r3, #67	@ 0x43
 80126f0:	d10b      	bne.n	801270a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80126f2:	7943      	ldrb	r3, [r0, #5]
 80126f4:	2b2b      	cmp	r3, #43	@ 0x2b
 80126f6:	d108      	bne.n	801270a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80126f8:	7983      	ldrb	r3, [r0, #6]
 80126fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80126fc:	d105      	bne.n	801270a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80126fe:	79c0      	ldrb	r0, [r0, #7]
 8012700:	2801      	cmp	r0, #1
 8012702:	bf8c      	ite	hi
 8012704:	2000      	movhi	r0, #0
 8012706:	2001      	movls	r0, #1
 8012708:	4770      	bx	lr
 801270a:	2000      	movs	r0, #0
 801270c:	4770      	bx	lr
	...

08012710 <__cxa_type_match>:
 8012710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012714:	461d      	mov	r5, r3
 8012716:	7803      	ldrb	r3, [r0, #0]
 8012718:	2b47      	cmp	r3, #71	@ 0x47
 801271a:	460e      	mov	r6, r1
 801271c:	4602      	mov	r2, r0
 801271e:	79c1      	ldrb	r1, [r0, #7]
 8012720:	d113      	bne.n	801274a <__cxa_type_match+0x3a>
 8012722:	7843      	ldrb	r3, [r0, #1]
 8012724:	2b4e      	cmp	r3, #78	@ 0x4e
 8012726:	d110      	bne.n	801274a <__cxa_type_match+0x3a>
 8012728:	7883      	ldrb	r3, [r0, #2]
 801272a:	2b55      	cmp	r3, #85	@ 0x55
 801272c:	d10d      	bne.n	801274a <__cxa_type_match+0x3a>
 801272e:	78c3      	ldrb	r3, [r0, #3]
 8012730:	2b43      	cmp	r3, #67	@ 0x43
 8012732:	d10a      	bne.n	801274a <__cxa_type_match+0x3a>
 8012734:	7903      	ldrb	r3, [r0, #4]
 8012736:	2b46      	cmp	r3, #70	@ 0x46
 8012738:	d107      	bne.n	801274a <__cxa_type_match+0x3a>
 801273a:	7943      	ldrb	r3, [r0, #5]
 801273c:	2b4f      	cmp	r3, #79	@ 0x4f
 801273e:	d104      	bne.n	801274a <__cxa_type_match+0x3a>
 8012740:	7983      	ldrb	r3, [r0, #6]
 8012742:	2b52      	cmp	r3, #82	@ 0x52
 8012744:	d101      	bne.n	801274a <__cxa_type_match+0x3a>
 8012746:	2900      	cmp	r1, #0
 8012748:	d031      	beq.n	80127ae <__cxa_type_match+0x9e>
 801274a:	4610      	mov	r0, r2
 801274c:	f7ff ffc2 	bl	80126d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012750:	f080 0401 	eor.w	r4, r0, #1
 8012754:	b2e4      	uxtb	r4, r4
 8012756:	2300      	movs	r3, #0
 8012758:	2000      	movs	r0, #0
 801275a:	9001      	str	r0, [sp, #4]
 801275c:	bb53      	cbnz	r3, 80127b4 <__cxa_type_match+0xa4>
 801275e:	bb5c      	cbnz	r4, 80127b8 <__cxa_type_match+0xa8>
 8012760:	2901      	cmp	r1, #1
 8012762:	bf0a      	itet	eq
 8012764:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8012768:	f1a2 0320 	subne.w	r3, r2, #32
 801276c:	3b78      	subeq	r3, #120	@ 0x78
 801276e:	2901      	cmp	r1, #1
 8012770:	bf08      	it	eq
 8012772:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8012776:	681c      	ldr	r4, [r3, #0]
 8012778:	bf18      	it	ne
 801277a:	3258      	addne	r2, #88	@ 0x58
 801277c:	9201      	str	r2, [sp, #4]
 801277e:	6823      	ldr	r3, [r4, #0]
 8012780:	4620      	mov	r0, r4
 8012782:	689b      	ldr	r3, [r3, #8]
 8012784:	4798      	blx	r3
 8012786:	b1c8      	cbz	r0, 80127bc <__cxa_type_match+0xac>
 8012788:	9b01      	ldr	r3, [sp, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	9301      	str	r3, [sp, #4]
 801278e:	2702      	movs	r7, #2
 8012790:	6833      	ldr	r3, [r6, #0]
 8012792:	aa01      	add	r2, sp, #4
 8012794:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8012798:	4621      	mov	r1, r4
 801279a:	2301      	movs	r3, #1
 801279c:	4630      	mov	r0, r6
 801279e:	47c0      	blx	r8
 80127a0:	b170      	cbz	r0, 80127c0 <__cxa_type_match+0xb0>
 80127a2:	9b01      	ldr	r3, [sp, #4]
 80127a4:	602b      	str	r3, [r5, #0]
 80127a6:	4638      	mov	r0, r7
 80127a8:	b002      	add	sp, #8
 80127aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ae:	2301      	movs	r3, #1
 80127b0:	460c      	mov	r4, r1
 80127b2:	e7d1      	b.n	8012758 <__cxa_type_match+0x48>
 80127b4:	4c03      	ldr	r4, [pc, #12]	@ (80127c4 <__cxa_type_match+0xb4>)
 80127b6:	e7e2      	b.n	801277e <__cxa_type_match+0x6e>
 80127b8:	4c03      	ldr	r4, [pc, #12]	@ (80127c8 <__cxa_type_match+0xb8>)
 80127ba:	e7e0      	b.n	801277e <__cxa_type_match+0x6e>
 80127bc:	2701      	movs	r7, #1
 80127be:	e7e7      	b.n	8012790 <__cxa_type_match+0x80>
 80127c0:	4607      	mov	r7, r0
 80127c2:	e7f0      	b.n	80127a6 <__cxa_type_match+0x96>
 80127c4:	080184a4 	.word	0x080184a4
 80127c8:	080184d0 	.word	0x080184d0

080127cc <__cxa_begin_cleanup>:
 80127cc:	b510      	push	{r4, lr}
 80127ce:	4604      	mov	r4, r0
 80127d0:	f000 f834 	bl	801283c <__cxa_get_globals>
 80127d4:	4602      	mov	r2, r0
 80127d6:	4620      	mov	r0, r4
 80127d8:	f1a4 0120 	sub.w	r1, r4, #32
 80127dc:	f7ff ff7a 	bl	80126d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80127e0:	b160      	cbz	r0, 80127fc <__cxa_begin_cleanup+0x30>
 80127e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80127e6:	3301      	adds	r3, #1
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80127ee:	d103      	bne.n	80127f8 <__cxa_begin_cleanup+0x2c>
 80127f0:	6893      	ldr	r3, [r2, #8]
 80127f2:	f844 3c08 	str.w	r3, [r4, #-8]
 80127f6:	6091      	str	r1, [r2, #8]
 80127f8:	2001      	movs	r0, #1
 80127fa:	bd10      	pop	{r4, pc}
 80127fc:	6893      	ldr	r3, [r2, #8]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d0f9      	beq.n	80127f6 <__cxa_begin_cleanup+0x2a>
 8012802:	f000 faa3 	bl	8012d4c <_ZSt9terminatev>

08012806 <__gnu_end_cleanup>:
 8012806:	b510      	push	{r4, lr}
 8012808:	f000 f818 	bl	801283c <__cxa_get_globals>
 801280c:	6882      	ldr	r2, [r0, #8]
 801280e:	4601      	mov	r1, r0
 8012810:	b90a      	cbnz	r2, 8012816 <__gnu_end_cleanup+0x10>
 8012812:	f000 fa9b 	bl	8012d4c <_ZSt9terminatev>
 8012816:	f102 0420 	add.w	r4, r2, #32
 801281a:	4620      	mov	r0, r4
 801281c:	f7ff ff5a 	bl	80126d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012820:	b140      	cbz	r0, 8012834 <__gnu_end_cleanup+0x2e>
 8012822:	69d3      	ldr	r3, [r2, #28]
 8012824:	3b01      	subs	r3, #1
 8012826:	61d3      	str	r3, [r2, #28]
 8012828:	b913      	cbnz	r3, 8012830 <__gnu_end_cleanup+0x2a>
 801282a:	6990      	ldr	r0, [r2, #24]
 801282c:	6088      	str	r0, [r1, #8]
 801282e:	6193      	str	r3, [r2, #24]
 8012830:	4620      	mov	r0, r4
 8012832:	bd10      	pop	{r4, pc}
 8012834:	6088      	str	r0, [r1, #8]
 8012836:	e7fb      	b.n	8012830 <__gnu_end_cleanup+0x2a>

08012838 <_ZNSt9exceptionD1Ev>:
 8012838:	4770      	bx	lr

0801283a <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 801283a:	4770      	bx	lr

0801283c <__cxa_get_globals>:
 801283c:	4800      	ldr	r0, [pc, #0]	@ (8012840 <__cxa_get_globals+0x4>)
 801283e:	4770      	bx	lr
 8012840:	20000578 	.word	0x20000578

08012844 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8012844:	4a02      	ldr	r2, [pc, #8]	@ (8012850 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8012846:	4903      	ldr	r1, [pc, #12]	@ (8012854 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8012848:	4803      	ldr	r0, [pc, #12]	@ (8012858 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 801284a:	f000 bc78 	b.w	801313e <__aeabi_atexit>
 801284e:	bf00      	nop
 8012850:	20000000 	.word	0x20000000
 8012854:	0801283b 	.word	0x0801283b
 8012858:	20000578 	.word	0x20000578

0801285c <_ZL12read_uleb128PKhPm>:
 801285c:	b530      	push	{r4, r5, lr}
 801285e:	2300      	movs	r3, #0
 8012860:	461a      	mov	r2, r3
 8012862:	f810 5b01 	ldrb.w	r5, [r0], #1
 8012866:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 801286a:	4094      	lsls	r4, r2
 801286c:	4323      	orrs	r3, r4
 801286e:	062c      	lsls	r4, r5, #24
 8012870:	f102 0207 	add.w	r2, r2, #7
 8012874:	d4f5      	bmi.n	8012862 <_ZL12read_uleb128PKhPm+0x6>
 8012876:	600b      	str	r3, [r1, #0]
 8012878:	bd30      	pop	{r4, r5, pc}

0801287a <_ZL12read_sleb128PKhPl>:
 801287a:	b530      	push	{r4, r5, lr}
 801287c:	2300      	movs	r3, #0
 801287e:	461a      	mov	r2, r3
 8012880:	f810 4b01 	ldrb.w	r4, [r0], #1
 8012884:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 8012888:	4095      	lsls	r5, r2
 801288a:	432b      	orrs	r3, r5
 801288c:	0625      	lsls	r5, r4, #24
 801288e:	f102 0207 	add.w	r2, r2, #7
 8012892:	d4f5      	bmi.n	8012880 <_ZL12read_sleb128PKhPl+0x6>
 8012894:	2a1f      	cmp	r2, #31
 8012896:	d806      	bhi.n	80128a6 <_ZL12read_sleb128PKhPl+0x2c>
 8012898:	0664      	lsls	r4, r4, #25
 801289a:	bf42      	ittt	mi
 801289c:	f04f 34ff 	movmi.w	r4, #4294967295
 80128a0:	fa04 f202 	lslmi.w	r2, r4, r2
 80128a4:	4313      	orrmi	r3, r2
 80128a6:	600b      	str	r3, [r1, #0]
 80128a8:	bd30      	pop	{r4, r5, pc}

080128aa <_ZL28read_encoded_value_with_basehjPKhPj>:
 80128aa:	2850      	cmp	r0, #80	@ 0x50
 80128ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80128b0:	4606      	mov	r6, r0
 80128b2:	4688      	mov	r8, r1
 80128b4:	4615      	mov	r5, r2
 80128b6:	461f      	mov	r7, r3
 80128b8:	d108      	bne.n	80128cc <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 80128ba:	1cd0      	adds	r0, r2, #3
 80128bc:	f020 0003 	bic.w	r0, r0, #3
 80128c0:	f850 4b04 	ldr.w	r4, [r0], #4
 80128c4:	603c      	str	r4, [r7, #0]
 80128c6:	b002      	add	sp, #8
 80128c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128cc:	f000 030f 	and.w	r3, r0, #15
 80128d0:	2b0c      	cmp	r3, #12
 80128d2:	d82e      	bhi.n	8012932 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80128d4:	e8df f003 	tbb	[pc, r3]
 80128d8:	251d0725 	.word	0x251d0725
 80128dc:	2d2d2d29 	.word	0x2d2d2d29
 80128e0:	2521182d 	.word	0x2521182d
 80128e4:	29          	.byte	0x29
 80128e5:	00          	.byte	0x00
 80128e6:	a901      	add	r1, sp, #4
 80128e8:	4628      	mov	r0, r5
 80128ea:	f7ff ffb7 	bl	801285c <_ZL12read_uleb128PKhPm>
 80128ee:	9c01      	ldr	r4, [sp, #4]
 80128f0:	2c00      	cmp	r4, #0
 80128f2:	d0e7      	beq.n	80128c4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80128f4:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 80128f8:	2b10      	cmp	r3, #16
 80128fa:	bf08      	it	eq
 80128fc:	46a8      	moveq	r8, r5
 80128fe:	4444      	add	r4, r8
 8012900:	0633      	lsls	r3, r6, #24
 8012902:	bf48      	it	mi
 8012904:	6824      	ldrmi	r4, [r4, #0]
 8012906:	e7dd      	b.n	80128c4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8012908:	a901      	add	r1, sp, #4
 801290a:	4628      	mov	r0, r5
 801290c:	f7ff ffb5 	bl	801287a <_ZL12read_sleb128PKhPl>
 8012910:	e7ed      	b.n	80128ee <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8012912:	4628      	mov	r0, r5
 8012914:	f830 4b02 	ldrh.w	r4, [r0], #2
 8012918:	e7ea      	b.n	80128f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801291a:	4628      	mov	r0, r5
 801291c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8012920:	e7e6      	b.n	80128f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012922:	4628      	mov	r0, r5
 8012924:	f850 4b04 	ldr.w	r4, [r0], #4
 8012928:	e7e2      	b.n	80128f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801292a:	4628      	mov	r0, r5
 801292c:	f850 4b08 	ldr.w	r4, [r0], #8
 8012930:	e7de      	b.n	80128f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012932:	f001 fe85 	bl	8014640 <abort>

08012936 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8012936:	b508      	push	{r3, lr}
 8012938:	4603      	mov	r3, r0
 801293a:	2bff      	cmp	r3, #255	@ 0xff
 801293c:	4608      	mov	r0, r1
 801293e:	d00d      	beq.n	801295c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8012940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8012944:	2b30      	cmp	r3, #48	@ 0x30
 8012946:	d00f      	beq.n	8012968 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8012948:	d804      	bhi.n	8012954 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 801294a:	2b20      	cmp	r3, #32
 801294c:	d008      	beq.n	8012960 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 801294e:	d905      	bls.n	801295c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8012950:	f001 fe76 	bl	8014640 <abort>
 8012954:	2b40      	cmp	r3, #64	@ 0x40
 8012956:	d00b      	beq.n	8012970 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8012958:	2b50      	cmp	r3, #80	@ 0x50
 801295a:	d1f9      	bne.n	8012950 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 801295c:	2000      	movs	r0, #0
 801295e:	bd08      	pop	{r3, pc}
 8012960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012964:	f004 bb05 	b.w	8016f72 <_Unwind_GetTextRelBase>
 8012968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801296c:	f004 bafe 	b.w	8016f6c <_Unwind_GetDataRelBase>
 8012970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012974:	f7ef baaa 	b.w	8001ecc <_Unwind_GetRegionStart>

08012978 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8012978:	b570      	push	{r4, r5, r6, lr}
 801297a:	460c      	mov	r4, r1
 801297c:	4601      	mov	r1, r0
 801297e:	4620      	mov	r0, r4
 8012980:	4615      	mov	r5, r2
 8012982:	461e      	mov	r6, r3
 8012984:	f7ff ffd7 	bl	8012936 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012988:	4633      	mov	r3, r6
 801298a:	4601      	mov	r1, r0
 801298c:	462a      	mov	r2, r5
 801298e:	4620      	mov	r0, r4
 8012990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012994:	f7ff bf89 	b.w	80128aa <_ZL28read_encoded_value_with_basehjPKhPj>

08012998 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8012998:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801299a:	460c      	mov	r4, r1
 801299c:	4615      	mov	r5, r2
 801299e:	4606      	mov	r6, r0
 80129a0:	b108      	cbz	r0, 80129a6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80129a2:	f7ef fa93 	bl	8001ecc <_Unwind_GetRegionStart>
 80129a6:	4622      	mov	r2, r4
 80129a8:	6028      	str	r0, [r5, #0]
 80129aa:	f812 1b01 	ldrb.w	r1, [r2], #1
 80129ae:	29ff      	cmp	r1, #255	@ 0xff
 80129b0:	d01c      	beq.n	80129ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 80129b2:	1d2b      	adds	r3, r5, #4
 80129b4:	4630      	mov	r0, r6
 80129b6:	f7ff ffdf 	bl	8012978 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80129ba:	4602      	mov	r2, r0
 80129bc:	4610      	mov	r0, r2
 80129be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80129c2:	2bff      	cmp	r3, #255	@ 0xff
 80129c4:	d014      	beq.n	80129f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 80129c6:	2310      	movs	r3, #16
 80129c8:	752b      	strb	r3, [r5, #20]
 80129ca:	a901      	add	r1, sp, #4
 80129cc:	f7ff ff46 	bl	801285c <_ZL12read_uleb128PKhPm>
 80129d0:	9b01      	ldr	r3, [sp, #4]
 80129d2:	4403      	add	r3, r0
 80129d4:	60eb      	str	r3, [r5, #12]
 80129d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80129da:	756b      	strb	r3, [r5, #21]
 80129dc:	a901      	add	r1, sp, #4
 80129de:	f7ff ff3d 	bl	801285c <_ZL12read_uleb128PKhPm>
 80129e2:	9b01      	ldr	r3, [sp, #4]
 80129e4:	4403      	add	r3, r0
 80129e6:	612b      	str	r3, [r5, #16]
 80129e8:	b002      	add	sp, #8
 80129ea:	bd70      	pop	{r4, r5, r6, pc}
 80129ec:	6068      	str	r0, [r5, #4]
 80129ee:	e7e5      	b.n	80129bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 80129f0:	752b      	strb	r3, [r5, #20]
 80129f2:	2300      	movs	r3, #0
 80129f4:	e7ee      	b.n	80129d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

080129f6 <_Unwind_GetGR>:
 80129f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129f8:	ab03      	add	r3, sp, #12
 80129fa:	9300      	str	r3, [sp, #0]
 80129fc:	2300      	movs	r3, #0
 80129fe:	460a      	mov	r2, r1
 8012a00:	4619      	mov	r1, r3
 8012a02:	f7ee fcaf 	bl	8001364 <_Unwind_VRS_Get>
 8012a06:	9803      	ldr	r0, [sp, #12]
 8012a08:	b005      	add	sp, #20
 8012a0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012a10 <__gxx_personality_v0>:
 8012a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a14:	b093      	sub	sp, #76	@ 0x4c
 8012a16:	2300      	movs	r3, #0
 8012a18:	9307      	str	r3, [sp, #28]
 8012a1a:	f000 0303 	and.w	r3, r0, #3
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	4605      	mov	r5, r0
 8012a22:	460c      	mov	r4, r1
 8012a24:	4616      	mov	r6, r2
 8012a26:	d010      	beq.n	8012a4a <__gxx_personality_v0+0x3a>
 8012a28:	2b02      	cmp	r3, #2
 8012a2a:	d003      	beq.n	8012a34 <__gxx_personality_v0+0x24>
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d13b      	bne.n	8012aa8 <__gxx_personality_v0+0x98>
 8012a30:	0701      	lsls	r1, r0, #28
 8012a32:	d53b      	bpl.n	8012aac <__gxx_personality_v0+0x9c>
 8012a34:	4631      	mov	r1, r6
 8012a36:	4620      	mov	r0, r4
 8012a38:	f7ef fa32 	bl	8001ea0 <__gnu_unwind_frame>
 8012a3c:	b118      	cbz	r0, 8012a46 <__gxx_personality_v0+0x36>
 8012a3e:	2009      	movs	r0, #9
 8012a40:	b013      	add	sp, #76	@ 0x4c
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	2008      	movs	r0, #8
 8012a48:	e7fa      	b.n	8012a40 <__gxx_personality_v0+0x30>
 8012a4a:	0702      	lsls	r2, r0, #28
 8012a4c:	d523      	bpl.n	8012a96 <__gxx_personality_v0+0x86>
 8012a4e:	2302      	movs	r3, #2
 8012a50:	f005 0508 	and.w	r5, r5, #8
 8012a54:	431d      	orrs	r5, r3
 8012a56:	ab0c      	add	r3, sp, #48	@ 0x30
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	220c      	movs	r2, #12
 8012a5e:	4619      	mov	r1, r3
 8012a60:	4630      	mov	r0, r6
 8012a62:	940c      	str	r4, [sp, #48]	@ 0x30
 8012a64:	f7ee fca4 	bl	80013b0 <_Unwind_VRS_Set>
 8012a68:	2d06      	cmp	r5, #6
 8012a6a:	d121      	bne.n	8012ab0 <__gxx_personality_v0+0xa0>
 8012a6c:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 8012a70:	e9d4 790a 	ldrd	r7, r9, [r4, #40]	@ 0x28
 8012a74:	f1b8 0f00 	cmp.w	r8, #0
 8012a78:	bf0c      	ite	eq
 8012a7a:	f04f 0a01 	moveq.w	sl, #1
 8012a7e:	f04f 0a03 	movne.w	sl, #3
 8012a82:	f015 0508 	ands.w	r5, r5, #8
 8012a86:	f000 8103 	beq.w	8012c90 <__gxx_personality_v0+0x280>
 8012a8a:	f1ba 0f01 	cmp.w	sl, #1
 8012a8e:	f040 80fb 	bne.w	8012c88 <__gxx_personality_v0+0x278>
 8012a92:	f000 f95b 	bl	8012d4c <_ZSt9terminatev>
 8012a96:	6a0f      	ldr	r7, [r1, #32]
 8012a98:	4630      	mov	r0, r6
 8012a9a:	210d      	movs	r1, #13
 8012a9c:	f7ff ffab 	bl	80129f6 <_Unwind_GetGR>
 8012aa0:	4287      	cmp	r7, r0
 8012aa2:	d1d4      	bne.n	8012a4e <__gxx_personality_v0+0x3e>
 8012aa4:	2306      	movs	r3, #6
 8012aa6:	e7d3      	b.n	8012a50 <__gxx_personality_v0+0x40>
 8012aa8:	f001 fdca 	bl	8014640 <abort>
 8012aac:	2301      	movs	r3, #1
 8012aae:	e7cf      	b.n	8012a50 <__gxx_personality_v0+0x40>
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f7ef fa11 	bl	8001ed8 <_Unwind_GetLanguageSpecificData>
 8012ab6:	4681      	mov	r9, r0
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d0bb      	beq.n	8012a34 <__gxx_personality_v0+0x24>
 8012abc:	aa0c      	add	r2, sp, #48	@ 0x30
 8012abe:	4601      	mov	r1, r0
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	f7ff ff69 	bl	8012998 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8012ac6:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 8012aca:	9003      	str	r0, [sp, #12]
 8012acc:	4631      	mov	r1, r6
 8012ace:	4658      	mov	r0, fp
 8012ad0:	f7ff ff31 	bl	8012936 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012ad4:	210f      	movs	r1, #15
 8012ad6:	9002      	str	r0, [sp, #8]
 8012ad8:	900e      	str	r0, [sp, #56]	@ 0x38
 8012ada:	4630      	mov	r0, r6
 8012adc:	f7ff ff8b 	bl	80129f6 <_Unwind_GetGR>
 8012ae0:	9a03      	ldr	r2, [sp, #12]
 8012ae2:	f020 0801 	bic.w	r8, r0, #1
 8012ae6:	f108 38ff 	add.w	r8, r8, #4294967295
 8012aea:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012aec:	4297      	cmp	r7, r2
 8012aee:	d815      	bhi.n	8012b1c <__gxx_personality_v0+0x10c>
 8012af0:	2700      	movs	r7, #0
 8012af2:	46b8      	mov	r8, r7
 8012af4:	f04f 0a01 	mov.w	sl, #1
 8012af8:	07eb      	lsls	r3, r5, #31
 8012afa:	d5c2      	bpl.n	8012a82 <__gxx_personality_v0+0x72>
 8012afc:	f1ba 0f02 	cmp.w	sl, #2
 8012b00:	d098      	beq.n	8012a34 <__gxx_personality_v0+0x24>
 8012b02:	210d      	movs	r1, #13
 8012b04:	4630      	mov	r0, r6
 8012b06:	9d07      	ldr	r5, [sp, #28]
 8012b08:	f7ff ff75 	bl	80129f6 <_Unwind_GetGR>
 8012b0c:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 8012b10:	e9c4 0508 	strd	r0, r5, [r4, #32]
 8012b14:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8012b18:	2006      	movs	r0, #6
 8012b1a:	e791      	b.n	8012a40 <__gxx_personality_v0+0x30>
 8012b1c:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 8012b20:	ab08      	add	r3, sp, #32
 8012b22:	4651      	mov	r1, sl
 8012b24:	2000      	movs	r0, #0
 8012b26:	f7ff ff27 	bl	8012978 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012b2a:	ab09      	add	r3, sp, #36	@ 0x24
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	4651      	mov	r1, sl
 8012b30:	2000      	movs	r0, #0
 8012b32:	f7ff ff21 	bl	8012978 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012b36:	ab0a      	add	r3, sp, #40	@ 0x28
 8012b38:	4602      	mov	r2, r0
 8012b3a:	4651      	mov	r1, sl
 8012b3c:	2000      	movs	r0, #0
 8012b3e:	f7ff ff1b 	bl	8012978 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012b42:	a90b      	add	r1, sp, #44	@ 0x2c
 8012b44:	f7ff fe8a 	bl	801285c <_ZL12read_uleb128PKhPm>
 8012b48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b4a:	9908      	ldr	r1, [sp, #32]
 8012b4c:	440b      	add	r3, r1
 8012b4e:	4543      	cmp	r3, r8
 8012b50:	4602      	mov	r2, r0
 8012b52:	d84b      	bhi.n	8012bec <__gxx_personality_v0+0x1dc>
 8012b54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b56:	440b      	add	r3, r1
 8012b58:	4543      	cmp	r3, r8
 8012b5a:	d9c6      	bls.n	8012aea <__gxx_personality_v0+0xda>
 8012b5c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8012b60:	f1b8 0f00 	cmp.w	r8, #0
 8012b64:	d001      	beq.n	8012b6a <__gxx_personality_v0+0x15a>
 8012b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b68:	4498      	add	r8, r3
 8012b6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012b6c:	b108      	cbz	r0, 8012b72 <__gxx_personality_v0+0x162>
 8012b6e:	3801      	subs	r0, #1
 8012b70:	4438      	add	r0, r7
 8012b72:	f1b8 0f00 	cmp.w	r8, #0
 8012b76:	f43f af5d 	beq.w	8012a34 <__gxx_personality_v0+0x24>
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	f000 80d6 	beq.w	8012d2c <__gxx_personality_v0+0x31c>
 8012b80:	f015 0308 	ands.w	r3, r5, #8
 8012b84:	9304      	str	r3, [sp, #16]
 8012b86:	d033      	beq.n	8012bf0 <__gxx_personality_v0+0x1e0>
 8012b88:	2347      	movs	r3, #71	@ 0x47
 8012b8a:	7023      	strb	r3, [r4, #0]
 8012b8c:	234e      	movs	r3, #78	@ 0x4e
 8012b8e:	7063      	strb	r3, [r4, #1]
 8012b90:	2355      	movs	r3, #85	@ 0x55
 8012b92:	70a3      	strb	r3, [r4, #2]
 8012b94:	2343      	movs	r3, #67	@ 0x43
 8012b96:	70e3      	strb	r3, [r4, #3]
 8012b98:	2346      	movs	r3, #70	@ 0x46
 8012b9a:	7123      	strb	r3, [r4, #4]
 8012b9c:	234f      	movs	r3, #79	@ 0x4f
 8012b9e:	7163      	strb	r3, [r4, #5]
 8012ba0:	2352      	movs	r3, #82	@ 0x52
 8012ba2:	71a3      	strb	r3, [r4, #6]
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	71e3      	strb	r3, [r4, #7]
 8012ba8:	2300      	movs	r3, #0
 8012baa:	9303      	str	r3, [sp, #12]
 8012bac:	a909      	add	r1, sp, #36	@ 0x24
 8012bae:	f7ff fe64 	bl	801287a <_ZL12read_sleb128PKhPl>
 8012bb2:	a90a      	add	r1, sp, #40	@ 0x28
 8012bb4:	9005      	str	r0, [sp, #20]
 8012bb6:	f7ff fe60 	bl	801287a <_ZL12read_sleb128PKhPl>
 8012bba:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012bbc:	2f00      	cmp	r7, #0
 8012bbe:	d060      	beq.n	8012c82 <__gxx_personality_v0+0x272>
 8012bc0:	dd3a      	ble.n	8012c38 <__gxx_personality_v0+0x228>
 8012bc2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8012bc6:	d033      	beq.n	8012c30 <__gxx_personality_v0+0x220>
 8012bc8:	f00b 0307 	and.w	r3, fp, #7
 8012bcc:	2b04      	cmp	r3, #4
 8012bce:	f63f af6b 	bhi.w	8012aa8 <__gxx_personality_v0+0x98>
 8012bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8012bd8 <__gxx_personality_v0+0x1c8>)
 8012bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bd8:	08012c35 	.word	0x08012c35
 8012bdc:	08012aa9 	.word	0x08012aa9
 8012be0:	08012c03 	.word	0x08012c03
 8012be4:	08012c35 	.word	0x08012c35
 8012be8:	08012c2d 	.word	0x08012c2d
 8012bec:	463a      	mov	r2, r7
 8012bee:	e77c      	b.n	8012aea <__gxx_personality_v0+0xda>
 8012bf0:	79e3      	ldrb	r3, [r4, #7]
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	bf0c      	ite	eq
 8012bf6:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8012bfa:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 8012bfe:	9307      	str	r3, [sp, #28]
 8012c00:	e7d2      	b.n	8012ba8 <__gxx_personality_v0+0x198>
 8012c02:	2202      	movs	r2, #2
 8012c04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012c06:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012c08:	fb07 1212 	mls	r2, r7, r2, r1
 8012c0c:	4658      	mov	r0, fp
 8012c0e:	9902      	ldr	r1, [sp, #8]
 8012c10:	f7ff fe4b 	bl	80128aa <_ZL28read_encoded_value_with_basehjPKhPj>
 8012c14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012c16:	b131      	cbz	r1, 8012c26 <__gxx_personality_v0+0x216>
 8012c18:	b33c      	cbz	r4, 8012c6a <__gxx_personality_v0+0x25a>
 8012c1a:	ab07      	add	r3, sp, #28
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	4620      	mov	r0, r4
 8012c20:	f7ff fd76 	bl	8012710 <__cxa_type_match>
 8012c24:	b308      	cbz	r0, 8012c6a <__gxx_personality_v0+0x25a>
 8012c26:	f04f 0a03 	mov.w	sl, #3
 8012c2a:	e765      	b.n	8012af8 <__gxx_personality_v0+0xe8>
 8012c2c:	2208      	movs	r2, #8
 8012c2e:	e7e9      	b.n	8012c04 <__gxx_personality_v0+0x1f4>
 8012c30:	2200      	movs	r2, #0
 8012c32:	e7e7      	b.n	8012c04 <__gxx_personality_v0+0x1f4>
 8012c34:	2204      	movs	r2, #4
 8012c36:	e7e5      	b.n	8012c04 <__gxx_personality_v0+0x1f4>
 8012c38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c3a:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8012c3e:	1bd2      	subs	r2, r2, r7
 8012c40:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8012c44:	b1c4      	cbz	r4, 8012c78 <__gxx_personality_v0+0x268>
 8012c46:	9904      	ldr	r1, [sp, #16]
 8012c48:	b9b1      	cbnz	r1, 8012c78 <__gxx_personality_v0+0x268>
 8012c4a:	9b07      	ldr	r3, [sp, #28]
 8012c4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c4e:	f1aa 0a04 	sub.w	sl, sl, #4
 8012c52:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8012c56:	2900      	cmp	r1, #0
 8012c58:	d0e5      	beq.n	8012c26 <__gxx_personality_v0+0x216>
 8012c5a:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	4451      	add	r1, sl
 8012c60:	4620      	mov	r0, r4
 8012c62:	f7ff fd55 	bl	8012710 <__cxa_type_match>
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d0f3      	beq.n	8012c52 <__gxx_personality_v0+0x242>
 8012c6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012c6c:	2800      	cmp	r0, #0
 8012c6e:	d059      	beq.n	8012d24 <__gxx_personality_v0+0x314>
 8012c70:	9b05      	ldr	r3, [sp, #20]
 8012c72:	4403      	add	r3, r0
 8012c74:	4618      	mov	r0, r3
 8012c76:	e799      	b.n	8012bac <__gxx_personality_v0+0x19c>
 8012c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d1f4      	bne.n	8012c6a <__gxx_personality_v0+0x25a>
 8012c80:	e7d1      	b.n	8012c26 <__gxx_personality_v0+0x216>
 8012c82:	2301      	movs	r3, #1
 8012c84:	9303      	str	r3, [sp, #12]
 8012c86:	e7f0      	b.n	8012c6a <__gxx_personality_v0+0x25a>
 8012c88:	2f00      	cmp	r7, #0
 8012c8a:	da1f      	bge.n	8012ccc <__gxx_personality_v0+0x2bc>
 8012c8c:	f000 f870 	bl	8012d70 <_ZSt10unexpectedv>
 8012c90:	f1ba 0f01 	cmp.w	sl, #1
 8012c94:	d102      	bne.n	8012c9c <__gxx_personality_v0+0x28c>
 8012c96:	4620      	mov	r0, r4
 8012c98:	f000 fa75 	bl	8013186 <__cxa_call_terminate>
 8012c9c:	2f00      	cmp	r7, #0
 8012c9e:	da15      	bge.n	8012ccc <__gxx_personality_v0+0x2bc>
 8012ca0:	aa0c      	add	r2, sp, #48	@ 0x30
 8012ca2:	4649      	mov	r1, r9
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f7ff fe77 	bl	8012998 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8012caa:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012cae:	4631      	mov	r1, r6
 8012cb0:	f7ff fe41 	bl	8012936 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cb6:	43fa      	mvns	r2, r7
 8012cb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012cbc:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8012cc0:	bb52      	cbnz	r2, 8012d18 <__gxx_personality_v0+0x308>
 8012cc2:	2204      	movs	r2, #4
 8012cc4:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
 8012cc8:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8012ccc:	2300      	movs	r3, #0
 8012cce:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	9500      	str	r5, [sp, #0]
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012cda:	f7ee fb69 	bl	80013b0 <_Unwind_VRS_Set>
 8012cde:	2300      	movs	r3, #0
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	9500      	str	r5, [sp, #0]
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012cea:	f7ee fb61 	bl	80013b0 <_Unwind_VRS_Set>
 8012cee:	210f      	movs	r1, #15
 8012cf0:	4630      	mov	r0, r6
 8012cf2:	f7ff fe80 	bl	80129f6 <_Unwind_GetGR>
 8012cf6:	f000 0001 	and.w	r0, r0, #1
 8012cfa:	ea40 0008 	orr.w	r0, r0, r8
 8012cfe:	2300      	movs	r3, #0
 8012d00:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012d02:	9500      	str	r5, [sp, #0]
 8012d04:	220f      	movs	r2, #15
 8012d06:	4619      	mov	r1, r3
 8012d08:	4630      	mov	r0, r6
 8012d0a:	f7ee fb51 	bl	80013b0 <_Unwind_VRS_Set>
 8012d0e:	f1ba 0f02 	cmp.w	sl, #2
 8012d12:	d003      	beq.n	8012d1c <__gxx_personality_v0+0x30c>
 8012d14:	2007      	movs	r0, #7
 8012d16:	e693      	b.n	8012a40 <__gxx_personality_v0+0x30>
 8012d18:	3501      	adds	r5, #1
 8012d1a:	e7cf      	b.n	8012cbc <__gxx_personality_v0+0x2ac>
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f7ff fd55 	bl	80127cc <__cxa_begin_cleanup>
 8012d22:	e7f7      	b.n	8012d14 <__gxx_personality_v0+0x304>
 8012d24:	9b03      	ldr	r3, [sp, #12]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f43f ae84 	beq.w	8012a34 <__gxx_personality_v0+0x24>
 8012d2c:	2700      	movs	r7, #0
 8012d2e:	f04f 0a02 	mov.w	sl, #2
 8012d32:	e6e1      	b.n	8012af8 <__gxx_personality_v0+0xe8>

08012d34 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012d34:	b508      	push	{r3, lr}
 8012d36:	4780      	blx	r0
 8012d38:	f001 fc82 	bl	8014640 <abort>

08012d3c <_ZSt13get_terminatev>:
 8012d3c:	4b02      	ldr	r3, [pc, #8]	@ (8012d48 <_ZSt13get_terminatev+0xc>)
 8012d3e:	6818      	ldr	r0, [r3, #0]
 8012d40:	f3bf 8f5b 	dmb	ish
 8012d44:	4770      	bx	lr
 8012d46:	bf00      	nop
 8012d48:	20000018 	.word	0x20000018

08012d4c <_ZSt9terminatev>:
 8012d4c:	b508      	push	{r3, lr}
 8012d4e:	f7ff fff5 	bl	8012d3c <_ZSt13get_terminatev>
 8012d52:	f7ff ffef 	bl	8012d34 <_ZN10__cxxabiv111__terminateEPFvvE>

08012d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8012d56:	b508      	push	{r3, lr}
 8012d58:	4780      	blx	r0
 8012d5a:	f7ff fff7 	bl	8012d4c <_ZSt9terminatev>
	...

08012d60 <_ZSt14get_unexpectedv>:
 8012d60:	4b02      	ldr	r3, [pc, #8]	@ (8012d6c <_ZSt14get_unexpectedv+0xc>)
 8012d62:	6818      	ldr	r0, [r3, #0]
 8012d64:	f3bf 8f5b 	dmb	ish
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	20000014 	.word	0x20000014

08012d70 <_ZSt10unexpectedv>:
 8012d70:	b508      	push	{r3, lr}
 8012d72:	f7ff fff5 	bl	8012d60 <_ZSt14get_unexpectedv>
 8012d76:	f7ff ffee 	bl	8012d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08012d7a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8012d7a:	2801      	cmp	r0, #1
 8012d7c:	b510      	push	{r4, lr}
 8012d7e:	d903      	bls.n	8012d88 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8012d80:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8012d84:	f7ff ffd6 	bl	8012d34 <_ZN10__cxxabiv111__terminateEPFvvE>
 8012d88:	f1a1 0328 	sub.w	r3, r1, #40	@ 0x28
 8012d8c:	f3bf 8f5b 	dmb	ish
 8012d90:	e853 2f00 	ldrex	r2, [r3]
 8012d94:	3a01      	subs	r2, #1
 8012d96:	e843 2000 	strex	r0, r2, [r3]
 8012d9a:	2800      	cmp	r0, #0
 8012d9c:	d1f8      	bne.n	8012d90 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 8012d9e:	f3bf 8f5b 	dmb	ish
 8012da2:	b95a      	cbnz	r2, 8012dbc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 8012da4:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8012da8:	f101 0458 	add.w	r4, r1, #88	@ 0x58
 8012dac:	b10b      	cbz	r3, 8012db2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x38>
 8012dae:	4620      	mov	r0, r4
 8012db0:	4798      	blx	r3
 8012db2:	4620      	mov	r0, r4
 8012db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012db8:	f7ff bc62 	b.w	8012680 <__cxa_free_exception>
 8012dbc:	bd10      	pop	{r4, pc}
	...

08012dc0 <__cxa_init_primary_exception>:
 8012dc0:	b538      	push	{r3, r4, r5, lr}
 8012dc2:	2500      	movs	r5, #0
 8012dc4:	e940 121e 	strd	r1, r2, [r0, #-120]	@ 0x78
 8012dc8:	f840 5c80 	str.w	r5, [r0, #-128]
 8012dcc:	4604      	mov	r4, r0
 8012dce:	f7ff ffc7 	bl	8012d60 <_ZSt14get_unexpectedv>
 8012dd2:	f844 0c70 	str.w	r0, [r4, #-112]
 8012dd6:	f7ff ffb1 	bl	8012d3c <_ZSt13get_terminatev>
 8012dda:	2347      	movs	r3, #71	@ 0x47
 8012ddc:	f804 3c58 	strb.w	r3, [r4, #-88]
 8012de0:	234e      	movs	r3, #78	@ 0x4e
 8012de2:	f804 3c57 	strb.w	r3, [r4, #-87]
 8012de6:	2355      	movs	r3, #85	@ 0x55
 8012de8:	f804 3c56 	strb.w	r3, [r4, #-86]
 8012dec:	2343      	movs	r3, #67	@ 0x43
 8012dee:	f804 3c55 	strb.w	r3, [r4, #-85]
 8012df2:	f804 3c54 	strb.w	r3, [r4, #-84]
 8012df6:	232b      	movs	r3, #43	@ 0x2b
 8012df8:	f804 3c53 	strb.w	r3, [r4, #-83]
 8012dfc:	f804 3c52 	strb.w	r3, [r4, #-82]
 8012e00:	f804 5c51 	strb.w	r5, [r4, #-81]
 8012e04:	4b03      	ldr	r3, [pc, #12]	@ (8012e14 <__cxa_init_primary_exception+0x54>)
 8012e06:	f844 0c6c 	str.w	r0, [r4, #-108]
 8012e0a:	f844 3c50 	str.w	r3, [r4, #-80]
 8012e0e:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
 8012e12:	bd38      	pop	{r3, r4, r5, pc}
 8012e14:	08012d7b 	.word	0x08012d7b

08012e18 <__cxa_throw>:
 8012e18:	b508      	push	{r3, lr}
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	460d      	mov	r5, r1
 8012e1e:	4616      	mov	r6, r2
 8012e20:	f7ff fd0c 	bl	801283c <__cxa_get_globals>
 8012e24:	6843      	ldr	r3, [r0, #4]
 8012e26:	3301      	adds	r3, #1
 8012e28:	6043      	str	r3, [r0, #4]
 8012e2a:	4632      	mov	r2, r6
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f7ff ffc6 	bl	8012dc0 <__cxa_init_primary_exception>
 8012e34:	4604      	mov	r4, r0
 8012e36:	2301      	movs	r3, #1
 8012e38:	f844 3b28 	str.w	r3, [r4], #40
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	f7ee fe3f 	bl	8001ac0 <_Unwind_RaiseException>
 8012e42:	4620      	mov	r0, r4
 8012e44:	f000 f9df 	bl	8013206 <__cxa_begin_catch>
 8012e48:	f7ff ff80 	bl	8012d4c <_ZSt9terminatev>

08012e4c <_Znwj>:
 8012e4c:	2801      	cmp	r0, #1
 8012e4e:	bf38      	it	cc
 8012e50:	2001      	movcc	r0, #1
 8012e52:	b510      	push	{r4, lr}
 8012e54:	4604      	mov	r4, r0
 8012e56:	4620      	mov	r0, r4
 8012e58:	f001 fbfa 	bl	8014650 <malloc>
 8012e5c:	b100      	cbz	r0, 8012e60 <_Znwj+0x14>
 8012e5e:	bd10      	pop	{r4, pc}
 8012e60:	f000 f9fa 	bl	8013258 <_ZSt15get_new_handlerv>
 8012e64:	b908      	cbnz	r0, 8012e6a <_Znwj+0x1e>
 8012e66:	f001 fbeb 	bl	8014640 <abort>
 8012e6a:	4780      	blx	r0
 8012e6c:	e7f3      	b.n	8012e56 <_Znwj+0xa>

08012e6e <_Znaj>:
 8012e6e:	f7ff bfed 	b.w	8012e4c <_Znwj>
	...

08012e74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8012e74:	b510      	push	{r4, lr}
 8012e76:	4b03      	ldr	r3, [pc, #12]	@ (8012e84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8012e78:	6003      	str	r3, [r0, #0]
 8012e7a:	4604      	mov	r4, r0
 8012e7c:	f7ff fb3a 	bl	80124f4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012e80:	4620      	mov	r0, r4
 8012e82:	bd10      	pop	{r4, pc}
 8012e84:	08018514 	.word	0x08018514

08012e88 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8012e88:	b510      	push	{r4, lr}
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	f7ff fff2 	bl	8012e74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8012e90:	4620      	mov	r0, r4
 8012e92:	210c      	movs	r1, #12
 8012e94:	f7ff fb82 	bl	801259c <_ZdlPvj>
 8012e98:	4620      	mov	r0, r4
 8012e9a:	bd10      	pop	{r4, pc}

08012e9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8012e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012ea4:	4590      	cmp	r8, r2
 8012ea6:	4606      	mov	r6, r0
 8012ea8:	460f      	mov	r7, r1
 8012eaa:	4615      	mov	r5, r2
 8012eac:	461c      	mov	r4, r3
 8012eae:	d00b      	beq.n	8012ec8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8012eb0:	68b0      	ldr	r0, [r6, #8]
 8012eb2:	6803      	ldr	r3, [r0, #0]
 8012eb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8012eb8:	6a1e      	ldr	r6, [r3, #32]
 8012eba:	462a      	mov	r2, r5
 8012ebc:	4623      	mov	r3, r4
 8012ebe:	4639      	mov	r1, r7
 8012ec0:	46b4      	mov	ip, r6
 8012ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec6:	4760      	bx	ip
 8012ec8:	4619      	mov	r1, r3
 8012eca:	f000 f857 	bl	8012f7c <_ZNKSt9type_info7__equalERKS_>
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	d0ee      	beq.n	8012eb0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8012ed2:	2006      	movs	r0, #6
 8012ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ed8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8012ed8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012edc:	460d      	mov	r5, r1
 8012ede:	4619      	mov	r1, r3
 8012ee0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8012ee4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8012ee8:	4681      	mov	r9, r0
 8012eea:	4617      	mov	r7, r2
 8012eec:	4698      	mov	r8, r3
 8012eee:	f000 f845 	bl	8012f7c <_ZNKSt9type_info7__equalERKS_>
 8012ef2:	b190      	cbz	r0, 8012f1a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8012ef4:	2d00      	cmp	r5, #0
 8012ef6:	6034      	str	r4, [r6, #0]
 8012ef8:	7137      	strb	r7, [r6, #4]
 8012efa:	db09      	blt.n	8012f10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8012efc:	442c      	add	r4, r5
 8012efe:	45a2      	cmp	sl, r4
 8012f00:	bf14      	ite	ne
 8012f02:	2401      	movne	r4, #1
 8012f04:	2406      	moveq	r4, #6
 8012f06:	71b4      	strb	r4, [r6, #6]
 8012f08:	2000      	movs	r0, #0
 8012f0a:	b001      	add	sp, #4
 8012f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f10:	3502      	adds	r5, #2
 8012f12:	d1f9      	bne.n	8012f08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012f14:	2301      	movs	r3, #1
 8012f16:	71b3      	strb	r3, [r6, #6]
 8012f18:	e7f6      	b.n	8012f08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012f1a:	4554      	cmp	r4, sl
 8012f1c:	d106      	bne.n	8012f2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8012f1e:	4659      	mov	r1, fp
 8012f20:	4648      	mov	r0, r9
 8012f22:	f000 f82b 	bl	8012f7c <_ZNKSt9type_info7__equalERKS_>
 8012f26:	b108      	cbz	r0, 8012f2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8012f28:	7177      	strb	r7, [r6, #5]
 8012f2a:	e7ed      	b.n	8012f08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8012f2c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8012f30:	6803      	ldr	r3, [r0, #0]
 8012f32:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8012f36:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8012f3a:	69dc      	ldr	r4, [r3, #28]
 8012f3c:	463a      	mov	r2, r7
 8012f3e:	4643      	mov	r3, r8
 8012f40:	4629      	mov	r1, r5
 8012f42:	46a4      	mov	ip, r4
 8012f44:	b001      	add	sp, #4
 8012f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f4a:	4760      	bx	ip

08012f4c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8012f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f50:	4607      	mov	r7, r0
 8012f52:	460c      	mov	r4, r1
 8012f54:	4615      	mov	r5, r2
 8012f56:	461e      	mov	r6, r3
 8012f58:	f7ff faff 	bl	801255a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8012f5c:	b948      	cbnz	r0, 8012f72 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8012f5e:	68b8      	ldr	r0, [r7, #8]
 8012f60:	6803      	ldr	r3, [r0, #0]
 8012f62:	699f      	ldr	r7, [r3, #24]
 8012f64:	462a      	mov	r2, r5
 8012f66:	4633      	mov	r3, r6
 8012f68:	4621      	mov	r1, r4
 8012f6a:	46bc      	mov	ip, r7
 8012f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f70:	4760      	bx	ip
 8012f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012f76 <_ZNSt9type_infoD1Ev>:
 8012f76:	4770      	bx	lr

08012f78 <_ZNKSt9type_info14__is_pointer_pEv>:
 8012f78:	2000      	movs	r0, #0
 8012f7a:	4770      	bx	lr

08012f7c <_ZNKSt9type_info7__equalERKS_>:
 8012f7c:	4281      	cmp	r1, r0
 8012f7e:	b508      	push	{r3, lr}
 8012f80:	d00e      	beq.n	8012fa0 <_ZNKSt9type_info7__equalERKS_+0x24>
 8012f82:	6840      	ldr	r0, [r0, #4]
 8012f84:	7803      	ldrb	r3, [r0, #0]
 8012f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f88:	d00c      	beq.n	8012fa4 <_ZNKSt9type_info7__equalERKS_+0x28>
 8012f8a:	6849      	ldr	r1, [r1, #4]
 8012f8c:	780b      	ldrb	r3, [r1, #0]
 8012f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f90:	bf08      	it	eq
 8012f92:	3101      	addeq	r1, #1
 8012f94:	f7ed f93c 	bl	8000210 <strcmp>
 8012f98:	fab0 f080 	clz	r0, r0
 8012f9c:	0940      	lsrs	r0, r0, #5
 8012f9e:	bd08      	pop	{r3, pc}
 8012fa0:	2001      	movs	r0, #1
 8012fa2:	e7fc      	b.n	8012f9e <_ZNKSt9type_info7__equalERKS_+0x22>
 8012fa4:	2000      	movs	r0, #0
 8012fa6:	e7fa      	b.n	8012f9e <_ZNKSt9type_info7__equalERKS_+0x22>

08012fa8 <_ZNKSt11logic_error4whatEv>:
 8012fa8:	6840      	ldr	r0, [r0, #4]
 8012faa:	4770      	bx	lr

08012fac <_ZNSt13runtime_errorD1Ev>:
 8012fac:	b513      	push	{r0, r1, r4, lr}
 8012fae:	4b07      	ldr	r3, [pc, #28]	@ (8012fcc <_ZNSt13runtime_errorD1Ev+0x20>)
 8012fb0:	6003      	str	r3, [r0, #0]
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	6840      	ldr	r0, [r0, #4]
 8012fb6:	a901      	add	r1, sp, #4
 8012fb8:	380c      	subs	r0, #12
 8012fba:	f000 f8a9 	bl	8013110 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	f7ff fc3a 	bl	8012838 <_ZNSt9exceptionD1Ev>
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	b002      	add	sp, #8
 8012fc8:	bd10      	pop	{r4, pc}
 8012fca:	bf00      	nop
 8012fcc:	08018578 	.word	0x08018578

08012fd0 <_ZNSt13runtime_errorD0Ev>:
 8012fd0:	b510      	push	{r4, lr}
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	f7ff ffea 	bl	8012fac <_ZNSt13runtime_errorD1Ev>
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f000 f8b5 	bl	8013148 <_ZdlPv>
 8012fde:	4620      	mov	r0, r4
 8012fe0:	bd10      	pop	{r4, pc}
	...

08012fe4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>:
 8012fe4:	4288      	cmp	r0, r1
 8012fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fea:	4604      	mov	r4, r0
 8012fec:	460d      	mov	r5, r1
 8012fee:	d018      	beq.n	8013022 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x3e>
 8012ff0:	b1a0      	cbz	r0, 801301c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x38>
 8012ff2:	eba1 0800 	sub.w	r8, r1, r0
 8012ff6:	4640      	mov	r0, r8
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	f000 f857 	bl	80130ac <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8012ffe:	f100 070c 	add.w	r7, r0, #12
 8013002:	4606      	mov	r6, r0
 8013004:	4621      	mov	r1, r4
 8013006:	4638      	mov	r0, r7
 8013008:	462a      	mov	r2, r5
 801300a:	f000 f83d 	bl	8013088 <_ZNSs13_S_copy_charsEPcPKcS1_>
 801300e:	4641      	mov	r1, r8
 8013010:	4630      	mov	r0, r6
 8013012:	f000 f83f 	bl	8013094 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8013016:	4638      	mov	r0, r7
 8013018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801301c:	4802      	ldr	r0, [pc, #8]	@ (8013028 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x44>)
 801301e:	f000 f888 	bl	8013132 <_ZSt19__throw_logic_errorPKc>
 8013022:	4f02      	ldr	r7, [pc, #8]	@ (801302c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x48>)
 8013024:	e7f7      	b.n	8013016 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x32>
 8013026:	bf00      	nop
 8013028:	08018584 	.word	0x08018584
 801302c:	20000590 	.word	0x20000590

08013030 <_ZNSsC2EPKcRKSaIcE.isra.0>:
 8013030:	b570      	push	{r4, r5, r6, lr}
 8013032:	4605      	mov	r5, r0
 8013034:	4616      	mov	r6, r2
 8013036:	460c      	mov	r4, r1
 8013038:	b149      	cbz	r1, 801304e <_ZNSsC2EPKcRKSaIcE.isra.0+0x1e>
 801303a:	4608      	mov	r0, r1
 801303c:	f7ed f948 	bl	80002d0 <strlen>
 8013040:	1821      	adds	r1, r4, r0
 8013042:	4632      	mov	r2, r6
 8013044:	4620      	mov	r0, r4
 8013046:	f7ff ffcd 	bl	8012fe4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>
 801304a:	6028      	str	r0, [r5, #0]
 801304c:	bd70      	pop	{r4, r5, r6, pc}
 801304e:	f04f 31ff 	mov.w	r1, #4294967295
 8013052:	e7f6      	b.n	8013042 <_ZNSsC2EPKcRKSaIcE.isra.0+0x12>

08013054 <_ZNSt13runtime_errorC1EPKc>:
 8013054:	b513      	push	{r0, r1, r4, lr}
 8013056:	4b05      	ldr	r3, [pc, #20]	@ (801306c <_ZNSt13runtime_errorC1EPKc+0x18>)
 8013058:	4604      	mov	r4, r0
 801305a:	aa01      	add	r2, sp, #4
 801305c:	f840 3b04 	str.w	r3, [r0], #4
 8013060:	f7ff ffe6 	bl	8013030 <_ZNSsC2EPKcRKSaIcE.isra.0>
 8013064:	4620      	mov	r0, r4
 8013066:	b002      	add	sp, #8
 8013068:	bd10      	pop	{r4, pc}
 801306a:	bf00      	nop
 801306c:	08018578 	.word	0x08018578

08013070 <_ZNSs7_M_copyEPcPKcj>:
 8013070:	2a01      	cmp	r2, #1
 8013072:	b430      	push	{r4, r5}
 8013074:	d103      	bne.n	801307e <_ZNSs7_M_copyEPcPKcj+0xe>
 8013076:	780b      	ldrb	r3, [r1, #0]
 8013078:	7003      	strb	r3, [r0, #0]
 801307a:	bc30      	pop	{r4, r5}
 801307c:	4770      	bx	lr
 801307e:	2a00      	cmp	r2, #0
 8013080:	d0fb      	beq.n	801307a <_ZNSs7_M_copyEPcPKcj+0xa>
 8013082:	bc30      	pop	{r4, r5}
 8013084:	f002 b9e1 	b.w	801544a <memcpy>

08013088 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8013088:	b508      	push	{r3, lr}
 801308a:	1a52      	subs	r2, r2, r1
 801308c:	f7ff fff0 	bl	8013070 <_ZNSs7_M_copyEPcPKcj>
 8013090:	bd08      	pop	{r3, pc}
	...

08013094 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8013094:	4b04      	ldr	r3, [pc, #16]	@ (80130a8 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8013096:	4298      	cmp	r0, r3
 8013098:	d004      	beq.n	80130a4 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 801309a:	2300      	movs	r3, #0
 801309c:	6083      	str	r3, [r0, #8]
 801309e:	6001      	str	r1, [r0, #0]
 80130a0:	4408      	add	r0, r1
 80130a2:	7303      	strb	r3, [r0, #12]
 80130a4:	4770      	bx	lr
 80130a6:	bf00      	nop
 80130a8:	20000584 	.word	0x20000584

080130ac <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 80130ac:	4b15      	ldr	r3, [pc, #84]	@ (8013104 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 80130ae:	4298      	cmp	r0, r3
 80130b0:	b510      	push	{r4, lr}
 80130b2:	4604      	mov	r4, r0
 80130b4:	d902      	bls.n	80130bc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 80130b6:	4814      	ldr	r0, [pc, #80]	@ (8013108 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 80130b8:	f000 f83e 	bl	8013138 <_ZSt20__throw_length_errorPKc>
 80130bc:	4288      	cmp	r0, r1
 80130be:	d903      	bls.n	80130c8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 80130c0:	004b      	lsls	r3, r1, #1
 80130c2:	4298      	cmp	r0, r3
 80130c4:	bf38      	it	cc
 80130c6:	461c      	movcc	r4, r3
 80130c8:	f104 031d 	add.w	r3, r4, #29
 80130cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80130d0:	f104 000d 	add.w	r0, r4, #13
 80130d4:	d90c      	bls.n	80130f0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 80130d6:	428c      	cmp	r4, r1
 80130d8:	d90a      	bls.n	80130f0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 80130da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80130de:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 80130e2:	1ae4      	subs	r4, r4, r3
 80130e4:	4b07      	ldr	r3, [pc, #28]	@ (8013104 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 80130e6:	429c      	cmp	r4, r3
 80130e8:	bf28      	it	cs
 80130ea:	461c      	movcs	r4, r3
 80130ec:	f104 000d 	add.w	r0, r4, #13
 80130f0:	2800      	cmp	r0, #0
 80130f2:	da01      	bge.n	80130f8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 80130f4:	f000 f81a 	bl	801312c <_ZSt17__throw_bad_allocv>
 80130f8:	f7ff fea8 	bl	8012e4c <_Znwj>
 80130fc:	2200      	movs	r2, #0
 80130fe:	6044      	str	r4, [r0, #4]
 8013100:	6082      	str	r2, [r0, #8]
 8013102:	bd10      	pop	{r4, pc}
 8013104:	3ffffffc 	.word	0x3ffffffc
 8013108:	080185ae 	.word	0x080185ae

0801310c <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 801310c:	f000 b81c 	b.w	8013148 <_ZdlPv>

08013110 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8013110:	4a05      	ldr	r2, [pc, #20]	@ (8013128 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 8013112:	4290      	cmp	r0, r2
 8013114:	b510      	push	{r4, lr}
 8013116:	d006      	beq.n	8013126 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8013118:	6882      	ldr	r2, [r0, #8]
 801311a:	1e54      	subs	r4, r2, #1
 801311c:	2a00      	cmp	r2, #0
 801311e:	6084      	str	r4, [r0, #8]
 8013120:	dc01      	bgt.n	8013126 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8013122:	f7ff fff3 	bl	801310c <_ZNSs4_Rep10_M_destroyERKSaIcE>
 8013126:	bd10      	pop	{r4, pc}
 8013128:	20000584 	.word	0x20000584

0801312c <_ZSt17__throw_bad_allocv>:
 801312c:	b508      	push	{r3, lr}
 801312e:	f001 fa87 	bl	8014640 <abort>

08013132 <_ZSt19__throw_logic_errorPKc>:
 8013132:	b508      	push	{r3, lr}
 8013134:	f001 fa84 	bl	8014640 <abort>

08013138 <_ZSt20__throw_length_errorPKc>:
 8013138:	b508      	push	{r3, lr}
 801313a:	f001 fa81 	bl	8014640 <abort>

0801313e <__aeabi_atexit>:
 801313e:	460b      	mov	r3, r1
 8013140:	4601      	mov	r1, r0
 8013142:	4618      	mov	r0, r3
 8013144:	f001 bb42 	b.w	80147cc <__cxa_atexit>

08013148 <_ZdlPv>:
 8013148:	f001 ba8a 	b.w	8014660 <free>

0801314c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 801314c:	7803      	ldrb	r3, [r0, #0]
 801314e:	2b47      	cmp	r3, #71	@ 0x47
 8013150:	d117      	bne.n	8013182 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013152:	7843      	ldrb	r3, [r0, #1]
 8013154:	2b4e      	cmp	r3, #78	@ 0x4e
 8013156:	d114      	bne.n	8013182 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013158:	7883      	ldrb	r3, [r0, #2]
 801315a:	2b55      	cmp	r3, #85	@ 0x55
 801315c:	d111      	bne.n	8013182 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801315e:	78c3      	ldrb	r3, [r0, #3]
 8013160:	2b43      	cmp	r3, #67	@ 0x43
 8013162:	d10e      	bne.n	8013182 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013164:	7903      	ldrb	r3, [r0, #4]
 8013166:	2b43      	cmp	r3, #67	@ 0x43
 8013168:	d10b      	bne.n	8013182 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801316a:	7943      	ldrb	r3, [r0, #5]
 801316c:	2b2b      	cmp	r3, #43	@ 0x2b
 801316e:	d108      	bne.n	8013182 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013170:	7983      	ldrb	r3, [r0, #6]
 8013172:	2b2b      	cmp	r3, #43	@ 0x2b
 8013174:	d105      	bne.n	8013182 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013176:	79c0      	ldrb	r0, [r0, #7]
 8013178:	2801      	cmp	r0, #1
 801317a:	bf8c      	ite	hi
 801317c:	2000      	movhi	r0, #0
 801317e:	2001      	movls	r0, #1
 8013180:	4770      	bx	lr
 8013182:	2000      	movs	r0, #0
 8013184:	4770      	bx	lr

08013186 <__cxa_call_terminate>:
 8013186:	b510      	push	{r4, lr}
 8013188:	4604      	mov	r4, r0
 801318a:	b148      	cbz	r0, 80131a0 <__cxa_call_terminate+0x1a>
 801318c:	f000 f83b 	bl	8013206 <__cxa_begin_catch>
 8013190:	4620      	mov	r0, r4
 8013192:	f7ff ffdb 	bl	801314c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013196:	b118      	cbz	r0, 80131a0 <__cxa_call_terminate+0x1a>
 8013198:	f854 0c14 	ldr.w	r0, [r4, #-20]
 801319c:	f7ff fdca 	bl	8012d34 <_ZN10__cxxabiv111__terminateEPFvvE>
 80131a0:	f7ff fdd4 	bl	8012d4c <_ZSt9terminatev>

080131a4 <__cxa_call_unexpected>:
 80131a4:	b538      	push	{r3, r4, r5, lr}
 80131a6:	4602      	mov	r2, r0
 80131a8:	f7ff ffd0 	bl	801314c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80131ac:	4604      	mov	r4, r0
 80131ae:	b140      	cbz	r0, 80131c2 <__cxa_call_unexpected+0x1e>
 80131b0:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80131b4:	2500      	movs	r5, #0
 80131b6:	4610      	mov	r0, r2
 80131b8:	f000 f825 	bl	8013206 <__cxa_begin_catch>
 80131bc:	b11d      	cbz	r5, 80131c6 <__cxa_call_unexpected+0x22>
 80131be:	f7ff fdd7 	bl	8012d70 <_ZSt10unexpectedv>
 80131c2:	2501      	movs	r5, #1
 80131c4:	e7f7      	b.n	80131b6 <__cxa_call_unexpected+0x12>
 80131c6:	4620      	mov	r0, r4
 80131c8:	f7ff fdc5 	bl	8012d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080131cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80131cc:	7803      	ldrb	r3, [r0, #0]
 80131ce:	2b47      	cmp	r3, #71	@ 0x47
 80131d0:	d117      	bne.n	8013202 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80131d2:	7843      	ldrb	r3, [r0, #1]
 80131d4:	2b4e      	cmp	r3, #78	@ 0x4e
 80131d6:	d114      	bne.n	8013202 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80131d8:	7883      	ldrb	r3, [r0, #2]
 80131da:	2b55      	cmp	r3, #85	@ 0x55
 80131dc:	d111      	bne.n	8013202 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80131de:	78c3      	ldrb	r3, [r0, #3]
 80131e0:	2b43      	cmp	r3, #67	@ 0x43
 80131e2:	d10e      	bne.n	8013202 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80131e4:	7903      	ldrb	r3, [r0, #4]
 80131e6:	2b43      	cmp	r3, #67	@ 0x43
 80131e8:	d10b      	bne.n	8013202 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80131ea:	7943      	ldrb	r3, [r0, #5]
 80131ec:	2b2b      	cmp	r3, #43	@ 0x2b
 80131ee:	d108      	bne.n	8013202 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80131f0:	7983      	ldrb	r3, [r0, #6]
 80131f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80131f4:	d105      	bne.n	8013202 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80131f6:	79c0      	ldrb	r0, [r0, #7]
 80131f8:	2801      	cmp	r0, #1
 80131fa:	bf8c      	ite	hi
 80131fc:	2000      	movhi	r0, #0
 80131fe:	2001      	movls	r0, #1
 8013200:	4770      	bx	lr
 8013202:	2000      	movs	r0, #0
 8013204:	4770      	bx	lr

08013206 <__cxa_begin_catch>:
 8013206:	b538      	push	{r3, r4, r5, lr}
 8013208:	4604      	mov	r4, r0
 801320a:	f7ff fb17 	bl	801283c <__cxa_get_globals>
 801320e:	6805      	ldr	r5, [r0, #0]
 8013210:	4602      	mov	r2, r0
 8013212:	4620      	mov	r0, r4
 8013214:	f1a4 0120 	sub.w	r1, r4, #32
 8013218:	f7ff ffd8 	bl	80131cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801321c:	b928      	cbnz	r0, 801322a <__cxa_begin_catch+0x24>
 801321e:	b10d      	cbz	r5, 8013224 <__cxa_begin_catch+0x1e>
 8013220:	f7ff fd94 	bl	8012d4c <_ZSt9terminatev>
 8013224:	6011      	str	r1, [r2, #0]
 8013226:	4628      	mov	r0, r5
 8013228:	bd38      	pop	{r3, r4, r5, pc}
 801322a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801322e:	2b00      	cmp	r3, #0
 8013230:	bfb4      	ite	lt
 8013232:	f1c3 0301 	rsblt	r3, r3, #1
 8013236:	3301      	addge	r3, #1
 8013238:	f844 3c0c 	str.w	r3, [r4, #-12]
 801323c:	6853      	ldr	r3, [r2, #4]
 801323e:	428d      	cmp	r5, r1
 8013240:	f103 33ff 	add.w	r3, r3, #4294967295
 8013244:	6053      	str	r3, [r2, #4]
 8013246:	4620      	mov	r0, r4
 8013248:	bf1c      	itt	ne
 801324a:	f844 5c10 	strne.w	r5, [r4, #-16]
 801324e:	6011      	strne	r1, [r2, #0]
 8013250:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8013252:	f7ee f87f 	bl	8001354 <_Unwind_Complete>
 8013256:	e7e6      	b.n	8013226 <__cxa_begin_catch+0x20>

08013258 <_ZSt15get_new_handlerv>:
 8013258:	4b02      	ldr	r3, [pc, #8]	@ (8013264 <_ZSt15get_new_handlerv+0xc>)
 801325a:	6818      	ldr	r0, [r3, #0]
 801325c:	f3bf 8f5b 	dmb	ish
 8013260:	4770      	bx	lr
 8013262:	bf00      	nop
 8013264:	20000594 	.word	0x20000594

08013268 <atan2>:
 8013268:	f000 b982 	b.w	8013570 <__ieee754_atan2>

0801326c <pow>:
 801326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801326e:	ed2d 8b02 	vpush	{d8}
 8013272:	eeb0 8a40 	vmov.f32	s16, s0
 8013276:	eef0 8a60 	vmov.f32	s17, s1
 801327a:	ec55 4b11 	vmov	r4, r5, d1
 801327e:	f000 fa3f 	bl	8013700 <__ieee754_pow>
 8013282:	4622      	mov	r2, r4
 8013284:	462b      	mov	r3, r5
 8013286:	4620      	mov	r0, r4
 8013288:	4629      	mov	r1, r5
 801328a:	ec57 6b10 	vmov	r6, r7, d0
 801328e:	f7ed fc7d 	bl	8000b8c <__aeabi_dcmpun>
 8013292:	2800      	cmp	r0, #0
 8013294:	d13b      	bne.n	801330e <pow+0xa2>
 8013296:	ec51 0b18 	vmov	r0, r1, d8
 801329a:	2200      	movs	r2, #0
 801329c:	2300      	movs	r3, #0
 801329e:	f7ed fc43 	bl	8000b28 <__aeabi_dcmpeq>
 80132a2:	b1b8      	cbz	r0, 80132d4 <pow+0x68>
 80132a4:	2200      	movs	r2, #0
 80132a6:	2300      	movs	r3, #0
 80132a8:	4620      	mov	r0, r4
 80132aa:	4629      	mov	r1, r5
 80132ac:	f7ed fc3c 	bl	8000b28 <__aeabi_dcmpeq>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d146      	bne.n	8013342 <pow+0xd6>
 80132b4:	ec45 4b10 	vmov	d0, r4, r5
 80132b8:	f000 f874 	bl	80133a4 <finite>
 80132bc:	b338      	cbz	r0, 801330e <pow+0xa2>
 80132be:	2200      	movs	r2, #0
 80132c0:	2300      	movs	r3, #0
 80132c2:	4620      	mov	r0, r4
 80132c4:	4629      	mov	r1, r5
 80132c6:	f7ed fc39 	bl	8000b3c <__aeabi_dcmplt>
 80132ca:	b300      	cbz	r0, 801330e <pow+0xa2>
 80132cc:	f002 f890 	bl	80153f0 <__errno>
 80132d0:	2322      	movs	r3, #34	@ 0x22
 80132d2:	e01b      	b.n	801330c <pow+0xa0>
 80132d4:	ec47 6b10 	vmov	d0, r6, r7
 80132d8:	f000 f864 	bl	80133a4 <finite>
 80132dc:	b9e0      	cbnz	r0, 8013318 <pow+0xac>
 80132de:	eeb0 0a48 	vmov.f32	s0, s16
 80132e2:	eef0 0a68 	vmov.f32	s1, s17
 80132e6:	f000 f85d 	bl	80133a4 <finite>
 80132ea:	b1a8      	cbz	r0, 8013318 <pow+0xac>
 80132ec:	ec45 4b10 	vmov	d0, r4, r5
 80132f0:	f000 f858 	bl	80133a4 <finite>
 80132f4:	b180      	cbz	r0, 8013318 <pow+0xac>
 80132f6:	4632      	mov	r2, r6
 80132f8:	463b      	mov	r3, r7
 80132fa:	4630      	mov	r0, r6
 80132fc:	4639      	mov	r1, r7
 80132fe:	f7ed fc45 	bl	8000b8c <__aeabi_dcmpun>
 8013302:	2800      	cmp	r0, #0
 8013304:	d0e2      	beq.n	80132cc <pow+0x60>
 8013306:	f002 f873 	bl	80153f0 <__errno>
 801330a:	2321      	movs	r3, #33	@ 0x21
 801330c:	6003      	str	r3, [r0, #0]
 801330e:	ecbd 8b02 	vpop	{d8}
 8013312:	ec47 6b10 	vmov	d0, r6, r7
 8013316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013318:	2200      	movs	r2, #0
 801331a:	2300      	movs	r3, #0
 801331c:	4630      	mov	r0, r6
 801331e:	4639      	mov	r1, r7
 8013320:	f7ed fc02 	bl	8000b28 <__aeabi_dcmpeq>
 8013324:	2800      	cmp	r0, #0
 8013326:	d0f2      	beq.n	801330e <pow+0xa2>
 8013328:	eeb0 0a48 	vmov.f32	s0, s16
 801332c:	eef0 0a68 	vmov.f32	s1, s17
 8013330:	f000 f838 	bl	80133a4 <finite>
 8013334:	2800      	cmp	r0, #0
 8013336:	d0ea      	beq.n	801330e <pow+0xa2>
 8013338:	ec45 4b10 	vmov	d0, r4, r5
 801333c:	f000 f832 	bl	80133a4 <finite>
 8013340:	e7c3      	b.n	80132ca <pow+0x5e>
 8013342:	4f01      	ldr	r7, [pc, #4]	@ (8013348 <pow+0xdc>)
 8013344:	2600      	movs	r6, #0
 8013346:	e7e2      	b.n	801330e <pow+0xa2>
 8013348:	3ff00000 	.word	0x3ff00000

0801334c <sqrt>:
 801334c:	b538      	push	{r3, r4, r5, lr}
 801334e:	ed2d 8b02 	vpush	{d8}
 8013352:	ec55 4b10 	vmov	r4, r5, d0
 8013356:	f000 f831 	bl	80133bc <__ieee754_sqrt>
 801335a:	4622      	mov	r2, r4
 801335c:	462b      	mov	r3, r5
 801335e:	4620      	mov	r0, r4
 8013360:	4629      	mov	r1, r5
 8013362:	eeb0 8a40 	vmov.f32	s16, s0
 8013366:	eef0 8a60 	vmov.f32	s17, s1
 801336a:	f7ed fc0f 	bl	8000b8c <__aeabi_dcmpun>
 801336e:	b990      	cbnz	r0, 8013396 <sqrt+0x4a>
 8013370:	2200      	movs	r2, #0
 8013372:	2300      	movs	r3, #0
 8013374:	4620      	mov	r0, r4
 8013376:	4629      	mov	r1, r5
 8013378:	f7ed fbe0 	bl	8000b3c <__aeabi_dcmplt>
 801337c:	b158      	cbz	r0, 8013396 <sqrt+0x4a>
 801337e:	f002 f837 	bl	80153f0 <__errno>
 8013382:	2321      	movs	r3, #33	@ 0x21
 8013384:	6003      	str	r3, [r0, #0]
 8013386:	2200      	movs	r2, #0
 8013388:	2300      	movs	r3, #0
 801338a:	4610      	mov	r0, r2
 801338c:	4619      	mov	r1, r3
 801338e:	f7ed fa8d 	bl	80008ac <__aeabi_ddiv>
 8013392:	ec41 0b18 	vmov	d8, r0, r1
 8013396:	eeb0 0a48 	vmov.f32	s0, s16
 801339a:	eef0 0a68 	vmov.f32	s1, s17
 801339e:	ecbd 8b02 	vpop	{d8}
 80133a2:	bd38      	pop	{r3, r4, r5, pc}

080133a4 <finite>:
 80133a4:	b082      	sub	sp, #8
 80133a6:	ed8d 0b00 	vstr	d0, [sp]
 80133aa:	9801      	ldr	r0, [sp, #4]
 80133ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80133b0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80133b4:	0fc0      	lsrs	r0, r0, #31
 80133b6:	b002      	add	sp, #8
 80133b8:	4770      	bx	lr
	...

080133bc <__ieee754_sqrt>:
 80133bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133c0:	4a68      	ldr	r2, [pc, #416]	@ (8013564 <__ieee754_sqrt+0x1a8>)
 80133c2:	ec55 4b10 	vmov	r4, r5, d0
 80133c6:	43aa      	bics	r2, r5
 80133c8:	462b      	mov	r3, r5
 80133ca:	4621      	mov	r1, r4
 80133cc:	d110      	bne.n	80133f0 <__ieee754_sqrt+0x34>
 80133ce:	4622      	mov	r2, r4
 80133d0:	4620      	mov	r0, r4
 80133d2:	4629      	mov	r1, r5
 80133d4:	f7ed f940 	bl	8000658 <__aeabi_dmul>
 80133d8:	4602      	mov	r2, r0
 80133da:	460b      	mov	r3, r1
 80133dc:	4620      	mov	r0, r4
 80133de:	4629      	mov	r1, r5
 80133e0:	f7ec ff84 	bl	80002ec <__adddf3>
 80133e4:	4604      	mov	r4, r0
 80133e6:	460d      	mov	r5, r1
 80133e8:	ec45 4b10 	vmov	d0, r4, r5
 80133ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f0:	2d00      	cmp	r5, #0
 80133f2:	dc0e      	bgt.n	8013412 <__ieee754_sqrt+0x56>
 80133f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80133f8:	4322      	orrs	r2, r4
 80133fa:	d0f5      	beq.n	80133e8 <__ieee754_sqrt+0x2c>
 80133fc:	b19d      	cbz	r5, 8013426 <__ieee754_sqrt+0x6a>
 80133fe:	4622      	mov	r2, r4
 8013400:	4620      	mov	r0, r4
 8013402:	4629      	mov	r1, r5
 8013404:	f7ec ff70 	bl	80002e8 <__aeabi_dsub>
 8013408:	4602      	mov	r2, r0
 801340a:	460b      	mov	r3, r1
 801340c:	f7ed fa4e 	bl	80008ac <__aeabi_ddiv>
 8013410:	e7e8      	b.n	80133e4 <__ieee754_sqrt+0x28>
 8013412:	152a      	asrs	r2, r5, #20
 8013414:	d115      	bne.n	8013442 <__ieee754_sqrt+0x86>
 8013416:	2000      	movs	r0, #0
 8013418:	e009      	b.n	801342e <__ieee754_sqrt+0x72>
 801341a:	0acb      	lsrs	r3, r1, #11
 801341c:	3a15      	subs	r2, #21
 801341e:	0549      	lsls	r1, r1, #21
 8013420:	2b00      	cmp	r3, #0
 8013422:	d0fa      	beq.n	801341a <__ieee754_sqrt+0x5e>
 8013424:	e7f7      	b.n	8013416 <__ieee754_sqrt+0x5a>
 8013426:	462a      	mov	r2, r5
 8013428:	e7fa      	b.n	8013420 <__ieee754_sqrt+0x64>
 801342a:	005b      	lsls	r3, r3, #1
 801342c:	3001      	adds	r0, #1
 801342e:	02dc      	lsls	r4, r3, #11
 8013430:	d5fb      	bpl.n	801342a <__ieee754_sqrt+0x6e>
 8013432:	1e44      	subs	r4, r0, #1
 8013434:	1b12      	subs	r2, r2, r4
 8013436:	f1c0 0420 	rsb	r4, r0, #32
 801343a:	fa21 f404 	lsr.w	r4, r1, r4
 801343e:	4323      	orrs	r3, r4
 8013440:	4081      	lsls	r1, r0
 8013442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013446:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801344a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801344e:	07d2      	lsls	r2, r2, #31
 8013450:	bf5c      	itt	pl
 8013452:	005b      	lslpl	r3, r3, #1
 8013454:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013458:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801345c:	bf58      	it	pl
 801345e:	0049      	lslpl	r1, r1, #1
 8013460:	2600      	movs	r6, #0
 8013462:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013466:	106d      	asrs	r5, r5, #1
 8013468:	0049      	lsls	r1, r1, #1
 801346a:	2016      	movs	r0, #22
 801346c:	4632      	mov	r2, r6
 801346e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8013472:	1917      	adds	r7, r2, r4
 8013474:	429f      	cmp	r7, r3
 8013476:	bfde      	ittt	le
 8013478:	193a      	addle	r2, r7, r4
 801347a:	1bdb      	suble	r3, r3, r7
 801347c:	1936      	addle	r6, r6, r4
 801347e:	0fcf      	lsrs	r7, r1, #31
 8013480:	3801      	subs	r0, #1
 8013482:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013486:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801348a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801348e:	d1f0      	bne.n	8013472 <__ieee754_sqrt+0xb6>
 8013490:	4604      	mov	r4, r0
 8013492:	2720      	movs	r7, #32
 8013494:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013498:	429a      	cmp	r2, r3
 801349a:	eb00 0e0c 	add.w	lr, r0, ip
 801349e:	db02      	blt.n	80134a6 <__ieee754_sqrt+0xea>
 80134a0:	d113      	bne.n	80134ca <__ieee754_sqrt+0x10e>
 80134a2:	458e      	cmp	lr, r1
 80134a4:	d811      	bhi.n	80134ca <__ieee754_sqrt+0x10e>
 80134a6:	f1be 0f00 	cmp.w	lr, #0
 80134aa:	eb0e 000c 	add.w	r0, lr, ip
 80134ae:	da42      	bge.n	8013536 <__ieee754_sqrt+0x17a>
 80134b0:	2800      	cmp	r0, #0
 80134b2:	db40      	blt.n	8013536 <__ieee754_sqrt+0x17a>
 80134b4:	f102 0801 	add.w	r8, r2, #1
 80134b8:	1a9b      	subs	r3, r3, r2
 80134ba:	458e      	cmp	lr, r1
 80134bc:	bf88      	it	hi
 80134be:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80134c2:	eba1 010e 	sub.w	r1, r1, lr
 80134c6:	4464      	add	r4, ip
 80134c8:	4642      	mov	r2, r8
 80134ca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80134ce:	3f01      	subs	r7, #1
 80134d0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80134d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80134d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80134dc:	d1dc      	bne.n	8013498 <__ieee754_sqrt+0xdc>
 80134de:	4319      	orrs	r1, r3
 80134e0:	d01b      	beq.n	801351a <__ieee754_sqrt+0x15e>
 80134e2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013568 <__ieee754_sqrt+0x1ac>
 80134e6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801356c <__ieee754_sqrt+0x1b0>
 80134ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80134ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80134f2:	f7ec fef9 	bl	80002e8 <__aeabi_dsub>
 80134f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80134fa:	4602      	mov	r2, r0
 80134fc:	460b      	mov	r3, r1
 80134fe:	4640      	mov	r0, r8
 8013500:	4649      	mov	r1, r9
 8013502:	f7ed fb25 	bl	8000b50 <__aeabi_dcmple>
 8013506:	b140      	cbz	r0, 801351a <__ieee754_sqrt+0x15e>
 8013508:	f1b4 3fff 	cmp.w	r4, #4294967295
 801350c:	e9da 0100 	ldrd	r0, r1, [sl]
 8013510:	e9db 2300 	ldrd	r2, r3, [fp]
 8013514:	d111      	bne.n	801353a <__ieee754_sqrt+0x17e>
 8013516:	3601      	adds	r6, #1
 8013518:	463c      	mov	r4, r7
 801351a:	1072      	asrs	r2, r6, #1
 801351c:	0863      	lsrs	r3, r4, #1
 801351e:	07f1      	lsls	r1, r6, #31
 8013520:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013524:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013528:	bf48      	it	mi
 801352a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801352e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8013532:	4618      	mov	r0, r3
 8013534:	e756      	b.n	80133e4 <__ieee754_sqrt+0x28>
 8013536:	4690      	mov	r8, r2
 8013538:	e7be      	b.n	80134b8 <__ieee754_sqrt+0xfc>
 801353a:	f7ec fed7 	bl	80002ec <__adddf3>
 801353e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013542:	4602      	mov	r2, r0
 8013544:	460b      	mov	r3, r1
 8013546:	4640      	mov	r0, r8
 8013548:	4649      	mov	r1, r9
 801354a:	f7ed faf7 	bl	8000b3c <__aeabi_dcmplt>
 801354e:	b120      	cbz	r0, 801355a <__ieee754_sqrt+0x19e>
 8013550:	1ca0      	adds	r0, r4, #2
 8013552:	bf08      	it	eq
 8013554:	3601      	addeq	r6, #1
 8013556:	3402      	adds	r4, #2
 8013558:	e7df      	b.n	801351a <__ieee754_sqrt+0x15e>
 801355a:	1c63      	adds	r3, r4, #1
 801355c:	f023 0401 	bic.w	r4, r3, #1
 8013560:	e7db      	b.n	801351a <__ieee754_sqrt+0x15e>
 8013562:	bf00      	nop
 8013564:	7ff00000 	.word	0x7ff00000
 8013568:	20000028 	.word	0x20000028
 801356c:	20000020 	.word	0x20000020

08013570 <__ieee754_atan2>:
 8013570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013574:	ec57 6b11 	vmov	r6, r7, d1
 8013578:	4273      	negs	r3, r6
 801357a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80136f8 <__ieee754_atan2+0x188>
 801357e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8013582:	4333      	orrs	r3, r6
 8013584:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013588:	4543      	cmp	r3, r8
 801358a:	ec51 0b10 	vmov	r0, r1, d0
 801358e:	4635      	mov	r5, r6
 8013590:	d809      	bhi.n	80135a6 <__ieee754_atan2+0x36>
 8013592:	4244      	negs	r4, r0
 8013594:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013598:	4304      	orrs	r4, r0
 801359a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801359e:	4544      	cmp	r4, r8
 80135a0:	468e      	mov	lr, r1
 80135a2:	4681      	mov	r9, r0
 80135a4:	d907      	bls.n	80135b6 <__ieee754_atan2+0x46>
 80135a6:	4632      	mov	r2, r6
 80135a8:	463b      	mov	r3, r7
 80135aa:	f7ec fe9f 	bl	80002ec <__adddf3>
 80135ae:	ec41 0b10 	vmov	d0, r0, r1
 80135b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135b6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80135ba:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80135be:	4334      	orrs	r4, r6
 80135c0:	d103      	bne.n	80135ca <__ieee754_atan2+0x5a>
 80135c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135c6:	f000 bddf 	b.w	8014188 <atan>
 80135ca:	17bc      	asrs	r4, r7, #30
 80135cc:	f004 0402 	and.w	r4, r4, #2
 80135d0:	ea53 0909 	orrs.w	r9, r3, r9
 80135d4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80135d8:	d107      	bne.n	80135ea <__ieee754_atan2+0x7a>
 80135da:	2c02      	cmp	r4, #2
 80135dc:	d05f      	beq.n	801369e <__ieee754_atan2+0x12e>
 80135de:	2c03      	cmp	r4, #3
 80135e0:	d1e5      	bne.n	80135ae <__ieee754_atan2+0x3e>
 80135e2:	a141      	add	r1, pc, #260	@ (adr r1, 80136e8 <__ieee754_atan2+0x178>)
 80135e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135e8:	e7e1      	b.n	80135ae <__ieee754_atan2+0x3e>
 80135ea:	4315      	orrs	r5, r2
 80135ec:	d106      	bne.n	80135fc <__ieee754_atan2+0x8c>
 80135ee:	f1be 0f00 	cmp.w	lr, #0
 80135f2:	da5f      	bge.n	80136b4 <__ieee754_atan2+0x144>
 80135f4:	a13e      	add	r1, pc, #248	@ (adr r1, 80136f0 <__ieee754_atan2+0x180>)
 80135f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135fa:	e7d8      	b.n	80135ae <__ieee754_atan2+0x3e>
 80135fc:	4542      	cmp	r2, r8
 80135fe:	d10f      	bne.n	8013620 <__ieee754_atan2+0xb0>
 8013600:	4293      	cmp	r3, r2
 8013602:	f104 34ff 	add.w	r4, r4, #4294967295
 8013606:	d107      	bne.n	8013618 <__ieee754_atan2+0xa8>
 8013608:	2c02      	cmp	r4, #2
 801360a:	d84c      	bhi.n	80136a6 <__ieee754_atan2+0x136>
 801360c:	4b34      	ldr	r3, [pc, #208]	@ (80136e0 <__ieee754_atan2+0x170>)
 801360e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013616:	e7ca      	b.n	80135ae <__ieee754_atan2+0x3e>
 8013618:	2c02      	cmp	r4, #2
 801361a:	d848      	bhi.n	80136ae <__ieee754_atan2+0x13e>
 801361c:	4b31      	ldr	r3, [pc, #196]	@ (80136e4 <__ieee754_atan2+0x174>)
 801361e:	e7f6      	b.n	801360e <__ieee754_atan2+0x9e>
 8013620:	4543      	cmp	r3, r8
 8013622:	d0e4      	beq.n	80135ee <__ieee754_atan2+0x7e>
 8013624:	1a9b      	subs	r3, r3, r2
 8013626:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801362a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801362e:	da1e      	bge.n	801366e <__ieee754_atan2+0xfe>
 8013630:	2f00      	cmp	r7, #0
 8013632:	da01      	bge.n	8013638 <__ieee754_atan2+0xc8>
 8013634:	323c      	adds	r2, #60	@ 0x3c
 8013636:	db1e      	blt.n	8013676 <__ieee754_atan2+0x106>
 8013638:	4632      	mov	r2, r6
 801363a:	463b      	mov	r3, r7
 801363c:	f7ed f936 	bl	80008ac <__aeabi_ddiv>
 8013640:	ec41 0b10 	vmov	d0, r0, r1
 8013644:	f000 ff38 	bl	80144b8 <fabs>
 8013648:	f000 fd9e 	bl	8014188 <atan>
 801364c:	ec51 0b10 	vmov	r0, r1, d0
 8013650:	2c01      	cmp	r4, #1
 8013652:	d013      	beq.n	801367c <__ieee754_atan2+0x10c>
 8013654:	2c02      	cmp	r4, #2
 8013656:	d015      	beq.n	8013684 <__ieee754_atan2+0x114>
 8013658:	2c00      	cmp	r4, #0
 801365a:	d0a8      	beq.n	80135ae <__ieee754_atan2+0x3e>
 801365c:	a318      	add	r3, pc, #96	@ (adr r3, 80136c0 <__ieee754_atan2+0x150>)
 801365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013662:	f7ec fe41 	bl	80002e8 <__aeabi_dsub>
 8013666:	a318      	add	r3, pc, #96	@ (adr r3, 80136c8 <__ieee754_atan2+0x158>)
 8013668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366c:	e014      	b.n	8013698 <__ieee754_atan2+0x128>
 801366e:	a118      	add	r1, pc, #96	@ (adr r1, 80136d0 <__ieee754_atan2+0x160>)
 8013670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013674:	e7ec      	b.n	8013650 <__ieee754_atan2+0xe0>
 8013676:	2000      	movs	r0, #0
 8013678:	2100      	movs	r1, #0
 801367a:	e7e9      	b.n	8013650 <__ieee754_atan2+0xe0>
 801367c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013680:	4619      	mov	r1, r3
 8013682:	e794      	b.n	80135ae <__ieee754_atan2+0x3e>
 8013684:	a30e      	add	r3, pc, #56	@ (adr r3, 80136c0 <__ieee754_atan2+0x150>)
 8013686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801368a:	f7ec fe2d 	bl	80002e8 <__aeabi_dsub>
 801368e:	4602      	mov	r2, r0
 8013690:	460b      	mov	r3, r1
 8013692:	a10d      	add	r1, pc, #52	@ (adr r1, 80136c8 <__ieee754_atan2+0x158>)
 8013694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013698:	f7ec fe26 	bl	80002e8 <__aeabi_dsub>
 801369c:	e787      	b.n	80135ae <__ieee754_atan2+0x3e>
 801369e:	a10a      	add	r1, pc, #40	@ (adr r1, 80136c8 <__ieee754_atan2+0x158>)
 80136a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136a4:	e783      	b.n	80135ae <__ieee754_atan2+0x3e>
 80136a6:	a10c      	add	r1, pc, #48	@ (adr r1, 80136d8 <__ieee754_atan2+0x168>)
 80136a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ac:	e77f      	b.n	80135ae <__ieee754_atan2+0x3e>
 80136ae:	2000      	movs	r0, #0
 80136b0:	2100      	movs	r1, #0
 80136b2:	e77c      	b.n	80135ae <__ieee754_atan2+0x3e>
 80136b4:	a106      	add	r1, pc, #24	@ (adr r1, 80136d0 <__ieee754_atan2+0x160>)
 80136b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ba:	e778      	b.n	80135ae <__ieee754_atan2+0x3e>
 80136bc:	f3af 8000 	nop.w
 80136c0:	33145c07 	.word	0x33145c07
 80136c4:	3ca1a626 	.word	0x3ca1a626
 80136c8:	54442d18 	.word	0x54442d18
 80136cc:	400921fb 	.word	0x400921fb
 80136d0:	54442d18 	.word	0x54442d18
 80136d4:	3ff921fb 	.word	0x3ff921fb
 80136d8:	54442d18 	.word	0x54442d18
 80136dc:	3fe921fb 	.word	0x3fe921fb
 80136e0:	080185e0 	.word	0x080185e0
 80136e4:	080185c8 	.word	0x080185c8
 80136e8:	54442d18 	.word	0x54442d18
 80136ec:	c00921fb 	.word	0xc00921fb
 80136f0:	54442d18 	.word	0x54442d18
 80136f4:	bff921fb 	.word	0xbff921fb
 80136f8:	7ff00000 	.word	0x7ff00000
 80136fc:	00000000 	.word	0x00000000

08013700 <__ieee754_pow>:
 8013700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013704:	b091      	sub	sp, #68	@ 0x44
 8013706:	ed8d 1b00 	vstr	d1, [sp]
 801370a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801370e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013712:	ea5a 0001 	orrs.w	r0, sl, r1
 8013716:	ec57 6b10 	vmov	r6, r7, d0
 801371a:	d113      	bne.n	8013744 <__ieee754_pow+0x44>
 801371c:	19b3      	adds	r3, r6, r6
 801371e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013722:	4152      	adcs	r2, r2
 8013724:	4298      	cmp	r0, r3
 8013726:	4b98      	ldr	r3, [pc, #608]	@ (8013988 <__ieee754_pow+0x288>)
 8013728:	4193      	sbcs	r3, r2
 801372a:	f080 84ea 	bcs.w	8014102 <__ieee754_pow+0xa02>
 801372e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013732:	4630      	mov	r0, r6
 8013734:	4639      	mov	r1, r7
 8013736:	f7ec fdd9 	bl	80002ec <__adddf3>
 801373a:	ec41 0b10 	vmov	d0, r0, r1
 801373e:	b011      	add	sp, #68	@ 0x44
 8013740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013744:	4a91      	ldr	r2, [pc, #580]	@ (801398c <__ieee754_pow+0x28c>)
 8013746:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801374a:	4590      	cmp	r8, r2
 801374c:	463d      	mov	r5, r7
 801374e:	4633      	mov	r3, r6
 8013750:	d806      	bhi.n	8013760 <__ieee754_pow+0x60>
 8013752:	d101      	bne.n	8013758 <__ieee754_pow+0x58>
 8013754:	2e00      	cmp	r6, #0
 8013756:	d1ea      	bne.n	801372e <__ieee754_pow+0x2e>
 8013758:	4592      	cmp	sl, r2
 801375a:	d801      	bhi.n	8013760 <__ieee754_pow+0x60>
 801375c:	d10e      	bne.n	801377c <__ieee754_pow+0x7c>
 801375e:	b169      	cbz	r1, 801377c <__ieee754_pow+0x7c>
 8013760:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013764:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013768:	431d      	orrs	r5, r3
 801376a:	d1e0      	bne.n	801372e <__ieee754_pow+0x2e>
 801376c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013770:	18db      	adds	r3, r3, r3
 8013772:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013776:	4152      	adcs	r2, r2
 8013778:	429d      	cmp	r5, r3
 801377a:	e7d4      	b.n	8013726 <__ieee754_pow+0x26>
 801377c:	2d00      	cmp	r5, #0
 801377e:	46c3      	mov	fp, r8
 8013780:	da3a      	bge.n	80137f8 <__ieee754_pow+0xf8>
 8013782:	4a83      	ldr	r2, [pc, #524]	@ (8013990 <__ieee754_pow+0x290>)
 8013784:	4592      	cmp	sl, r2
 8013786:	d84d      	bhi.n	8013824 <__ieee754_pow+0x124>
 8013788:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801378c:	4592      	cmp	sl, r2
 801378e:	f240 84c7 	bls.w	8014120 <__ieee754_pow+0xa20>
 8013792:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013796:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801379a:	2a14      	cmp	r2, #20
 801379c:	dd0f      	ble.n	80137be <__ieee754_pow+0xbe>
 801379e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80137a2:	fa21 f402 	lsr.w	r4, r1, r2
 80137a6:	fa04 f202 	lsl.w	r2, r4, r2
 80137aa:	428a      	cmp	r2, r1
 80137ac:	f040 84b8 	bne.w	8014120 <__ieee754_pow+0xa20>
 80137b0:	f004 0401 	and.w	r4, r4, #1
 80137b4:	f1c4 0402 	rsb	r4, r4, #2
 80137b8:	2900      	cmp	r1, #0
 80137ba:	d158      	bne.n	801386e <__ieee754_pow+0x16e>
 80137bc:	e00e      	b.n	80137dc <__ieee754_pow+0xdc>
 80137be:	2900      	cmp	r1, #0
 80137c0:	d154      	bne.n	801386c <__ieee754_pow+0x16c>
 80137c2:	f1c2 0214 	rsb	r2, r2, #20
 80137c6:	fa4a f402 	asr.w	r4, sl, r2
 80137ca:	fa04 f202 	lsl.w	r2, r4, r2
 80137ce:	4552      	cmp	r2, sl
 80137d0:	f040 84a3 	bne.w	801411a <__ieee754_pow+0xa1a>
 80137d4:	f004 0401 	and.w	r4, r4, #1
 80137d8:	f1c4 0402 	rsb	r4, r4, #2
 80137dc:	4a6d      	ldr	r2, [pc, #436]	@ (8013994 <__ieee754_pow+0x294>)
 80137de:	4592      	cmp	sl, r2
 80137e0:	d12e      	bne.n	8013840 <__ieee754_pow+0x140>
 80137e2:	f1b9 0f00 	cmp.w	r9, #0
 80137e6:	f280 8494 	bge.w	8014112 <__ieee754_pow+0xa12>
 80137ea:	496a      	ldr	r1, [pc, #424]	@ (8013994 <__ieee754_pow+0x294>)
 80137ec:	4632      	mov	r2, r6
 80137ee:	463b      	mov	r3, r7
 80137f0:	2000      	movs	r0, #0
 80137f2:	f7ed f85b 	bl	80008ac <__aeabi_ddiv>
 80137f6:	e7a0      	b.n	801373a <__ieee754_pow+0x3a>
 80137f8:	2400      	movs	r4, #0
 80137fa:	bbc1      	cbnz	r1, 801386e <__ieee754_pow+0x16e>
 80137fc:	4a63      	ldr	r2, [pc, #396]	@ (801398c <__ieee754_pow+0x28c>)
 80137fe:	4592      	cmp	sl, r2
 8013800:	d1ec      	bne.n	80137dc <__ieee754_pow+0xdc>
 8013802:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8013806:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801380a:	431a      	orrs	r2, r3
 801380c:	f000 8479 	beq.w	8014102 <__ieee754_pow+0xa02>
 8013810:	4b61      	ldr	r3, [pc, #388]	@ (8013998 <__ieee754_pow+0x298>)
 8013812:	4598      	cmp	r8, r3
 8013814:	d908      	bls.n	8013828 <__ieee754_pow+0x128>
 8013816:	f1b9 0f00 	cmp.w	r9, #0
 801381a:	f2c0 8476 	blt.w	801410a <__ieee754_pow+0xa0a>
 801381e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013822:	e78a      	b.n	801373a <__ieee754_pow+0x3a>
 8013824:	2402      	movs	r4, #2
 8013826:	e7e8      	b.n	80137fa <__ieee754_pow+0xfa>
 8013828:	f1b9 0f00 	cmp.w	r9, #0
 801382c:	f04f 0000 	mov.w	r0, #0
 8013830:	f04f 0100 	mov.w	r1, #0
 8013834:	da81      	bge.n	801373a <__ieee754_pow+0x3a>
 8013836:	e9dd 0300 	ldrd	r0, r3, [sp]
 801383a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801383e:	e77c      	b.n	801373a <__ieee754_pow+0x3a>
 8013840:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8013844:	d106      	bne.n	8013854 <__ieee754_pow+0x154>
 8013846:	4632      	mov	r2, r6
 8013848:	463b      	mov	r3, r7
 801384a:	4630      	mov	r0, r6
 801384c:	4639      	mov	r1, r7
 801384e:	f7ec ff03 	bl	8000658 <__aeabi_dmul>
 8013852:	e772      	b.n	801373a <__ieee754_pow+0x3a>
 8013854:	4a51      	ldr	r2, [pc, #324]	@ (801399c <__ieee754_pow+0x29c>)
 8013856:	4591      	cmp	r9, r2
 8013858:	d109      	bne.n	801386e <__ieee754_pow+0x16e>
 801385a:	2d00      	cmp	r5, #0
 801385c:	db07      	blt.n	801386e <__ieee754_pow+0x16e>
 801385e:	ec47 6b10 	vmov	d0, r6, r7
 8013862:	b011      	add	sp, #68	@ 0x44
 8013864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013868:	f7ff bda8 	b.w	80133bc <__ieee754_sqrt>
 801386c:	2400      	movs	r4, #0
 801386e:	ec47 6b10 	vmov	d0, r6, r7
 8013872:	9302      	str	r3, [sp, #8]
 8013874:	f000 fe20 	bl	80144b8 <fabs>
 8013878:	9b02      	ldr	r3, [sp, #8]
 801387a:	ec51 0b10 	vmov	r0, r1, d0
 801387e:	bb53      	cbnz	r3, 80138d6 <__ieee754_pow+0x1d6>
 8013880:	4b44      	ldr	r3, [pc, #272]	@ (8013994 <__ieee754_pow+0x294>)
 8013882:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8013886:	429a      	cmp	r2, r3
 8013888:	d002      	beq.n	8013890 <__ieee754_pow+0x190>
 801388a:	f1b8 0f00 	cmp.w	r8, #0
 801388e:	d122      	bne.n	80138d6 <__ieee754_pow+0x1d6>
 8013890:	f1b9 0f00 	cmp.w	r9, #0
 8013894:	da05      	bge.n	80138a2 <__ieee754_pow+0x1a2>
 8013896:	4602      	mov	r2, r0
 8013898:	460b      	mov	r3, r1
 801389a:	2000      	movs	r0, #0
 801389c:	493d      	ldr	r1, [pc, #244]	@ (8013994 <__ieee754_pow+0x294>)
 801389e:	f7ed f805 	bl	80008ac <__aeabi_ddiv>
 80138a2:	2d00      	cmp	r5, #0
 80138a4:	f6bf af49 	bge.w	801373a <__ieee754_pow+0x3a>
 80138a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80138ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80138b0:	ea58 0804 	orrs.w	r8, r8, r4
 80138b4:	d108      	bne.n	80138c8 <__ieee754_pow+0x1c8>
 80138b6:	4602      	mov	r2, r0
 80138b8:	460b      	mov	r3, r1
 80138ba:	4610      	mov	r0, r2
 80138bc:	4619      	mov	r1, r3
 80138be:	f7ec fd13 	bl	80002e8 <__aeabi_dsub>
 80138c2:	4602      	mov	r2, r0
 80138c4:	460b      	mov	r3, r1
 80138c6:	e794      	b.n	80137f2 <__ieee754_pow+0xf2>
 80138c8:	2c01      	cmp	r4, #1
 80138ca:	f47f af36 	bne.w	801373a <__ieee754_pow+0x3a>
 80138ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80138d2:	4619      	mov	r1, r3
 80138d4:	e731      	b.n	801373a <__ieee754_pow+0x3a>
 80138d6:	0feb      	lsrs	r3, r5, #31
 80138d8:	3b01      	subs	r3, #1
 80138da:	ea53 0204 	orrs.w	r2, r3, r4
 80138de:	d102      	bne.n	80138e6 <__ieee754_pow+0x1e6>
 80138e0:	4632      	mov	r2, r6
 80138e2:	463b      	mov	r3, r7
 80138e4:	e7e9      	b.n	80138ba <__ieee754_pow+0x1ba>
 80138e6:	3c01      	subs	r4, #1
 80138e8:	431c      	orrs	r4, r3
 80138ea:	d016      	beq.n	801391a <__ieee754_pow+0x21a>
 80138ec:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013978 <__ieee754_pow+0x278>
 80138f0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80138f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138f8:	f240 8112 	bls.w	8013b20 <__ieee754_pow+0x420>
 80138fc:	4b28      	ldr	r3, [pc, #160]	@ (80139a0 <__ieee754_pow+0x2a0>)
 80138fe:	459a      	cmp	sl, r3
 8013900:	4b25      	ldr	r3, [pc, #148]	@ (8013998 <__ieee754_pow+0x298>)
 8013902:	d916      	bls.n	8013932 <__ieee754_pow+0x232>
 8013904:	4598      	cmp	r8, r3
 8013906:	d80b      	bhi.n	8013920 <__ieee754_pow+0x220>
 8013908:	f1b9 0f00 	cmp.w	r9, #0
 801390c:	da0b      	bge.n	8013926 <__ieee754_pow+0x226>
 801390e:	2000      	movs	r0, #0
 8013910:	b011      	add	sp, #68	@ 0x44
 8013912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013916:	f000 be8b 	b.w	8014630 <__math_oflow>
 801391a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8013980 <__ieee754_pow+0x280>
 801391e:	e7e7      	b.n	80138f0 <__ieee754_pow+0x1f0>
 8013920:	f1b9 0f00 	cmp.w	r9, #0
 8013924:	dcf3      	bgt.n	801390e <__ieee754_pow+0x20e>
 8013926:	2000      	movs	r0, #0
 8013928:	b011      	add	sp, #68	@ 0x44
 801392a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392e:	f000 be77 	b.w	8014620 <__math_uflow>
 8013932:	4598      	cmp	r8, r3
 8013934:	d20c      	bcs.n	8013950 <__ieee754_pow+0x250>
 8013936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801393a:	2200      	movs	r2, #0
 801393c:	2300      	movs	r3, #0
 801393e:	f7ed f8fd 	bl	8000b3c <__aeabi_dcmplt>
 8013942:	3800      	subs	r0, #0
 8013944:	bf18      	it	ne
 8013946:	2001      	movne	r0, #1
 8013948:	f1b9 0f00 	cmp.w	r9, #0
 801394c:	daec      	bge.n	8013928 <__ieee754_pow+0x228>
 801394e:	e7df      	b.n	8013910 <__ieee754_pow+0x210>
 8013950:	4b10      	ldr	r3, [pc, #64]	@ (8013994 <__ieee754_pow+0x294>)
 8013952:	4598      	cmp	r8, r3
 8013954:	f04f 0200 	mov.w	r2, #0
 8013958:	d924      	bls.n	80139a4 <__ieee754_pow+0x2a4>
 801395a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801395e:	2300      	movs	r3, #0
 8013960:	f7ed f8ec 	bl	8000b3c <__aeabi_dcmplt>
 8013964:	3800      	subs	r0, #0
 8013966:	bf18      	it	ne
 8013968:	2001      	movne	r0, #1
 801396a:	f1b9 0f00 	cmp.w	r9, #0
 801396e:	dccf      	bgt.n	8013910 <__ieee754_pow+0x210>
 8013970:	e7da      	b.n	8013928 <__ieee754_pow+0x228>
 8013972:	bf00      	nop
 8013974:	f3af 8000 	nop.w
 8013978:	00000000 	.word	0x00000000
 801397c:	3ff00000 	.word	0x3ff00000
 8013980:	00000000 	.word	0x00000000
 8013984:	bff00000 	.word	0xbff00000
 8013988:	fff00000 	.word	0xfff00000
 801398c:	7ff00000 	.word	0x7ff00000
 8013990:	433fffff 	.word	0x433fffff
 8013994:	3ff00000 	.word	0x3ff00000
 8013998:	3fefffff 	.word	0x3fefffff
 801399c:	3fe00000 	.word	0x3fe00000
 80139a0:	43f00000 	.word	0x43f00000
 80139a4:	4b5a      	ldr	r3, [pc, #360]	@ (8013b10 <__ieee754_pow+0x410>)
 80139a6:	f7ec fc9f 	bl	80002e8 <__aeabi_dsub>
 80139aa:	a351      	add	r3, pc, #324	@ (adr r3, 8013af0 <__ieee754_pow+0x3f0>)
 80139ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b0:	4604      	mov	r4, r0
 80139b2:	460d      	mov	r5, r1
 80139b4:	f7ec fe50 	bl	8000658 <__aeabi_dmul>
 80139b8:	a34f      	add	r3, pc, #316	@ (adr r3, 8013af8 <__ieee754_pow+0x3f8>)
 80139ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139be:	4606      	mov	r6, r0
 80139c0:	460f      	mov	r7, r1
 80139c2:	4620      	mov	r0, r4
 80139c4:	4629      	mov	r1, r5
 80139c6:	f7ec fe47 	bl	8000658 <__aeabi_dmul>
 80139ca:	4b52      	ldr	r3, [pc, #328]	@ (8013b14 <__ieee754_pow+0x414>)
 80139cc:	4682      	mov	sl, r0
 80139ce:	468b      	mov	fp, r1
 80139d0:	2200      	movs	r2, #0
 80139d2:	4620      	mov	r0, r4
 80139d4:	4629      	mov	r1, r5
 80139d6:	f7ec fe3f 	bl	8000658 <__aeabi_dmul>
 80139da:	4602      	mov	r2, r0
 80139dc:	460b      	mov	r3, r1
 80139de:	a148      	add	r1, pc, #288	@ (adr r1, 8013b00 <__ieee754_pow+0x400>)
 80139e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139e4:	f7ec fc80 	bl	80002e8 <__aeabi_dsub>
 80139e8:	4622      	mov	r2, r4
 80139ea:	462b      	mov	r3, r5
 80139ec:	f7ec fe34 	bl	8000658 <__aeabi_dmul>
 80139f0:	4602      	mov	r2, r0
 80139f2:	460b      	mov	r3, r1
 80139f4:	2000      	movs	r0, #0
 80139f6:	4948      	ldr	r1, [pc, #288]	@ (8013b18 <__ieee754_pow+0x418>)
 80139f8:	f7ec fc76 	bl	80002e8 <__aeabi_dsub>
 80139fc:	4622      	mov	r2, r4
 80139fe:	4680      	mov	r8, r0
 8013a00:	4689      	mov	r9, r1
 8013a02:	462b      	mov	r3, r5
 8013a04:	4620      	mov	r0, r4
 8013a06:	4629      	mov	r1, r5
 8013a08:	f7ec fe26 	bl	8000658 <__aeabi_dmul>
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	460b      	mov	r3, r1
 8013a10:	4640      	mov	r0, r8
 8013a12:	4649      	mov	r1, r9
 8013a14:	f7ec fe20 	bl	8000658 <__aeabi_dmul>
 8013a18:	a33b      	add	r3, pc, #236	@ (adr r3, 8013b08 <__ieee754_pow+0x408>)
 8013a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1e:	f7ec fe1b 	bl	8000658 <__aeabi_dmul>
 8013a22:	4602      	mov	r2, r0
 8013a24:	460b      	mov	r3, r1
 8013a26:	4650      	mov	r0, sl
 8013a28:	4659      	mov	r1, fp
 8013a2a:	f7ec fc5d 	bl	80002e8 <__aeabi_dsub>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	460b      	mov	r3, r1
 8013a32:	4680      	mov	r8, r0
 8013a34:	4689      	mov	r9, r1
 8013a36:	4630      	mov	r0, r6
 8013a38:	4639      	mov	r1, r7
 8013a3a:	f7ec fc57 	bl	80002ec <__adddf3>
 8013a3e:	2400      	movs	r4, #0
 8013a40:	4632      	mov	r2, r6
 8013a42:	463b      	mov	r3, r7
 8013a44:	4620      	mov	r0, r4
 8013a46:	460d      	mov	r5, r1
 8013a48:	f7ec fc4e 	bl	80002e8 <__aeabi_dsub>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	460b      	mov	r3, r1
 8013a50:	4640      	mov	r0, r8
 8013a52:	4649      	mov	r1, r9
 8013a54:	f7ec fc48 	bl	80002e8 <__aeabi_dsub>
 8013a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013a60:	2300      	movs	r3, #0
 8013a62:	9304      	str	r3, [sp, #16]
 8013a64:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013a68:	4606      	mov	r6, r0
 8013a6a:	460f      	mov	r7, r1
 8013a6c:	4652      	mov	r2, sl
 8013a6e:	465b      	mov	r3, fp
 8013a70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a74:	f7ec fc38 	bl	80002e8 <__aeabi_dsub>
 8013a78:	4622      	mov	r2, r4
 8013a7a:	462b      	mov	r3, r5
 8013a7c:	f7ec fdec 	bl	8000658 <__aeabi_dmul>
 8013a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a84:	4680      	mov	r8, r0
 8013a86:	4689      	mov	r9, r1
 8013a88:	4630      	mov	r0, r6
 8013a8a:	4639      	mov	r1, r7
 8013a8c:	f7ec fde4 	bl	8000658 <__aeabi_dmul>
 8013a90:	4602      	mov	r2, r0
 8013a92:	460b      	mov	r3, r1
 8013a94:	4640      	mov	r0, r8
 8013a96:	4649      	mov	r1, r9
 8013a98:	f7ec fc28 	bl	80002ec <__adddf3>
 8013a9c:	4652      	mov	r2, sl
 8013a9e:	465b      	mov	r3, fp
 8013aa0:	4606      	mov	r6, r0
 8013aa2:	460f      	mov	r7, r1
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	4629      	mov	r1, r5
 8013aa8:	f7ec fdd6 	bl	8000658 <__aeabi_dmul>
 8013aac:	460b      	mov	r3, r1
 8013aae:	4602      	mov	r2, r0
 8013ab0:	4680      	mov	r8, r0
 8013ab2:	4689      	mov	r9, r1
 8013ab4:	4630      	mov	r0, r6
 8013ab6:	4639      	mov	r1, r7
 8013ab8:	f7ec fc18 	bl	80002ec <__adddf3>
 8013abc:	4b17      	ldr	r3, [pc, #92]	@ (8013b1c <__ieee754_pow+0x41c>)
 8013abe:	4299      	cmp	r1, r3
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	460d      	mov	r5, r1
 8013ac4:	468a      	mov	sl, r1
 8013ac6:	468b      	mov	fp, r1
 8013ac8:	f340 82ef 	ble.w	80140aa <__ieee754_pow+0x9aa>
 8013acc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013ad0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013ad4:	4303      	orrs	r3, r0
 8013ad6:	f000 81e8 	beq.w	8013eaa <__ieee754_pow+0x7aa>
 8013ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	f7ed f82b 	bl	8000b3c <__aeabi_dcmplt>
 8013ae6:	3800      	subs	r0, #0
 8013ae8:	bf18      	it	ne
 8013aea:	2001      	movne	r0, #1
 8013aec:	e710      	b.n	8013910 <__ieee754_pow+0x210>
 8013aee:	bf00      	nop
 8013af0:	60000000 	.word	0x60000000
 8013af4:	3ff71547 	.word	0x3ff71547
 8013af8:	f85ddf44 	.word	0xf85ddf44
 8013afc:	3e54ae0b 	.word	0x3e54ae0b
 8013b00:	55555555 	.word	0x55555555
 8013b04:	3fd55555 	.word	0x3fd55555
 8013b08:	652b82fe 	.word	0x652b82fe
 8013b0c:	3ff71547 	.word	0x3ff71547
 8013b10:	3ff00000 	.word	0x3ff00000
 8013b14:	3fd00000 	.word	0x3fd00000
 8013b18:	3fe00000 	.word	0x3fe00000
 8013b1c:	408fffff 	.word	0x408fffff
 8013b20:	4bd5      	ldr	r3, [pc, #852]	@ (8013e78 <__ieee754_pow+0x778>)
 8013b22:	402b      	ands	r3, r5
 8013b24:	2200      	movs	r2, #0
 8013b26:	b92b      	cbnz	r3, 8013b34 <__ieee754_pow+0x434>
 8013b28:	4bd4      	ldr	r3, [pc, #848]	@ (8013e7c <__ieee754_pow+0x77c>)
 8013b2a:	f7ec fd95 	bl	8000658 <__aeabi_dmul>
 8013b2e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8013b32:	468b      	mov	fp, r1
 8013b34:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013b38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013b3c:	4413      	add	r3, r2
 8013b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b40:	4bcf      	ldr	r3, [pc, #828]	@ (8013e80 <__ieee754_pow+0x780>)
 8013b42:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013b46:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013b4a:	459b      	cmp	fp, r3
 8013b4c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013b50:	dd08      	ble.n	8013b64 <__ieee754_pow+0x464>
 8013b52:	4bcc      	ldr	r3, [pc, #816]	@ (8013e84 <__ieee754_pow+0x784>)
 8013b54:	459b      	cmp	fp, r3
 8013b56:	f340 81a5 	ble.w	8013ea4 <__ieee754_pow+0x7a4>
 8013b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b60:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013b64:	f04f 0a00 	mov.w	sl, #0
 8013b68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013b6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b6e:	4bc6      	ldr	r3, [pc, #792]	@ (8013e88 <__ieee754_pow+0x788>)
 8013b70:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013b74:	ed93 7b00 	vldr	d7, [r3]
 8013b78:	4629      	mov	r1, r5
 8013b7a:	ec53 2b17 	vmov	r2, r3, d7
 8013b7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013b86:	f7ec fbaf 	bl	80002e8 <__aeabi_dsub>
 8013b8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b8e:	4606      	mov	r6, r0
 8013b90:	460f      	mov	r7, r1
 8013b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b96:	f7ec fba9 	bl	80002ec <__adddf3>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	460b      	mov	r3, r1
 8013b9e:	2000      	movs	r0, #0
 8013ba0:	49ba      	ldr	r1, [pc, #744]	@ (8013e8c <__ieee754_pow+0x78c>)
 8013ba2:	f7ec fe83 	bl	80008ac <__aeabi_ddiv>
 8013ba6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013baa:	4602      	mov	r2, r0
 8013bac:	460b      	mov	r3, r1
 8013bae:	4630      	mov	r0, r6
 8013bb0:	4639      	mov	r1, r7
 8013bb2:	f7ec fd51 	bl	8000658 <__aeabi_dmul>
 8013bb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013bba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013bbe:	106d      	asrs	r5, r5, #1
 8013bc0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013bc4:	f04f 0b00 	mov.w	fp, #0
 8013bc8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013bcc:	4661      	mov	r1, ip
 8013bce:	2200      	movs	r2, #0
 8013bd0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013bd4:	4658      	mov	r0, fp
 8013bd6:	46e1      	mov	r9, ip
 8013bd8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013bdc:	4614      	mov	r4, r2
 8013bde:	461d      	mov	r5, r3
 8013be0:	f7ec fd3a 	bl	8000658 <__aeabi_dmul>
 8013be4:	4602      	mov	r2, r0
 8013be6:	460b      	mov	r3, r1
 8013be8:	4630      	mov	r0, r6
 8013bea:	4639      	mov	r1, r7
 8013bec:	f7ec fb7c 	bl	80002e8 <__aeabi_dsub>
 8013bf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013bf4:	4606      	mov	r6, r0
 8013bf6:	460f      	mov	r7, r1
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	f7ec fb74 	bl	80002e8 <__aeabi_dsub>
 8013c00:	4602      	mov	r2, r0
 8013c02:	460b      	mov	r3, r1
 8013c04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013c08:	f7ec fb6e 	bl	80002e8 <__aeabi_dsub>
 8013c0c:	465a      	mov	r2, fp
 8013c0e:	464b      	mov	r3, r9
 8013c10:	f7ec fd22 	bl	8000658 <__aeabi_dmul>
 8013c14:	4602      	mov	r2, r0
 8013c16:	460b      	mov	r3, r1
 8013c18:	4630      	mov	r0, r6
 8013c1a:	4639      	mov	r1, r7
 8013c1c:	f7ec fb64 	bl	80002e8 <__aeabi_dsub>
 8013c20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013c24:	f7ec fd18 	bl	8000658 <__aeabi_dmul>
 8013c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013c30:	4610      	mov	r0, r2
 8013c32:	4619      	mov	r1, r3
 8013c34:	f7ec fd10 	bl	8000658 <__aeabi_dmul>
 8013c38:	a37d      	add	r3, pc, #500	@ (adr r3, 8013e30 <__ieee754_pow+0x730>)
 8013c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c3e:	4604      	mov	r4, r0
 8013c40:	460d      	mov	r5, r1
 8013c42:	f7ec fd09 	bl	8000658 <__aeabi_dmul>
 8013c46:	a37c      	add	r3, pc, #496	@ (adr r3, 8013e38 <__ieee754_pow+0x738>)
 8013c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c4c:	f7ec fb4e 	bl	80002ec <__adddf3>
 8013c50:	4622      	mov	r2, r4
 8013c52:	462b      	mov	r3, r5
 8013c54:	f7ec fd00 	bl	8000658 <__aeabi_dmul>
 8013c58:	a379      	add	r3, pc, #484	@ (adr r3, 8013e40 <__ieee754_pow+0x740>)
 8013c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5e:	f7ec fb45 	bl	80002ec <__adddf3>
 8013c62:	4622      	mov	r2, r4
 8013c64:	462b      	mov	r3, r5
 8013c66:	f7ec fcf7 	bl	8000658 <__aeabi_dmul>
 8013c6a:	a377      	add	r3, pc, #476	@ (adr r3, 8013e48 <__ieee754_pow+0x748>)
 8013c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c70:	f7ec fb3c 	bl	80002ec <__adddf3>
 8013c74:	4622      	mov	r2, r4
 8013c76:	462b      	mov	r3, r5
 8013c78:	f7ec fcee 	bl	8000658 <__aeabi_dmul>
 8013c7c:	a374      	add	r3, pc, #464	@ (adr r3, 8013e50 <__ieee754_pow+0x750>)
 8013c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c82:	f7ec fb33 	bl	80002ec <__adddf3>
 8013c86:	4622      	mov	r2, r4
 8013c88:	462b      	mov	r3, r5
 8013c8a:	f7ec fce5 	bl	8000658 <__aeabi_dmul>
 8013c8e:	a372      	add	r3, pc, #456	@ (adr r3, 8013e58 <__ieee754_pow+0x758>)
 8013c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c94:	f7ec fb2a 	bl	80002ec <__adddf3>
 8013c98:	4622      	mov	r2, r4
 8013c9a:	4606      	mov	r6, r0
 8013c9c:	460f      	mov	r7, r1
 8013c9e:	462b      	mov	r3, r5
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	f7ec fcd8 	bl	8000658 <__aeabi_dmul>
 8013ca8:	4602      	mov	r2, r0
 8013caa:	460b      	mov	r3, r1
 8013cac:	4630      	mov	r0, r6
 8013cae:	4639      	mov	r1, r7
 8013cb0:	f7ec fcd2 	bl	8000658 <__aeabi_dmul>
 8013cb4:	465a      	mov	r2, fp
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	460d      	mov	r5, r1
 8013cba:	464b      	mov	r3, r9
 8013cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013cc0:	f7ec fb14 	bl	80002ec <__adddf3>
 8013cc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cc8:	f7ec fcc6 	bl	8000658 <__aeabi_dmul>
 8013ccc:	4622      	mov	r2, r4
 8013cce:	462b      	mov	r3, r5
 8013cd0:	f7ec fb0c 	bl	80002ec <__adddf3>
 8013cd4:	465a      	mov	r2, fp
 8013cd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013cda:	464b      	mov	r3, r9
 8013cdc:	4658      	mov	r0, fp
 8013cde:	4649      	mov	r1, r9
 8013ce0:	f7ec fcba 	bl	8000658 <__aeabi_dmul>
 8013ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8013e90 <__ieee754_pow+0x790>)
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	4606      	mov	r6, r0
 8013cea:	460f      	mov	r7, r1
 8013cec:	f7ec fafe 	bl	80002ec <__adddf3>
 8013cf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013cf4:	f7ec fafa 	bl	80002ec <__adddf3>
 8013cf8:	46d8      	mov	r8, fp
 8013cfa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013cfe:	460d      	mov	r5, r1
 8013d00:	465a      	mov	r2, fp
 8013d02:	460b      	mov	r3, r1
 8013d04:	4640      	mov	r0, r8
 8013d06:	4649      	mov	r1, r9
 8013d08:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013d0c:	f7ec fca4 	bl	8000658 <__aeabi_dmul>
 8013d10:	465c      	mov	r4, fp
 8013d12:	4680      	mov	r8, r0
 8013d14:	4689      	mov	r9, r1
 8013d16:	4b5e      	ldr	r3, [pc, #376]	@ (8013e90 <__ieee754_pow+0x790>)
 8013d18:	2200      	movs	r2, #0
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	4629      	mov	r1, r5
 8013d1e:	f7ec fae3 	bl	80002e8 <__aeabi_dsub>
 8013d22:	4632      	mov	r2, r6
 8013d24:	463b      	mov	r3, r7
 8013d26:	f7ec fadf 	bl	80002e8 <__aeabi_dsub>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013d32:	f7ec fad9 	bl	80002e8 <__aeabi_dsub>
 8013d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d3a:	f7ec fc8d 	bl	8000658 <__aeabi_dmul>
 8013d3e:	4622      	mov	r2, r4
 8013d40:	4606      	mov	r6, r0
 8013d42:	460f      	mov	r7, r1
 8013d44:	462b      	mov	r3, r5
 8013d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d4a:	f7ec fc85 	bl	8000658 <__aeabi_dmul>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
 8013d52:	4630      	mov	r0, r6
 8013d54:	4639      	mov	r1, r7
 8013d56:	f7ec fac9 	bl	80002ec <__adddf3>
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	460f      	mov	r7, r1
 8013d5e:	4602      	mov	r2, r0
 8013d60:	460b      	mov	r3, r1
 8013d62:	4640      	mov	r0, r8
 8013d64:	4649      	mov	r1, r9
 8013d66:	f7ec fac1 	bl	80002ec <__adddf3>
 8013d6a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013d6e:	a33c      	add	r3, pc, #240	@ (adr r3, 8013e60 <__ieee754_pow+0x760>)
 8013d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d74:	4658      	mov	r0, fp
 8013d76:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013d7a:	460d      	mov	r5, r1
 8013d7c:	f7ec fc6c 	bl	8000658 <__aeabi_dmul>
 8013d80:	465c      	mov	r4, fp
 8013d82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d86:	4642      	mov	r2, r8
 8013d88:	464b      	mov	r3, r9
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	f7ec faab 	bl	80002e8 <__aeabi_dsub>
 8013d92:	4602      	mov	r2, r0
 8013d94:	460b      	mov	r3, r1
 8013d96:	4630      	mov	r0, r6
 8013d98:	4639      	mov	r1, r7
 8013d9a:	f7ec faa5 	bl	80002e8 <__aeabi_dsub>
 8013d9e:	a332      	add	r3, pc, #200	@ (adr r3, 8013e68 <__ieee754_pow+0x768>)
 8013da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da4:	f7ec fc58 	bl	8000658 <__aeabi_dmul>
 8013da8:	a331      	add	r3, pc, #196	@ (adr r3, 8013e70 <__ieee754_pow+0x770>)
 8013daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dae:	4606      	mov	r6, r0
 8013db0:	460f      	mov	r7, r1
 8013db2:	4620      	mov	r0, r4
 8013db4:	4629      	mov	r1, r5
 8013db6:	f7ec fc4f 	bl	8000658 <__aeabi_dmul>
 8013dba:	4602      	mov	r2, r0
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	4639      	mov	r1, r7
 8013dc2:	f7ec fa93 	bl	80002ec <__adddf3>
 8013dc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013dc8:	4b32      	ldr	r3, [pc, #200]	@ (8013e94 <__ieee754_pow+0x794>)
 8013dca:	4413      	add	r3, r2
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	f7ec fa8c 	bl	80002ec <__adddf3>
 8013dd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013dd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013dda:	f7ec fbd3 	bl	8000584 <__aeabi_i2d>
 8013dde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013de0:	4b2d      	ldr	r3, [pc, #180]	@ (8013e98 <__ieee754_pow+0x798>)
 8013de2:	4413      	add	r3, r2
 8013de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013de8:	4606      	mov	r6, r0
 8013dea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013dee:	460f      	mov	r7, r1
 8013df0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013df4:	f7ec fa7a 	bl	80002ec <__adddf3>
 8013df8:	4642      	mov	r2, r8
 8013dfa:	464b      	mov	r3, r9
 8013dfc:	f7ec fa76 	bl	80002ec <__adddf3>
 8013e00:	4632      	mov	r2, r6
 8013e02:	463b      	mov	r3, r7
 8013e04:	f7ec fa72 	bl	80002ec <__adddf3>
 8013e08:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013e0c:	4632      	mov	r2, r6
 8013e0e:	463b      	mov	r3, r7
 8013e10:	4658      	mov	r0, fp
 8013e12:	460d      	mov	r5, r1
 8013e14:	f7ec fa68 	bl	80002e8 <__aeabi_dsub>
 8013e18:	4642      	mov	r2, r8
 8013e1a:	464b      	mov	r3, r9
 8013e1c:	f7ec fa64 	bl	80002e8 <__aeabi_dsub>
 8013e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e24:	f7ec fa60 	bl	80002e8 <__aeabi_dsub>
 8013e28:	465c      	mov	r4, fp
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	e036      	b.n	8013e9c <__ieee754_pow+0x79c>
 8013e2e:	bf00      	nop
 8013e30:	4a454eef 	.word	0x4a454eef
 8013e34:	3fca7e28 	.word	0x3fca7e28
 8013e38:	93c9db65 	.word	0x93c9db65
 8013e3c:	3fcd864a 	.word	0x3fcd864a
 8013e40:	a91d4101 	.word	0xa91d4101
 8013e44:	3fd17460 	.word	0x3fd17460
 8013e48:	518f264d 	.word	0x518f264d
 8013e4c:	3fd55555 	.word	0x3fd55555
 8013e50:	db6fabff 	.word	0xdb6fabff
 8013e54:	3fdb6db6 	.word	0x3fdb6db6
 8013e58:	33333303 	.word	0x33333303
 8013e5c:	3fe33333 	.word	0x3fe33333
 8013e60:	e0000000 	.word	0xe0000000
 8013e64:	3feec709 	.word	0x3feec709
 8013e68:	dc3a03fd 	.word	0xdc3a03fd
 8013e6c:	3feec709 	.word	0x3feec709
 8013e70:	145b01f5 	.word	0x145b01f5
 8013e74:	be3e2fe0 	.word	0xbe3e2fe0
 8013e78:	7ff00000 	.word	0x7ff00000
 8013e7c:	43400000 	.word	0x43400000
 8013e80:	0003988e 	.word	0x0003988e
 8013e84:	000bb679 	.word	0x000bb679
 8013e88:	08018618 	.word	0x08018618
 8013e8c:	3ff00000 	.word	0x3ff00000
 8013e90:	40080000 	.word	0x40080000
 8013e94:	080185f8 	.word	0x080185f8
 8013e98:	08018608 	.word	0x08018608
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ea2:	e5d7      	b.n	8013a54 <__ieee754_pow+0x354>
 8013ea4:	f04f 0a01 	mov.w	sl, #1
 8013ea8:	e65e      	b.n	8013b68 <__ieee754_pow+0x468>
 8013eaa:	a3b4      	add	r3, pc, #720	@ (adr r3, 801417c <__ieee754_pow+0xa7c>)
 8013eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	4639      	mov	r1, r7
 8013eb4:	f7ec fa1a 	bl	80002ec <__adddf3>
 8013eb8:	4642      	mov	r2, r8
 8013eba:	e9cd 0100 	strd	r0, r1, [sp]
 8013ebe:	464b      	mov	r3, r9
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	4629      	mov	r1, r5
 8013ec4:	f7ec fa10 	bl	80002e8 <__aeabi_dsub>
 8013ec8:	4602      	mov	r2, r0
 8013eca:	460b      	mov	r3, r1
 8013ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ed0:	f7ec fe52 	bl	8000b78 <__aeabi_dcmpgt>
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	f47f ae00 	bne.w	8013ada <__ieee754_pow+0x3da>
 8013eda:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013ede:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013ee2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013ee6:	fa43 fa0a 	asr.w	sl, r3, sl
 8013eea:	44da      	add	sl, fp
 8013eec:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013ef0:	489d      	ldr	r0, [pc, #628]	@ (8014168 <__ieee754_pow+0xa68>)
 8013ef2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013ef6:	4108      	asrs	r0, r1
 8013ef8:	ea00 030a 	and.w	r3, r0, sl
 8013efc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013f00:	f1c1 0114 	rsb	r1, r1, #20
 8013f04:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013f08:	fa4a fa01 	asr.w	sl, sl, r1
 8013f0c:	f1bb 0f00 	cmp.w	fp, #0
 8013f10:	4640      	mov	r0, r8
 8013f12:	4649      	mov	r1, r9
 8013f14:	f04f 0200 	mov.w	r2, #0
 8013f18:	bfb8      	it	lt
 8013f1a:	f1ca 0a00 	rsblt	sl, sl, #0
 8013f1e:	f7ec f9e3 	bl	80002e8 <__aeabi_dsub>
 8013f22:	4680      	mov	r8, r0
 8013f24:	4689      	mov	r9, r1
 8013f26:	4632      	mov	r2, r6
 8013f28:	463b      	mov	r3, r7
 8013f2a:	4640      	mov	r0, r8
 8013f2c:	4649      	mov	r1, r9
 8013f2e:	f7ec f9dd 	bl	80002ec <__adddf3>
 8013f32:	2400      	movs	r4, #0
 8013f34:	a37c      	add	r3, pc, #496	@ (adr r3, 8014128 <__ieee754_pow+0xa28>)
 8013f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	460d      	mov	r5, r1
 8013f3e:	f7ec fb8b 	bl	8000658 <__aeabi_dmul>
 8013f42:	4642      	mov	r2, r8
 8013f44:	e9cd 0100 	strd	r0, r1, [sp]
 8013f48:	464b      	mov	r3, r9
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	4629      	mov	r1, r5
 8013f4e:	f7ec f9cb 	bl	80002e8 <__aeabi_dsub>
 8013f52:	4602      	mov	r2, r0
 8013f54:	460b      	mov	r3, r1
 8013f56:	4630      	mov	r0, r6
 8013f58:	4639      	mov	r1, r7
 8013f5a:	f7ec f9c5 	bl	80002e8 <__aeabi_dsub>
 8013f5e:	a374      	add	r3, pc, #464	@ (adr r3, 8014130 <__ieee754_pow+0xa30>)
 8013f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f64:	f7ec fb78 	bl	8000658 <__aeabi_dmul>
 8013f68:	a373      	add	r3, pc, #460	@ (adr r3, 8014138 <__ieee754_pow+0xa38>)
 8013f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6e:	4680      	mov	r8, r0
 8013f70:	4689      	mov	r9, r1
 8013f72:	4620      	mov	r0, r4
 8013f74:	4629      	mov	r1, r5
 8013f76:	f7ec fb6f 	bl	8000658 <__aeabi_dmul>
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	4640      	mov	r0, r8
 8013f80:	4649      	mov	r1, r9
 8013f82:	f7ec f9b3 	bl	80002ec <__adddf3>
 8013f86:	4604      	mov	r4, r0
 8013f88:	460d      	mov	r5, r1
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f92:	f7ec f9ab 	bl	80002ec <__adddf3>
 8013f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f9a:	4680      	mov	r8, r0
 8013f9c:	4689      	mov	r9, r1
 8013f9e:	f7ec f9a3 	bl	80002e8 <__aeabi_dsub>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	4629      	mov	r1, r5
 8013faa:	f7ec f99d 	bl	80002e8 <__aeabi_dsub>
 8013fae:	4642      	mov	r2, r8
 8013fb0:	4606      	mov	r6, r0
 8013fb2:	460f      	mov	r7, r1
 8013fb4:	464b      	mov	r3, r9
 8013fb6:	4640      	mov	r0, r8
 8013fb8:	4649      	mov	r1, r9
 8013fba:	f7ec fb4d 	bl	8000658 <__aeabi_dmul>
 8013fbe:	a360      	add	r3, pc, #384	@ (adr r3, 8014140 <__ieee754_pow+0xa40>)
 8013fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	460d      	mov	r5, r1
 8013fc8:	f7ec fb46 	bl	8000658 <__aeabi_dmul>
 8013fcc:	a35e      	add	r3, pc, #376	@ (adr r3, 8014148 <__ieee754_pow+0xa48>)
 8013fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd2:	f7ec f989 	bl	80002e8 <__aeabi_dsub>
 8013fd6:	4622      	mov	r2, r4
 8013fd8:	462b      	mov	r3, r5
 8013fda:	f7ec fb3d 	bl	8000658 <__aeabi_dmul>
 8013fde:	a35c      	add	r3, pc, #368	@ (adr r3, 8014150 <__ieee754_pow+0xa50>)
 8013fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe4:	f7ec f982 	bl	80002ec <__adddf3>
 8013fe8:	4622      	mov	r2, r4
 8013fea:	462b      	mov	r3, r5
 8013fec:	f7ec fb34 	bl	8000658 <__aeabi_dmul>
 8013ff0:	a359      	add	r3, pc, #356	@ (adr r3, 8014158 <__ieee754_pow+0xa58>)
 8013ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff6:	f7ec f977 	bl	80002e8 <__aeabi_dsub>
 8013ffa:	4622      	mov	r2, r4
 8013ffc:	462b      	mov	r3, r5
 8013ffe:	f7ec fb2b 	bl	8000658 <__aeabi_dmul>
 8014002:	a357      	add	r3, pc, #348	@ (adr r3, 8014160 <__ieee754_pow+0xa60>)
 8014004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014008:	f7ec f970 	bl	80002ec <__adddf3>
 801400c:	4622      	mov	r2, r4
 801400e:	462b      	mov	r3, r5
 8014010:	f7ec fb22 	bl	8000658 <__aeabi_dmul>
 8014014:	4602      	mov	r2, r0
 8014016:	460b      	mov	r3, r1
 8014018:	4640      	mov	r0, r8
 801401a:	4649      	mov	r1, r9
 801401c:	f7ec f964 	bl	80002e8 <__aeabi_dsub>
 8014020:	4604      	mov	r4, r0
 8014022:	460d      	mov	r5, r1
 8014024:	4602      	mov	r2, r0
 8014026:	460b      	mov	r3, r1
 8014028:	4640      	mov	r0, r8
 801402a:	4649      	mov	r1, r9
 801402c:	f7ec fb14 	bl	8000658 <__aeabi_dmul>
 8014030:	2200      	movs	r2, #0
 8014032:	e9cd 0100 	strd	r0, r1, [sp]
 8014036:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801403a:	4620      	mov	r0, r4
 801403c:	4629      	mov	r1, r5
 801403e:	f7ec f953 	bl	80002e8 <__aeabi_dsub>
 8014042:	4602      	mov	r2, r0
 8014044:	460b      	mov	r3, r1
 8014046:	e9dd 0100 	ldrd	r0, r1, [sp]
 801404a:	f7ec fc2f 	bl	80008ac <__aeabi_ddiv>
 801404e:	4632      	mov	r2, r6
 8014050:	4604      	mov	r4, r0
 8014052:	460d      	mov	r5, r1
 8014054:	463b      	mov	r3, r7
 8014056:	4640      	mov	r0, r8
 8014058:	4649      	mov	r1, r9
 801405a:	f7ec fafd 	bl	8000658 <__aeabi_dmul>
 801405e:	4632      	mov	r2, r6
 8014060:	463b      	mov	r3, r7
 8014062:	f7ec f943 	bl	80002ec <__adddf3>
 8014066:	4602      	mov	r2, r0
 8014068:	460b      	mov	r3, r1
 801406a:	4620      	mov	r0, r4
 801406c:	4629      	mov	r1, r5
 801406e:	f7ec f93b 	bl	80002e8 <__aeabi_dsub>
 8014072:	4642      	mov	r2, r8
 8014074:	464b      	mov	r3, r9
 8014076:	f7ec f937 	bl	80002e8 <__aeabi_dsub>
 801407a:	460b      	mov	r3, r1
 801407c:	4602      	mov	r2, r0
 801407e:	493b      	ldr	r1, [pc, #236]	@ (801416c <__ieee754_pow+0xa6c>)
 8014080:	2000      	movs	r0, #0
 8014082:	f7ec f931 	bl	80002e8 <__aeabi_dsub>
 8014086:	ec41 0b10 	vmov	d0, r0, r1
 801408a:	ee10 3a90 	vmov	r3, s1
 801408e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014096:	da30      	bge.n	80140fa <__ieee754_pow+0x9fa>
 8014098:	4650      	mov	r0, sl
 801409a:	f000 fa15 	bl	80144c8 <scalbn>
 801409e:	ec51 0b10 	vmov	r0, r1, d0
 80140a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140a6:	f7ff bbd2 	b.w	801384e <__ieee754_pow+0x14e>
 80140aa:	4c31      	ldr	r4, [pc, #196]	@ (8014170 <__ieee754_pow+0xa70>)
 80140ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80140b0:	42a3      	cmp	r3, r4
 80140b2:	d91a      	bls.n	80140ea <__ieee754_pow+0x9ea>
 80140b4:	4b2f      	ldr	r3, [pc, #188]	@ (8014174 <__ieee754_pow+0xa74>)
 80140b6:	440b      	add	r3, r1
 80140b8:	4303      	orrs	r3, r0
 80140ba:	d009      	beq.n	80140d0 <__ieee754_pow+0x9d0>
 80140bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140c0:	2200      	movs	r2, #0
 80140c2:	2300      	movs	r3, #0
 80140c4:	f7ec fd3a 	bl	8000b3c <__aeabi_dcmplt>
 80140c8:	3800      	subs	r0, #0
 80140ca:	bf18      	it	ne
 80140cc:	2001      	movne	r0, #1
 80140ce:	e42b      	b.n	8013928 <__ieee754_pow+0x228>
 80140d0:	4642      	mov	r2, r8
 80140d2:	464b      	mov	r3, r9
 80140d4:	f7ec f908 	bl	80002e8 <__aeabi_dsub>
 80140d8:	4632      	mov	r2, r6
 80140da:	463b      	mov	r3, r7
 80140dc:	f7ec fd42 	bl	8000b64 <__aeabi_dcmpge>
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d1eb      	bne.n	80140bc <__ieee754_pow+0x9bc>
 80140e4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8014184 <__ieee754_pow+0xa84>
 80140e8:	e6f7      	b.n	8013eda <__ieee754_pow+0x7da>
 80140ea:	469a      	mov	sl, r3
 80140ec:	4b22      	ldr	r3, [pc, #136]	@ (8014178 <__ieee754_pow+0xa78>)
 80140ee:	459a      	cmp	sl, r3
 80140f0:	f63f aef3 	bhi.w	8013eda <__ieee754_pow+0x7da>
 80140f4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80140f8:	e715      	b.n	8013f26 <__ieee754_pow+0x826>
 80140fa:	ec51 0b10 	vmov	r0, r1, d0
 80140fe:	4619      	mov	r1, r3
 8014100:	e7cf      	b.n	80140a2 <__ieee754_pow+0x9a2>
 8014102:	491a      	ldr	r1, [pc, #104]	@ (801416c <__ieee754_pow+0xa6c>)
 8014104:	2000      	movs	r0, #0
 8014106:	f7ff bb18 	b.w	801373a <__ieee754_pow+0x3a>
 801410a:	2000      	movs	r0, #0
 801410c:	2100      	movs	r1, #0
 801410e:	f7ff bb14 	b.w	801373a <__ieee754_pow+0x3a>
 8014112:	4630      	mov	r0, r6
 8014114:	4639      	mov	r1, r7
 8014116:	f7ff bb10 	b.w	801373a <__ieee754_pow+0x3a>
 801411a:	460c      	mov	r4, r1
 801411c:	f7ff bb5e 	b.w	80137dc <__ieee754_pow+0xdc>
 8014120:	2400      	movs	r4, #0
 8014122:	f7ff bb49 	b.w	80137b8 <__ieee754_pow+0xb8>
 8014126:	bf00      	nop
 8014128:	00000000 	.word	0x00000000
 801412c:	3fe62e43 	.word	0x3fe62e43
 8014130:	fefa39ef 	.word	0xfefa39ef
 8014134:	3fe62e42 	.word	0x3fe62e42
 8014138:	0ca86c39 	.word	0x0ca86c39
 801413c:	be205c61 	.word	0xbe205c61
 8014140:	72bea4d0 	.word	0x72bea4d0
 8014144:	3e663769 	.word	0x3e663769
 8014148:	c5d26bf1 	.word	0xc5d26bf1
 801414c:	3ebbbd41 	.word	0x3ebbbd41
 8014150:	af25de2c 	.word	0xaf25de2c
 8014154:	3f11566a 	.word	0x3f11566a
 8014158:	16bebd93 	.word	0x16bebd93
 801415c:	3f66c16c 	.word	0x3f66c16c
 8014160:	5555553e 	.word	0x5555553e
 8014164:	3fc55555 	.word	0x3fc55555
 8014168:	fff00000 	.word	0xfff00000
 801416c:	3ff00000 	.word	0x3ff00000
 8014170:	4090cbff 	.word	0x4090cbff
 8014174:	3f6f3400 	.word	0x3f6f3400
 8014178:	3fe00000 	.word	0x3fe00000
 801417c:	652b82fe 	.word	0x652b82fe
 8014180:	3c971547 	.word	0x3c971547
 8014184:	4090cc00 	.word	0x4090cc00

08014188 <atan>:
 8014188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801418c:	ec55 4b10 	vmov	r4, r5, d0
 8014190:	4bbf      	ldr	r3, [pc, #764]	@ (8014490 <atan+0x308>)
 8014192:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014196:	429e      	cmp	r6, r3
 8014198:	46ab      	mov	fp, r5
 801419a:	d918      	bls.n	80141ce <atan+0x46>
 801419c:	4bbd      	ldr	r3, [pc, #756]	@ (8014494 <atan+0x30c>)
 801419e:	429e      	cmp	r6, r3
 80141a0:	d801      	bhi.n	80141a6 <atan+0x1e>
 80141a2:	d109      	bne.n	80141b8 <atan+0x30>
 80141a4:	b144      	cbz	r4, 80141b8 <atan+0x30>
 80141a6:	4622      	mov	r2, r4
 80141a8:	462b      	mov	r3, r5
 80141aa:	4620      	mov	r0, r4
 80141ac:	4629      	mov	r1, r5
 80141ae:	f7ec f89d 	bl	80002ec <__adddf3>
 80141b2:	4604      	mov	r4, r0
 80141b4:	460d      	mov	r5, r1
 80141b6:	e006      	b.n	80141c6 <atan+0x3e>
 80141b8:	f1bb 0f00 	cmp.w	fp, #0
 80141bc:	f340 812b 	ble.w	8014416 <atan+0x28e>
 80141c0:	a597      	add	r5, pc, #604	@ (adr r5, 8014420 <atan+0x298>)
 80141c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80141c6:	ec45 4b10 	vmov	d0, r4, r5
 80141ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ce:	4bb2      	ldr	r3, [pc, #712]	@ (8014498 <atan+0x310>)
 80141d0:	429e      	cmp	r6, r3
 80141d2:	d813      	bhi.n	80141fc <atan+0x74>
 80141d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80141d8:	429e      	cmp	r6, r3
 80141da:	d80c      	bhi.n	80141f6 <atan+0x6e>
 80141dc:	a392      	add	r3, pc, #584	@ (adr r3, 8014428 <atan+0x2a0>)
 80141de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e2:	4620      	mov	r0, r4
 80141e4:	4629      	mov	r1, r5
 80141e6:	f7ec f881 	bl	80002ec <__adddf3>
 80141ea:	4bac      	ldr	r3, [pc, #688]	@ (801449c <atan+0x314>)
 80141ec:	2200      	movs	r2, #0
 80141ee:	f7ec fcc3 	bl	8000b78 <__aeabi_dcmpgt>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d1e7      	bne.n	80141c6 <atan+0x3e>
 80141f6:	f04f 3aff 	mov.w	sl, #4294967295
 80141fa:	e029      	b.n	8014250 <atan+0xc8>
 80141fc:	f000 f95c 	bl	80144b8 <fabs>
 8014200:	4ba7      	ldr	r3, [pc, #668]	@ (80144a0 <atan+0x318>)
 8014202:	429e      	cmp	r6, r3
 8014204:	ec55 4b10 	vmov	r4, r5, d0
 8014208:	f200 80bc 	bhi.w	8014384 <atan+0x1fc>
 801420c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014210:	429e      	cmp	r6, r3
 8014212:	f200 809e 	bhi.w	8014352 <atan+0x1ca>
 8014216:	4622      	mov	r2, r4
 8014218:	462b      	mov	r3, r5
 801421a:	4620      	mov	r0, r4
 801421c:	4629      	mov	r1, r5
 801421e:	f7ec f865 	bl	80002ec <__adddf3>
 8014222:	4b9e      	ldr	r3, [pc, #632]	@ (801449c <atan+0x314>)
 8014224:	2200      	movs	r2, #0
 8014226:	f7ec f85f 	bl	80002e8 <__aeabi_dsub>
 801422a:	2200      	movs	r2, #0
 801422c:	4606      	mov	r6, r0
 801422e:	460f      	mov	r7, r1
 8014230:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014234:	4620      	mov	r0, r4
 8014236:	4629      	mov	r1, r5
 8014238:	f7ec f858 	bl	80002ec <__adddf3>
 801423c:	4602      	mov	r2, r0
 801423e:	460b      	mov	r3, r1
 8014240:	4630      	mov	r0, r6
 8014242:	4639      	mov	r1, r7
 8014244:	f7ec fb32 	bl	80008ac <__aeabi_ddiv>
 8014248:	f04f 0a00 	mov.w	sl, #0
 801424c:	4604      	mov	r4, r0
 801424e:	460d      	mov	r5, r1
 8014250:	4622      	mov	r2, r4
 8014252:	462b      	mov	r3, r5
 8014254:	4620      	mov	r0, r4
 8014256:	4629      	mov	r1, r5
 8014258:	f7ec f9fe 	bl	8000658 <__aeabi_dmul>
 801425c:	4602      	mov	r2, r0
 801425e:	460b      	mov	r3, r1
 8014260:	4680      	mov	r8, r0
 8014262:	4689      	mov	r9, r1
 8014264:	f7ec f9f8 	bl	8000658 <__aeabi_dmul>
 8014268:	a371      	add	r3, pc, #452	@ (adr r3, 8014430 <atan+0x2a8>)
 801426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426e:	4606      	mov	r6, r0
 8014270:	460f      	mov	r7, r1
 8014272:	f7ec f9f1 	bl	8000658 <__aeabi_dmul>
 8014276:	a370      	add	r3, pc, #448	@ (adr r3, 8014438 <atan+0x2b0>)
 8014278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427c:	f7ec f836 	bl	80002ec <__adddf3>
 8014280:	4632      	mov	r2, r6
 8014282:	463b      	mov	r3, r7
 8014284:	f7ec f9e8 	bl	8000658 <__aeabi_dmul>
 8014288:	a36d      	add	r3, pc, #436	@ (adr r3, 8014440 <atan+0x2b8>)
 801428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801428e:	f7ec f82d 	bl	80002ec <__adddf3>
 8014292:	4632      	mov	r2, r6
 8014294:	463b      	mov	r3, r7
 8014296:	f7ec f9df 	bl	8000658 <__aeabi_dmul>
 801429a:	a36b      	add	r3, pc, #428	@ (adr r3, 8014448 <atan+0x2c0>)
 801429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a0:	f7ec f824 	bl	80002ec <__adddf3>
 80142a4:	4632      	mov	r2, r6
 80142a6:	463b      	mov	r3, r7
 80142a8:	f7ec f9d6 	bl	8000658 <__aeabi_dmul>
 80142ac:	a368      	add	r3, pc, #416	@ (adr r3, 8014450 <atan+0x2c8>)
 80142ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b2:	f7ec f81b 	bl	80002ec <__adddf3>
 80142b6:	4632      	mov	r2, r6
 80142b8:	463b      	mov	r3, r7
 80142ba:	f7ec f9cd 	bl	8000658 <__aeabi_dmul>
 80142be:	a366      	add	r3, pc, #408	@ (adr r3, 8014458 <atan+0x2d0>)
 80142c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c4:	f7ec f812 	bl	80002ec <__adddf3>
 80142c8:	4642      	mov	r2, r8
 80142ca:	464b      	mov	r3, r9
 80142cc:	f7ec f9c4 	bl	8000658 <__aeabi_dmul>
 80142d0:	a363      	add	r3, pc, #396	@ (adr r3, 8014460 <atan+0x2d8>)
 80142d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d6:	4680      	mov	r8, r0
 80142d8:	4689      	mov	r9, r1
 80142da:	4630      	mov	r0, r6
 80142dc:	4639      	mov	r1, r7
 80142de:	f7ec f9bb 	bl	8000658 <__aeabi_dmul>
 80142e2:	a361      	add	r3, pc, #388	@ (adr r3, 8014468 <atan+0x2e0>)
 80142e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e8:	f7eb fffe 	bl	80002e8 <__aeabi_dsub>
 80142ec:	4632      	mov	r2, r6
 80142ee:	463b      	mov	r3, r7
 80142f0:	f7ec f9b2 	bl	8000658 <__aeabi_dmul>
 80142f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8014470 <atan+0x2e8>)
 80142f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fa:	f7eb fff5 	bl	80002e8 <__aeabi_dsub>
 80142fe:	4632      	mov	r2, r6
 8014300:	463b      	mov	r3, r7
 8014302:	f7ec f9a9 	bl	8000658 <__aeabi_dmul>
 8014306:	a35c      	add	r3, pc, #368	@ (adr r3, 8014478 <atan+0x2f0>)
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	f7eb ffec 	bl	80002e8 <__aeabi_dsub>
 8014310:	4632      	mov	r2, r6
 8014312:	463b      	mov	r3, r7
 8014314:	f7ec f9a0 	bl	8000658 <__aeabi_dmul>
 8014318:	a359      	add	r3, pc, #356	@ (adr r3, 8014480 <atan+0x2f8>)
 801431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431e:	f7eb ffe3 	bl	80002e8 <__aeabi_dsub>
 8014322:	4632      	mov	r2, r6
 8014324:	463b      	mov	r3, r7
 8014326:	f7ec f997 	bl	8000658 <__aeabi_dmul>
 801432a:	4602      	mov	r2, r0
 801432c:	460b      	mov	r3, r1
 801432e:	4640      	mov	r0, r8
 8014330:	4649      	mov	r1, r9
 8014332:	f7eb ffdb 	bl	80002ec <__adddf3>
 8014336:	4622      	mov	r2, r4
 8014338:	462b      	mov	r3, r5
 801433a:	f7ec f98d 	bl	8000658 <__aeabi_dmul>
 801433e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014342:	4602      	mov	r2, r0
 8014344:	460b      	mov	r3, r1
 8014346:	d148      	bne.n	80143da <atan+0x252>
 8014348:	4620      	mov	r0, r4
 801434a:	4629      	mov	r1, r5
 801434c:	f7eb ffcc 	bl	80002e8 <__aeabi_dsub>
 8014350:	e72f      	b.n	80141b2 <atan+0x2a>
 8014352:	4b52      	ldr	r3, [pc, #328]	@ (801449c <atan+0x314>)
 8014354:	2200      	movs	r2, #0
 8014356:	4620      	mov	r0, r4
 8014358:	4629      	mov	r1, r5
 801435a:	f7eb ffc5 	bl	80002e8 <__aeabi_dsub>
 801435e:	4b4f      	ldr	r3, [pc, #316]	@ (801449c <atan+0x314>)
 8014360:	4606      	mov	r6, r0
 8014362:	460f      	mov	r7, r1
 8014364:	2200      	movs	r2, #0
 8014366:	4620      	mov	r0, r4
 8014368:	4629      	mov	r1, r5
 801436a:	f7eb ffbf 	bl	80002ec <__adddf3>
 801436e:	4602      	mov	r2, r0
 8014370:	460b      	mov	r3, r1
 8014372:	4630      	mov	r0, r6
 8014374:	4639      	mov	r1, r7
 8014376:	f7ec fa99 	bl	80008ac <__aeabi_ddiv>
 801437a:	f04f 0a01 	mov.w	sl, #1
 801437e:	4604      	mov	r4, r0
 8014380:	460d      	mov	r5, r1
 8014382:	e765      	b.n	8014250 <atan+0xc8>
 8014384:	4b47      	ldr	r3, [pc, #284]	@ (80144a4 <atan+0x31c>)
 8014386:	429e      	cmp	r6, r3
 8014388:	d21c      	bcs.n	80143c4 <atan+0x23c>
 801438a:	4b47      	ldr	r3, [pc, #284]	@ (80144a8 <atan+0x320>)
 801438c:	2200      	movs	r2, #0
 801438e:	4620      	mov	r0, r4
 8014390:	4629      	mov	r1, r5
 8014392:	f7eb ffa9 	bl	80002e8 <__aeabi_dsub>
 8014396:	4b44      	ldr	r3, [pc, #272]	@ (80144a8 <atan+0x320>)
 8014398:	4606      	mov	r6, r0
 801439a:	460f      	mov	r7, r1
 801439c:	2200      	movs	r2, #0
 801439e:	4620      	mov	r0, r4
 80143a0:	4629      	mov	r1, r5
 80143a2:	f7ec f959 	bl	8000658 <__aeabi_dmul>
 80143a6:	4b3d      	ldr	r3, [pc, #244]	@ (801449c <atan+0x314>)
 80143a8:	2200      	movs	r2, #0
 80143aa:	f7eb ff9f 	bl	80002ec <__adddf3>
 80143ae:	4602      	mov	r2, r0
 80143b0:	460b      	mov	r3, r1
 80143b2:	4630      	mov	r0, r6
 80143b4:	4639      	mov	r1, r7
 80143b6:	f7ec fa79 	bl	80008ac <__aeabi_ddiv>
 80143ba:	f04f 0a02 	mov.w	sl, #2
 80143be:	4604      	mov	r4, r0
 80143c0:	460d      	mov	r5, r1
 80143c2:	e745      	b.n	8014250 <atan+0xc8>
 80143c4:	4622      	mov	r2, r4
 80143c6:	462b      	mov	r3, r5
 80143c8:	4938      	ldr	r1, [pc, #224]	@ (80144ac <atan+0x324>)
 80143ca:	2000      	movs	r0, #0
 80143cc:	f7ec fa6e 	bl	80008ac <__aeabi_ddiv>
 80143d0:	f04f 0a03 	mov.w	sl, #3
 80143d4:	4604      	mov	r4, r0
 80143d6:	460d      	mov	r5, r1
 80143d8:	e73a      	b.n	8014250 <atan+0xc8>
 80143da:	4b35      	ldr	r3, [pc, #212]	@ (80144b0 <atan+0x328>)
 80143dc:	4e35      	ldr	r6, [pc, #212]	@ (80144b4 <atan+0x32c>)
 80143de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80143e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e6:	f7eb ff7f 	bl	80002e8 <__aeabi_dsub>
 80143ea:	4622      	mov	r2, r4
 80143ec:	462b      	mov	r3, r5
 80143ee:	f7eb ff7b 	bl	80002e8 <__aeabi_dsub>
 80143f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80143f6:	4602      	mov	r2, r0
 80143f8:	460b      	mov	r3, r1
 80143fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80143fe:	f7eb ff73 	bl	80002e8 <__aeabi_dsub>
 8014402:	f1bb 0f00 	cmp.w	fp, #0
 8014406:	4604      	mov	r4, r0
 8014408:	460d      	mov	r5, r1
 801440a:	f6bf aedc 	bge.w	80141c6 <atan+0x3e>
 801440e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014412:	461d      	mov	r5, r3
 8014414:	e6d7      	b.n	80141c6 <atan+0x3e>
 8014416:	a51c      	add	r5, pc, #112	@ (adr r5, 8014488 <atan+0x300>)
 8014418:	e9d5 4500 	ldrd	r4, r5, [r5]
 801441c:	e6d3      	b.n	80141c6 <atan+0x3e>
 801441e:	bf00      	nop
 8014420:	54442d18 	.word	0x54442d18
 8014424:	3ff921fb 	.word	0x3ff921fb
 8014428:	8800759c 	.word	0x8800759c
 801442c:	7e37e43c 	.word	0x7e37e43c
 8014430:	e322da11 	.word	0xe322da11
 8014434:	3f90ad3a 	.word	0x3f90ad3a
 8014438:	24760deb 	.word	0x24760deb
 801443c:	3fa97b4b 	.word	0x3fa97b4b
 8014440:	a0d03d51 	.word	0xa0d03d51
 8014444:	3fb10d66 	.word	0x3fb10d66
 8014448:	c54c206e 	.word	0xc54c206e
 801444c:	3fb745cd 	.word	0x3fb745cd
 8014450:	920083ff 	.word	0x920083ff
 8014454:	3fc24924 	.word	0x3fc24924
 8014458:	5555550d 	.word	0x5555550d
 801445c:	3fd55555 	.word	0x3fd55555
 8014460:	2c6a6c2f 	.word	0x2c6a6c2f
 8014464:	bfa2b444 	.word	0xbfa2b444
 8014468:	52defd9a 	.word	0x52defd9a
 801446c:	3fadde2d 	.word	0x3fadde2d
 8014470:	af749a6d 	.word	0xaf749a6d
 8014474:	3fb3b0f2 	.word	0x3fb3b0f2
 8014478:	fe231671 	.word	0xfe231671
 801447c:	3fbc71c6 	.word	0x3fbc71c6
 8014480:	9998ebc4 	.word	0x9998ebc4
 8014484:	3fc99999 	.word	0x3fc99999
 8014488:	54442d18 	.word	0x54442d18
 801448c:	bff921fb 	.word	0xbff921fb
 8014490:	440fffff 	.word	0x440fffff
 8014494:	7ff00000 	.word	0x7ff00000
 8014498:	3fdbffff 	.word	0x3fdbffff
 801449c:	3ff00000 	.word	0x3ff00000
 80144a0:	3ff2ffff 	.word	0x3ff2ffff
 80144a4:	40038000 	.word	0x40038000
 80144a8:	3ff80000 	.word	0x3ff80000
 80144ac:	bff00000 	.word	0xbff00000
 80144b0:	08018628 	.word	0x08018628
 80144b4:	08018648 	.word	0x08018648

080144b8 <fabs>:
 80144b8:	ec51 0b10 	vmov	r0, r1, d0
 80144bc:	4602      	mov	r2, r0
 80144be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80144c2:	ec43 2b10 	vmov	d0, r2, r3
 80144c6:	4770      	bx	lr

080144c8 <scalbn>:
 80144c8:	b570      	push	{r4, r5, r6, lr}
 80144ca:	ec55 4b10 	vmov	r4, r5, d0
 80144ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80144d2:	4606      	mov	r6, r0
 80144d4:	462b      	mov	r3, r5
 80144d6:	b991      	cbnz	r1, 80144fe <scalbn+0x36>
 80144d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80144dc:	4323      	orrs	r3, r4
 80144de:	d03d      	beq.n	801455c <scalbn+0x94>
 80144e0:	4b35      	ldr	r3, [pc, #212]	@ (80145b8 <scalbn+0xf0>)
 80144e2:	4620      	mov	r0, r4
 80144e4:	4629      	mov	r1, r5
 80144e6:	2200      	movs	r2, #0
 80144e8:	f7ec f8b6 	bl	8000658 <__aeabi_dmul>
 80144ec:	4b33      	ldr	r3, [pc, #204]	@ (80145bc <scalbn+0xf4>)
 80144ee:	429e      	cmp	r6, r3
 80144f0:	4604      	mov	r4, r0
 80144f2:	460d      	mov	r5, r1
 80144f4:	da0f      	bge.n	8014516 <scalbn+0x4e>
 80144f6:	a328      	add	r3, pc, #160	@ (adr r3, 8014598 <scalbn+0xd0>)
 80144f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fc:	e01e      	b.n	801453c <scalbn+0x74>
 80144fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014502:	4291      	cmp	r1, r2
 8014504:	d10b      	bne.n	801451e <scalbn+0x56>
 8014506:	4622      	mov	r2, r4
 8014508:	4620      	mov	r0, r4
 801450a:	4629      	mov	r1, r5
 801450c:	f7eb feee 	bl	80002ec <__adddf3>
 8014510:	4604      	mov	r4, r0
 8014512:	460d      	mov	r5, r1
 8014514:	e022      	b.n	801455c <scalbn+0x94>
 8014516:	460b      	mov	r3, r1
 8014518:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801451c:	3936      	subs	r1, #54	@ 0x36
 801451e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8014522:	4296      	cmp	r6, r2
 8014524:	dd0d      	ble.n	8014542 <scalbn+0x7a>
 8014526:	2d00      	cmp	r5, #0
 8014528:	a11d      	add	r1, pc, #116	@ (adr r1, 80145a0 <scalbn+0xd8>)
 801452a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801452e:	da02      	bge.n	8014536 <scalbn+0x6e>
 8014530:	a11d      	add	r1, pc, #116	@ (adr r1, 80145a8 <scalbn+0xe0>)
 8014532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014536:	a31a      	add	r3, pc, #104	@ (adr r3, 80145a0 <scalbn+0xd8>)
 8014538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453c:	f7ec f88c 	bl	8000658 <__aeabi_dmul>
 8014540:	e7e6      	b.n	8014510 <scalbn+0x48>
 8014542:	1872      	adds	r2, r6, r1
 8014544:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014548:	428a      	cmp	r2, r1
 801454a:	dcec      	bgt.n	8014526 <scalbn+0x5e>
 801454c:	2a00      	cmp	r2, #0
 801454e:	dd08      	ble.n	8014562 <scalbn+0x9a>
 8014550:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014554:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014558:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801455c:	ec45 4b10 	vmov	d0, r4, r5
 8014560:	bd70      	pop	{r4, r5, r6, pc}
 8014562:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8014566:	da08      	bge.n	801457a <scalbn+0xb2>
 8014568:	2d00      	cmp	r5, #0
 801456a:	a10b      	add	r1, pc, #44	@ (adr r1, 8014598 <scalbn+0xd0>)
 801456c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014570:	dac1      	bge.n	80144f6 <scalbn+0x2e>
 8014572:	a10f      	add	r1, pc, #60	@ (adr r1, 80145b0 <scalbn+0xe8>)
 8014574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014578:	e7bd      	b.n	80144f6 <scalbn+0x2e>
 801457a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801457e:	3236      	adds	r2, #54	@ 0x36
 8014580:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014584:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014588:	4620      	mov	r0, r4
 801458a:	4b0d      	ldr	r3, [pc, #52]	@ (80145c0 <scalbn+0xf8>)
 801458c:	4629      	mov	r1, r5
 801458e:	2200      	movs	r2, #0
 8014590:	e7d4      	b.n	801453c <scalbn+0x74>
 8014592:	bf00      	nop
 8014594:	f3af 8000 	nop.w
 8014598:	c2f8f359 	.word	0xc2f8f359
 801459c:	01a56e1f 	.word	0x01a56e1f
 80145a0:	8800759c 	.word	0x8800759c
 80145a4:	7e37e43c 	.word	0x7e37e43c
 80145a8:	8800759c 	.word	0x8800759c
 80145ac:	fe37e43c 	.word	0xfe37e43c
 80145b0:	c2f8f359 	.word	0xc2f8f359
 80145b4:	81a56e1f 	.word	0x81a56e1f
 80145b8:	43500000 	.word	0x43500000
 80145bc:	ffff3cb0 	.word	0xffff3cb0
 80145c0:	3c900000 	.word	0x3c900000

080145c4 <with_errno>:
 80145c4:	b510      	push	{r4, lr}
 80145c6:	ed2d 8b02 	vpush	{d8}
 80145ca:	eeb0 8a40 	vmov.f32	s16, s0
 80145ce:	eef0 8a60 	vmov.f32	s17, s1
 80145d2:	4604      	mov	r4, r0
 80145d4:	f000 ff0c 	bl	80153f0 <__errno>
 80145d8:	eeb0 0a48 	vmov.f32	s0, s16
 80145dc:	eef0 0a68 	vmov.f32	s1, s17
 80145e0:	ecbd 8b02 	vpop	{d8}
 80145e4:	6004      	str	r4, [r0, #0]
 80145e6:	bd10      	pop	{r4, pc}

080145e8 <xflow>:
 80145e8:	4603      	mov	r3, r0
 80145ea:	b507      	push	{r0, r1, r2, lr}
 80145ec:	ec51 0b10 	vmov	r0, r1, d0
 80145f0:	b183      	cbz	r3, 8014614 <xflow+0x2c>
 80145f2:	4602      	mov	r2, r0
 80145f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80145f8:	e9cd 2300 	strd	r2, r3, [sp]
 80145fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014600:	f7ec f82a 	bl	8000658 <__aeabi_dmul>
 8014604:	ec41 0b10 	vmov	d0, r0, r1
 8014608:	2022      	movs	r0, #34	@ 0x22
 801460a:	b003      	add	sp, #12
 801460c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014610:	f7ff bfd8 	b.w	80145c4 <with_errno>
 8014614:	4602      	mov	r2, r0
 8014616:	460b      	mov	r3, r1
 8014618:	e7ee      	b.n	80145f8 <xflow+0x10>
 801461a:	0000      	movs	r0, r0
 801461c:	0000      	movs	r0, r0
	...

08014620 <__math_uflow>:
 8014620:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014628 <__math_uflow+0x8>
 8014624:	f7ff bfe0 	b.w	80145e8 <xflow>
 8014628:	00000000 	.word	0x00000000
 801462c:	10000000 	.word	0x10000000

08014630 <__math_oflow>:
 8014630:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014638 <__math_oflow+0x8>
 8014634:	f7ff bfd8 	b.w	80145e8 <xflow>
 8014638:	00000000 	.word	0x00000000
 801463c:	70000000 	.word	0x70000000

08014640 <abort>:
 8014640:	b508      	push	{r3, lr}
 8014642:	2006      	movs	r0, #6
 8014644:	f000 fe5e 	bl	8015304 <raise>
 8014648:	2001      	movs	r0, #1
 801464a:	f7f9 fd53 	bl	800e0f4 <_exit>
	...

08014650 <malloc>:
 8014650:	4b02      	ldr	r3, [pc, #8]	@ (801465c <malloc+0xc>)
 8014652:	4601      	mov	r1, r0
 8014654:	6818      	ldr	r0, [r3, #0]
 8014656:	f000 b82d 	b.w	80146b4 <_malloc_r>
 801465a:	bf00      	nop
 801465c:	2000003c 	.word	0x2000003c

08014660 <free>:
 8014660:	4b02      	ldr	r3, [pc, #8]	@ (801466c <free+0xc>)
 8014662:	4601      	mov	r1, r0
 8014664:	6818      	ldr	r0, [r3, #0]
 8014666:	f001 bd4b 	b.w	8016100 <_free_r>
 801466a:	bf00      	nop
 801466c:	2000003c 	.word	0x2000003c

08014670 <sbrk_aligned>:
 8014670:	b570      	push	{r4, r5, r6, lr}
 8014672:	4e0f      	ldr	r6, [pc, #60]	@ (80146b0 <sbrk_aligned+0x40>)
 8014674:	460c      	mov	r4, r1
 8014676:	6831      	ldr	r1, [r6, #0]
 8014678:	4605      	mov	r5, r0
 801467a:	b911      	cbnz	r1, 8014682 <sbrk_aligned+0x12>
 801467c:	f000 fe96 	bl	80153ac <_sbrk_r>
 8014680:	6030      	str	r0, [r6, #0]
 8014682:	4621      	mov	r1, r4
 8014684:	4628      	mov	r0, r5
 8014686:	f000 fe91 	bl	80153ac <_sbrk_r>
 801468a:	1c43      	adds	r3, r0, #1
 801468c:	d103      	bne.n	8014696 <sbrk_aligned+0x26>
 801468e:	f04f 34ff 	mov.w	r4, #4294967295
 8014692:	4620      	mov	r0, r4
 8014694:	bd70      	pop	{r4, r5, r6, pc}
 8014696:	1cc4      	adds	r4, r0, #3
 8014698:	f024 0403 	bic.w	r4, r4, #3
 801469c:	42a0      	cmp	r0, r4
 801469e:	d0f8      	beq.n	8014692 <sbrk_aligned+0x22>
 80146a0:	1a21      	subs	r1, r4, r0
 80146a2:	4628      	mov	r0, r5
 80146a4:	f000 fe82 	bl	80153ac <_sbrk_r>
 80146a8:	3001      	adds	r0, #1
 80146aa:	d1f2      	bne.n	8014692 <sbrk_aligned+0x22>
 80146ac:	e7ef      	b.n	801468e <sbrk_aligned+0x1e>
 80146ae:	bf00      	nop
 80146b0:	20000598 	.word	0x20000598

080146b4 <_malloc_r>:
 80146b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146b8:	1ccd      	adds	r5, r1, #3
 80146ba:	f025 0503 	bic.w	r5, r5, #3
 80146be:	3508      	adds	r5, #8
 80146c0:	2d0c      	cmp	r5, #12
 80146c2:	bf38      	it	cc
 80146c4:	250c      	movcc	r5, #12
 80146c6:	2d00      	cmp	r5, #0
 80146c8:	4606      	mov	r6, r0
 80146ca:	db01      	blt.n	80146d0 <_malloc_r+0x1c>
 80146cc:	42a9      	cmp	r1, r5
 80146ce:	d904      	bls.n	80146da <_malloc_r+0x26>
 80146d0:	230c      	movs	r3, #12
 80146d2:	6033      	str	r3, [r6, #0]
 80146d4:	2000      	movs	r0, #0
 80146d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80147b0 <_malloc_r+0xfc>
 80146de:	f000 f869 	bl	80147b4 <__malloc_lock>
 80146e2:	f8d8 3000 	ldr.w	r3, [r8]
 80146e6:	461c      	mov	r4, r3
 80146e8:	bb44      	cbnz	r4, 801473c <_malloc_r+0x88>
 80146ea:	4629      	mov	r1, r5
 80146ec:	4630      	mov	r0, r6
 80146ee:	f7ff ffbf 	bl	8014670 <sbrk_aligned>
 80146f2:	1c43      	adds	r3, r0, #1
 80146f4:	4604      	mov	r4, r0
 80146f6:	d158      	bne.n	80147aa <_malloc_r+0xf6>
 80146f8:	f8d8 4000 	ldr.w	r4, [r8]
 80146fc:	4627      	mov	r7, r4
 80146fe:	2f00      	cmp	r7, #0
 8014700:	d143      	bne.n	801478a <_malloc_r+0xd6>
 8014702:	2c00      	cmp	r4, #0
 8014704:	d04b      	beq.n	801479e <_malloc_r+0xea>
 8014706:	6823      	ldr	r3, [r4, #0]
 8014708:	4639      	mov	r1, r7
 801470a:	4630      	mov	r0, r6
 801470c:	eb04 0903 	add.w	r9, r4, r3
 8014710:	f000 fe4c 	bl	80153ac <_sbrk_r>
 8014714:	4581      	cmp	r9, r0
 8014716:	d142      	bne.n	801479e <_malloc_r+0xea>
 8014718:	6821      	ldr	r1, [r4, #0]
 801471a:	1a6d      	subs	r5, r5, r1
 801471c:	4629      	mov	r1, r5
 801471e:	4630      	mov	r0, r6
 8014720:	f7ff ffa6 	bl	8014670 <sbrk_aligned>
 8014724:	3001      	adds	r0, #1
 8014726:	d03a      	beq.n	801479e <_malloc_r+0xea>
 8014728:	6823      	ldr	r3, [r4, #0]
 801472a:	442b      	add	r3, r5
 801472c:	6023      	str	r3, [r4, #0]
 801472e:	f8d8 3000 	ldr.w	r3, [r8]
 8014732:	685a      	ldr	r2, [r3, #4]
 8014734:	bb62      	cbnz	r2, 8014790 <_malloc_r+0xdc>
 8014736:	f8c8 7000 	str.w	r7, [r8]
 801473a:	e00f      	b.n	801475c <_malloc_r+0xa8>
 801473c:	6822      	ldr	r2, [r4, #0]
 801473e:	1b52      	subs	r2, r2, r5
 8014740:	d420      	bmi.n	8014784 <_malloc_r+0xd0>
 8014742:	2a0b      	cmp	r2, #11
 8014744:	d917      	bls.n	8014776 <_malloc_r+0xc2>
 8014746:	1961      	adds	r1, r4, r5
 8014748:	42a3      	cmp	r3, r4
 801474a:	6025      	str	r5, [r4, #0]
 801474c:	bf18      	it	ne
 801474e:	6059      	strne	r1, [r3, #4]
 8014750:	6863      	ldr	r3, [r4, #4]
 8014752:	bf08      	it	eq
 8014754:	f8c8 1000 	streq.w	r1, [r8]
 8014758:	5162      	str	r2, [r4, r5]
 801475a:	604b      	str	r3, [r1, #4]
 801475c:	4630      	mov	r0, r6
 801475e:	f000 f82f 	bl	80147c0 <__malloc_unlock>
 8014762:	f104 000b 	add.w	r0, r4, #11
 8014766:	1d23      	adds	r3, r4, #4
 8014768:	f020 0007 	bic.w	r0, r0, #7
 801476c:	1ac2      	subs	r2, r0, r3
 801476e:	bf1c      	itt	ne
 8014770:	1a1b      	subne	r3, r3, r0
 8014772:	50a3      	strne	r3, [r4, r2]
 8014774:	e7af      	b.n	80146d6 <_malloc_r+0x22>
 8014776:	6862      	ldr	r2, [r4, #4]
 8014778:	42a3      	cmp	r3, r4
 801477a:	bf0c      	ite	eq
 801477c:	f8c8 2000 	streq.w	r2, [r8]
 8014780:	605a      	strne	r2, [r3, #4]
 8014782:	e7eb      	b.n	801475c <_malloc_r+0xa8>
 8014784:	4623      	mov	r3, r4
 8014786:	6864      	ldr	r4, [r4, #4]
 8014788:	e7ae      	b.n	80146e8 <_malloc_r+0x34>
 801478a:	463c      	mov	r4, r7
 801478c:	687f      	ldr	r7, [r7, #4]
 801478e:	e7b6      	b.n	80146fe <_malloc_r+0x4a>
 8014790:	461a      	mov	r2, r3
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	42a3      	cmp	r3, r4
 8014796:	d1fb      	bne.n	8014790 <_malloc_r+0xdc>
 8014798:	2300      	movs	r3, #0
 801479a:	6053      	str	r3, [r2, #4]
 801479c:	e7de      	b.n	801475c <_malloc_r+0xa8>
 801479e:	230c      	movs	r3, #12
 80147a0:	6033      	str	r3, [r6, #0]
 80147a2:	4630      	mov	r0, r6
 80147a4:	f000 f80c 	bl	80147c0 <__malloc_unlock>
 80147a8:	e794      	b.n	80146d4 <_malloc_r+0x20>
 80147aa:	6005      	str	r5, [r0, #0]
 80147ac:	e7d6      	b.n	801475c <_malloc_r+0xa8>
 80147ae:	bf00      	nop
 80147b0:	2000059c 	.word	0x2000059c

080147b4 <__malloc_lock>:
 80147b4:	4801      	ldr	r0, [pc, #4]	@ (80147bc <__malloc_lock+0x8>)
 80147b6:	f000 be46 	b.w	8015446 <__retarget_lock_acquire_recursive>
 80147ba:	bf00      	nop
 80147bc:	200006e0 	.word	0x200006e0

080147c0 <__malloc_unlock>:
 80147c0:	4801      	ldr	r0, [pc, #4]	@ (80147c8 <__malloc_unlock+0x8>)
 80147c2:	f000 be41 	b.w	8015448 <__retarget_lock_release_recursive>
 80147c6:	bf00      	nop
 80147c8:	200006e0 	.word	0x200006e0

080147cc <__cxa_atexit>:
 80147cc:	b510      	push	{r4, lr}
 80147ce:	4604      	mov	r4, r0
 80147d0:	4804      	ldr	r0, [pc, #16]	@ (80147e4 <__cxa_atexit+0x18>)
 80147d2:	4613      	mov	r3, r2
 80147d4:	b120      	cbz	r0, 80147e0 <__cxa_atexit+0x14>
 80147d6:	460a      	mov	r2, r1
 80147d8:	2002      	movs	r0, #2
 80147da:	4621      	mov	r1, r4
 80147dc:	f3af 8000 	nop.w
 80147e0:	bd10      	pop	{r4, pc}
 80147e2:	bf00      	nop
 80147e4:	00000000 	.word	0x00000000

080147e8 <__cvt>:
 80147e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147ec:	ec57 6b10 	vmov	r6, r7, d0
 80147f0:	2f00      	cmp	r7, #0
 80147f2:	460c      	mov	r4, r1
 80147f4:	4619      	mov	r1, r3
 80147f6:	463b      	mov	r3, r7
 80147f8:	bfbb      	ittet	lt
 80147fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80147fe:	461f      	movlt	r7, r3
 8014800:	2300      	movge	r3, #0
 8014802:	232d      	movlt	r3, #45	@ 0x2d
 8014804:	700b      	strb	r3, [r1, #0]
 8014806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014808:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801480c:	4691      	mov	r9, r2
 801480e:	f023 0820 	bic.w	r8, r3, #32
 8014812:	bfbc      	itt	lt
 8014814:	4632      	movlt	r2, r6
 8014816:	4616      	movlt	r6, r2
 8014818:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801481c:	d005      	beq.n	801482a <__cvt+0x42>
 801481e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014822:	d100      	bne.n	8014826 <__cvt+0x3e>
 8014824:	3401      	adds	r4, #1
 8014826:	2102      	movs	r1, #2
 8014828:	e000      	b.n	801482c <__cvt+0x44>
 801482a:	2103      	movs	r1, #3
 801482c:	ab03      	add	r3, sp, #12
 801482e:	9301      	str	r3, [sp, #4]
 8014830:	ab02      	add	r3, sp, #8
 8014832:	9300      	str	r3, [sp, #0]
 8014834:	ec47 6b10 	vmov	d0, r6, r7
 8014838:	4653      	mov	r3, sl
 801483a:	4622      	mov	r2, r4
 801483c:	f000 fe9c 	bl	8015578 <_dtoa_r>
 8014840:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014844:	4605      	mov	r5, r0
 8014846:	d119      	bne.n	801487c <__cvt+0x94>
 8014848:	f019 0f01 	tst.w	r9, #1
 801484c:	d00e      	beq.n	801486c <__cvt+0x84>
 801484e:	eb00 0904 	add.w	r9, r0, r4
 8014852:	2200      	movs	r2, #0
 8014854:	2300      	movs	r3, #0
 8014856:	4630      	mov	r0, r6
 8014858:	4639      	mov	r1, r7
 801485a:	f7ec f965 	bl	8000b28 <__aeabi_dcmpeq>
 801485e:	b108      	cbz	r0, 8014864 <__cvt+0x7c>
 8014860:	f8cd 900c 	str.w	r9, [sp, #12]
 8014864:	2230      	movs	r2, #48	@ 0x30
 8014866:	9b03      	ldr	r3, [sp, #12]
 8014868:	454b      	cmp	r3, r9
 801486a:	d31e      	bcc.n	80148aa <__cvt+0xc2>
 801486c:	9b03      	ldr	r3, [sp, #12]
 801486e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014870:	1b5b      	subs	r3, r3, r5
 8014872:	4628      	mov	r0, r5
 8014874:	6013      	str	r3, [r2, #0]
 8014876:	b004      	add	sp, #16
 8014878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801487c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014880:	eb00 0904 	add.w	r9, r0, r4
 8014884:	d1e5      	bne.n	8014852 <__cvt+0x6a>
 8014886:	7803      	ldrb	r3, [r0, #0]
 8014888:	2b30      	cmp	r3, #48	@ 0x30
 801488a:	d10a      	bne.n	80148a2 <__cvt+0xba>
 801488c:	2200      	movs	r2, #0
 801488e:	2300      	movs	r3, #0
 8014890:	4630      	mov	r0, r6
 8014892:	4639      	mov	r1, r7
 8014894:	f7ec f948 	bl	8000b28 <__aeabi_dcmpeq>
 8014898:	b918      	cbnz	r0, 80148a2 <__cvt+0xba>
 801489a:	f1c4 0401 	rsb	r4, r4, #1
 801489e:	f8ca 4000 	str.w	r4, [sl]
 80148a2:	f8da 3000 	ldr.w	r3, [sl]
 80148a6:	4499      	add	r9, r3
 80148a8:	e7d3      	b.n	8014852 <__cvt+0x6a>
 80148aa:	1c59      	adds	r1, r3, #1
 80148ac:	9103      	str	r1, [sp, #12]
 80148ae:	701a      	strb	r2, [r3, #0]
 80148b0:	e7d9      	b.n	8014866 <__cvt+0x7e>

080148b2 <__exponent>:
 80148b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148b4:	2900      	cmp	r1, #0
 80148b6:	bfba      	itte	lt
 80148b8:	4249      	neglt	r1, r1
 80148ba:	232d      	movlt	r3, #45	@ 0x2d
 80148bc:	232b      	movge	r3, #43	@ 0x2b
 80148be:	2909      	cmp	r1, #9
 80148c0:	7002      	strb	r2, [r0, #0]
 80148c2:	7043      	strb	r3, [r0, #1]
 80148c4:	dd29      	ble.n	801491a <__exponent+0x68>
 80148c6:	f10d 0307 	add.w	r3, sp, #7
 80148ca:	461d      	mov	r5, r3
 80148cc:	270a      	movs	r7, #10
 80148ce:	461a      	mov	r2, r3
 80148d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80148d4:	fb07 1416 	mls	r4, r7, r6, r1
 80148d8:	3430      	adds	r4, #48	@ 0x30
 80148da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80148de:	460c      	mov	r4, r1
 80148e0:	2c63      	cmp	r4, #99	@ 0x63
 80148e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80148e6:	4631      	mov	r1, r6
 80148e8:	dcf1      	bgt.n	80148ce <__exponent+0x1c>
 80148ea:	3130      	adds	r1, #48	@ 0x30
 80148ec:	1e94      	subs	r4, r2, #2
 80148ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80148f2:	1c41      	adds	r1, r0, #1
 80148f4:	4623      	mov	r3, r4
 80148f6:	42ab      	cmp	r3, r5
 80148f8:	d30a      	bcc.n	8014910 <__exponent+0x5e>
 80148fa:	f10d 0309 	add.w	r3, sp, #9
 80148fe:	1a9b      	subs	r3, r3, r2
 8014900:	42ac      	cmp	r4, r5
 8014902:	bf88      	it	hi
 8014904:	2300      	movhi	r3, #0
 8014906:	3302      	adds	r3, #2
 8014908:	4403      	add	r3, r0
 801490a:	1a18      	subs	r0, r3, r0
 801490c:	b003      	add	sp, #12
 801490e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014910:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014914:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014918:	e7ed      	b.n	80148f6 <__exponent+0x44>
 801491a:	2330      	movs	r3, #48	@ 0x30
 801491c:	3130      	adds	r1, #48	@ 0x30
 801491e:	7083      	strb	r3, [r0, #2]
 8014920:	70c1      	strb	r1, [r0, #3]
 8014922:	1d03      	adds	r3, r0, #4
 8014924:	e7f1      	b.n	801490a <__exponent+0x58>
	...

08014928 <_printf_float>:
 8014928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801492c:	b08d      	sub	sp, #52	@ 0x34
 801492e:	460c      	mov	r4, r1
 8014930:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014934:	4616      	mov	r6, r2
 8014936:	461f      	mov	r7, r3
 8014938:	4605      	mov	r5, r0
 801493a:	f000 fceb 	bl	8015314 <_localeconv_r>
 801493e:	6803      	ldr	r3, [r0, #0]
 8014940:	9304      	str	r3, [sp, #16]
 8014942:	4618      	mov	r0, r3
 8014944:	f7eb fcc4 	bl	80002d0 <strlen>
 8014948:	2300      	movs	r3, #0
 801494a:	930a      	str	r3, [sp, #40]	@ 0x28
 801494c:	f8d8 3000 	ldr.w	r3, [r8]
 8014950:	9005      	str	r0, [sp, #20]
 8014952:	3307      	adds	r3, #7
 8014954:	f023 0307 	bic.w	r3, r3, #7
 8014958:	f103 0208 	add.w	r2, r3, #8
 801495c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014960:	f8d4 b000 	ldr.w	fp, [r4]
 8014964:	f8c8 2000 	str.w	r2, [r8]
 8014968:	e9d3 8900 	ldrd	r8, r9, [r3]
 801496c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014970:	9307      	str	r3, [sp, #28]
 8014972:	f8cd 8018 	str.w	r8, [sp, #24]
 8014976:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801497a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801497e:	4b9c      	ldr	r3, [pc, #624]	@ (8014bf0 <_printf_float+0x2c8>)
 8014980:	f04f 32ff 	mov.w	r2, #4294967295
 8014984:	f7ec f902 	bl	8000b8c <__aeabi_dcmpun>
 8014988:	bb70      	cbnz	r0, 80149e8 <_printf_float+0xc0>
 801498a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801498e:	4b98      	ldr	r3, [pc, #608]	@ (8014bf0 <_printf_float+0x2c8>)
 8014990:	f04f 32ff 	mov.w	r2, #4294967295
 8014994:	f7ec f8dc 	bl	8000b50 <__aeabi_dcmple>
 8014998:	bb30      	cbnz	r0, 80149e8 <_printf_float+0xc0>
 801499a:	2200      	movs	r2, #0
 801499c:	2300      	movs	r3, #0
 801499e:	4640      	mov	r0, r8
 80149a0:	4649      	mov	r1, r9
 80149a2:	f7ec f8cb 	bl	8000b3c <__aeabi_dcmplt>
 80149a6:	b110      	cbz	r0, 80149ae <_printf_float+0x86>
 80149a8:	232d      	movs	r3, #45	@ 0x2d
 80149aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80149ae:	4a91      	ldr	r2, [pc, #580]	@ (8014bf4 <_printf_float+0x2cc>)
 80149b0:	4b91      	ldr	r3, [pc, #580]	@ (8014bf8 <_printf_float+0x2d0>)
 80149b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80149b6:	bf94      	ite	ls
 80149b8:	4690      	movls	r8, r2
 80149ba:	4698      	movhi	r8, r3
 80149bc:	2303      	movs	r3, #3
 80149be:	6123      	str	r3, [r4, #16]
 80149c0:	f02b 0304 	bic.w	r3, fp, #4
 80149c4:	6023      	str	r3, [r4, #0]
 80149c6:	f04f 0900 	mov.w	r9, #0
 80149ca:	9700      	str	r7, [sp, #0]
 80149cc:	4633      	mov	r3, r6
 80149ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80149d0:	4621      	mov	r1, r4
 80149d2:	4628      	mov	r0, r5
 80149d4:	f000 f9d2 	bl	8014d7c <_printf_common>
 80149d8:	3001      	adds	r0, #1
 80149da:	f040 808d 	bne.w	8014af8 <_printf_float+0x1d0>
 80149de:	f04f 30ff 	mov.w	r0, #4294967295
 80149e2:	b00d      	add	sp, #52	@ 0x34
 80149e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e8:	4642      	mov	r2, r8
 80149ea:	464b      	mov	r3, r9
 80149ec:	4640      	mov	r0, r8
 80149ee:	4649      	mov	r1, r9
 80149f0:	f7ec f8cc 	bl	8000b8c <__aeabi_dcmpun>
 80149f4:	b140      	cbz	r0, 8014a08 <_printf_float+0xe0>
 80149f6:	464b      	mov	r3, r9
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	bfbc      	itt	lt
 80149fc:	232d      	movlt	r3, #45	@ 0x2d
 80149fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014a02:	4a7e      	ldr	r2, [pc, #504]	@ (8014bfc <_printf_float+0x2d4>)
 8014a04:	4b7e      	ldr	r3, [pc, #504]	@ (8014c00 <_printf_float+0x2d8>)
 8014a06:	e7d4      	b.n	80149b2 <_printf_float+0x8a>
 8014a08:	6863      	ldr	r3, [r4, #4]
 8014a0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014a0e:	9206      	str	r2, [sp, #24]
 8014a10:	1c5a      	adds	r2, r3, #1
 8014a12:	d13b      	bne.n	8014a8c <_printf_float+0x164>
 8014a14:	2306      	movs	r3, #6
 8014a16:	6063      	str	r3, [r4, #4]
 8014a18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	6022      	str	r2, [r4, #0]
 8014a20:	9303      	str	r3, [sp, #12]
 8014a22:	ab0a      	add	r3, sp, #40	@ 0x28
 8014a24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014a28:	ab09      	add	r3, sp, #36	@ 0x24
 8014a2a:	9300      	str	r3, [sp, #0]
 8014a2c:	6861      	ldr	r1, [r4, #4]
 8014a2e:	ec49 8b10 	vmov	d0, r8, r9
 8014a32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014a36:	4628      	mov	r0, r5
 8014a38:	f7ff fed6 	bl	80147e8 <__cvt>
 8014a3c:	9b06      	ldr	r3, [sp, #24]
 8014a3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014a40:	2b47      	cmp	r3, #71	@ 0x47
 8014a42:	4680      	mov	r8, r0
 8014a44:	d129      	bne.n	8014a9a <_printf_float+0x172>
 8014a46:	1cc8      	adds	r0, r1, #3
 8014a48:	db02      	blt.n	8014a50 <_printf_float+0x128>
 8014a4a:	6863      	ldr	r3, [r4, #4]
 8014a4c:	4299      	cmp	r1, r3
 8014a4e:	dd41      	ble.n	8014ad4 <_printf_float+0x1ac>
 8014a50:	f1aa 0a02 	sub.w	sl, sl, #2
 8014a54:	fa5f fa8a 	uxtb.w	sl, sl
 8014a58:	3901      	subs	r1, #1
 8014a5a:	4652      	mov	r2, sl
 8014a5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014a60:	9109      	str	r1, [sp, #36]	@ 0x24
 8014a62:	f7ff ff26 	bl	80148b2 <__exponent>
 8014a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014a68:	1813      	adds	r3, r2, r0
 8014a6a:	2a01      	cmp	r2, #1
 8014a6c:	4681      	mov	r9, r0
 8014a6e:	6123      	str	r3, [r4, #16]
 8014a70:	dc02      	bgt.n	8014a78 <_printf_float+0x150>
 8014a72:	6822      	ldr	r2, [r4, #0]
 8014a74:	07d2      	lsls	r2, r2, #31
 8014a76:	d501      	bpl.n	8014a7c <_printf_float+0x154>
 8014a78:	3301      	adds	r3, #1
 8014a7a:	6123      	str	r3, [r4, #16]
 8014a7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d0a2      	beq.n	80149ca <_printf_float+0xa2>
 8014a84:	232d      	movs	r3, #45	@ 0x2d
 8014a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a8a:	e79e      	b.n	80149ca <_printf_float+0xa2>
 8014a8c:	9a06      	ldr	r2, [sp, #24]
 8014a8e:	2a47      	cmp	r2, #71	@ 0x47
 8014a90:	d1c2      	bne.n	8014a18 <_printf_float+0xf0>
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d1c0      	bne.n	8014a18 <_printf_float+0xf0>
 8014a96:	2301      	movs	r3, #1
 8014a98:	e7bd      	b.n	8014a16 <_printf_float+0xee>
 8014a9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014a9e:	d9db      	bls.n	8014a58 <_printf_float+0x130>
 8014aa0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014aa4:	d118      	bne.n	8014ad8 <_printf_float+0x1b0>
 8014aa6:	2900      	cmp	r1, #0
 8014aa8:	6863      	ldr	r3, [r4, #4]
 8014aaa:	dd0b      	ble.n	8014ac4 <_printf_float+0x19c>
 8014aac:	6121      	str	r1, [r4, #16]
 8014aae:	b913      	cbnz	r3, 8014ab6 <_printf_float+0x18e>
 8014ab0:	6822      	ldr	r2, [r4, #0]
 8014ab2:	07d0      	lsls	r0, r2, #31
 8014ab4:	d502      	bpl.n	8014abc <_printf_float+0x194>
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	440b      	add	r3, r1
 8014aba:	6123      	str	r3, [r4, #16]
 8014abc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014abe:	f04f 0900 	mov.w	r9, #0
 8014ac2:	e7db      	b.n	8014a7c <_printf_float+0x154>
 8014ac4:	b913      	cbnz	r3, 8014acc <_printf_float+0x1a4>
 8014ac6:	6822      	ldr	r2, [r4, #0]
 8014ac8:	07d2      	lsls	r2, r2, #31
 8014aca:	d501      	bpl.n	8014ad0 <_printf_float+0x1a8>
 8014acc:	3302      	adds	r3, #2
 8014ace:	e7f4      	b.n	8014aba <_printf_float+0x192>
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	e7f2      	b.n	8014aba <_printf_float+0x192>
 8014ad4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ada:	4299      	cmp	r1, r3
 8014adc:	db05      	blt.n	8014aea <_printf_float+0x1c2>
 8014ade:	6823      	ldr	r3, [r4, #0]
 8014ae0:	6121      	str	r1, [r4, #16]
 8014ae2:	07d8      	lsls	r0, r3, #31
 8014ae4:	d5ea      	bpl.n	8014abc <_printf_float+0x194>
 8014ae6:	1c4b      	adds	r3, r1, #1
 8014ae8:	e7e7      	b.n	8014aba <_printf_float+0x192>
 8014aea:	2900      	cmp	r1, #0
 8014aec:	bfd4      	ite	le
 8014aee:	f1c1 0202 	rsble	r2, r1, #2
 8014af2:	2201      	movgt	r2, #1
 8014af4:	4413      	add	r3, r2
 8014af6:	e7e0      	b.n	8014aba <_printf_float+0x192>
 8014af8:	6823      	ldr	r3, [r4, #0]
 8014afa:	055a      	lsls	r2, r3, #21
 8014afc:	d407      	bmi.n	8014b0e <_printf_float+0x1e6>
 8014afe:	6923      	ldr	r3, [r4, #16]
 8014b00:	4642      	mov	r2, r8
 8014b02:	4631      	mov	r1, r6
 8014b04:	4628      	mov	r0, r5
 8014b06:	47b8      	blx	r7
 8014b08:	3001      	adds	r0, #1
 8014b0a:	d12b      	bne.n	8014b64 <_printf_float+0x23c>
 8014b0c:	e767      	b.n	80149de <_printf_float+0xb6>
 8014b0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014b12:	f240 80dd 	bls.w	8014cd0 <_printf_float+0x3a8>
 8014b16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	f7ec f803 	bl	8000b28 <__aeabi_dcmpeq>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d033      	beq.n	8014b8e <_printf_float+0x266>
 8014b26:	4a37      	ldr	r2, [pc, #220]	@ (8014c04 <_printf_float+0x2dc>)
 8014b28:	2301      	movs	r3, #1
 8014b2a:	4631      	mov	r1, r6
 8014b2c:	4628      	mov	r0, r5
 8014b2e:	47b8      	blx	r7
 8014b30:	3001      	adds	r0, #1
 8014b32:	f43f af54 	beq.w	80149de <_printf_float+0xb6>
 8014b36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014b3a:	4543      	cmp	r3, r8
 8014b3c:	db02      	blt.n	8014b44 <_printf_float+0x21c>
 8014b3e:	6823      	ldr	r3, [r4, #0]
 8014b40:	07d8      	lsls	r0, r3, #31
 8014b42:	d50f      	bpl.n	8014b64 <_printf_float+0x23c>
 8014b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b48:	4631      	mov	r1, r6
 8014b4a:	4628      	mov	r0, r5
 8014b4c:	47b8      	blx	r7
 8014b4e:	3001      	adds	r0, #1
 8014b50:	f43f af45 	beq.w	80149de <_printf_float+0xb6>
 8014b54:	f04f 0900 	mov.w	r9, #0
 8014b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8014b5c:	f104 0a1a 	add.w	sl, r4, #26
 8014b60:	45c8      	cmp	r8, r9
 8014b62:	dc09      	bgt.n	8014b78 <_printf_float+0x250>
 8014b64:	6823      	ldr	r3, [r4, #0]
 8014b66:	079b      	lsls	r3, r3, #30
 8014b68:	f100 8103 	bmi.w	8014d72 <_printf_float+0x44a>
 8014b6c:	68e0      	ldr	r0, [r4, #12]
 8014b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014b70:	4298      	cmp	r0, r3
 8014b72:	bfb8      	it	lt
 8014b74:	4618      	movlt	r0, r3
 8014b76:	e734      	b.n	80149e2 <_printf_float+0xba>
 8014b78:	2301      	movs	r3, #1
 8014b7a:	4652      	mov	r2, sl
 8014b7c:	4631      	mov	r1, r6
 8014b7e:	4628      	mov	r0, r5
 8014b80:	47b8      	blx	r7
 8014b82:	3001      	adds	r0, #1
 8014b84:	f43f af2b 	beq.w	80149de <_printf_float+0xb6>
 8014b88:	f109 0901 	add.w	r9, r9, #1
 8014b8c:	e7e8      	b.n	8014b60 <_printf_float+0x238>
 8014b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	dc39      	bgt.n	8014c08 <_printf_float+0x2e0>
 8014b94:	4a1b      	ldr	r2, [pc, #108]	@ (8014c04 <_printf_float+0x2dc>)
 8014b96:	2301      	movs	r3, #1
 8014b98:	4631      	mov	r1, r6
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	47b8      	blx	r7
 8014b9e:	3001      	adds	r0, #1
 8014ba0:	f43f af1d 	beq.w	80149de <_printf_float+0xb6>
 8014ba4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014ba8:	ea59 0303 	orrs.w	r3, r9, r3
 8014bac:	d102      	bne.n	8014bb4 <_printf_float+0x28c>
 8014bae:	6823      	ldr	r3, [r4, #0]
 8014bb0:	07d9      	lsls	r1, r3, #31
 8014bb2:	d5d7      	bpl.n	8014b64 <_printf_float+0x23c>
 8014bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bb8:	4631      	mov	r1, r6
 8014bba:	4628      	mov	r0, r5
 8014bbc:	47b8      	blx	r7
 8014bbe:	3001      	adds	r0, #1
 8014bc0:	f43f af0d 	beq.w	80149de <_printf_float+0xb6>
 8014bc4:	f04f 0a00 	mov.w	sl, #0
 8014bc8:	f104 0b1a 	add.w	fp, r4, #26
 8014bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bce:	425b      	negs	r3, r3
 8014bd0:	4553      	cmp	r3, sl
 8014bd2:	dc01      	bgt.n	8014bd8 <_printf_float+0x2b0>
 8014bd4:	464b      	mov	r3, r9
 8014bd6:	e793      	b.n	8014b00 <_printf_float+0x1d8>
 8014bd8:	2301      	movs	r3, #1
 8014bda:	465a      	mov	r2, fp
 8014bdc:	4631      	mov	r1, r6
 8014bde:	4628      	mov	r0, r5
 8014be0:	47b8      	blx	r7
 8014be2:	3001      	adds	r0, #1
 8014be4:	f43f aefb 	beq.w	80149de <_printf_float+0xb6>
 8014be8:	f10a 0a01 	add.w	sl, sl, #1
 8014bec:	e7ee      	b.n	8014bcc <_printf_float+0x2a4>
 8014bee:	bf00      	nop
 8014bf0:	7fefffff 	.word	0x7fefffff
 8014bf4:	08018668 	.word	0x08018668
 8014bf8:	0801866c 	.word	0x0801866c
 8014bfc:	08018670 	.word	0x08018670
 8014c00:	08018674 	.word	0x08018674
 8014c04:	08018678 	.word	0x08018678
 8014c08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014c0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014c0e:	4553      	cmp	r3, sl
 8014c10:	bfa8      	it	ge
 8014c12:	4653      	movge	r3, sl
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	4699      	mov	r9, r3
 8014c18:	dc36      	bgt.n	8014c88 <_printf_float+0x360>
 8014c1a:	f04f 0b00 	mov.w	fp, #0
 8014c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014c22:	f104 021a 	add.w	r2, r4, #26
 8014c26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014c28:	9306      	str	r3, [sp, #24]
 8014c2a:	eba3 0309 	sub.w	r3, r3, r9
 8014c2e:	455b      	cmp	r3, fp
 8014c30:	dc31      	bgt.n	8014c96 <_printf_float+0x36e>
 8014c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c34:	459a      	cmp	sl, r3
 8014c36:	dc3a      	bgt.n	8014cae <_printf_float+0x386>
 8014c38:	6823      	ldr	r3, [r4, #0]
 8014c3a:	07da      	lsls	r2, r3, #31
 8014c3c:	d437      	bmi.n	8014cae <_printf_float+0x386>
 8014c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c40:	ebaa 0903 	sub.w	r9, sl, r3
 8014c44:	9b06      	ldr	r3, [sp, #24]
 8014c46:	ebaa 0303 	sub.w	r3, sl, r3
 8014c4a:	4599      	cmp	r9, r3
 8014c4c:	bfa8      	it	ge
 8014c4e:	4699      	movge	r9, r3
 8014c50:	f1b9 0f00 	cmp.w	r9, #0
 8014c54:	dc33      	bgt.n	8014cbe <_printf_float+0x396>
 8014c56:	f04f 0800 	mov.w	r8, #0
 8014c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014c5e:	f104 0b1a 	add.w	fp, r4, #26
 8014c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c64:	ebaa 0303 	sub.w	r3, sl, r3
 8014c68:	eba3 0309 	sub.w	r3, r3, r9
 8014c6c:	4543      	cmp	r3, r8
 8014c6e:	f77f af79 	ble.w	8014b64 <_printf_float+0x23c>
 8014c72:	2301      	movs	r3, #1
 8014c74:	465a      	mov	r2, fp
 8014c76:	4631      	mov	r1, r6
 8014c78:	4628      	mov	r0, r5
 8014c7a:	47b8      	blx	r7
 8014c7c:	3001      	adds	r0, #1
 8014c7e:	f43f aeae 	beq.w	80149de <_printf_float+0xb6>
 8014c82:	f108 0801 	add.w	r8, r8, #1
 8014c86:	e7ec      	b.n	8014c62 <_printf_float+0x33a>
 8014c88:	4642      	mov	r2, r8
 8014c8a:	4631      	mov	r1, r6
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	47b8      	blx	r7
 8014c90:	3001      	adds	r0, #1
 8014c92:	d1c2      	bne.n	8014c1a <_printf_float+0x2f2>
 8014c94:	e6a3      	b.n	80149de <_printf_float+0xb6>
 8014c96:	2301      	movs	r3, #1
 8014c98:	4631      	mov	r1, r6
 8014c9a:	4628      	mov	r0, r5
 8014c9c:	9206      	str	r2, [sp, #24]
 8014c9e:	47b8      	blx	r7
 8014ca0:	3001      	adds	r0, #1
 8014ca2:	f43f ae9c 	beq.w	80149de <_printf_float+0xb6>
 8014ca6:	9a06      	ldr	r2, [sp, #24]
 8014ca8:	f10b 0b01 	add.w	fp, fp, #1
 8014cac:	e7bb      	b.n	8014c26 <_printf_float+0x2fe>
 8014cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cb2:	4631      	mov	r1, r6
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	47b8      	blx	r7
 8014cb8:	3001      	adds	r0, #1
 8014cba:	d1c0      	bne.n	8014c3e <_printf_float+0x316>
 8014cbc:	e68f      	b.n	80149de <_printf_float+0xb6>
 8014cbe:	9a06      	ldr	r2, [sp, #24]
 8014cc0:	464b      	mov	r3, r9
 8014cc2:	4442      	add	r2, r8
 8014cc4:	4631      	mov	r1, r6
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	47b8      	blx	r7
 8014cca:	3001      	adds	r0, #1
 8014ccc:	d1c3      	bne.n	8014c56 <_printf_float+0x32e>
 8014cce:	e686      	b.n	80149de <_printf_float+0xb6>
 8014cd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014cd4:	f1ba 0f01 	cmp.w	sl, #1
 8014cd8:	dc01      	bgt.n	8014cde <_printf_float+0x3b6>
 8014cda:	07db      	lsls	r3, r3, #31
 8014cdc:	d536      	bpl.n	8014d4c <_printf_float+0x424>
 8014cde:	2301      	movs	r3, #1
 8014ce0:	4642      	mov	r2, r8
 8014ce2:	4631      	mov	r1, r6
 8014ce4:	4628      	mov	r0, r5
 8014ce6:	47b8      	blx	r7
 8014ce8:	3001      	adds	r0, #1
 8014cea:	f43f ae78 	beq.w	80149de <_printf_float+0xb6>
 8014cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cf2:	4631      	mov	r1, r6
 8014cf4:	4628      	mov	r0, r5
 8014cf6:	47b8      	blx	r7
 8014cf8:	3001      	adds	r0, #1
 8014cfa:	f43f ae70 	beq.w	80149de <_printf_float+0xb6>
 8014cfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014d02:	2200      	movs	r2, #0
 8014d04:	2300      	movs	r3, #0
 8014d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d0a:	f7eb ff0d 	bl	8000b28 <__aeabi_dcmpeq>
 8014d0e:	b9c0      	cbnz	r0, 8014d42 <_printf_float+0x41a>
 8014d10:	4653      	mov	r3, sl
 8014d12:	f108 0201 	add.w	r2, r8, #1
 8014d16:	4631      	mov	r1, r6
 8014d18:	4628      	mov	r0, r5
 8014d1a:	47b8      	blx	r7
 8014d1c:	3001      	adds	r0, #1
 8014d1e:	d10c      	bne.n	8014d3a <_printf_float+0x412>
 8014d20:	e65d      	b.n	80149de <_printf_float+0xb6>
 8014d22:	2301      	movs	r3, #1
 8014d24:	465a      	mov	r2, fp
 8014d26:	4631      	mov	r1, r6
 8014d28:	4628      	mov	r0, r5
 8014d2a:	47b8      	blx	r7
 8014d2c:	3001      	adds	r0, #1
 8014d2e:	f43f ae56 	beq.w	80149de <_printf_float+0xb6>
 8014d32:	f108 0801 	add.w	r8, r8, #1
 8014d36:	45d0      	cmp	r8, sl
 8014d38:	dbf3      	blt.n	8014d22 <_printf_float+0x3fa>
 8014d3a:	464b      	mov	r3, r9
 8014d3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014d40:	e6df      	b.n	8014b02 <_printf_float+0x1da>
 8014d42:	f04f 0800 	mov.w	r8, #0
 8014d46:	f104 0b1a 	add.w	fp, r4, #26
 8014d4a:	e7f4      	b.n	8014d36 <_printf_float+0x40e>
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	4642      	mov	r2, r8
 8014d50:	e7e1      	b.n	8014d16 <_printf_float+0x3ee>
 8014d52:	2301      	movs	r3, #1
 8014d54:	464a      	mov	r2, r9
 8014d56:	4631      	mov	r1, r6
 8014d58:	4628      	mov	r0, r5
 8014d5a:	47b8      	blx	r7
 8014d5c:	3001      	adds	r0, #1
 8014d5e:	f43f ae3e 	beq.w	80149de <_printf_float+0xb6>
 8014d62:	f108 0801 	add.w	r8, r8, #1
 8014d66:	68e3      	ldr	r3, [r4, #12]
 8014d68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014d6a:	1a5b      	subs	r3, r3, r1
 8014d6c:	4543      	cmp	r3, r8
 8014d6e:	dcf0      	bgt.n	8014d52 <_printf_float+0x42a>
 8014d70:	e6fc      	b.n	8014b6c <_printf_float+0x244>
 8014d72:	f04f 0800 	mov.w	r8, #0
 8014d76:	f104 0919 	add.w	r9, r4, #25
 8014d7a:	e7f4      	b.n	8014d66 <_printf_float+0x43e>

08014d7c <_printf_common>:
 8014d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d80:	4616      	mov	r6, r2
 8014d82:	4698      	mov	r8, r3
 8014d84:	688a      	ldr	r2, [r1, #8]
 8014d86:	690b      	ldr	r3, [r1, #16]
 8014d88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	bfb8      	it	lt
 8014d90:	4613      	movlt	r3, r2
 8014d92:	6033      	str	r3, [r6, #0]
 8014d94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014d98:	4607      	mov	r7, r0
 8014d9a:	460c      	mov	r4, r1
 8014d9c:	b10a      	cbz	r2, 8014da2 <_printf_common+0x26>
 8014d9e:	3301      	adds	r3, #1
 8014da0:	6033      	str	r3, [r6, #0]
 8014da2:	6823      	ldr	r3, [r4, #0]
 8014da4:	0699      	lsls	r1, r3, #26
 8014da6:	bf42      	ittt	mi
 8014da8:	6833      	ldrmi	r3, [r6, #0]
 8014daa:	3302      	addmi	r3, #2
 8014dac:	6033      	strmi	r3, [r6, #0]
 8014dae:	6825      	ldr	r5, [r4, #0]
 8014db0:	f015 0506 	ands.w	r5, r5, #6
 8014db4:	d106      	bne.n	8014dc4 <_printf_common+0x48>
 8014db6:	f104 0a19 	add.w	sl, r4, #25
 8014dba:	68e3      	ldr	r3, [r4, #12]
 8014dbc:	6832      	ldr	r2, [r6, #0]
 8014dbe:	1a9b      	subs	r3, r3, r2
 8014dc0:	42ab      	cmp	r3, r5
 8014dc2:	dc26      	bgt.n	8014e12 <_printf_common+0x96>
 8014dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014dc8:	6822      	ldr	r2, [r4, #0]
 8014dca:	3b00      	subs	r3, #0
 8014dcc:	bf18      	it	ne
 8014dce:	2301      	movne	r3, #1
 8014dd0:	0692      	lsls	r2, r2, #26
 8014dd2:	d42b      	bmi.n	8014e2c <_printf_common+0xb0>
 8014dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014dd8:	4641      	mov	r1, r8
 8014dda:	4638      	mov	r0, r7
 8014ddc:	47c8      	blx	r9
 8014dde:	3001      	adds	r0, #1
 8014de0:	d01e      	beq.n	8014e20 <_printf_common+0xa4>
 8014de2:	6823      	ldr	r3, [r4, #0]
 8014de4:	6922      	ldr	r2, [r4, #16]
 8014de6:	f003 0306 	and.w	r3, r3, #6
 8014dea:	2b04      	cmp	r3, #4
 8014dec:	bf02      	ittt	eq
 8014dee:	68e5      	ldreq	r5, [r4, #12]
 8014df0:	6833      	ldreq	r3, [r6, #0]
 8014df2:	1aed      	subeq	r5, r5, r3
 8014df4:	68a3      	ldr	r3, [r4, #8]
 8014df6:	bf0c      	ite	eq
 8014df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014dfc:	2500      	movne	r5, #0
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	bfc4      	itt	gt
 8014e02:	1a9b      	subgt	r3, r3, r2
 8014e04:	18ed      	addgt	r5, r5, r3
 8014e06:	2600      	movs	r6, #0
 8014e08:	341a      	adds	r4, #26
 8014e0a:	42b5      	cmp	r5, r6
 8014e0c:	d11a      	bne.n	8014e44 <_printf_common+0xc8>
 8014e0e:	2000      	movs	r0, #0
 8014e10:	e008      	b.n	8014e24 <_printf_common+0xa8>
 8014e12:	2301      	movs	r3, #1
 8014e14:	4652      	mov	r2, sl
 8014e16:	4641      	mov	r1, r8
 8014e18:	4638      	mov	r0, r7
 8014e1a:	47c8      	blx	r9
 8014e1c:	3001      	adds	r0, #1
 8014e1e:	d103      	bne.n	8014e28 <_printf_common+0xac>
 8014e20:	f04f 30ff 	mov.w	r0, #4294967295
 8014e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e28:	3501      	adds	r5, #1
 8014e2a:	e7c6      	b.n	8014dba <_printf_common+0x3e>
 8014e2c:	18e1      	adds	r1, r4, r3
 8014e2e:	1c5a      	adds	r2, r3, #1
 8014e30:	2030      	movs	r0, #48	@ 0x30
 8014e32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014e36:	4422      	add	r2, r4
 8014e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014e3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014e40:	3302      	adds	r3, #2
 8014e42:	e7c7      	b.n	8014dd4 <_printf_common+0x58>
 8014e44:	2301      	movs	r3, #1
 8014e46:	4622      	mov	r2, r4
 8014e48:	4641      	mov	r1, r8
 8014e4a:	4638      	mov	r0, r7
 8014e4c:	47c8      	blx	r9
 8014e4e:	3001      	adds	r0, #1
 8014e50:	d0e6      	beq.n	8014e20 <_printf_common+0xa4>
 8014e52:	3601      	adds	r6, #1
 8014e54:	e7d9      	b.n	8014e0a <_printf_common+0x8e>
	...

08014e58 <_printf_i>:
 8014e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e5c:	7e0f      	ldrb	r7, [r1, #24]
 8014e5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014e60:	2f78      	cmp	r7, #120	@ 0x78
 8014e62:	4691      	mov	r9, r2
 8014e64:	4680      	mov	r8, r0
 8014e66:	460c      	mov	r4, r1
 8014e68:	469a      	mov	sl, r3
 8014e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014e6e:	d807      	bhi.n	8014e80 <_printf_i+0x28>
 8014e70:	2f62      	cmp	r7, #98	@ 0x62
 8014e72:	d80a      	bhi.n	8014e8a <_printf_i+0x32>
 8014e74:	2f00      	cmp	r7, #0
 8014e76:	f000 80d2 	beq.w	801501e <_printf_i+0x1c6>
 8014e7a:	2f58      	cmp	r7, #88	@ 0x58
 8014e7c:	f000 80b9 	beq.w	8014ff2 <_printf_i+0x19a>
 8014e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014e88:	e03a      	b.n	8014f00 <_printf_i+0xa8>
 8014e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014e8e:	2b15      	cmp	r3, #21
 8014e90:	d8f6      	bhi.n	8014e80 <_printf_i+0x28>
 8014e92:	a101      	add	r1, pc, #4	@ (adr r1, 8014e98 <_printf_i+0x40>)
 8014e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014e98:	08014ef1 	.word	0x08014ef1
 8014e9c:	08014f05 	.word	0x08014f05
 8014ea0:	08014e81 	.word	0x08014e81
 8014ea4:	08014e81 	.word	0x08014e81
 8014ea8:	08014e81 	.word	0x08014e81
 8014eac:	08014e81 	.word	0x08014e81
 8014eb0:	08014f05 	.word	0x08014f05
 8014eb4:	08014e81 	.word	0x08014e81
 8014eb8:	08014e81 	.word	0x08014e81
 8014ebc:	08014e81 	.word	0x08014e81
 8014ec0:	08014e81 	.word	0x08014e81
 8014ec4:	08015005 	.word	0x08015005
 8014ec8:	08014f2f 	.word	0x08014f2f
 8014ecc:	08014fbf 	.word	0x08014fbf
 8014ed0:	08014e81 	.word	0x08014e81
 8014ed4:	08014e81 	.word	0x08014e81
 8014ed8:	08015027 	.word	0x08015027
 8014edc:	08014e81 	.word	0x08014e81
 8014ee0:	08014f2f 	.word	0x08014f2f
 8014ee4:	08014e81 	.word	0x08014e81
 8014ee8:	08014e81 	.word	0x08014e81
 8014eec:	08014fc7 	.word	0x08014fc7
 8014ef0:	6833      	ldr	r3, [r6, #0]
 8014ef2:	1d1a      	adds	r2, r3, #4
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	6032      	str	r2, [r6, #0]
 8014ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014f00:	2301      	movs	r3, #1
 8014f02:	e09d      	b.n	8015040 <_printf_i+0x1e8>
 8014f04:	6833      	ldr	r3, [r6, #0]
 8014f06:	6820      	ldr	r0, [r4, #0]
 8014f08:	1d19      	adds	r1, r3, #4
 8014f0a:	6031      	str	r1, [r6, #0]
 8014f0c:	0606      	lsls	r6, r0, #24
 8014f0e:	d501      	bpl.n	8014f14 <_printf_i+0xbc>
 8014f10:	681d      	ldr	r5, [r3, #0]
 8014f12:	e003      	b.n	8014f1c <_printf_i+0xc4>
 8014f14:	0645      	lsls	r5, r0, #25
 8014f16:	d5fb      	bpl.n	8014f10 <_printf_i+0xb8>
 8014f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014f1c:	2d00      	cmp	r5, #0
 8014f1e:	da03      	bge.n	8014f28 <_printf_i+0xd0>
 8014f20:	232d      	movs	r3, #45	@ 0x2d
 8014f22:	426d      	negs	r5, r5
 8014f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014f28:	4859      	ldr	r0, [pc, #356]	@ (8015090 <_printf_i+0x238>)
 8014f2a:	230a      	movs	r3, #10
 8014f2c:	e011      	b.n	8014f52 <_printf_i+0xfa>
 8014f2e:	6821      	ldr	r1, [r4, #0]
 8014f30:	6833      	ldr	r3, [r6, #0]
 8014f32:	0608      	lsls	r0, r1, #24
 8014f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8014f38:	d402      	bmi.n	8014f40 <_printf_i+0xe8>
 8014f3a:	0649      	lsls	r1, r1, #25
 8014f3c:	bf48      	it	mi
 8014f3e:	b2ad      	uxthmi	r5, r5
 8014f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8014f42:	4853      	ldr	r0, [pc, #332]	@ (8015090 <_printf_i+0x238>)
 8014f44:	6033      	str	r3, [r6, #0]
 8014f46:	bf14      	ite	ne
 8014f48:	230a      	movne	r3, #10
 8014f4a:	2308      	moveq	r3, #8
 8014f4c:	2100      	movs	r1, #0
 8014f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014f52:	6866      	ldr	r6, [r4, #4]
 8014f54:	60a6      	str	r6, [r4, #8]
 8014f56:	2e00      	cmp	r6, #0
 8014f58:	bfa2      	ittt	ge
 8014f5a:	6821      	ldrge	r1, [r4, #0]
 8014f5c:	f021 0104 	bicge.w	r1, r1, #4
 8014f60:	6021      	strge	r1, [r4, #0]
 8014f62:	b90d      	cbnz	r5, 8014f68 <_printf_i+0x110>
 8014f64:	2e00      	cmp	r6, #0
 8014f66:	d04b      	beq.n	8015000 <_printf_i+0x1a8>
 8014f68:	4616      	mov	r6, r2
 8014f6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8014f6e:	fb03 5711 	mls	r7, r3, r1, r5
 8014f72:	5dc7      	ldrb	r7, [r0, r7]
 8014f74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014f78:	462f      	mov	r7, r5
 8014f7a:	42bb      	cmp	r3, r7
 8014f7c:	460d      	mov	r5, r1
 8014f7e:	d9f4      	bls.n	8014f6a <_printf_i+0x112>
 8014f80:	2b08      	cmp	r3, #8
 8014f82:	d10b      	bne.n	8014f9c <_printf_i+0x144>
 8014f84:	6823      	ldr	r3, [r4, #0]
 8014f86:	07df      	lsls	r7, r3, #31
 8014f88:	d508      	bpl.n	8014f9c <_printf_i+0x144>
 8014f8a:	6923      	ldr	r3, [r4, #16]
 8014f8c:	6861      	ldr	r1, [r4, #4]
 8014f8e:	4299      	cmp	r1, r3
 8014f90:	bfde      	ittt	le
 8014f92:	2330      	movle	r3, #48	@ 0x30
 8014f94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014f98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014f9c:	1b92      	subs	r2, r2, r6
 8014f9e:	6122      	str	r2, [r4, #16]
 8014fa0:	f8cd a000 	str.w	sl, [sp]
 8014fa4:	464b      	mov	r3, r9
 8014fa6:	aa03      	add	r2, sp, #12
 8014fa8:	4621      	mov	r1, r4
 8014faa:	4640      	mov	r0, r8
 8014fac:	f7ff fee6 	bl	8014d7c <_printf_common>
 8014fb0:	3001      	adds	r0, #1
 8014fb2:	d14a      	bne.n	801504a <_printf_i+0x1f2>
 8014fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8014fb8:	b004      	add	sp, #16
 8014fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fbe:	6823      	ldr	r3, [r4, #0]
 8014fc0:	f043 0320 	orr.w	r3, r3, #32
 8014fc4:	6023      	str	r3, [r4, #0]
 8014fc6:	4833      	ldr	r0, [pc, #204]	@ (8015094 <_printf_i+0x23c>)
 8014fc8:	2778      	movs	r7, #120	@ 0x78
 8014fca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014fce:	6823      	ldr	r3, [r4, #0]
 8014fd0:	6831      	ldr	r1, [r6, #0]
 8014fd2:	061f      	lsls	r7, r3, #24
 8014fd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8014fd8:	d402      	bmi.n	8014fe0 <_printf_i+0x188>
 8014fda:	065f      	lsls	r7, r3, #25
 8014fdc:	bf48      	it	mi
 8014fde:	b2ad      	uxthmi	r5, r5
 8014fe0:	6031      	str	r1, [r6, #0]
 8014fe2:	07d9      	lsls	r1, r3, #31
 8014fe4:	bf44      	itt	mi
 8014fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8014fea:	6023      	strmi	r3, [r4, #0]
 8014fec:	b11d      	cbz	r5, 8014ff6 <_printf_i+0x19e>
 8014fee:	2310      	movs	r3, #16
 8014ff0:	e7ac      	b.n	8014f4c <_printf_i+0xf4>
 8014ff2:	4827      	ldr	r0, [pc, #156]	@ (8015090 <_printf_i+0x238>)
 8014ff4:	e7e9      	b.n	8014fca <_printf_i+0x172>
 8014ff6:	6823      	ldr	r3, [r4, #0]
 8014ff8:	f023 0320 	bic.w	r3, r3, #32
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	e7f6      	b.n	8014fee <_printf_i+0x196>
 8015000:	4616      	mov	r6, r2
 8015002:	e7bd      	b.n	8014f80 <_printf_i+0x128>
 8015004:	6833      	ldr	r3, [r6, #0]
 8015006:	6825      	ldr	r5, [r4, #0]
 8015008:	6961      	ldr	r1, [r4, #20]
 801500a:	1d18      	adds	r0, r3, #4
 801500c:	6030      	str	r0, [r6, #0]
 801500e:	062e      	lsls	r6, r5, #24
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	d501      	bpl.n	8015018 <_printf_i+0x1c0>
 8015014:	6019      	str	r1, [r3, #0]
 8015016:	e002      	b.n	801501e <_printf_i+0x1c6>
 8015018:	0668      	lsls	r0, r5, #25
 801501a:	d5fb      	bpl.n	8015014 <_printf_i+0x1bc>
 801501c:	8019      	strh	r1, [r3, #0]
 801501e:	2300      	movs	r3, #0
 8015020:	6123      	str	r3, [r4, #16]
 8015022:	4616      	mov	r6, r2
 8015024:	e7bc      	b.n	8014fa0 <_printf_i+0x148>
 8015026:	6833      	ldr	r3, [r6, #0]
 8015028:	1d1a      	adds	r2, r3, #4
 801502a:	6032      	str	r2, [r6, #0]
 801502c:	681e      	ldr	r6, [r3, #0]
 801502e:	6862      	ldr	r2, [r4, #4]
 8015030:	2100      	movs	r1, #0
 8015032:	4630      	mov	r0, r6
 8015034:	f7eb f8fc 	bl	8000230 <memchr>
 8015038:	b108      	cbz	r0, 801503e <_printf_i+0x1e6>
 801503a:	1b80      	subs	r0, r0, r6
 801503c:	6060      	str	r0, [r4, #4]
 801503e:	6863      	ldr	r3, [r4, #4]
 8015040:	6123      	str	r3, [r4, #16]
 8015042:	2300      	movs	r3, #0
 8015044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015048:	e7aa      	b.n	8014fa0 <_printf_i+0x148>
 801504a:	6923      	ldr	r3, [r4, #16]
 801504c:	4632      	mov	r2, r6
 801504e:	4649      	mov	r1, r9
 8015050:	4640      	mov	r0, r8
 8015052:	47d0      	blx	sl
 8015054:	3001      	adds	r0, #1
 8015056:	d0ad      	beq.n	8014fb4 <_printf_i+0x15c>
 8015058:	6823      	ldr	r3, [r4, #0]
 801505a:	079b      	lsls	r3, r3, #30
 801505c:	d413      	bmi.n	8015086 <_printf_i+0x22e>
 801505e:	68e0      	ldr	r0, [r4, #12]
 8015060:	9b03      	ldr	r3, [sp, #12]
 8015062:	4298      	cmp	r0, r3
 8015064:	bfb8      	it	lt
 8015066:	4618      	movlt	r0, r3
 8015068:	e7a6      	b.n	8014fb8 <_printf_i+0x160>
 801506a:	2301      	movs	r3, #1
 801506c:	4632      	mov	r2, r6
 801506e:	4649      	mov	r1, r9
 8015070:	4640      	mov	r0, r8
 8015072:	47d0      	blx	sl
 8015074:	3001      	adds	r0, #1
 8015076:	d09d      	beq.n	8014fb4 <_printf_i+0x15c>
 8015078:	3501      	adds	r5, #1
 801507a:	68e3      	ldr	r3, [r4, #12]
 801507c:	9903      	ldr	r1, [sp, #12]
 801507e:	1a5b      	subs	r3, r3, r1
 8015080:	42ab      	cmp	r3, r5
 8015082:	dcf2      	bgt.n	801506a <_printf_i+0x212>
 8015084:	e7eb      	b.n	801505e <_printf_i+0x206>
 8015086:	2500      	movs	r5, #0
 8015088:	f104 0619 	add.w	r6, r4, #25
 801508c:	e7f5      	b.n	801507a <_printf_i+0x222>
 801508e:	bf00      	nop
 8015090:	0801867a 	.word	0x0801867a
 8015094:	0801868b 	.word	0x0801868b

08015098 <std>:
 8015098:	2300      	movs	r3, #0
 801509a:	b510      	push	{r4, lr}
 801509c:	4604      	mov	r4, r0
 801509e:	e9c0 3300 	strd	r3, r3, [r0]
 80150a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150a6:	6083      	str	r3, [r0, #8]
 80150a8:	8181      	strh	r1, [r0, #12]
 80150aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80150ac:	81c2      	strh	r2, [r0, #14]
 80150ae:	6183      	str	r3, [r0, #24]
 80150b0:	4619      	mov	r1, r3
 80150b2:	2208      	movs	r2, #8
 80150b4:	305c      	adds	r0, #92	@ 0x5c
 80150b6:	f000 f8f4 	bl	80152a2 <memset>
 80150ba:	4b0d      	ldr	r3, [pc, #52]	@ (80150f0 <std+0x58>)
 80150bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80150be:	4b0d      	ldr	r3, [pc, #52]	@ (80150f4 <std+0x5c>)
 80150c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80150c2:	4b0d      	ldr	r3, [pc, #52]	@ (80150f8 <std+0x60>)
 80150c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80150c6:	4b0d      	ldr	r3, [pc, #52]	@ (80150fc <std+0x64>)
 80150c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80150ca:	4b0d      	ldr	r3, [pc, #52]	@ (8015100 <std+0x68>)
 80150cc:	6224      	str	r4, [r4, #32]
 80150ce:	429c      	cmp	r4, r3
 80150d0:	d006      	beq.n	80150e0 <std+0x48>
 80150d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80150d6:	4294      	cmp	r4, r2
 80150d8:	d002      	beq.n	80150e0 <std+0x48>
 80150da:	33d0      	adds	r3, #208	@ 0xd0
 80150dc:	429c      	cmp	r4, r3
 80150de:	d105      	bne.n	80150ec <std+0x54>
 80150e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80150e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150e8:	f000 b9ac 	b.w	8015444 <__retarget_lock_init_recursive>
 80150ec:	bd10      	pop	{r4, pc}
 80150ee:	bf00      	nop
 80150f0:	0801521d 	.word	0x0801521d
 80150f4:	0801523f 	.word	0x0801523f
 80150f8:	08015277 	.word	0x08015277
 80150fc:	0801529b 	.word	0x0801529b
 8015100:	200005a0 	.word	0x200005a0

08015104 <stdio_exit_handler>:
 8015104:	4a02      	ldr	r2, [pc, #8]	@ (8015110 <stdio_exit_handler+0xc>)
 8015106:	4903      	ldr	r1, [pc, #12]	@ (8015114 <stdio_exit_handler+0x10>)
 8015108:	4803      	ldr	r0, [pc, #12]	@ (8015118 <stdio_exit_handler+0x14>)
 801510a:	f000 b869 	b.w	80151e0 <_fwalk_sglue>
 801510e:	bf00      	nop
 8015110:	20000030 	.word	0x20000030
 8015114:	080169a1 	.word	0x080169a1
 8015118:	20000040 	.word	0x20000040

0801511c <cleanup_stdio>:
 801511c:	6841      	ldr	r1, [r0, #4]
 801511e:	4b0c      	ldr	r3, [pc, #48]	@ (8015150 <cleanup_stdio+0x34>)
 8015120:	4299      	cmp	r1, r3
 8015122:	b510      	push	{r4, lr}
 8015124:	4604      	mov	r4, r0
 8015126:	d001      	beq.n	801512c <cleanup_stdio+0x10>
 8015128:	f001 fc3a 	bl	80169a0 <_fflush_r>
 801512c:	68a1      	ldr	r1, [r4, #8]
 801512e:	4b09      	ldr	r3, [pc, #36]	@ (8015154 <cleanup_stdio+0x38>)
 8015130:	4299      	cmp	r1, r3
 8015132:	d002      	beq.n	801513a <cleanup_stdio+0x1e>
 8015134:	4620      	mov	r0, r4
 8015136:	f001 fc33 	bl	80169a0 <_fflush_r>
 801513a:	68e1      	ldr	r1, [r4, #12]
 801513c:	4b06      	ldr	r3, [pc, #24]	@ (8015158 <cleanup_stdio+0x3c>)
 801513e:	4299      	cmp	r1, r3
 8015140:	d004      	beq.n	801514c <cleanup_stdio+0x30>
 8015142:	4620      	mov	r0, r4
 8015144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015148:	f001 bc2a 	b.w	80169a0 <_fflush_r>
 801514c:	bd10      	pop	{r4, pc}
 801514e:	bf00      	nop
 8015150:	200005a0 	.word	0x200005a0
 8015154:	20000608 	.word	0x20000608
 8015158:	20000670 	.word	0x20000670

0801515c <global_stdio_init.part.0>:
 801515c:	b510      	push	{r4, lr}
 801515e:	4b0b      	ldr	r3, [pc, #44]	@ (801518c <global_stdio_init.part.0+0x30>)
 8015160:	4c0b      	ldr	r4, [pc, #44]	@ (8015190 <global_stdio_init.part.0+0x34>)
 8015162:	4a0c      	ldr	r2, [pc, #48]	@ (8015194 <global_stdio_init.part.0+0x38>)
 8015164:	601a      	str	r2, [r3, #0]
 8015166:	4620      	mov	r0, r4
 8015168:	2200      	movs	r2, #0
 801516a:	2104      	movs	r1, #4
 801516c:	f7ff ff94 	bl	8015098 <std>
 8015170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015174:	2201      	movs	r2, #1
 8015176:	2109      	movs	r1, #9
 8015178:	f7ff ff8e 	bl	8015098 <std>
 801517c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015180:	2202      	movs	r2, #2
 8015182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015186:	2112      	movs	r1, #18
 8015188:	f7ff bf86 	b.w	8015098 <std>
 801518c:	200006d8 	.word	0x200006d8
 8015190:	200005a0 	.word	0x200005a0
 8015194:	08015105 	.word	0x08015105

08015198 <__sfp_lock_acquire>:
 8015198:	4801      	ldr	r0, [pc, #4]	@ (80151a0 <__sfp_lock_acquire+0x8>)
 801519a:	f000 b954 	b.w	8015446 <__retarget_lock_acquire_recursive>
 801519e:	bf00      	nop
 80151a0:	200006e1 	.word	0x200006e1

080151a4 <__sfp_lock_release>:
 80151a4:	4801      	ldr	r0, [pc, #4]	@ (80151ac <__sfp_lock_release+0x8>)
 80151a6:	f000 b94f 	b.w	8015448 <__retarget_lock_release_recursive>
 80151aa:	bf00      	nop
 80151ac:	200006e1 	.word	0x200006e1

080151b0 <__sinit>:
 80151b0:	b510      	push	{r4, lr}
 80151b2:	4604      	mov	r4, r0
 80151b4:	f7ff fff0 	bl	8015198 <__sfp_lock_acquire>
 80151b8:	6a23      	ldr	r3, [r4, #32]
 80151ba:	b11b      	cbz	r3, 80151c4 <__sinit+0x14>
 80151bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151c0:	f7ff bff0 	b.w	80151a4 <__sfp_lock_release>
 80151c4:	4b04      	ldr	r3, [pc, #16]	@ (80151d8 <__sinit+0x28>)
 80151c6:	6223      	str	r3, [r4, #32]
 80151c8:	4b04      	ldr	r3, [pc, #16]	@ (80151dc <__sinit+0x2c>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d1f5      	bne.n	80151bc <__sinit+0xc>
 80151d0:	f7ff ffc4 	bl	801515c <global_stdio_init.part.0>
 80151d4:	e7f2      	b.n	80151bc <__sinit+0xc>
 80151d6:	bf00      	nop
 80151d8:	0801511d 	.word	0x0801511d
 80151dc:	200006d8 	.word	0x200006d8

080151e0 <_fwalk_sglue>:
 80151e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151e4:	4607      	mov	r7, r0
 80151e6:	4688      	mov	r8, r1
 80151e8:	4614      	mov	r4, r2
 80151ea:	2600      	movs	r6, #0
 80151ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80151f0:	f1b9 0901 	subs.w	r9, r9, #1
 80151f4:	d505      	bpl.n	8015202 <_fwalk_sglue+0x22>
 80151f6:	6824      	ldr	r4, [r4, #0]
 80151f8:	2c00      	cmp	r4, #0
 80151fa:	d1f7      	bne.n	80151ec <_fwalk_sglue+0xc>
 80151fc:	4630      	mov	r0, r6
 80151fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015202:	89ab      	ldrh	r3, [r5, #12]
 8015204:	2b01      	cmp	r3, #1
 8015206:	d907      	bls.n	8015218 <_fwalk_sglue+0x38>
 8015208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801520c:	3301      	adds	r3, #1
 801520e:	d003      	beq.n	8015218 <_fwalk_sglue+0x38>
 8015210:	4629      	mov	r1, r5
 8015212:	4638      	mov	r0, r7
 8015214:	47c0      	blx	r8
 8015216:	4306      	orrs	r6, r0
 8015218:	3568      	adds	r5, #104	@ 0x68
 801521a:	e7e9      	b.n	80151f0 <_fwalk_sglue+0x10>

0801521c <__sread>:
 801521c:	b510      	push	{r4, lr}
 801521e:	460c      	mov	r4, r1
 8015220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015224:	f000 f89c 	bl	8015360 <_read_r>
 8015228:	2800      	cmp	r0, #0
 801522a:	bfab      	itete	ge
 801522c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801522e:	89a3      	ldrhlt	r3, [r4, #12]
 8015230:	181b      	addge	r3, r3, r0
 8015232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015236:	bfac      	ite	ge
 8015238:	6563      	strge	r3, [r4, #84]	@ 0x54
 801523a:	81a3      	strhlt	r3, [r4, #12]
 801523c:	bd10      	pop	{r4, pc}

0801523e <__swrite>:
 801523e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015242:	461f      	mov	r7, r3
 8015244:	898b      	ldrh	r3, [r1, #12]
 8015246:	05db      	lsls	r3, r3, #23
 8015248:	4605      	mov	r5, r0
 801524a:	460c      	mov	r4, r1
 801524c:	4616      	mov	r6, r2
 801524e:	d505      	bpl.n	801525c <__swrite+0x1e>
 8015250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015254:	2302      	movs	r3, #2
 8015256:	2200      	movs	r2, #0
 8015258:	f000 f870 	bl	801533c <_lseek_r>
 801525c:	89a3      	ldrh	r3, [r4, #12]
 801525e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015262:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015266:	81a3      	strh	r3, [r4, #12]
 8015268:	4632      	mov	r2, r6
 801526a:	463b      	mov	r3, r7
 801526c:	4628      	mov	r0, r5
 801526e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015272:	f000 b8ab 	b.w	80153cc <_write_r>

08015276 <__sseek>:
 8015276:	b510      	push	{r4, lr}
 8015278:	460c      	mov	r4, r1
 801527a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801527e:	f000 f85d 	bl	801533c <_lseek_r>
 8015282:	1c43      	adds	r3, r0, #1
 8015284:	89a3      	ldrh	r3, [r4, #12]
 8015286:	bf15      	itete	ne
 8015288:	6560      	strne	r0, [r4, #84]	@ 0x54
 801528a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801528e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015292:	81a3      	strheq	r3, [r4, #12]
 8015294:	bf18      	it	ne
 8015296:	81a3      	strhne	r3, [r4, #12]
 8015298:	bd10      	pop	{r4, pc}

0801529a <__sclose>:
 801529a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801529e:	f000 b83d 	b.w	801531c <_close_r>

080152a2 <memset>:
 80152a2:	4402      	add	r2, r0
 80152a4:	4603      	mov	r3, r0
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d100      	bne.n	80152ac <memset+0xa>
 80152aa:	4770      	bx	lr
 80152ac:	f803 1b01 	strb.w	r1, [r3], #1
 80152b0:	e7f9      	b.n	80152a6 <memset+0x4>

080152b2 <_raise_r>:
 80152b2:	291f      	cmp	r1, #31
 80152b4:	b538      	push	{r3, r4, r5, lr}
 80152b6:	4605      	mov	r5, r0
 80152b8:	460c      	mov	r4, r1
 80152ba:	d904      	bls.n	80152c6 <_raise_r+0x14>
 80152bc:	2316      	movs	r3, #22
 80152be:	6003      	str	r3, [r0, #0]
 80152c0:	f04f 30ff 	mov.w	r0, #4294967295
 80152c4:	bd38      	pop	{r3, r4, r5, pc}
 80152c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80152c8:	b112      	cbz	r2, 80152d0 <_raise_r+0x1e>
 80152ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80152ce:	b94b      	cbnz	r3, 80152e4 <_raise_r+0x32>
 80152d0:	4628      	mov	r0, r5
 80152d2:	f000 f869 	bl	80153a8 <_getpid_r>
 80152d6:	4622      	mov	r2, r4
 80152d8:	4601      	mov	r1, r0
 80152da:	4628      	mov	r0, r5
 80152dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80152e0:	f000 b850 	b.w	8015384 <_kill_r>
 80152e4:	2b01      	cmp	r3, #1
 80152e6:	d00a      	beq.n	80152fe <_raise_r+0x4c>
 80152e8:	1c59      	adds	r1, r3, #1
 80152ea:	d103      	bne.n	80152f4 <_raise_r+0x42>
 80152ec:	2316      	movs	r3, #22
 80152ee:	6003      	str	r3, [r0, #0]
 80152f0:	2001      	movs	r0, #1
 80152f2:	e7e7      	b.n	80152c4 <_raise_r+0x12>
 80152f4:	2100      	movs	r1, #0
 80152f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80152fa:	4620      	mov	r0, r4
 80152fc:	4798      	blx	r3
 80152fe:	2000      	movs	r0, #0
 8015300:	e7e0      	b.n	80152c4 <_raise_r+0x12>
	...

08015304 <raise>:
 8015304:	4b02      	ldr	r3, [pc, #8]	@ (8015310 <raise+0xc>)
 8015306:	4601      	mov	r1, r0
 8015308:	6818      	ldr	r0, [r3, #0]
 801530a:	f7ff bfd2 	b.w	80152b2 <_raise_r>
 801530e:	bf00      	nop
 8015310:	2000003c 	.word	0x2000003c

08015314 <_localeconv_r>:
 8015314:	4800      	ldr	r0, [pc, #0]	@ (8015318 <_localeconv_r+0x4>)
 8015316:	4770      	bx	lr
 8015318:	2000017c 	.word	0x2000017c

0801531c <_close_r>:
 801531c:	b538      	push	{r3, r4, r5, lr}
 801531e:	4d06      	ldr	r5, [pc, #24]	@ (8015338 <_close_r+0x1c>)
 8015320:	2300      	movs	r3, #0
 8015322:	4604      	mov	r4, r0
 8015324:	4608      	mov	r0, r1
 8015326:	602b      	str	r3, [r5, #0]
 8015328:	f7f8 ff28 	bl	800e17c <_close>
 801532c:	1c43      	adds	r3, r0, #1
 801532e:	d102      	bne.n	8015336 <_close_r+0x1a>
 8015330:	682b      	ldr	r3, [r5, #0]
 8015332:	b103      	cbz	r3, 8015336 <_close_r+0x1a>
 8015334:	6023      	str	r3, [r4, #0]
 8015336:	bd38      	pop	{r3, r4, r5, pc}
 8015338:	200006dc 	.word	0x200006dc

0801533c <_lseek_r>:
 801533c:	b538      	push	{r3, r4, r5, lr}
 801533e:	4d07      	ldr	r5, [pc, #28]	@ (801535c <_lseek_r+0x20>)
 8015340:	4604      	mov	r4, r0
 8015342:	4608      	mov	r0, r1
 8015344:	4611      	mov	r1, r2
 8015346:	2200      	movs	r2, #0
 8015348:	602a      	str	r2, [r5, #0]
 801534a:	461a      	mov	r2, r3
 801534c:	f7f8 ff3d 	bl	800e1ca <_lseek>
 8015350:	1c43      	adds	r3, r0, #1
 8015352:	d102      	bne.n	801535a <_lseek_r+0x1e>
 8015354:	682b      	ldr	r3, [r5, #0]
 8015356:	b103      	cbz	r3, 801535a <_lseek_r+0x1e>
 8015358:	6023      	str	r3, [r4, #0]
 801535a:	bd38      	pop	{r3, r4, r5, pc}
 801535c:	200006dc 	.word	0x200006dc

08015360 <_read_r>:
 8015360:	b538      	push	{r3, r4, r5, lr}
 8015362:	4d07      	ldr	r5, [pc, #28]	@ (8015380 <_read_r+0x20>)
 8015364:	4604      	mov	r4, r0
 8015366:	4608      	mov	r0, r1
 8015368:	4611      	mov	r1, r2
 801536a:	2200      	movs	r2, #0
 801536c:	602a      	str	r2, [r5, #0]
 801536e:	461a      	mov	r2, r3
 8015370:	f7f8 fecb 	bl	800e10a <_read>
 8015374:	1c43      	adds	r3, r0, #1
 8015376:	d102      	bne.n	801537e <_read_r+0x1e>
 8015378:	682b      	ldr	r3, [r5, #0]
 801537a:	b103      	cbz	r3, 801537e <_read_r+0x1e>
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	200006dc 	.word	0x200006dc

08015384 <_kill_r>:
 8015384:	b538      	push	{r3, r4, r5, lr}
 8015386:	4d07      	ldr	r5, [pc, #28]	@ (80153a4 <_kill_r+0x20>)
 8015388:	2300      	movs	r3, #0
 801538a:	4604      	mov	r4, r0
 801538c:	4608      	mov	r0, r1
 801538e:	4611      	mov	r1, r2
 8015390:	602b      	str	r3, [r5, #0]
 8015392:	f7f8 fe9f 	bl	800e0d4 <_kill>
 8015396:	1c43      	adds	r3, r0, #1
 8015398:	d102      	bne.n	80153a0 <_kill_r+0x1c>
 801539a:	682b      	ldr	r3, [r5, #0]
 801539c:	b103      	cbz	r3, 80153a0 <_kill_r+0x1c>
 801539e:	6023      	str	r3, [r4, #0]
 80153a0:	bd38      	pop	{r3, r4, r5, pc}
 80153a2:	bf00      	nop
 80153a4:	200006dc 	.word	0x200006dc

080153a8 <_getpid_r>:
 80153a8:	f7f8 be8c 	b.w	800e0c4 <_getpid>

080153ac <_sbrk_r>:
 80153ac:	b538      	push	{r3, r4, r5, lr}
 80153ae:	4d06      	ldr	r5, [pc, #24]	@ (80153c8 <_sbrk_r+0x1c>)
 80153b0:	2300      	movs	r3, #0
 80153b2:	4604      	mov	r4, r0
 80153b4:	4608      	mov	r0, r1
 80153b6:	602b      	str	r3, [r5, #0]
 80153b8:	f7f8 ff14 	bl	800e1e4 <_sbrk>
 80153bc:	1c43      	adds	r3, r0, #1
 80153be:	d102      	bne.n	80153c6 <_sbrk_r+0x1a>
 80153c0:	682b      	ldr	r3, [r5, #0]
 80153c2:	b103      	cbz	r3, 80153c6 <_sbrk_r+0x1a>
 80153c4:	6023      	str	r3, [r4, #0]
 80153c6:	bd38      	pop	{r3, r4, r5, pc}
 80153c8:	200006dc 	.word	0x200006dc

080153cc <_write_r>:
 80153cc:	b538      	push	{r3, r4, r5, lr}
 80153ce:	4d07      	ldr	r5, [pc, #28]	@ (80153ec <_write_r+0x20>)
 80153d0:	4604      	mov	r4, r0
 80153d2:	4608      	mov	r0, r1
 80153d4:	4611      	mov	r1, r2
 80153d6:	2200      	movs	r2, #0
 80153d8:	602a      	str	r2, [r5, #0]
 80153da:	461a      	mov	r2, r3
 80153dc:	f7f8 feb2 	bl	800e144 <_write>
 80153e0:	1c43      	adds	r3, r0, #1
 80153e2:	d102      	bne.n	80153ea <_write_r+0x1e>
 80153e4:	682b      	ldr	r3, [r5, #0]
 80153e6:	b103      	cbz	r3, 80153ea <_write_r+0x1e>
 80153e8:	6023      	str	r3, [r4, #0]
 80153ea:	bd38      	pop	{r3, r4, r5, pc}
 80153ec:	200006dc 	.word	0x200006dc

080153f0 <__errno>:
 80153f0:	4b01      	ldr	r3, [pc, #4]	@ (80153f8 <__errno+0x8>)
 80153f2:	6818      	ldr	r0, [r3, #0]
 80153f4:	4770      	bx	lr
 80153f6:	bf00      	nop
 80153f8:	2000003c 	.word	0x2000003c

080153fc <__libc_init_array>:
 80153fc:	b570      	push	{r4, r5, r6, lr}
 80153fe:	4d0d      	ldr	r5, [pc, #52]	@ (8015434 <__libc_init_array+0x38>)
 8015400:	4c0d      	ldr	r4, [pc, #52]	@ (8015438 <__libc_init_array+0x3c>)
 8015402:	1b64      	subs	r4, r4, r5
 8015404:	10a4      	asrs	r4, r4, #2
 8015406:	2600      	movs	r6, #0
 8015408:	42a6      	cmp	r6, r4
 801540a:	d109      	bne.n	8015420 <__libc_init_array+0x24>
 801540c:	4d0b      	ldr	r5, [pc, #44]	@ (801543c <__libc_init_array+0x40>)
 801540e:	4c0c      	ldr	r4, [pc, #48]	@ (8015440 <__libc_init_array+0x44>)
 8015410:	f001 fdb2 	bl	8016f78 <_init>
 8015414:	1b64      	subs	r4, r4, r5
 8015416:	10a4      	asrs	r4, r4, #2
 8015418:	2600      	movs	r6, #0
 801541a:	42a6      	cmp	r6, r4
 801541c:	d105      	bne.n	801542a <__libc_init_array+0x2e>
 801541e:	bd70      	pop	{r4, r5, r6, pc}
 8015420:	f855 3b04 	ldr.w	r3, [r5], #4
 8015424:	4798      	blx	r3
 8015426:	3601      	adds	r6, #1
 8015428:	e7ee      	b.n	8015408 <__libc_init_array+0xc>
 801542a:	f855 3b04 	ldr.w	r3, [r5], #4
 801542e:	4798      	blx	r3
 8015430:	3601      	adds	r6, #1
 8015432:	e7f2      	b.n	801541a <__libc_init_array+0x1e>
 8015434:	0801a9fc 	.word	0x0801a9fc
 8015438:	0801a9fc 	.word	0x0801a9fc
 801543c:	0801a9fc 	.word	0x0801a9fc
 8015440:	0801aa08 	.word	0x0801aa08

08015444 <__retarget_lock_init_recursive>:
 8015444:	4770      	bx	lr

08015446 <__retarget_lock_acquire_recursive>:
 8015446:	4770      	bx	lr

08015448 <__retarget_lock_release_recursive>:
 8015448:	4770      	bx	lr

0801544a <memcpy>:
 801544a:	440a      	add	r2, r1
 801544c:	4291      	cmp	r1, r2
 801544e:	f100 33ff 	add.w	r3, r0, #4294967295
 8015452:	d100      	bne.n	8015456 <memcpy+0xc>
 8015454:	4770      	bx	lr
 8015456:	b510      	push	{r4, lr}
 8015458:	f811 4b01 	ldrb.w	r4, [r1], #1
 801545c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015460:	4291      	cmp	r1, r2
 8015462:	d1f9      	bne.n	8015458 <memcpy+0xe>
 8015464:	bd10      	pop	{r4, pc}

08015466 <quorem>:
 8015466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546a:	6903      	ldr	r3, [r0, #16]
 801546c:	690c      	ldr	r4, [r1, #16]
 801546e:	42a3      	cmp	r3, r4
 8015470:	4607      	mov	r7, r0
 8015472:	db7e      	blt.n	8015572 <quorem+0x10c>
 8015474:	3c01      	subs	r4, #1
 8015476:	f101 0814 	add.w	r8, r1, #20
 801547a:	00a3      	lsls	r3, r4, #2
 801547c:	f100 0514 	add.w	r5, r0, #20
 8015480:	9300      	str	r3, [sp, #0]
 8015482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015486:	9301      	str	r3, [sp, #4]
 8015488:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801548c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015490:	3301      	adds	r3, #1
 8015492:	429a      	cmp	r2, r3
 8015494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015498:	fbb2 f6f3 	udiv	r6, r2, r3
 801549c:	d32e      	bcc.n	80154fc <quorem+0x96>
 801549e:	f04f 0a00 	mov.w	sl, #0
 80154a2:	46c4      	mov	ip, r8
 80154a4:	46ae      	mov	lr, r5
 80154a6:	46d3      	mov	fp, sl
 80154a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80154ac:	b298      	uxth	r0, r3
 80154ae:	fb06 a000 	mla	r0, r6, r0, sl
 80154b2:	0c02      	lsrs	r2, r0, #16
 80154b4:	0c1b      	lsrs	r3, r3, #16
 80154b6:	fb06 2303 	mla	r3, r6, r3, r2
 80154ba:	f8de 2000 	ldr.w	r2, [lr]
 80154be:	b280      	uxth	r0, r0
 80154c0:	b292      	uxth	r2, r2
 80154c2:	1a12      	subs	r2, r2, r0
 80154c4:	445a      	add	r2, fp
 80154c6:	f8de 0000 	ldr.w	r0, [lr]
 80154ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80154d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80154d8:	b292      	uxth	r2, r2
 80154da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80154de:	45e1      	cmp	r9, ip
 80154e0:	f84e 2b04 	str.w	r2, [lr], #4
 80154e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80154e8:	d2de      	bcs.n	80154a8 <quorem+0x42>
 80154ea:	9b00      	ldr	r3, [sp, #0]
 80154ec:	58eb      	ldr	r3, [r5, r3]
 80154ee:	b92b      	cbnz	r3, 80154fc <quorem+0x96>
 80154f0:	9b01      	ldr	r3, [sp, #4]
 80154f2:	3b04      	subs	r3, #4
 80154f4:	429d      	cmp	r5, r3
 80154f6:	461a      	mov	r2, r3
 80154f8:	d32f      	bcc.n	801555a <quorem+0xf4>
 80154fa:	613c      	str	r4, [r7, #16]
 80154fc:	4638      	mov	r0, r7
 80154fe:	f001 f8c3 	bl	8016688 <__mcmp>
 8015502:	2800      	cmp	r0, #0
 8015504:	db25      	blt.n	8015552 <quorem+0xec>
 8015506:	4629      	mov	r1, r5
 8015508:	2000      	movs	r0, #0
 801550a:	f858 2b04 	ldr.w	r2, [r8], #4
 801550e:	f8d1 c000 	ldr.w	ip, [r1]
 8015512:	fa1f fe82 	uxth.w	lr, r2
 8015516:	fa1f f38c 	uxth.w	r3, ip
 801551a:	eba3 030e 	sub.w	r3, r3, lr
 801551e:	4403      	add	r3, r0
 8015520:	0c12      	lsrs	r2, r2, #16
 8015522:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015526:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801552a:	b29b      	uxth	r3, r3
 801552c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015530:	45c1      	cmp	r9, r8
 8015532:	f841 3b04 	str.w	r3, [r1], #4
 8015536:	ea4f 4022 	mov.w	r0, r2, asr #16
 801553a:	d2e6      	bcs.n	801550a <quorem+0xa4>
 801553c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015540:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015544:	b922      	cbnz	r2, 8015550 <quorem+0xea>
 8015546:	3b04      	subs	r3, #4
 8015548:	429d      	cmp	r5, r3
 801554a:	461a      	mov	r2, r3
 801554c:	d30b      	bcc.n	8015566 <quorem+0x100>
 801554e:	613c      	str	r4, [r7, #16]
 8015550:	3601      	adds	r6, #1
 8015552:	4630      	mov	r0, r6
 8015554:	b003      	add	sp, #12
 8015556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555a:	6812      	ldr	r2, [r2, #0]
 801555c:	3b04      	subs	r3, #4
 801555e:	2a00      	cmp	r2, #0
 8015560:	d1cb      	bne.n	80154fa <quorem+0x94>
 8015562:	3c01      	subs	r4, #1
 8015564:	e7c6      	b.n	80154f4 <quorem+0x8e>
 8015566:	6812      	ldr	r2, [r2, #0]
 8015568:	3b04      	subs	r3, #4
 801556a:	2a00      	cmp	r2, #0
 801556c:	d1ef      	bne.n	801554e <quorem+0xe8>
 801556e:	3c01      	subs	r4, #1
 8015570:	e7ea      	b.n	8015548 <quorem+0xe2>
 8015572:	2000      	movs	r0, #0
 8015574:	e7ee      	b.n	8015554 <quorem+0xee>
	...

08015578 <_dtoa_r>:
 8015578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801557c:	69c7      	ldr	r7, [r0, #28]
 801557e:	b099      	sub	sp, #100	@ 0x64
 8015580:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015584:	ec55 4b10 	vmov	r4, r5, d0
 8015588:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801558a:	9109      	str	r1, [sp, #36]	@ 0x24
 801558c:	4683      	mov	fp, r0
 801558e:	920e      	str	r2, [sp, #56]	@ 0x38
 8015590:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015592:	b97f      	cbnz	r7, 80155b4 <_dtoa_r+0x3c>
 8015594:	2010      	movs	r0, #16
 8015596:	f7ff f85b 	bl	8014650 <malloc>
 801559a:	4602      	mov	r2, r0
 801559c:	f8cb 001c 	str.w	r0, [fp, #28]
 80155a0:	b920      	cbnz	r0, 80155ac <_dtoa_r+0x34>
 80155a2:	4ba7      	ldr	r3, [pc, #668]	@ (8015840 <_dtoa_r+0x2c8>)
 80155a4:	21ef      	movs	r1, #239	@ 0xef
 80155a6:	48a7      	ldr	r0, [pc, #668]	@ (8015844 <_dtoa_r+0x2cc>)
 80155a8:	f001 fa22 	bl	80169f0 <__assert_func>
 80155ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80155b0:	6007      	str	r7, [r0, #0]
 80155b2:	60c7      	str	r7, [r0, #12]
 80155b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80155b8:	6819      	ldr	r1, [r3, #0]
 80155ba:	b159      	cbz	r1, 80155d4 <_dtoa_r+0x5c>
 80155bc:	685a      	ldr	r2, [r3, #4]
 80155be:	604a      	str	r2, [r1, #4]
 80155c0:	2301      	movs	r3, #1
 80155c2:	4093      	lsls	r3, r2
 80155c4:	608b      	str	r3, [r1, #8]
 80155c6:	4658      	mov	r0, fp
 80155c8:	f000 fe24 	bl	8016214 <_Bfree>
 80155cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80155d0:	2200      	movs	r2, #0
 80155d2:	601a      	str	r2, [r3, #0]
 80155d4:	1e2b      	subs	r3, r5, #0
 80155d6:	bfb9      	ittee	lt
 80155d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80155dc:	9303      	strlt	r3, [sp, #12]
 80155de:	2300      	movge	r3, #0
 80155e0:	6033      	strge	r3, [r6, #0]
 80155e2:	9f03      	ldr	r7, [sp, #12]
 80155e4:	4b98      	ldr	r3, [pc, #608]	@ (8015848 <_dtoa_r+0x2d0>)
 80155e6:	bfbc      	itt	lt
 80155e8:	2201      	movlt	r2, #1
 80155ea:	6032      	strlt	r2, [r6, #0]
 80155ec:	43bb      	bics	r3, r7
 80155ee:	d112      	bne.n	8015616 <_dtoa_r+0x9e>
 80155f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80155f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80155f6:	6013      	str	r3, [r2, #0]
 80155f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80155fc:	4323      	orrs	r3, r4
 80155fe:	f000 854d 	beq.w	801609c <_dtoa_r+0xb24>
 8015602:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015604:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801585c <_dtoa_r+0x2e4>
 8015608:	2b00      	cmp	r3, #0
 801560a:	f000 854f 	beq.w	80160ac <_dtoa_r+0xb34>
 801560e:	f10a 0303 	add.w	r3, sl, #3
 8015612:	f000 bd49 	b.w	80160a8 <_dtoa_r+0xb30>
 8015616:	ed9d 7b02 	vldr	d7, [sp, #8]
 801561a:	2200      	movs	r2, #0
 801561c:	ec51 0b17 	vmov	r0, r1, d7
 8015620:	2300      	movs	r3, #0
 8015622:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8015626:	f7eb fa7f 	bl	8000b28 <__aeabi_dcmpeq>
 801562a:	4680      	mov	r8, r0
 801562c:	b158      	cbz	r0, 8015646 <_dtoa_r+0xce>
 801562e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015630:	2301      	movs	r3, #1
 8015632:	6013      	str	r3, [r2, #0]
 8015634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015636:	b113      	cbz	r3, 801563e <_dtoa_r+0xc6>
 8015638:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801563a:	4b84      	ldr	r3, [pc, #528]	@ (801584c <_dtoa_r+0x2d4>)
 801563c:	6013      	str	r3, [r2, #0]
 801563e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015860 <_dtoa_r+0x2e8>
 8015642:	f000 bd33 	b.w	80160ac <_dtoa_r+0xb34>
 8015646:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801564a:	aa16      	add	r2, sp, #88	@ 0x58
 801564c:	a917      	add	r1, sp, #92	@ 0x5c
 801564e:	4658      	mov	r0, fp
 8015650:	f001 f8ca 	bl	80167e8 <__d2b>
 8015654:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015658:	4681      	mov	r9, r0
 801565a:	2e00      	cmp	r6, #0
 801565c:	d077      	beq.n	801574e <_dtoa_r+0x1d6>
 801565e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015660:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8015664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801566c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015670:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015674:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015678:	4619      	mov	r1, r3
 801567a:	2200      	movs	r2, #0
 801567c:	4b74      	ldr	r3, [pc, #464]	@ (8015850 <_dtoa_r+0x2d8>)
 801567e:	f7ea fe33 	bl	80002e8 <__aeabi_dsub>
 8015682:	a369      	add	r3, pc, #420	@ (adr r3, 8015828 <_dtoa_r+0x2b0>)
 8015684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015688:	f7ea ffe6 	bl	8000658 <__aeabi_dmul>
 801568c:	a368      	add	r3, pc, #416	@ (adr r3, 8015830 <_dtoa_r+0x2b8>)
 801568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015692:	f7ea fe2b 	bl	80002ec <__adddf3>
 8015696:	4604      	mov	r4, r0
 8015698:	4630      	mov	r0, r6
 801569a:	460d      	mov	r5, r1
 801569c:	f7ea ff72 	bl	8000584 <__aeabi_i2d>
 80156a0:	a365      	add	r3, pc, #404	@ (adr r3, 8015838 <_dtoa_r+0x2c0>)
 80156a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a6:	f7ea ffd7 	bl	8000658 <__aeabi_dmul>
 80156aa:	4602      	mov	r2, r0
 80156ac:	460b      	mov	r3, r1
 80156ae:	4620      	mov	r0, r4
 80156b0:	4629      	mov	r1, r5
 80156b2:	f7ea fe1b 	bl	80002ec <__adddf3>
 80156b6:	4604      	mov	r4, r0
 80156b8:	460d      	mov	r5, r1
 80156ba:	f7eb fa7d 	bl	8000bb8 <__aeabi_d2iz>
 80156be:	2200      	movs	r2, #0
 80156c0:	4607      	mov	r7, r0
 80156c2:	2300      	movs	r3, #0
 80156c4:	4620      	mov	r0, r4
 80156c6:	4629      	mov	r1, r5
 80156c8:	f7eb fa38 	bl	8000b3c <__aeabi_dcmplt>
 80156cc:	b140      	cbz	r0, 80156e0 <_dtoa_r+0x168>
 80156ce:	4638      	mov	r0, r7
 80156d0:	f7ea ff58 	bl	8000584 <__aeabi_i2d>
 80156d4:	4622      	mov	r2, r4
 80156d6:	462b      	mov	r3, r5
 80156d8:	f7eb fa26 	bl	8000b28 <__aeabi_dcmpeq>
 80156dc:	b900      	cbnz	r0, 80156e0 <_dtoa_r+0x168>
 80156de:	3f01      	subs	r7, #1
 80156e0:	2f16      	cmp	r7, #22
 80156e2:	d851      	bhi.n	8015788 <_dtoa_r+0x210>
 80156e4:	4b5b      	ldr	r3, [pc, #364]	@ (8015854 <_dtoa_r+0x2dc>)
 80156e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80156ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80156f2:	f7eb fa23 	bl	8000b3c <__aeabi_dcmplt>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	d048      	beq.n	801578c <_dtoa_r+0x214>
 80156fa:	3f01      	subs	r7, #1
 80156fc:	2300      	movs	r3, #0
 80156fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8015700:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015702:	1b9b      	subs	r3, r3, r6
 8015704:	1e5a      	subs	r2, r3, #1
 8015706:	bf44      	itt	mi
 8015708:	f1c3 0801 	rsbmi	r8, r3, #1
 801570c:	2300      	movmi	r3, #0
 801570e:	9208      	str	r2, [sp, #32]
 8015710:	bf54      	ite	pl
 8015712:	f04f 0800 	movpl.w	r8, #0
 8015716:	9308      	strmi	r3, [sp, #32]
 8015718:	2f00      	cmp	r7, #0
 801571a:	db39      	blt.n	8015790 <_dtoa_r+0x218>
 801571c:	9b08      	ldr	r3, [sp, #32]
 801571e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015720:	443b      	add	r3, r7
 8015722:	9308      	str	r3, [sp, #32]
 8015724:	2300      	movs	r3, #0
 8015726:	930a      	str	r3, [sp, #40]	@ 0x28
 8015728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801572a:	2b09      	cmp	r3, #9
 801572c:	d864      	bhi.n	80157f8 <_dtoa_r+0x280>
 801572e:	2b05      	cmp	r3, #5
 8015730:	bfc4      	itt	gt
 8015732:	3b04      	subgt	r3, #4
 8015734:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8015736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015738:	f1a3 0302 	sub.w	r3, r3, #2
 801573c:	bfcc      	ite	gt
 801573e:	2400      	movgt	r4, #0
 8015740:	2401      	movle	r4, #1
 8015742:	2b03      	cmp	r3, #3
 8015744:	d863      	bhi.n	801580e <_dtoa_r+0x296>
 8015746:	e8df f003 	tbb	[pc, r3]
 801574a:	372a      	.short	0x372a
 801574c:	5535      	.short	0x5535
 801574e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8015752:	441e      	add	r6, r3
 8015754:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015758:	2b20      	cmp	r3, #32
 801575a:	bfc1      	itttt	gt
 801575c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015760:	409f      	lslgt	r7, r3
 8015762:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015766:	fa24 f303 	lsrgt.w	r3, r4, r3
 801576a:	bfd6      	itet	le
 801576c:	f1c3 0320 	rsble	r3, r3, #32
 8015770:	ea47 0003 	orrgt.w	r0, r7, r3
 8015774:	fa04 f003 	lslle.w	r0, r4, r3
 8015778:	f7ea fef4 	bl	8000564 <__aeabi_ui2d>
 801577c:	2201      	movs	r2, #1
 801577e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015782:	3e01      	subs	r6, #1
 8015784:	9214      	str	r2, [sp, #80]	@ 0x50
 8015786:	e777      	b.n	8015678 <_dtoa_r+0x100>
 8015788:	2301      	movs	r3, #1
 801578a:	e7b8      	b.n	80156fe <_dtoa_r+0x186>
 801578c:	9012      	str	r0, [sp, #72]	@ 0x48
 801578e:	e7b7      	b.n	8015700 <_dtoa_r+0x188>
 8015790:	427b      	negs	r3, r7
 8015792:	930a      	str	r3, [sp, #40]	@ 0x28
 8015794:	2300      	movs	r3, #0
 8015796:	eba8 0807 	sub.w	r8, r8, r7
 801579a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801579c:	e7c4      	b.n	8015728 <_dtoa_r+0x1b0>
 801579e:	2300      	movs	r3, #0
 80157a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	dc35      	bgt.n	8015814 <_dtoa_r+0x29c>
 80157a8:	2301      	movs	r3, #1
 80157aa:	9300      	str	r3, [sp, #0]
 80157ac:	9307      	str	r3, [sp, #28]
 80157ae:	461a      	mov	r2, r3
 80157b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80157b2:	e00b      	b.n	80157cc <_dtoa_r+0x254>
 80157b4:	2301      	movs	r3, #1
 80157b6:	e7f3      	b.n	80157a0 <_dtoa_r+0x228>
 80157b8:	2300      	movs	r3, #0
 80157ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157be:	18fb      	adds	r3, r7, r3
 80157c0:	9300      	str	r3, [sp, #0]
 80157c2:	3301      	adds	r3, #1
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	9307      	str	r3, [sp, #28]
 80157c8:	bfb8      	it	lt
 80157ca:	2301      	movlt	r3, #1
 80157cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80157d0:	2100      	movs	r1, #0
 80157d2:	2204      	movs	r2, #4
 80157d4:	f102 0514 	add.w	r5, r2, #20
 80157d8:	429d      	cmp	r5, r3
 80157da:	d91f      	bls.n	801581c <_dtoa_r+0x2a4>
 80157dc:	6041      	str	r1, [r0, #4]
 80157de:	4658      	mov	r0, fp
 80157e0:	f000 fcd8 	bl	8016194 <_Balloc>
 80157e4:	4682      	mov	sl, r0
 80157e6:	2800      	cmp	r0, #0
 80157e8:	d13c      	bne.n	8015864 <_dtoa_r+0x2ec>
 80157ea:	4b1b      	ldr	r3, [pc, #108]	@ (8015858 <_dtoa_r+0x2e0>)
 80157ec:	4602      	mov	r2, r0
 80157ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80157f2:	e6d8      	b.n	80155a6 <_dtoa_r+0x2e>
 80157f4:	2301      	movs	r3, #1
 80157f6:	e7e0      	b.n	80157ba <_dtoa_r+0x242>
 80157f8:	2401      	movs	r4, #1
 80157fa:	2300      	movs	r3, #0
 80157fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80157fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015800:	f04f 33ff 	mov.w	r3, #4294967295
 8015804:	9300      	str	r3, [sp, #0]
 8015806:	9307      	str	r3, [sp, #28]
 8015808:	2200      	movs	r2, #0
 801580a:	2312      	movs	r3, #18
 801580c:	e7d0      	b.n	80157b0 <_dtoa_r+0x238>
 801580e:	2301      	movs	r3, #1
 8015810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015812:	e7f5      	b.n	8015800 <_dtoa_r+0x288>
 8015814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015816:	9300      	str	r3, [sp, #0]
 8015818:	9307      	str	r3, [sp, #28]
 801581a:	e7d7      	b.n	80157cc <_dtoa_r+0x254>
 801581c:	3101      	adds	r1, #1
 801581e:	0052      	lsls	r2, r2, #1
 8015820:	e7d8      	b.n	80157d4 <_dtoa_r+0x25c>
 8015822:	bf00      	nop
 8015824:	f3af 8000 	nop.w
 8015828:	636f4361 	.word	0x636f4361
 801582c:	3fd287a7 	.word	0x3fd287a7
 8015830:	8b60c8b3 	.word	0x8b60c8b3
 8015834:	3fc68a28 	.word	0x3fc68a28
 8015838:	509f79fb 	.word	0x509f79fb
 801583c:	3fd34413 	.word	0x3fd34413
 8015840:	080186a9 	.word	0x080186a9
 8015844:	080186c0 	.word	0x080186c0
 8015848:	7ff00000 	.word	0x7ff00000
 801584c:	08018679 	.word	0x08018679
 8015850:	3ff80000 	.word	0x3ff80000
 8015854:	080187b8 	.word	0x080187b8
 8015858:	08018718 	.word	0x08018718
 801585c:	080186a5 	.word	0x080186a5
 8015860:	08018678 	.word	0x08018678
 8015864:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015868:	6018      	str	r0, [r3, #0]
 801586a:	9b07      	ldr	r3, [sp, #28]
 801586c:	2b0e      	cmp	r3, #14
 801586e:	f200 80a4 	bhi.w	80159ba <_dtoa_r+0x442>
 8015872:	2c00      	cmp	r4, #0
 8015874:	f000 80a1 	beq.w	80159ba <_dtoa_r+0x442>
 8015878:	2f00      	cmp	r7, #0
 801587a:	dd33      	ble.n	80158e4 <_dtoa_r+0x36c>
 801587c:	4bad      	ldr	r3, [pc, #692]	@ (8015b34 <_dtoa_r+0x5bc>)
 801587e:	f007 020f 	and.w	r2, r7, #15
 8015882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015886:	ed93 7b00 	vldr	d7, [r3]
 801588a:	05f8      	lsls	r0, r7, #23
 801588c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015890:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015894:	d516      	bpl.n	80158c4 <_dtoa_r+0x34c>
 8015896:	4ba8      	ldr	r3, [pc, #672]	@ (8015b38 <_dtoa_r+0x5c0>)
 8015898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801589c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80158a0:	f7eb f804 	bl	80008ac <__aeabi_ddiv>
 80158a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158a8:	f004 040f 	and.w	r4, r4, #15
 80158ac:	2603      	movs	r6, #3
 80158ae:	4da2      	ldr	r5, [pc, #648]	@ (8015b38 <_dtoa_r+0x5c0>)
 80158b0:	b954      	cbnz	r4, 80158c8 <_dtoa_r+0x350>
 80158b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80158ba:	f7ea fff7 	bl	80008ac <__aeabi_ddiv>
 80158be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158c2:	e028      	b.n	8015916 <_dtoa_r+0x39e>
 80158c4:	2602      	movs	r6, #2
 80158c6:	e7f2      	b.n	80158ae <_dtoa_r+0x336>
 80158c8:	07e1      	lsls	r1, r4, #31
 80158ca:	d508      	bpl.n	80158de <_dtoa_r+0x366>
 80158cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80158d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80158d4:	f7ea fec0 	bl	8000658 <__aeabi_dmul>
 80158d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158dc:	3601      	adds	r6, #1
 80158de:	1064      	asrs	r4, r4, #1
 80158e0:	3508      	adds	r5, #8
 80158e2:	e7e5      	b.n	80158b0 <_dtoa_r+0x338>
 80158e4:	f000 80d2 	beq.w	8015a8c <_dtoa_r+0x514>
 80158e8:	427c      	negs	r4, r7
 80158ea:	4b92      	ldr	r3, [pc, #584]	@ (8015b34 <_dtoa_r+0x5bc>)
 80158ec:	4d92      	ldr	r5, [pc, #584]	@ (8015b38 <_dtoa_r+0x5c0>)
 80158ee:	f004 020f 	and.w	r2, r4, #15
 80158f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80158f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80158fe:	f7ea feab 	bl	8000658 <__aeabi_dmul>
 8015902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015906:	1124      	asrs	r4, r4, #4
 8015908:	2300      	movs	r3, #0
 801590a:	2602      	movs	r6, #2
 801590c:	2c00      	cmp	r4, #0
 801590e:	f040 80b2 	bne.w	8015a76 <_dtoa_r+0x4fe>
 8015912:	2b00      	cmp	r3, #0
 8015914:	d1d3      	bne.n	80158be <_dtoa_r+0x346>
 8015916:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015918:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801591c:	2b00      	cmp	r3, #0
 801591e:	f000 80b7 	beq.w	8015a90 <_dtoa_r+0x518>
 8015922:	4b86      	ldr	r3, [pc, #536]	@ (8015b3c <_dtoa_r+0x5c4>)
 8015924:	2200      	movs	r2, #0
 8015926:	4620      	mov	r0, r4
 8015928:	4629      	mov	r1, r5
 801592a:	f7eb f907 	bl	8000b3c <__aeabi_dcmplt>
 801592e:	2800      	cmp	r0, #0
 8015930:	f000 80ae 	beq.w	8015a90 <_dtoa_r+0x518>
 8015934:	9b07      	ldr	r3, [sp, #28]
 8015936:	2b00      	cmp	r3, #0
 8015938:	f000 80aa 	beq.w	8015a90 <_dtoa_r+0x518>
 801593c:	9b00      	ldr	r3, [sp, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	dd37      	ble.n	80159b2 <_dtoa_r+0x43a>
 8015942:	1e7b      	subs	r3, r7, #1
 8015944:	9304      	str	r3, [sp, #16]
 8015946:	4620      	mov	r0, r4
 8015948:	4b7d      	ldr	r3, [pc, #500]	@ (8015b40 <_dtoa_r+0x5c8>)
 801594a:	2200      	movs	r2, #0
 801594c:	4629      	mov	r1, r5
 801594e:	f7ea fe83 	bl	8000658 <__aeabi_dmul>
 8015952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015956:	9c00      	ldr	r4, [sp, #0]
 8015958:	3601      	adds	r6, #1
 801595a:	4630      	mov	r0, r6
 801595c:	f7ea fe12 	bl	8000584 <__aeabi_i2d>
 8015960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015964:	f7ea fe78 	bl	8000658 <__aeabi_dmul>
 8015968:	4b76      	ldr	r3, [pc, #472]	@ (8015b44 <_dtoa_r+0x5cc>)
 801596a:	2200      	movs	r2, #0
 801596c:	f7ea fcbe 	bl	80002ec <__adddf3>
 8015970:	4605      	mov	r5, r0
 8015972:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015976:	2c00      	cmp	r4, #0
 8015978:	f040 808d 	bne.w	8015a96 <_dtoa_r+0x51e>
 801597c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015980:	4b71      	ldr	r3, [pc, #452]	@ (8015b48 <_dtoa_r+0x5d0>)
 8015982:	2200      	movs	r2, #0
 8015984:	f7ea fcb0 	bl	80002e8 <__aeabi_dsub>
 8015988:	4602      	mov	r2, r0
 801598a:	460b      	mov	r3, r1
 801598c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015990:	462a      	mov	r2, r5
 8015992:	4633      	mov	r3, r6
 8015994:	f7eb f8f0 	bl	8000b78 <__aeabi_dcmpgt>
 8015998:	2800      	cmp	r0, #0
 801599a:	f040 828b 	bne.w	8015eb4 <_dtoa_r+0x93c>
 801599e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159a2:	462a      	mov	r2, r5
 80159a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80159a8:	f7eb f8c8 	bl	8000b3c <__aeabi_dcmplt>
 80159ac:	2800      	cmp	r0, #0
 80159ae:	f040 8128 	bne.w	8015c02 <_dtoa_r+0x68a>
 80159b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80159b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80159ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f2c0 815a 	blt.w	8015c76 <_dtoa_r+0x6fe>
 80159c2:	2f0e      	cmp	r7, #14
 80159c4:	f300 8157 	bgt.w	8015c76 <_dtoa_r+0x6fe>
 80159c8:	4b5a      	ldr	r3, [pc, #360]	@ (8015b34 <_dtoa_r+0x5bc>)
 80159ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80159ce:	ed93 7b00 	vldr	d7, [r3]
 80159d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	ed8d 7b00 	vstr	d7, [sp]
 80159da:	da03      	bge.n	80159e4 <_dtoa_r+0x46c>
 80159dc:	9b07      	ldr	r3, [sp, #28]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f340 8101 	ble.w	8015be6 <_dtoa_r+0x66e>
 80159e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80159e8:	4656      	mov	r6, sl
 80159ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159ee:	4620      	mov	r0, r4
 80159f0:	4629      	mov	r1, r5
 80159f2:	f7ea ff5b 	bl	80008ac <__aeabi_ddiv>
 80159f6:	f7eb f8df 	bl	8000bb8 <__aeabi_d2iz>
 80159fa:	4680      	mov	r8, r0
 80159fc:	f7ea fdc2 	bl	8000584 <__aeabi_i2d>
 8015a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a04:	f7ea fe28 	bl	8000658 <__aeabi_dmul>
 8015a08:	4602      	mov	r2, r0
 8015a0a:	460b      	mov	r3, r1
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	4629      	mov	r1, r5
 8015a10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015a14:	f7ea fc68 	bl	80002e8 <__aeabi_dsub>
 8015a18:	f806 4b01 	strb.w	r4, [r6], #1
 8015a1c:	9d07      	ldr	r5, [sp, #28]
 8015a1e:	eba6 040a 	sub.w	r4, r6, sl
 8015a22:	42a5      	cmp	r5, r4
 8015a24:	4602      	mov	r2, r0
 8015a26:	460b      	mov	r3, r1
 8015a28:	f040 8117 	bne.w	8015c5a <_dtoa_r+0x6e2>
 8015a2c:	f7ea fc5e 	bl	80002ec <__adddf3>
 8015a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a34:	4604      	mov	r4, r0
 8015a36:	460d      	mov	r5, r1
 8015a38:	f7eb f89e 	bl	8000b78 <__aeabi_dcmpgt>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	f040 80f9 	bne.w	8015c34 <_dtoa_r+0x6bc>
 8015a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a46:	4620      	mov	r0, r4
 8015a48:	4629      	mov	r1, r5
 8015a4a:	f7eb f86d 	bl	8000b28 <__aeabi_dcmpeq>
 8015a4e:	b118      	cbz	r0, 8015a58 <_dtoa_r+0x4e0>
 8015a50:	f018 0f01 	tst.w	r8, #1
 8015a54:	f040 80ee 	bne.w	8015c34 <_dtoa_r+0x6bc>
 8015a58:	4649      	mov	r1, r9
 8015a5a:	4658      	mov	r0, fp
 8015a5c:	f000 fbda 	bl	8016214 <_Bfree>
 8015a60:	2300      	movs	r3, #0
 8015a62:	7033      	strb	r3, [r6, #0]
 8015a64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015a66:	3701      	adds	r7, #1
 8015a68:	601f      	str	r7, [r3, #0]
 8015a6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	f000 831d 	beq.w	80160ac <_dtoa_r+0xb34>
 8015a72:	601e      	str	r6, [r3, #0]
 8015a74:	e31a      	b.n	80160ac <_dtoa_r+0xb34>
 8015a76:	07e2      	lsls	r2, r4, #31
 8015a78:	d505      	bpl.n	8015a86 <_dtoa_r+0x50e>
 8015a7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a7e:	f7ea fdeb 	bl	8000658 <__aeabi_dmul>
 8015a82:	3601      	adds	r6, #1
 8015a84:	2301      	movs	r3, #1
 8015a86:	1064      	asrs	r4, r4, #1
 8015a88:	3508      	adds	r5, #8
 8015a8a:	e73f      	b.n	801590c <_dtoa_r+0x394>
 8015a8c:	2602      	movs	r6, #2
 8015a8e:	e742      	b.n	8015916 <_dtoa_r+0x39e>
 8015a90:	9c07      	ldr	r4, [sp, #28]
 8015a92:	9704      	str	r7, [sp, #16]
 8015a94:	e761      	b.n	801595a <_dtoa_r+0x3e2>
 8015a96:	4b27      	ldr	r3, [pc, #156]	@ (8015b34 <_dtoa_r+0x5bc>)
 8015a98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015a9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015a9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015aa2:	4454      	add	r4, sl
 8015aa4:	2900      	cmp	r1, #0
 8015aa6:	d053      	beq.n	8015b50 <_dtoa_r+0x5d8>
 8015aa8:	4928      	ldr	r1, [pc, #160]	@ (8015b4c <_dtoa_r+0x5d4>)
 8015aaa:	2000      	movs	r0, #0
 8015aac:	f7ea fefe 	bl	80008ac <__aeabi_ddiv>
 8015ab0:	4633      	mov	r3, r6
 8015ab2:	462a      	mov	r2, r5
 8015ab4:	f7ea fc18 	bl	80002e8 <__aeabi_dsub>
 8015ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015abc:	4656      	mov	r6, sl
 8015abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ac2:	f7eb f879 	bl	8000bb8 <__aeabi_d2iz>
 8015ac6:	4605      	mov	r5, r0
 8015ac8:	f7ea fd5c 	bl	8000584 <__aeabi_i2d>
 8015acc:	4602      	mov	r2, r0
 8015ace:	460b      	mov	r3, r1
 8015ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ad4:	f7ea fc08 	bl	80002e8 <__aeabi_dsub>
 8015ad8:	3530      	adds	r5, #48	@ 0x30
 8015ada:	4602      	mov	r2, r0
 8015adc:	460b      	mov	r3, r1
 8015ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015ae2:	f806 5b01 	strb.w	r5, [r6], #1
 8015ae6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015aea:	f7eb f827 	bl	8000b3c <__aeabi_dcmplt>
 8015aee:	2800      	cmp	r0, #0
 8015af0:	d171      	bne.n	8015bd6 <_dtoa_r+0x65e>
 8015af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015af6:	4911      	ldr	r1, [pc, #68]	@ (8015b3c <_dtoa_r+0x5c4>)
 8015af8:	2000      	movs	r0, #0
 8015afa:	f7ea fbf5 	bl	80002e8 <__aeabi_dsub>
 8015afe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015b02:	f7eb f81b 	bl	8000b3c <__aeabi_dcmplt>
 8015b06:	2800      	cmp	r0, #0
 8015b08:	f040 8095 	bne.w	8015c36 <_dtoa_r+0x6be>
 8015b0c:	42a6      	cmp	r6, r4
 8015b0e:	f43f af50 	beq.w	80159b2 <_dtoa_r+0x43a>
 8015b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015b16:	4b0a      	ldr	r3, [pc, #40]	@ (8015b40 <_dtoa_r+0x5c8>)
 8015b18:	2200      	movs	r2, #0
 8015b1a:	f7ea fd9d 	bl	8000658 <__aeabi_dmul>
 8015b1e:	4b08      	ldr	r3, [pc, #32]	@ (8015b40 <_dtoa_r+0x5c8>)
 8015b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015b24:	2200      	movs	r2, #0
 8015b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b2a:	f7ea fd95 	bl	8000658 <__aeabi_dmul>
 8015b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b32:	e7c4      	b.n	8015abe <_dtoa_r+0x546>
 8015b34:	080187b8 	.word	0x080187b8
 8015b38:	08018790 	.word	0x08018790
 8015b3c:	3ff00000 	.word	0x3ff00000
 8015b40:	40240000 	.word	0x40240000
 8015b44:	401c0000 	.word	0x401c0000
 8015b48:	40140000 	.word	0x40140000
 8015b4c:	3fe00000 	.word	0x3fe00000
 8015b50:	4631      	mov	r1, r6
 8015b52:	4628      	mov	r0, r5
 8015b54:	f7ea fd80 	bl	8000658 <__aeabi_dmul>
 8015b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015b5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8015b5e:	4656      	mov	r6, sl
 8015b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b64:	f7eb f828 	bl	8000bb8 <__aeabi_d2iz>
 8015b68:	4605      	mov	r5, r0
 8015b6a:	f7ea fd0b 	bl	8000584 <__aeabi_i2d>
 8015b6e:	4602      	mov	r2, r0
 8015b70:	460b      	mov	r3, r1
 8015b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b76:	f7ea fbb7 	bl	80002e8 <__aeabi_dsub>
 8015b7a:	3530      	adds	r5, #48	@ 0x30
 8015b7c:	f806 5b01 	strb.w	r5, [r6], #1
 8015b80:	4602      	mov	r2, r0
 8015b82:	460b      	mov	r3, r1
 8015b84:	42a6      	cmp	r6, r4
 8015b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015b8a:	f04f 0200 	mov.w	r2, #0
 8015b8e:	d124      	bne.n	8015bda <_dtoa_r+0x662>
 8015b90:	4bac      	ldr	r3, [pc, #688]	@ (8015e44 <_dtoa_r+0x8cc>)
 8015b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015b96:	f7ea fba9 	bl	80002ec <__adddf3>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ba2:	f7ea ffe9 	bl	8000b78 <__aeabi_dcmpgt>
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	d145      	bne.n	8015c36 <_dtoa_r+0x6be>
 8015baa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015bae:	49a5      	ldr	r1, [pc, #660]	@ (8015e44 <_dtoa_r+0x8cc>)
 8015bb0:	2000      	movs	r0, #0
 8015bb2:	f7ea fb99 	bl	80002e8 <__aeabi_dsub>
 8015bb6:	4602      	mov	r2, r0
 8015bb8:	460b      	mov	r3, r1
 8015bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bbe:	f7ea ffbd 	bl	8000b3c <__aeabi_dcmplt>
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	f43f aef5 	beq.w	80159b2 <_dtoa_r+0x43a>
 8015bc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015bca:	1e73      	subs	r3, r6, #1
 8015bcc:	9315      	str	r3, [sp, #84]	@ 0x54
 8015bce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015bd2:	2b30      	cmp	r3, #48	@ 0x30
 8015bd4:	d0f8      	beq.n	8015bc8 <_dtoa_r+0x650>
 8015bd6:	9f04      	ldr	r7, [sp, #16]
 8015bd8:	e73e      	b.n	8015a58 <_dtoa_r+0x4e0>
 8015bda:	4b9b      	ldr	r3, [pc, #620]	@ (8015e48 <_dtoa_r+0x8d0>)
 8015bdc:	f7ea fd3c 	bl	8000658 <__aeabi_dmul>
 8015be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015be4:	e7bc      	b.n	8015b60 <_dtoa_r+0x5e8>
 8015be6:	d10c      	bne.n	8015c02 <_dtoa_r+0x68a>
 8015be8:	4b98      	ldr	r3, [pc, #608]	@ (8015e4c <_dtoa_r+0x8d4>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bf0:	f7ea fd32 	bl	8000658 <__aeabi_dmul>
 8015bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bf8:	f7ea ffb4 	bl	8000b64 <__aeabi_dcmpge>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	f000 8157 	beq.w	8015eb0 <_dtoa_r+0x938>
 8015c02:	2400      	movs	r4, #0
 8015c04:	4625      	mov	r5, r4
 8015c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c08:	43db      	mvns	r3, r3
 8015c0a:	9304      	str	r3, [sp, #16]
 8015c0c:	4656      	mov	r6, sl
 8015c0e:	2700      	movs	r7, #0
 8015c10:	4621      	mov	r1, r4
 8015c12:	4658      	mov	r0, fp
 8015c14:	f000 fafe 	bl	8016214 <_Bfree>
 8015c18:	2d00      	cmp	r5, #0
 8015c1a:	d0dc      	beq.n	8015bd6 <_dtoa_r+0x65e>
 8015c1c:	b12f      	cbz	r7, 8015c2a <_dtoa_r+0x6b2>
 8015c1e:	42af      	cmp	r7, r5
 8015c20:	d003      	beq.n	8015c2a <_dtoa_r+0x6b2>
 8015c22:	4639      	mov	r1, r7
 8015c24:	4658      	mov	r0, fp
 8015c26:	f000 faf5 	bl	8016214 <_Bfree>
 8015c2a:	4629      	mov	r1, r5
 8015c2c:	4658      	mov	r0, fp
 8015c2e:	f000 faf1 	bl	8016214 <_Bfree>
 8015c32:	e7d0      	b.n	8015bd6 <_dtoa_r+0x65e>
 8015c34:	9704      	str	r7, [sp, #16]
 8015c36:	4633      	mov	r3, r6
 8015c38:	461e      	mov	r6, r3
 8015c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015c3e:	2a39      	cmp	r2, #57	@ 0x39
 8015c40:	d107      	bne.n	8015c52 <_dtoa_r+0x6da>
 8015c42:	459a      	cmp	sl, r3
 8015c44:	d1f8      	bne.n	8015c38 <_dtoa_r+0x6c0>
 8015c46:	9a04      	ldr	r2, [sp, #16]
 8015c48:	3201      	adds	r2, #1
 8015c4a:	9204      	str	r2, [sp, #16]
 8015c4c:	2230      	movs	r2, #48	@ 0x30
 8015c4e:	f88a 2000 	strb.w	r2, [sl]
 8015c52:	781a      	ldrb	r2, [r3, #0]
 8015c54:	3201      	adds	r2, #1
 8015c56:	701a      	strb	r2, [r3, #0]
 8015c58:	e7bd      	b.n	8015bd6 <_dtoa_r+0x65e>
 8015c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8015e48 <_dtoa_r+0x8d0>)
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f7ea fcfb 	bl	8000658 <__aeabi_dmul>
 8015c62:	2200      	movs	r2, #0
 8015c64:	2300      	movs	r3, #0
 8015c66:	4604      	mov	r4, r0
 8015c68:	460d      	mov	r5, r1
 8015c6a:	f7ea ff5d 	bl	8000b28 <__aeabi_dcmpeq>
 8015c6e:	2800      	cmp	r0, #0
 8015c70:	f43f aebb 	beq.w	80159ea <_dtoa_r+0x472>
 8015c74:	e6f0      	b.n	8015a58 <_dtoa_r+0x4e0>
 8015c76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015c78:	2a00      	cmp	r2, #0
 8015c7a:	f000 80db 	beq.w	8015e34 <_dtoa_r+0x8bc>
 8015c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c80:	2a01      	cmp	r2, #1
 8015c82:	f300 80bf 	bgt.w	8015e04 <_dtoa_r+0x88c>
 8015c86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015c88:	2a00      	cmp	r2, #0
 8015c8a:	f000 80b7 	beq.w	8015dfc <_dtoa_r+0x884>
 8015c8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015c92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015c94:	4646      	mov	r6, r8
 8015c96:	9a08      	ldr	r2, [sp, #32]
 8015c98:	2101      	movs	r1, #1
 8015c9a:	441a      	add	r2, r3
 8015c9c:	4658      	mov	r0, fp
 8015c9e:	4498      	add	r8, r3
 8015ca0:	9208      	str	r2, [sp, #32]
 8015ca2:	f000 fb6b 	bl	801637c <__i2b>
 8015ca6:	4605      	mov	r5, r0
 8015ca8:	b15e      	cbz	r6, 8015cc2 <_dtoa_r+0x74a>
 8015caa:	9b08      	ldr	r3, [sp, #32]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	dd08      	ble.n	8015cc2 <_dtoa_r+0x74a>
 8015cb0:	42b3      	cmp	r3, r6
 8015cb2:	9a08      	ldr	r2, [sp, #32]
 8015cb4:	bfa8      	it	ge
 8015cb6:	4633      	movge	r3, r6
 8015cb8:	eba8 0803 	sub.w	r8, r8, r3
 8015cbc:	1af6      	subs	r6, r6, r3
 8015cbe:	1ad3      	subs	r3, r2, r3
 8015cc0:	9308      	str	r3, [sp, #32]
 8015cc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cc4:	b1f3      	cbz	r3, 8015d04 <_dtoa_r+0x78c>
 8015cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	f000 80b7 	beq.w	8015e3c <_dtoa_r+0x8c4>
 8015cce:	b18c      	cbz	r4, 8015cf4 <_dtoa_r+0x77c>
 8015cd0:	4629      	mov	r1, r5
 8015cd2:	4622      	mov	r2, r4
 8015cd4:	4658      	mov	r0, fp
 8015cd6:	f000 fc11 	bl	80164fc <__pow5mult>
 8015cda:	464a      	mov	r2, r9
 8015cdc:	4601      	mov	r1, r0
 8015cde:	4605      	mov	r5, r0
 8015ce0:	4658      	mov	r0, fp
 8015ce2:	f000 fb61 	bl	80163a8 <__multiply>
 8015ce6:	4649      	mov	r1, r9
 8015ce8:	9004      	str	r0, [sp, #16]
 8015cea:	4658      	mov	r0, fp
 8015cec:	f000 fa92 	bl	8016214 <_Bfree>
 8015cf0:	9b04      	ldr	r3, [sp, #16]
 8015cf2:	4699      	mov	r9, r3
 8015cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cf6:	1b1a      	subs	r2, r3, r4
 8015cf8:	d004      	beq.n	8015d04 <_dtoa_r+0x78c>
 8015cfa:	4649      	mov	r1, r9
 8015cfc:	4658      	mov	r0, fp
 8015cfe:	f000 fbfd 	bl	80164fc <__pow5mult>
 8015d02:	4681      	mov	r9, r0
 8015d04:	2101      	movs	r1, #1
 8015d06:	4658      	mov	r0, fp
 8015d08:	f000 fb38 	bl	801637c <__i2b>
 8015d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d0e:	4604      	mov	r4, r0
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	f000 81cf 	beq.w	80160b4 <_dtoa_r+0xb3c>
 8015d16:	461a      	mov	r2, r3
 8015d18:	4601      	mov	r1, r0
 8015d1a:	4658      	mov	r0, fp
 8015d1c:	f000 fbee 	bl	80164fc <__pow5mult>
 8015d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d22:	2b01      	cmp	r3, #1
 8015d24:	4604      	mov	r4, r0
 8015d26:	f300 8095 	bgt.w	8015e54 <_dtoa_r+0x8dc>
 8015d2a:	9b02      	ldr	r3, [sp, #8]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	f040 8087 	bne.w	8015e40 <_dtoa_r+0x8c8>
 8015d32:	9b03      	ldr	r3, [sp, #12]
 8015d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	f040 8089 	bne.w	8015e50 <_dtoa_r+0x8d8>
 8015d3e:	9b03      	ldr	r3, [sp, #12]
 8015d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015d44:	0d1b      	lsrs	r3, r3, #20
 8015d46:	051b      	lsls	r3, r3, #20
 8015d48:	b12b      	cbz	r3, 8015d56 <_dtoa_r+0x7de>
 8015d4a:	9b08      	ldr	r3, [sp, #32]
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	9308      	str	r3, [sp, #32]
 8015d50:	f108 0801 	add.w	r8, r8, #1
 8015d54:	2301      	movs	r3, #1
 8015d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8015d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	f000 81b0 	beq.w	80160c0 <_dtoa_r+0xb48>
 8015d60:	6923      	ldr	r3, [r4, #16]
 8015d62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015d66:	6918      	ldr	r0, [r3, #16]
 8015d68:	f000 fabc 	bl	80162e4 <__hi0bits>
 8015d6c:	f1c0 0020 	rsb	r0, r0, #32
 8015d70:	9b08      	ldr	r3, [sp, #32]
 8015d72:	4418      	add	r0, r3
 8015d74:	f010 001f 	ands.w	r0, r0, #31
 8015d78:	d077      	beq.n	8015e6a <_dtoa_r+0x8f2>
 8015d7a:	f1c0 0320 	rsb	r3, r0, #32
 8015d7e:	2b04      	cmp	r3, #4
 8015d80:	dd6b      	ble.n	8015e5a <_dtoa_r+0x8e2>
 8015d82:	9b08      	ldr	r3, [sp, #32]
 8015d84:	f1c0 001c 	rsb	r0, r0, #28
 8015d88:	4403      	add	r3, r0
 8015d8a:	4480      	add	r8, r0
 8015d8c:	4406      	add	r6, r0
 8015d8e:	9308      	str	r3, [sp, #32]
 8015d90:	f1b8 0f00 	cmp.w	r8, #0
 8015d94:	dd05      	ble.n	8015da2 <_dtoa_r+0x82a>
 8015d96:	4649      	mov	r1, r9
 8015d98:	4642      	mov	r2, r8
 8015d9a:	4658      	mov	r0, fp
 8015d9c:	f000 fc08 	bl	80165b0 <__lshift>
 8015da0:	4681      	mov	r9, r0
 8015da2:	9b08      	ldr	r3, [sp, #32]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	dd05      	ble.n	8015db4 <_dtoa_r+0x83c>
 8015da8:	4621      	mov	r1, r4
 8015daa:	461a      	mov	r2, r3
 8015dac:	4658      	mov	r0, fp
 8015dae:	f000 fbff 	bl	80165b0 <__lshift>
 8015db2:	4604      	mov	r4, r0
 8015db4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d059      	beq.n	8015e6e <_dtoa_r+0x8f6>
 8015dba:	4621      	mov	r1, r4
 8015dbc:	4648      	mov	r0, r9
 8015dbe:	f000 fc63 	bl	8016688 <__mcmp>
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	da53      	bge.n	8015e6e <_dtoa_r+0x8f6>
 8015dc6:	1e7b      	subs	r3, r7, #1
 8015dc8:	9304      	str	r3, [sp, #16]
 8015dca:	4649      	mov	r1, r9
 8015dcc:	2300      	movs	r3, #0
 8015dce:	220a      	movs	r2, #10
 8015dd0:	4658      	mov	r0, fp
 8015dd2:	f000 fa41 	bl	8016258 <__multadd>
 8015dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015dd8:	4681      	mov	r9, r0
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	f000 8172 	beq.w	80160c4 <_dtoa_r+0xb4c>
 8015de0:	2300      	movs	r3, #0
 8015de2:	4629      	mov	r1, r5
 8015de4:	220a      	movs	r2, #10
 8015de6:	4658      	mov	r0, fp
 8015de8:	f000 fa36 	bl	8016258 <__multadd>
 8015dec:	9b00      	ldr	r3, [sp, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	4605      	mov	r5, r0
 8015df2:	dc67      	bgt.n	8015ec4 <_dtoa_r+0x94c>
 8015df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015df6:	2b02      	cmp	r3, #2
 8015df8:	dc41      	bgt.n	8015e7e <_dtoa_r+0x906>
 8015dfa:	e063      	b.n	8015ec4 <_dtoa_r+0x94c>
 8015dfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015dfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015e02:	e746      	b.n	8015c92 <_dtoa_r+0x71a>
 8015e04:	9b07      	ldr	r3, [sp, #28]
 8015e06:	1e5c      	subs	r4, r3, #1
 8015e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e0a:	42a3      	cmp	r3, r4
 8015e0c:	bfbf      	itttt	lt
 8015e0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015e10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015e12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015e14:	1ae3      	sublt	r3, r4, r3
 8015e16:	bfb4      	ite	lt
 8015e18:	18d2      	addlt	r2, r2, r3
 8015e1a:	1b1c      	subge	r4, r3, r4
 8015e1c:	9b07      	ldr	r3, [sp, #28]
 8015e1e:	bfbc      	itt	lt
 8015e20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015e22:	2400      	movlt	r4, #0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	bfb5      	itete	lt
 8015e28:	eba8 0603 	sublt.w	r6, r8, r3
 8015e2c:	9b07      	ldrge	r3, [sp, #28]
 8015e2e:	2300      	movlt	r3, #0
 8015e30:	4646      	movge	r6, r8
 8015e32:	e730      	b.n	8015c96 <_dtoa_r+0x71e>
 8015e34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015e36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015e38:	4646      	mov	r6, r8
 8015e3a:	e735      	b.n	8015ca8 <_dtoa_r+0x730>
 8015e3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015e3e:	e75c      	b.n	8015cfa <_dtoa_r+0x782>
 8015e40:	2300      	movs	r3, #0
 8015e42:	e788      	b.n	8015d56 <_dtoa_r+0x7de>
 8015e44:	3fe00000 	.word	0x3fe00000
 8015e48:	40240000 	.word	0x40240000
 8015e4c:	40140000 	.word	0x40140000
 8015e50:	9b02      	ldr	r3, [sp, #8]
 8015e52:	e780      	b.n	8015d56 <_dtoa_r+0x7de>
 8015e54:	2300      	movs	r3, #0
 8015e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e58:	e782      	b.n	8015d60 <_dtoa_r+0x7e8>
 8015e5a:	d099      	beq.n	8015d90 <_dtoa_r+0x818>
 8015e5c:	9a08      	ldr	r2, [sp, #32]
 8015e5e:	331c      	adds	r3, #28
 8015e60:	441a      	add	r2, r3
 8015e62:	4498      	add	r8, r3
 8015e64:	441e      	add	r6, r3
 8015e66:	9208      	str	r2, [sp, #32]
 8015e68:	e792      	b.n	8015d90 <_dtoa_r+0x818>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	e7f6      	b.n	8015e5c <_dtoa_r+0x8e4>
 8015e6e:	9b07      	ldr	r3, [sp, #28]
 8015e70:	9704      	str	r7, [sp, #16]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	dc20      	bgt.n	8015eb8 <_dtoa_r+0x940>
 8015e76:	9300      	str	r3, [sp, #0]
 8015e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e7a:	2b02      	cmp	r3, #2
 8015e7c:	dd1e      	ble.n	8015ebc <_dtoa_r+0x944>
 8015e7e:	9b00      	ldr	r3, [sp, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	f47f aec0 	bne.w	8015c06 <_dtoa_r+0x68e>
 8015e86:	4621      	mov	r1, r4
 8015e88:	2205      	movs	r2, #5
 8015e8a:	4658      	mov	r0, fp
 8015e8c:	f000 f9e4 	bl	8016258 <__multadd>
 8015e90:	4601      	mov	r1, r0
 8015e92:	4604      	mov	r4, r0
 8015e94:	4648      	mov	r0, r9
 8015e96:	f000 fbf7 	bl	8016688 <__mcmp>
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	f77f aeb3 	ble.w	8015c06 <_dtoa_r+0x68e>
 8015ea0:	4656      	mov	r6, sl
 8015ea2:	2331      	movs	r3, #49	@ 0x31
 8015ea4:	f806 3b01 	strb.w	r3, [r6], #1
 8015ea8:	9b04      	ldr	r3, [sp, #16]
 8015eaa:	3301      	adds	r3, #1
 8015eac:	9304      	str	r3, [sp, #16]
 8015eae:	e6ae      	b.n	8015c0e <_dtoa_r+0x696>
 8015eb0:	9c07      	ldr	r4, [sp, #28]
 8015eb2:	9704      	str	r7, [sp, #16]
 8015eb4:	4625      	mov	r5, r4
 8015eb6:	e7f3      	b.n	8015ea0 <_dtoa_r+0x928>
 8015eb8:	9b07      	ldr	r3, [sp, #28]
 8015eba:	9300      	str	r3, [sp, #0]
 8015ebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	f000 8104 	beq.w	80160cc <_dtoa_r+0xb54>
 8015ec4:	2e00      	cmp	r6, #0
 8015ec6:	dd05      	ble.n	8015ed4 <_dtoa_r+0x95c>
 8015ec8:	4629      	mov	r1, r5
 8015eca:	4632      	mov	r2, r6
 8015ecc:	4658      	mov	r0, fp
 8015ece:	f000 fb6f 	bl	80165b0 <__lshift>
 8015ed2:	4605      	mov	r5, r0
 8015ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d05a      	beq.n	8015f90 <_dtoa_r+0xa18>
 8015eda:	6869      	ldr	r1, [r5, #4]
 8015edc:	4658      	mov	r0, fp
 8015ede:	f000 f959 	bl	8016194 <_Balloc>
 8015ee2:	4606      	mov	r6, r0
 8015ee4:	b928      	cbnz	r0, 8015ef2 <_dtoa_r+0x97a>
 8015ee6:	4b84      	ldr	r3, [pc, #528]	@ (80160f8 <_dtoa_r+0xb80>)
 8015ee8:	4602      	mov	r2, r0
 8015eea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015eee:	f7ff bb5a 	b.w	80155a6 <_dtoa_r+0x2e>
 8015ef2:	692a      	ldr	r2, [r5, #16]
 8015ef4:	3202      	adds	r2, #2
 8015ef6:	0092      	lsls	r2, r2, #2
 8015ef8:	f105 010c 	add.w	r1, r5, #12
 8015efc:	300c      	adds	r0, #12
 8015efe:	f7ff faa4 	bl	801544a <memcpy>
 8015f02:	2201      	movs	r2, #1
 8015f04:	4631      	mov	r1, r6
 8015f06:	4658      	mov	r0, fp
 8015f08:	f000 fb52 	bl	80165b0 <__lshift>
 8015f0c:	f10a 0301 	add.w	r3, sl, #1
 8015f10:	9307      	str	r3, [sp, #28]
 8015f12:	9b00      	ldr	r3, [sp, #0]
 8015f14:	4453      	add	r3, sl
 8015f16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f18:	9b02      	ldr	r3, [sp, #8]
 8015f1a:	f003 0301 	and.w	r3, r3, #1
 8015f1e:	462f      	mov	r7, r5
 8015f20:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f22:	4605      	mov	r5, r0
 8015f24:	9b07      	ldr	r3, [sp, #28]
 8015f26:	4621      	mov	r1, r4
 8015f28:	3b01      	subs	r3, #1
 8015f2a:	4648      	mov	r0, r9
 8015f2c:	9300      	str	r3, [sp, #0]
 8015f2e:	f7ff fa9a 	bl	8015466 <quorem>
 8015f32:	4639      	mov	r1, r7
 8015f34:	9002      	str	r0, [sp, #8]
 8015f36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015f3a:	4648      	mov	r0, r9
 8015f3c:	f000 fba4 	bl	8016688 <__mcmp>
 8015f40:	462a      	mov	r2, r5
 8015f42:	9008      	str	r0, [sp, #32]
 8015f44:	4621      	mov	r1, r4
 8015f46:	4658      	mov	r0, fp
 8015f48:	f000 fbba 	bl	80166c0 <__mdiff>
 8015f4c:	68c2      	ldr	r2, [r0, #12]
 8015f4e:	4606      	mov	r6, r0
 8015f50:	bb02      	cbnz	r2, 8015f94 <_dtoa_r+0xa1c>
 8015f52:	4601      	mov	r1, r0
 8015f54:	4648      	mov	r0, r9
 8015f56:	f000 fb97 	bl	8016688 <__mcmp>
 8015f5a:	4602      	mov	r2, r0
 8015f5c:	4631      	mov	r1, r6
 8015f5e:	4658      	mov	r0, fp
 8015f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8015f62:	f000 f957 	bl	8016214 <_Bfree>
 8015f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f6a:	9e07      	ldr	r6, [sp, #28]
 8015f6c:	ea43 0102 	orr.w	r1, r3, r2
 8015f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f72:	4319      	orrs	r1, r3
 8015f74:	d110      	bne.n	8015f98 <_dtoa_r+0xa20>
 8015f76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015f7a:	d029      	beq.n	8015fd0 <_dtoa_r+0xa58>
 8015f7c:	9b08      	ldr	r3, [sp, #32]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	dd02      	ble.n	8015f88 <_dtoa_r+0xa10>
 8015f82:	9b02      	ldr	r3, [sp, #8]
 8015f84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015f88:	9b00      	ldr	r3, [sp, #0]
 8015f8a:	f883 8000 	strb.w	r8, [r3]
 8015f8e:	e63f      	b.n	8015c10 <_dtoa_r+0x698>
 8015f90:	4628      	mov	r0, r5
 8015f92:	e7bb      	b.n	8015f0c <_dtoa_r+0x994>
 8015f94:	2201      	movs	r2, #1
 8015f96:	e7e1      	b.n	8015f5c <_dtoa_r+0x9e4>
 8015f98:	9b08      	ldr	r3, [sp, #32]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	db04      	blt.n	8015fa8 <_dtoa_r+0xa30>
 8015f9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015fa0:	430b      	orrs	r3, r1
 8015fa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015fa4:	430b      	orrs	r3, r1
 8015fa6:	d120      	bne.n	8015fea <_dtoa_r+0xa72>
 8015fa8:	2a00      	cmp	r2, #0
 8015faa:	dded      	ble.n	8015f88 <_dtoa_r+0xa10>
 8015fac:	4649      	mov	r1, r9
 8015fae:	2201      	movs	r2, #1
 8015fb0:	4658      	mov	r0, fp
 8015fb2:	f000 fafd 	bl	80165b0 <__lshift>
 8015fb6:	4621      	mov	r1, r4
 8015fb8:	4681      	mov	r9, r0
 8015fba:	f000 fb65 	bl	8016688 <__mcmp>
 8015fbe:	2800      	cmp	r0, #0
 8015fc0:	dc03      	bgt.n	8015fca <_dtoa_r+0xa52>
 8015fc2:	d1e1      	bne.n	8015f88 <_dtoa_r+0xa10>
 8015fc4:	f018 0f01 	tst.w	r8, #1
 8015fc8:	d0de      	beq.n	8015f88 <_dtoa_r+0xa10>
 8015fca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015fce:	d1d8      	bne.n	8015f82 <_dtoa_r+0xa0a>
 8015fd0:	9a00      	ldr	r2, [sp, #0]
 8015fd2:	2339      	movs	r3, #57	@ 0x39
 8015fd4:	7013      	strb	r3, [r2, #0]
 8015fd6:	4633      	mov	r3, r6
 8015fd8:	461e      	mov	r6, r3
 8015fda:	3b01      	subs	r3, #1
 8015fdc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015fe0:	2a39      	cmp	r2, #57	@ 0x39
 8015fe2:	d052      	beq.n	801608a <_dtoa_r+0xb12>
 8015fe4:	3201      	adds	r2, #1
 8015fe6:	701a      	strb	r2, [r3, #0]
 8015fe8:	e612      	b.n	8015c10 <_dtoa_r+0x698>
 8015fea:	2a00      	cmp	r2, #0
 8015fec:	dd07      	ble.n	8015ffe <_dtoa_r+0xa86>
 8015fee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015ff2:	d0ed      	beq.n	8015fd0 <_dtoa_r+0xa58>
 8015ff4:	9a00      	ldr	r2, [sp, #0]
 8015ff6:	f108 0301 	add.w	r3, r8, #1
 8015ffa:	7013      	strb	r3, [r2, #0]
 8015ffc:	e608      	b.n	8015c10 <_dtoa_r+0x698>
 8015ffe:	9b07      	ldr	r3, [sp, #28]
 8016000:	9a07      	ldr	r2, [sp, #28]
 8016002:	f803 8c01 	strb.w	r8, [r3, #-1]
 8016006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016008:	4293      	cmp	r3, r2
 801600a:	d028      	beq.n	801605e <_dtoa_r+0xae6>
 801600c:	4649      	mov	r1, r9
 801600e:	2300      	movs	r3, #0
 8016010:	220a      	movs	r2, #10
 8016012:	4658      	mov	r0, fp
 8016014:	f000 f920 	bl	8016258 <__multadd>
 8016018:	42af      	cmp	r7, r5
 801601a:	4681      	mov	r9, r0
 801601c:	f04f 0300 	mov.w	r3, #0
 8016020:	f04f 020a 	mov.w	r2, #10
 8016024:	4639      	mov	r1, r7
 8016026:	4658      	mov	r0, fp
 8016028:	d107      	bne.n	801603a <_dtoa_r+0xac2>
 801602a:	f000 f915 	bl	8016258 <__multadd>
 801602e:	4607      	mov	r7, r0
 8016030:	4605      	mov	r5, r0
 8016032:	9b07      	ldr	r3, [sp, #28]
 8016034:	3301      	adds	r3, #1
 8016036:	9307      	str	r3, [sp, #28]
 8016038:	e774      	b.n	8015f24 <_dtoa_r+0x9ac>
 801603a:	f000 f90d 	bl	8016258 <__multadd>
 801603e:	4629      	mov	r1, r5
 8016040:	4607      	mov	r7, r0
 8016042:	2300      	movs	r3, #0
 8016044:	220a      	movs	r2, #10
 8016046:	4658      	mov	r0, fp
 8016048:	f000 f906 	bl	8016258 <__multadd>
 801604c:	4605      	mov	r5, r0
 801604e:	e7f0      	b.n	8016032 <_dtoa_r+0xaba>
 8016050:	9b00      	ldr	r3, [sp, #0]
 8016052:	2b00      	cmp	r3, #0
 8016054:	bfcc      	ite	gt
 8016056:	461e      	movgt	r6, r3
 8016058:	2601      	movle	r6, #1
 801605a:	4456      	add	r6, sl
 801605c:	2700      	movs	r7, #0
 801605e:	4649      	mov	r1, r9
 8016060:	2201      	movs	r2, #1
 8016062:	4658      	mov	r0, fp
 8016064:	f000 faa4 	bl	80165b0 <__lshift>
 8016068:	4621      	mov	r1, r4
 801606a:	4681      	mov	r9, r0
 801606c:	f000 fb0c 	bl	8016688 <__mcmp>
 8016070:	2800      	cmp	r0, #0
 8016072:	dcb0      	bgt.n	8015fd6 <_dtoa_r+0xa5e>
 8016074:	d102      	bne.n	801607c <_dtoa_r+0xb04>
 8016076:	f018 0f01 	tst.w	r8, #1
 801607a:	d1ac      	bne.n	8015fd6 <_dtoa_r+0xa5e>
 801607c:	4633      	mov	r3, r6
 801607e:	461e      	mov	r6, r3
 8016080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016084:	2a30      	cmp	r2, #48	@ 0x30
 8016086:	d0fa      	beq.n	801607e <_dtoa_r+0xb06>
 8016088:	e5c2      	b.n	8015c10 <_dtoa_r+0x698>
 801608a:	459a      	cmp	sl, r3
 801608c:	d1a4      	bne.n	8015fd8 <_dtoa_r+0xa60>
 801608e:	9b04      	ldr	r3, [sp, #16]
 8016090:	3301      	adds	r3, #1
 8016092:	9304      	str	r3, [sp, #16]
 8016094:	2331      	movs	r3, #49	@ 0x31
 8016096:	f88a 3000 	strb.w	r3, [sl]
 801609a:	e5b9      	b.n	8015c10 <_dtoa_r+0x698>
 801609c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801609e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80160fc <_dtoa_r+0xb84>
 80160a2:	b11b      	cbz	r3, 80160ac <_dtoa_r+0xb34>
 80160a4:	f10a 0308 	add.w	r3, sl, #8
 80160a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80160aa:	6013      	str	r3, [r2, #0]
 80160ac:	4650      	mov	r0, sl
 80160ae:	b019      	add	sp, #100	@ 0x64
 80160b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160b6:	2b01      	cmp	r3, #1
 80160b8:	f77f ae37 	ble.w	8015d2a <_dtoa_r+0x7b2>
 80160bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80160be:	930a      	str	r3, [sp, #40]	@ 0x28
 80160c0:	2001      	movs	r0, #1
 80160c2:	e655      	b.n	8015d70 <_dtoa_r+0x7f8>
 80160c4:	9b00      	ldr	r3, [sp, #0]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	f77f aed6 	ble.w	8015e78 <_dtoa_r+0x900>
 80160cc:	4656      	mov	r6, sl
 80160ce:	4621      	mov	r1, r4
 80160d0:	4648      	mov	r0, r9
 80160d2:	f7ff f9c8 	bl	8015466 <quorem>
 80160d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80160da:	f806 8b01 	strb.w	r8, [r6], #1
 80160de:	9b00      	ldr	r3, [sp, #0]
 80160e0:	eba6 020a 	sub.w	r2, r6, sl
 80160e4:	4293      	cmp	r3, r2
 80160e6:	ddb3      	ble.n	8016050 <_dtoa_r+0xad8>
 80160e8:	4649      	mov	r1, r9
 80160ea:	2300      	movs	r3, #0
 80160ec:	220a      	movs	r2, #10
 80160ee:	4658      	mov	r0, fp
 80160f0:	f000 f8b2 	bl	8016258 <__multadd>
 80160f4:	4681      	mov	r9, r0
 80160f6:	e7ea      	b.n	80160ce <_dtoa_r+0xb56>
 80160f8:	08018718 	.word	0x08018718
 80160fc:	0801869c 	.word	0x0801869c

08016100 <_free_r>:
 8016100:	b538      	push	{r3, r4, r5, lr}
 8016102:	4605      	mov	r5, r0
 8016104:	2900      	cmp	r1, #0
 8016106:	d041      	beq.n	801618c <_free_r+0x8c>
 8016108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801610c:	1f0c      	subs	r4, r1, #4
 801610e:	2b00      	cmp	r3, #0
 8016110:	bfb8      	it	lt
 8016112:	18e4      	addlt	r4, r4, r3
 8016114:	f7fe fb4e 	bl	80147b4 <__malloc_lock>
 8016118:	4a1d      	ldr	r2, [pc, #116]	@ (8016190 <_free_r+0x90>)
 801611a:	6813      	ldr	r3, [r2, #0]
 801611c:	b933      	cbnz	r3, 801612c <_free_r+0x2c>
 801611e:	6063      	str	r3, [r4, #4]
 8016120:	6014      	str	r4, [r2, #0]
 8016122:	4628      	mov	r0, r5
 8016124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016128:	f7fe bb4a 	b.w	80147c0 <__malloc_unlock>
 801612c:	42a3      	cmp	r3, r4
 801612e:	d908      	bls.n	8016142 <_free_r+0x42>
 8016130:	6820      	ldr	r0, [r4, #0]
 8016132:	1821      	adds	r1, r4, r0
 8016134:	428b      	cmp	r3, r1
 8016136:	bf01      	itttt	eq
 8016138:	6819      	ldreq	r1, [r3, #0]
 801613a:	685b      	ldreq	r3, [r3, #4]
 801613c:	1809      	addeq	r1, r1, r0
 801613e:	6021      	streq	r1, [r4, #0]
 8016140:	e7ed      	b.n	801611e <_free_r+0x1e>
 8016142:	461a      	mov	r2, r3
 8016144:	685b      	ldr	r3, [r3, #4]
 8016146:	b10b      	cbz	r3, 801614c <_free_r+0x4c>
 8016148:	42a3      	cmp	r3, r4
 801614a:	d9fa      	bls.n	8016142 <_free_r+0x42>
 801614c:	6811      	ldr	r1, [r2, #0]
 801614e:	1850      	adds	r0, r2, r1
 8016150:	42a0      	cmp	r0, r4
 8016152:	d10b      	bne.n	801616c <_free_r+0x6c>
 8016154:	6820      	ldr	r0, [r4, #0]
 8016156:	4401      	add	r1, r0
 8016158:	1850      	adds	r0, r2, r1
 801615a:	4283      	cmp	r3, r0
 801615c:	6011      	str	r1, [r2, #0]
 801615e:	d1e0      	bne.n	8016122 <_free_r+0x22>
 8016160:	6818      	ldr	r0, [r3, #0]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	6053      	str	r3, [r2, #4]
 8016166:	4408      	add	r0, r1
 8016168:	6010      	str	r0, [r2, #0]
 801616a:	e7da      	b.n	8016122 <_free_r+0x22>
 801616c:	d902      	bls.n	8016174 <_free_r+0x74>
 801616e:	230c      	movs	r3, #12
 8016170:	602b      	str	r3, [r5, #0]
 8016172:	e7d6      	b.n	8016122 <_free_r+0x22>
 8016174:	6820      	ldr	r0, [r4, #0]
 8016176:	1821      	adds	r1, r4, r0
 8016178:	428b      	cmp	r3, r1
 801617a:	bf04      	itt	eq
 801617c:	6819      	ldreq	r1, [r3, #0]
 801617e:	685b      	ldreq	r3, [r3, #4]
 8016180:	6063      	str	r3, [r4, #4]
 8016182:	bf04      	itt	eq
 8016184:	1809      	addeq	r1, r1, r0
 8016186:	6021      	streq	r1, [r4, #0]
 8016188:	6054      	str	r4, [r2, #4]
 801618a:	e7ca      	b.n	8016122 <_free_r+0x22>
 801618c:	bd38      	pop	{r3, r4, r5, pc}
 801618e:	bf00      	nop
 8016190:	2000059c 	.word	0x2000059c

08016194 <_Balloc>:
 8016194:	b570      	push	{r4, r5, r6, lr}
 8016196:	69c6      	ldr	r6, [r0, #28]
 8016198:	4604      	mov	r4, r0
 801619a:	460d      	mov	r5, r1
 801619c:	b976      	cbnz	r6, 80161bc <_Balloc+0x28>
 801619e:	2010      	movs	r0, #16
 80161a0:	f7fe fa56 	bl	8014650 <malloc>
 80161a4:	4602      	mov	r2, r0
 80161a6:	61e0      	str	r0, [r4, #28]
 80161a8:	b920      	cbnz	r0, 80161b4 <_Balloc+0x20>
 80161aa:	4b18      	ldr	r3, [pc, #96]	@ (801620c <_Balloc+0x78>)
 80161ac:	4818      	ldr	r0, [pc, #96]	@ (8016210 <_Balloc+0x7c>)
 80161ae:	216b      	movs	r1, #107	@ 0x6b
 80161b0:	f000 fc1e 	bl	80169f0 <__assert_func>
 80161b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80161b8:	6006      	str	r6, [r0, #0]
 80161ba:	60c6      	str	r6, [r0, #12]
 80161bc:	69e6      	ldr	r6, [r4, #28]
 80161be:	68f3      	ldr	r3, [r6, #12]
 80161c0:	b183      	cbz	r3, 80161e4 <_Balloc+0x50>
 80161c2:	69e3      	ldr	r3, [r4, #28]
 80161c4:	68db      	ldr	r3, [r3, #12]
 80161c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80161ca:	b9b8      	cbnz	r0, 80161fc <_Balloc+0x68>
 80161cc:	2101      	movs	r1, #1
 80161ce:	fa01 f605 	lsl.w	r6, r1, r5
 80161d2:	1d72      	adds	r2, r6, #5
 80161d4:	0092      	lsls	r2, r2, #2
 80161d6:	4620      	mov	r0, r4
 80161d8:	f000 fc28 	bl	8016a2c <_calloc_r>
 80161dc:	b160      	cbz	r0, 80161f8 <_Balloc+0x64>
 80161de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80161e2:	e00e      	b.n	8016202 <_Balloc+0x6e>
 80161e4:	2221      	movs	r2, #33	@ 0x21
 80161e6:	2104      	movs	r1, #4
 80161e8:	4620      	mov	r0, r4
 80161ea:	f000 fc1f 	bl	8016a2c <_calloc_r>
 80161ee:	69e3      	ldr	r3, [r4, #28]
 80161f0:	60f0      	str	r0, [r6, #12]
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d1e4      	bne.n	80161c2 <_Balloc+0x2e>
 80161f8:	2000      	movs	r0, #0
 80161fa:	bd70      	pop	{r4, r5, r6, pc}
 80161fc:	6802      	ldr	r2, [r0, #0]
 80161fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016202:	2300      	movs	r3, #0
 8016204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016208:	e7f7      	b.n	80161fa <_Balloc+0x66>
 801620a:	bf00      	nop
 801620c:	080186a9 	.word	0x080186a9
 8016210:	08018729 	.word	0x08018729

08016214 <_Bfree>:
 8016214:	b570      	push	{r4, r5, r6, lr}
 8016216:	69c6      	ldr	r6, [r0, #28]
 8016218:	4605      	mov	r5, r0
 801621a:	460c      	mov	r4, r1
 801621c:	b976      	cbnz	r6, 801623c <_Bfree+0x28>
 801621e:	2010      	movs	r0, #16
 8016220:	f7fe fa16 	bl	8014650 <malloc>
 8016224:	4602      	mov	r2, r0
 8016226:	61e8      	str	r0, [r5, #28]
 8016228:	b920      	cbnz	r0, 8016234 <_Bfree+0x20>
 801622a:	4b09      	ldr	r3, [pc, #36]	@ (8016250 <_Bfree+0x3c>)
 801622c:	4809      	ldr	r0, [pc, #36]	@ (8016254 <_Bfree+0x40>)
 801622e:	218f      	movs	r1, #143	@ 0x8f
 8016230:	f000 fbde 	bl	80169f0 <__assert_func>
 8016234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016238:	6006      	str	r6, [r0, #0]
 801623a:	60c6      	str	r6, [r0, #12]
 801623c:	b13c      	cbz	r4, 801624e <_Bfree+0x3a>
 801623e:	69eb      	ldr	r3, [r5, #28]
 8016240:	6862      	ldr	r2, [r4, #4]
 8016242:	68db      	ldr	r3, [r3, #12]
 8016244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016248:	6021      	str	r1, [r4, #0]
 801624a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801624e:	bd70      	pop	{r4, r5, r6, pc}
 8016250:	080186a9 	.word	0x080186a9
 8016254:	08018729 	.word	0x08018729

08016258 <__multadd>:
 8016258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801625c:	690d      	ldr	r5, [r1, #16]
 801625e:	4607      	mov	r7, r0
 8016260:	460c      	mov	r4, r1
 8016262:	461e      	mov	r6, r3
 8016264:	f101 0c14 	add.w	ip, r1, #20
 8016268:	2000      	movs	r0, #0
 801626a:	f8dc 3000 	ldr.w	r3, [ip]
 801626e:	b299      	uxth	r1, r3
 8016270:	fb02 6101 	mla	r1, r2, r1, r6
 8016274:	0c1e      	lsrs	r6, r3, #16
 8016276:	0c0b      	lsrs	r3, r1, #16
 8016278:	fb02 3306 	mla	r3, r2, r6, r3
 801627c:	b289      	uxth	r1, r1
 801627e:	3001      	adds	r0, #1
 8016280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016284:	4285      	cmp	r5, r0
 8016286:	f84c 1b04 	str.w	r1, [ip], #4
 801628a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801628e:	dcec      	bgt.n	801626a <__multadd+0x12>
 8016290:	b30e      	cbz	r6, 80162d6 <__multadd+0x7e>
 8016292:	68a3      	ldr	r3, [r4, #8]
 8016294:	42ab      	cmp	r3, r5
 8016296:	dc19      	bgt.n	80162cc <__multadd+0x74>
 8016298:	6861      	ldr	r1, [r4, #4]
 801629a:	4638      	mov	r0, r7
 801629c:	3101      	adds	r1, #1
 801629e:	f7ff ff79 	bl	8016194 <_Balloc>
 80162a2:	4680      	mov	r8, r0
 80162a4:	b928      	cbnz	r0, 80162b2 <__multadd+0x5a>
 80162a6:	4602      	mov	r2, r0
 80162a8:	4b0c      	ldr	r3, [pc, #48]	@ (80162dc <__multadd+0x84>)
 80162aa:	480d      	ldr	r0, [pc, #52]	@ (80162e0 <__multadd+0x88>)
 80162ac:	21ba      	movs	r1, #186	@ 0xba
 80162ae:	f000 fb9f 	bl	80169f0 <__assert_func>
 80162b2:	6922      	ldr	r2, [r4, #16]
 80162b4:	3202      	adds	r2, #2
 80162b6:	f104 010c 	add.w	r1, r4, #12
 80162ba:	0092      	lsls	r2, r2, #2
 80162bc:	300c      	adds	r0, #12
 80162be:	f7ff f8c4 	bl	801544a <memcpy>
 80162c2:	4621      	mov	r1, r4
 80162c4:	4638      	mov	r0, r7
 80162c6:	f7ff ffa5 	bl	8016214 <_Bfree>
 80162ca:	4644      	mov	r4, r8
 80162cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80162d0:	3501      	adds	r5, #1
 80162d2:	615e      	str	r6, [r3, #20]
 80162d4:	6125      	str	r5, [r4, #16]
 80162d6:	4620      	mov	r0, r4
 80162d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162dc:	08018718 	.word	0x08018718
 80162e0:	08018729 	.word	0x08018729

080162e4 <__hi0bits>:
 80162e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80162e8:	4603      	mov	r3, r0
 80162ea:	bf36      	itet	cc
 80162ec:	0403      	lslcc	r3, r0, #16
 80162ee:	2000      	movcs	r0, #0
 80162f0:	2010      	movcc	r0, #16
 80162f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80162f6:	bf3c      	itt	cc
 80162f8:	021b      	lslcc	r3, r3, #8
 80162fa:	3008      	addcc	r0, #8
 80162fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016300:	bf3c      	itt	cc
 8016302:	011b      	lslcc	r3, r3, #4
 8016304:	3004      	addcc	r0, #4
 8016306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801630a:	bf3c      	itt	cc
 801630c:	009b      	lslcc	r3, r3, #2
 801630e:	3002      	addcc	r0, #2
 8016310:	2b00      	cmp	r3, #0
 8016312:	db05      	blt.n	8016320 <__hi0bits+0x3c>
 8016314:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016318:	f100 0001 	add.w	r0, r0, #1
 801631c:	bf08      	it	eq
 801631e:	2020      	moveq	r0, #32
 8016320:	4770      	bx	lr

08016322 <__lo0bits>:
 8016322:	6803      	ldr	r3, [r0, #0]
 8016324:	4602      	mov	r2, r0
 8016326:	f013 0007 	ands.w	r0, r3, #7
 801632a:	d00b      	beq.n	8016344 <__lo0bits+0x22>
 801632c:	07d9      	lsls	r1, r3, #31
 801632e:	d421      	bmi.n	8016374 <__lo0bits+0x52>
 8016330:	0798      	lsls	r0, r3, #30
 8016332:	bf49      	itett	mi
 8016334:	085b      	lsrmi	r3, r3, #1
 8016336:	089b      	lsrpl	r3, r3, #2
 8016338:	2001      	movmi	r0, #1
 801633a:	6013      	strmi	r3, [r2, #0]
 801633c:	bf5c      	itt	pl
 801633e:	6013      	strpl	r3, [r2, #0]
 8016340:	2002      	movpl	r0, #2
 8016342:	4770      	bx	lr
 8016344:	b299      	uxth	r1, r3
 8016346:	b909      	cbnz	r1, 801634c <__lo0bits+0x2a>
 8016348:	0c1b      	lsrs	r3, r3, #16
 801634a:	2010      	movs	r0, #16
 801634c:	b2d9      	uxtb	r1, r3
 801634e:	b909      	cbnz	r1, 8016354 <__lo0bits+0x32>
 8016350:	3008      	adds	r0, #8
 8016352:	0a1b      	lsrs	r3, r3, #8
 8016354:	0719      	lsls	r1, r3, #28
 8016356:	bf04      	itt	eq
 8016358:	091b      	lsreq	r3, r3, #4
 801635a:	3004      	addeq	r0, #4
 801635c:	0799      	lsls	r1, r3, #30
 801635e:	bf04      	itt	eq
 8016360:	089b      	lsreq	r3, r3, #2
 8016362:	3002      	addeq	r0, #2
 8016364:	07d9      	lsls	r1, r3, #31
 8016366:	d403      	bmi.n	8016370 <__lo0bits+0x4e>
 8016368:	085b      	lsrs	r3, r3, #1
 801636a:	f100 0001 	add.w	r0, r0, #1
 801636e:	d003      	beq.n	8016378 <__lo0bits+0x56>
 8016370:	6013      	str	r3, [r2, #0]
 8016372:	4770      	bx	lr
 8016374:	2000      	movs	r0, #0
 8016376:	4770      	bx	lr
 8016378:	2020      	movs	r0, #32
 801637a:	4770      	bx	lr

0801637c <__i2b>:
 801637c:	b510      	push	{r4, lr}
 801637e:	460c      	mov	r4, r1
 8016380:	2101      	movs	r1, #1
 8016382:	f7ff ff07 	bl	8016194 <_Balloc>
 8016386:	4602      	mov	r2, r0
 8016388:	b928      	cbnz	r0, 8016396 <__i2b+0x1a>
 801638a:	4b05      	ldr	r3, [pc, #20]	@ (80163a0 <__i2b+0x24>)
 801638c:	4805      	ldr	r0, [pc, #20]	@ (80163a4 <__i2b+0x28>)
 801638e:	f240 1145 	movw	r1, #325	@ 0x145
 8016392:	f000 fb2d 	bl	80169f0 <__assert_func>
 8016396:	2301      	movs	r3, #1
 8016398:	6144      	str	r4, [r0, #20]
 801639a:	6103      	str	r3, [r0, #16]
 801639c:	bd10      	pop	{r4, pc}
 801639e:	bf00      	nop
 80163a0:	08018718 	.word	0x08018718
 80163a4:	08018729 	.word	0x08018729

080163a8 <__multiply>:
 80163a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ac:	4614      	mov	r4, r2
 80163ae:	690a      	ldr	r2, [r1, #16]
 80163b0:	6923      	ldr	r3, [r4, #16]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	bfa8      	it	ge
 80163b6:	4623      	movge	r3, r4
 80163b8:	460f      	mov	r7, r1
 80163ba:	bfa4      	itt	ge
 80163bc:	460c      	movge	r4, r1
 80163be:	461f      	movge	r7, r3
 80163c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80163c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80163c8:	68a3      	ldr	r3, [r4, #8]
 80163ca:	6861      	ldr	r1, [r4, #4]
 80163cc:	eb0a 0609 	add.w	r6, sl, r9
 80163d0:	42b3      	cmp	r3, r6
 80163d2:	b085      	sub	sp, #20
 80163d4:	bfb8      	it	lt
 80163d6:	3101      	addlt	r1, #1
 80163d8:	f7ff fedc 	bl	8016194 <_Balloc>
 80163dc:	b930      	cbnz	r0, 80163ec <__multiply+0x44>
 80163de:	4602      	mov	r2, r0
 80163e0:	4b44      	ldr	r3, [pc, #272]	@ (80164f4 <__multiply+0x14c>)
 80163e2:	4845      	ldr	r0, [pc, #276]	@ (80164f8 <__multiply+0x150>)
 80163e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80163e8:	f000 fb02 	bl	80169f0 <__assert_func>
 80163ec:	f100 0514 	add.w	r5, r0, #20
 80163f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80163f4:	462b      	mov	r3, r5
 80163f6:	2200      	movs	r2, #0
 80163f8:	4543      	cmp	r3, r8
 80163fa:	d321      	bcc.n	8016440 <__multiply+0x98>
 80163fc:	f107 0114 	add.w	r1, r7, #20
 8016400:	f104 0214 	add.w	r2, r4, #20
 8016404:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016408:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801640c:	9302      	str	r3, [sp, #8]
 801640e:	1b13      	subs	r3, r2, r4
 8016410:	3b15      	subs	r3, #21
 8016412:	f023 0303 	bic.w	r3, r3, #3
 8016416:	3304      	adds	r3, #4
 8016418:	f104 0715 	add.w	r7, r4, #21
 801641c:	42ba      	cmp	r2, r7
 801641e:	bf38      	it	cc
 8016420:	2304      	movcc	r3, #4
 8016422:	9301      	str	r3, [sp, #4]
 8016424:	9b02      	ldr	r3, [sp, #8]
 8016426:	9103      	str	r1, [sp, #12]
 8016428:	428b      	cmp	r3, r1
 801642a:	d80c      	bhi.n	8016446 <__multiply+0x9e>
 801642c:	2e00      	cmp	r6, #0
 801642e:	dd03      	ble.n	8016438 <__multiply+0x90>
 8016430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016434:	2b00      	cmp	r3, #0
 8016436:	d05b      	beq.n	80164f0 <__multiply+0x148>
 8016438:	6106      	str	r6, [r0, #16]
 801643a:	b005      	add	sp, #20
 801643c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016440:	f843 2b04 	str.w	r2, [r3], #4
 8016444:	e7d8      	b.n	80163f8 <__multiply+0x50>
 8016446:	f8b1 a000 	ldrh.w	sl, [r1]
 801644a:	f1ba 0f00 	cmp.w	sl, #0
 801644e:	d024      	beq.n	801649a <__multiply+0xf2>
 8016450:	f104 0e14 	add.w	lr, r4, #20
 8016454:	46a9      	mov	r9, r5
 8016456:	f04f 0c00 	mov.w	ip, #0
 801645a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801645e:	f8d9 3000 	ldr.w	r3, [r9]
 8016462:	fa1f fb87 	uxth.w	fp, r7
 8016466:	b29b      	uxth	r3, r3
 8016468:	fb0a 330b 	mla	r3, sl, fp, r3
 801646c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016470:	f8d9 7000 	ldr.w	r7, [r9]
 8016474:	4463      	add	r3, ip
 8016476:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801647a:	fb0a c70b 	mla	r7, sl, fp, ip
 801647e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016482:	b29b      	uxth	r3, r3
 8016484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016488:	4572      	cmp	r2, lr
 801648a:	f849 3b04 	str.w	r3, [r9], #4
 801648e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016492:	d8e2      	bhi.n	801645a <__multiply+0xb2>
 8016494:	9b01      	ldr	r3, [sp, #4]
 8016496:	f845 c003 	str.w	ip, [r5, r3]
 801649a:	9b03      	ldr	r3, [sp, #12]
 801649c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80164a0:	3104      	adds	r1, #4
 80164a2:	f1b9 0f00 	cmp.w	r9, #0
 80164a6:	d021      	beq.n	80164ec <__multiply+0x144>
 80164a8:	682b      	ldr	r3, [r5, #0]
 80164aa:	f104 0c14 	add.w	ip, r4, #20
 80164ae:	46ae      	mov	lr, r5
 80164b0:	f04f 0a00 	mov.w	sl, #0
 80164b4:	f8bc b000 	ldrh.w	fp, [ip]
 80164b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80164bc:	fb09 770b 	mla	r7, r9, fp, r7
 80164c0:	4457      	add	r7, sl
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80164c8:	f84e 3b04 	str.w	r3, [lr], #4
 80164cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80164d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80164d4:	f8be 3000 	ldrh.w	r3, [lr]
 80164d8:	fb09 330a 	mla	r3, r9, sl, r3
 80164dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80164e0:	4562      	cmp	r2, ip
 80164e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80164e6:	d8e5      	bhi.n	80164b4 <__multiply+0x10c>
 80164e8:	9f01      	ldr	r7, [sp, #4]
 80164ea:	51eb      	str	r3, [r5, r7]
 80164ec:	3504      	adds	r5, #4
 80164ee:	e799      	b.n	8016424 <__multiply+0x7c>
 80164f0:	3e01      	subs	r6, #1
 80164f2:	e79b      	b.n	801642c <__multiply+0x84>
 80164f4:	08018718 	.word	0x08018718
 80164f8:	08018729 	.word	0x08018729

080164fc <__pow5mult>:
 80164fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016500:	4615      	mov	r5, r2
 8016502:	f012 0203 	ands.w	r2, r2, #3
 8016506:	4607      	mov	r7, r0
 8016508:	460e      	mov	r6, r1
 801650a:	d007      	beq.n	801651c <__pow5mult+0x20>
 801650c:	4c25      	ldr	r4, [pc, #148]	@ (80165a4 <__pow5mult+0xa8>)
 801650e:	3a01      	subs	r2, #1
 8016510:	2300      	movs	r3, #0
 8016512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016516:	f7ff fe9f 	bl	8016258 <__multadd>
 801651a:	4606      	mov	r6, r0
 801651c:	10ad      	asrs	r5, r5, #2
 801651e:	d03d      	beq.n	801659c <__pow5mult+0xa0>
 8016520:	69fc      	ldr	r4, [r7, #28]
 8016522:	b97c      	cbnz	r4, 8016544 <__pow5mult+0x48>
 8016524:	2010      	movs	r0, #16
 8016526:	f7fe f893 	bl	8014650 <malloc>
 801652a:	4602      	mov	r2, r0
 801652c:	61f8      	str	r0, [r7, #28]
 801652e:	b928      	cbnz	r0, 801653c <__pow5mult+0x40>
 8016530:	4b1d      	ldr	r3, [pc, #116]	@ (80165a8 <__pow5mult+0xac>)
 8016532:	481e      	ldr	r0, [pc, #120]	@ (80165ac <__pow5mult+0xb0>)
 8016534:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016538:	f000 fa5a 	bl	80169f0 <__assert_func>
 801653c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016540:	6004      	str	r4, [r0, #0]
 8016542:	60c4      	str	r4, [r0, #12]
 8016544:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801654c:	b94c      	cbnz	r4, 8016562 <__pow5mult+0x66>
 801654e:	f240 2171 	movw	r1, #625	@ 0x271
 8016552:	4638      	mov	r0, r7
 8016554:	f7ff ff12 	bl	801637c <__i2b>
 8016558:	2300      	movs	r3, #0
 801655a:	f8c8 0008 	str.w	r0, [r8, #8]
 801655e:	4604      	mov	r4, r0
 8016560:	6003      	str	r3, [r0, #0]
 8016562:	f04f 0900 	mov.w	r9, #0
 8016566:	07eb      	lsls	r3, r5, #31
 8016568:	d50a      	bpl.n	8016580 <__pow5mult+0x84>
 801656a:	4631      	mov	r1, r6
 801656c:	4622      	mov	r2, r4
 801656e:	4638      	mov	r0, r7
 8016570:	f7ff ff1a 	bl	80163a8 <__multiply>
 8016574:	4631      	mov	r1, r6
 8016576:	4680      	mov	r8, r0
 8016578:	4638      	mov	r0, r7
 801657a:	f7ff fe4b 	bl	8016214 <_Bfree>
 801657e:	4646      	mov	r6, r8
 8016580:	106d      	asrs	r5, r5, #1
 8016582:	d00b      	beq.n	801659c <__pow5mult+0xa0>
 8016584:	6820      	ldr	r0, [r4, #0]
 8016586:	b938      	cbnz	r0, 8016598 <__pow5mult+0x9c>
 8016588:	4622      	mov	r2, r4
 801658a:	4621      	mov	r1, r4
 801658c:	4638      	mov	r0, r7
 801658e:	f7ff ff0b 	bl	80163a8 <__multiply>
 8016592:	6020      	str	r0, [r4, #0]
 8016594:	f8c0 9000 	str.w	r9, [r0]
 8016598:	4604      	mov	r4, r0
 801659a:	e7e4      	b.n	8016566 <__pow5mult+0x6a>
 801659c:	4630      	mov	r0, r6
 801659e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165a2:	bf00      	nop
 80165a4:	08018784 	.word	0x08018784
 80165a8:	080186a9 	.word	0x080186a9
 80165ac:	08018729 	.word	0x08018729

080165b0 <__lshift>:
 80165b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165b4:	460c      	mov	r4, r1
 80165b6:	6849      	ldr	r1, [r1, #4]
 80165b8:	6923      	ldr	r3, [r4, #16]
 80165ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80165be:	68a3      	ldr	r3, [r4, #8]
 80165c0:	4607      	mov	r7, r0
 80165c2:	4691      	mov	r9, r2
 80165c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80165c8:	f108 0601 	add.w	r6, r8, #1
 80165cc:	42b3      	cmp	r3, r6
 80165ce:	db0b      	blt.n	80165e8 <__lshift+0x38>
 80165d0:	4638      	mov	r0, r7
 80165d2:	f7ff fddf 	bl	8016194 <_Balloc>
 80165d6:	4605      	mov	r5, r0
 80165d8:	b948      	cbnz	r0, 80165ee <__lshift+0x3e>
 80165da:	4602      	mov	r2, r0
 80165dc:	4b28      	ldr	r3, [pc, #160]	@ (8016680 <__lshift+0xd0>)
 80165de:	4829      	ldr	r0, [pc, #164]	@ (8016684 <__lshift+0xd4>)
 80165e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80165e4:	f000 fa04 	bl	80169f0 <__assert_func>
 80165e8:	3101      	adds	r1, #1
 80165ea:	005b      	lsls	r3, r3, #1
 80165ec:	e7ee      	b.n	80165cc <__lshift+0x1c>
 80165ee:	2300      	movs	r3, #0
 80165f0:	f100 0114 	add.w	r1, r0, #20
 80165f4:	f100 0210 	add.w	r2, r0, #16
 80165f8:	4618      	mov	r0, r3
 80165fa:	4553      	cmp	r3, sl
 80165fc:	db33      	blt.n	8016666 <__lshift+0xb6>
 80165fe:	6920      	ldr	r0, [r4, #16]
 8016600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016604:	f104 0314 	add.w	r3, r4, #20
 8016608:	f019 091f 	ands.w	r9, r9, #31
 801660c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016614:	d02b      	beq.n	801666e <__lshift+0xbe>
 8016616:	f1c9 0e20 	rsb	lr, r9, #32
 801661a:	468a      	mov	sl, r1
 801661c:	2200      	movs	r2, #0
 801661e:	6818      	ldr	r0, [r3, #0]
 8016620:	fa00 f009 	lsl.w	r0, r0, r9
 8016624:	4310      	orrs	r0, r2
 8016626:	f84a 0b04 	str.w	r0, [sl], #4
 801662a:	f853 2b04 	ldr.w	r2, [r3], #4
 801662e:	459c      	cmp	ip, r3
 8016630:	fa22 f20e 	lsr.w	r2, r2, lr
 8016634:	d8f3      	bhi.n	801661e <__lshift+0x6e>
 8016636:	ebac 0304 	sub.w	r3, ip, r4
 801663a:	3b15      	subs	r3, #21
 801663c:	f023 0303 	bic.w	r3, r3, #3
 8016640:	3304      	adds	r3, #4
 8016642:	f104 0015 	add.w	r0, r4, #21
 8016646:	4584      	cmp	ip, r0
 8016648:	bf38      	it	cc
 801664a:	2304      	movcc	r3, #4
 801664c:	50ca      	str	r2, [r1, r3]
 801664e:	b10a      	cbz	r2, 8016654 <__lshift+0xa4>
 8016650:	f108 0602 	add.w	r6, r8, #2
 8016654:	3e01      	subs	r6, #1
 8016656:	4638      	mov	r0, r7
 8016658:	612e      	str	r6, [r5, #16]
 801665a:	4621      	mov	r1, r4
 801665c:	f7ff fdda 	bl	8016214 <_Bfree>
 8016660:	4628      	mov	r0, r5
 8016662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016666:	f842 0f04 	str.w	r0, [r2, #4]!
 801666a:	3301      	adds	r3, #1
 801666c:	e7c5      	b.n	80165fa <__lshift+0x4a>
 801666e:	3904      	subs	r1, #4
 8016670:	f853 2b04 	ldr.w	r2, [r3], #4
 8016674:	f841 2f04 	str.w	r2, [r1, #4]!
 8016678:	459c      	cmp	ip, r3
 801667a:	d8f9      	bhi.n	8016670 <__lshift+0xc0>
 801667c:	e7ea      	b.n	8016654 <__lshift+0xa4>
 801667e:	bf00      	nop
 8016680:	08018718 	.word	0x08018718
 8016684:	08018729 	.word	0x08018729

08016688 <__mcmp>:
 8016688:	690a      	ldr	r2, [r1, #16]
 801668a:	4603      	mov	r3, r0
 801668c:	6900      	ldr	r0, [r0, #16]
 801668e:	1a80      	subs	r0, r0, r2
 8016690:	b530      	push	{r4, r5, lr}
 8016692:	d10e      	bne.n	80166b2 <__mcmp+0x2a>
 8016694:	3314      	adds	r3, #20
 8016696:	3114      	adds	r1, #20
 8016698:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801669c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80166a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80166a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80166a8:	4295      	cmp	r5, r2
 80166aa:	d003      	beq.n	80166b4 <__mcmp+0x2c>
 80166ac:	d205      	bcs.n	80166ba <__mcmp+0x32>
 80166ae:	f04f 30ff 	mov.w	r0, #4294967295
 80166b2:	bd30      	pop	{r4, r5, pc}
 80166b4:	42a3      	cmp	r3, r4
 80166b6:	d3f3      	bcc.n	80166a0 <__mcmp+0x18>
 80166b8:	e7fb      	b.n	80166b2 <__mcmp+0x2a>
 80166ba:	2001      	movs	r0, #1
 80166bc:	e7f9      	b.n	80166b2 <__mcmp+0x2a>
	...

080166c0 <__mdiff>:
 80166c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c4:	4689      	mov	r9, r1
 80166c6:	4606      	mov	r6, r0
 80166c8:	4611      	mov	r1, r2
 80166ca:	4648      	mov	r0, r9
 80166cc:	4614      	mov	r4, r2
 80166ce:	f7ff ffdb 	bl	8016688 <__mcmp>
 80166d2:	1e05      	subs	r5, r0, #0
 80166d4:	d112      	bne.n	80166fc <__mdiff+0x3c>
 80166d6:	4629      	mov	r1, r5
 80166d8:	4630      	mov	r0, r6
 80166da:	f7ff fd5b 	bl	8016194 <_Balloc>
 80166de:	4602      	mov	r2, r0
 80166e0:	b928      	cbnz	r0, 80166ee <__mdiff+0x2e>
 80166e2:	4b3f      	ldr	r3, [pc, #252]	@ (80167e0 <__mdiff+0x120>)
 80166e4:	f240 2137 	movw	r1, #567	@ 0x237
 80166e8:	483e      	ldr	r0, [pc, #248]	@ (80167e4 <__mdiff+0x124>)
 80166ea:	f000 f981 	bl	80169f0 <__assert_func>
 80166ee:	2301      	movs	r3, #1
 80166f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80166f4:	4610      	mov	r0, r2
 80166f6:	b003      	add	sp, #12
 80166f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fc:	bfbc      	itt	lt
 80166fe:	464b      	movlt	r3, r9
 8016700:	46a1      	movlt	r9, r4
 8016702:	4630      	mov	r0, r6
 8016704:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016708:	bfba      	itte	lt
 801670a:	461c      	movlt	r4, r3
 801670c:	2501      	movlt	r5, #1
 801670e:	2500      	movge	r5, #0
 8016710:	f7ff fd40 	bl	8016194 <_Balloc>
 8016714:	4602      	mov	r2, r0
 8016716:	b918      	cbnz	r0, 8016720 <__mdiff+0x60>
 8016718:	4b31      	ldr	r3, [pc, #196]	@ (80167e0 <__mdiff+0x120>)
 801671a:	f240 2145 	movw	r1, #581	@ 0x245
 801671e:	e7e3      	b.n	80166e8 <__mdiff+0x28>
 8016720:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016724:	6926      	ldr	r6, [r4, #16]
 8016726:	60c5      	str	r5, [r0, #12]
 8016728:	f109 0310 	add.w	r3, r9, #16
 801672c:	f109 0514 	add.w	r5, r9, #20
 8016730:	f104 0e14 	add.w	lr, r4, #20
 8016734:	f100 0b14 	add.w	fp, r0, #20
 8016738:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801673c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016740:	9301      	str	r3, [sp, #4]
 8016742:	46d9      	mov	r9, fp
 8016744:	f04f 0c00 	mov.w	ip, #0
 8016748:	9b01      	ldr	r3, [sp, #4]
 801674a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801674e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016752:	9301      	str	r3, [sp, #4]
 8016754:	fa1f f38a 	uxth.w	r3, sl
 8016758:	4619      	mov	r1, r3
 801675a:	b283      	uxth	r3, r0
 801675c:	1acb      	subs	r3, r1, r3
 801675e:	0c00      	lsrs	r0, r0, #16
 8016760:	4463      	add	r3, ip
 8016762:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016766:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801676a:	b29b      	uxth	r3, r3
 801676c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016770:	4576      	cmp	r6, lr
 8016772:	f849 3b04 	str.w	r3, [r9], #4
 8016776:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801677a:	d8e5      	bhi.n	8016748 <__mdiff+0x88>
 801677c:	1b33      	subs	r3, r6, r4
 801677e:	3b15      	subs	r3, #21
 8016780:	f023 0303 	bic.w	r3, r3, #3
 8016784:	3415      	adds	r4, #21
 8016786:	3304      	adds	r3, #4
 8016788:	42a6      	cmp	r6, r4
 801678a:	bf38      	it	cc
 801678c:	2304      	movcc	r3, #4
 801678e:	441d      	add	r5, r3
 8016790:	445b      	add	r3, fp
 8016792:	461e      	mov	r6, r3
 8016794:	462c      	mov	r4, r5
 8016796:	4544      	cmp	r4, r8
 8016798:	d30e      	bcc.n	80167b8 <__mdiff+0xf8>
 801679a:	f108 0103 	add.w	r1, r8, #3
 801679e:	1b49      	subs	r1, r1, r5
 80167a0:	f021 0103 	bic.w	r1, r1, #3
 80167a4:	3d03      	subs	r5, #3
 80167a6:	45a8      	cmp	r8, r5
 80167a8:	bf38      	it	cc
 80167aa:	2100      	movcc	r1, #0
 80167ac:	440b      	add	r3, r1
 80167ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80167b2:	b191      	cbz	r1, 80167da <__mdiff+0x11a>
 80167b4:	6117      	str	r7, [r2, #16]
 80167b6:	e79d      	b.n	80166f4 <__mdiff+0x34>
 80167b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80167bc:	46e6      	mov	lr, ip
 80167be:	0c08      	lsrs	r0, r1, #16
 80167c0:	fa1c fc81 	uxtah	ip, ip, r1
 80167c4:	4471      	add	r1, lr
 80167c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80167ca:	b289      	uxth	r1, r1
 80167cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80167d0:	f846 1b04 	str.w	r1, [r6], #4
 80167d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80167d8:	e7dd      	b.n	8016796 <__mdiff+0xd6>
 80167da:	3f01      	subs	r7, #1
 80167dc:	e7e7      	b.n	80167ae <__mdiff+0xee>
 80167de:	bf00      	nop
 80167e0:	08018718 	.word	0x08018718
 80167e4:	08018729 	.word	0x08018729

080167e8 <__d2b>:
 80167e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80167ec:	460f      	mov	r7, r1
 80167ee:	2101      	movs	r1, #1
 80167f0:	ec59 8b10 	vmov	r8, r9, d0
 80167f4:	4616      	mov	r6, r2
 80167f6:	f7ff fccd 	bl	8016194 <_Balloc>
 80167fa:	4604      	mov	r4, r0
 80167fc:	b930      	cbnz	r0, 801680c <__d2b+0x24>
 80167fe:	4602      	mov	r2, r0
 8016800:	4b23      	ldr	r3, [pc, #140]	@ (8016890 <__d2b+0xa8>)
 8016802:	4824      	ldr	r0, [pc, #144]	@ (8016894 <__d2b+0xac>)
 8016804:	f240 310f 	movw	r1, #783	@ 0x30f
 8016808:	f000 f8f2 	bl	80169f0 <__assert_func>
 801680c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016814:	b10d      	cbz	r5, 801681a <__d2b+0x32>
 8016816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801681a:	9301      	str	r3, [sp, #4]
 801681c:	f1b8 0300 	subs.w	r3, r8, #0
 8016820:	d023      	beq.n	801686a <__d2b+0x82>
 8016822:	4668      	mov	r0, sp
 8016824:	9300      	str	r3, [sp, #0]
 8016826:	f7ff fd7c 	bl	8016322 <__lo0bits>
 801682a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801682e:	b1d0      	cbz	r0, 8016866 <__d2b+0x7e>
 8016830:	f1c0 0320 	rsb	r3, r0, #32
 8016834:	fa02 f303 	lsl.w	r3, r2, r3
 8016838:	430b      	orrs	r3, r1
 801683a:	40c2      	lsrs	r2, r0
 801683c:	6163      	str	r3, [r4, #20]
 801683e:	9201      	str	r2, [sp, #4]
 8016840:	9b01      	ldr	r3, [sp, #4]
 8016842:	61a3      	str	r3, [r4, #24]
 8016844:	2b00      	cmp	r3, #0
 8016846:	bf0c      	ite	eq
 8016848:	2201      	moveq	r2, #1
 801684a:	2202      	movne	r2, #2
 801684c:	6122      	str	r2, [r4, #16]
 801684e:	b1a5      	cbz	r5, 801687a <__d2b+0x92>
 8016850:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016854:	4405      	add	r5, r0
 8016856:	603d      	str	r5, [r7, #0]
 8016858:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801685c:	6030      	str	r0, [r6, #0]
 801685e:	4620      	mov	r0, r4
 8016860:	b003      	add	sp, #12
 8016862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016866:	6161      	str	r1, [r4, #20]
 8016868:	e7ea      	b.n	8016840 <__d2b+0x58>
 801686a:	a801      	add	r0, sp, #4
 801686c:	f7ff fd59 	bl	8016322 <__lo0bits>
 8016870:	9b01      	ldr	r3, [sp, #4]
 8016872:	6163      	str	r3, [r4, #20]
 8016874:	3020      	adds	r0, #32
 8016876:	2201      	movs	r2, #1
 8016878:	e7e8      	b.n	801684c <__d2b+0x64>
 801687a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801687e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016882:	6038      	str	r0, [r7, #0]
 8016884:	6918      	ldr	r0, [r3, #16]
 8016886:	f7ff fd2d 	bl	80162e4 <__hi0bits>
 801688a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801688e:	e7e5      	b.n	801685c <__d2b+0x74>
 8016890:	08018718 	.word	0x08018718
 8016894:	08018729 	.word	0x08018729

08016898 <__sflush_r>:
 8016898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168a0:	0716      	lsls	r6, r2, #28
 80168a2:	4605      	mov	r5, r0
 80168a4:	460c      	mov	r4, r1
 80168a6:	d454      	bmi.n	8016952 <__sflush_r+0xba>
 80168a8:	684b      	ldr	r3, [r1, #4]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	dc02      	bgt.n	80168b4 <__sflush_r+0x1c>
 80168ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	dd48      	ble.n	8016946 <__sflush_r+0xae>
 80168b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80168b6:	2e00      	cmp	r6, #0
 80168b8:	d045      	beq.n	8016946 <__sflush_r+0xae>
 80168ba:	2300      	movs	r3, #0
 80168bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80168c0:	682f      	ldr	r7, [r5, #0]
 80168c2:	6a21      	ldr	r1, [r4, #32]
 80168c4:	602b      	str	r3, [r5, #0]
 80168c6:	d030      	beq.n	801692a <__sflush_r+0x92>
 80168c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80168ca:	89a3      	ldrh	r3, [r4, #12]
 80168cc:	0759      	lsls	r1, r3, #29
 80168ce:	d505      	bpl.n	80168dc <__sflush_r+0x44>
 80168d0:	6863      	ldr	r3, [r4, #4]
 80168d2:	1ad2      	subs	r2, r2, r3
 80168d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80168d6:	b10b      	cbz	r3, 80168dc <__sflush_r+0x44>
 80168d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80168da:	1ad2      	subs	r2, r2, r3
 80168dc:	2300      	movs	r3, #0
 80168de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80168e0:	6a21      	ldr	r1, [r4, #32]
 80168e2:	4628      	mov	r0, r5
 80168e4:	47b0      	blx	r6
 80168e6:	1c43      	adds	r3, r0, #1
 80168e8:	89a3      	ldrh	r3, [r4, #12]
 80168ea:	d106      	bne.n	80168fa <__sflush_r+0x62>
 80168ec:	6829      	ldr	r1, [r5, #0]
 80168ee:	291d      	cmp	r1, #29
 80168f0:	d82b      	bhi.n	801694a <__sflush_r+0xb2>
 80168f2:	4a2a      	ldr	r2, [pc, #168]	@ (801699c <__sflush_r+0x104>)
 80168f4:	410a      	asrs	r2, r1
 80168f6:	07d6      	lsls	r6, r2, #31
 80168f8:	d427      	bmi.n	801694a <__sflush_r+0xb2>
 80168fa:	2200      	movs	r2, #0
 80168fc:	6062      	str	r2, [r4, #4]
 80168fe:	04d9      	lsls	r1, r3, #19
 8016900:	6922      	ldr	r2, [r4, #16]
 8016902:	6022      	str	r2, [r4, #0]
 8016904:	d504      	bpl.n	8016910 <__sflush_r+0x78>
 8016906:	1c42      	adds	r2, r0, #1
 8016908:	d101      	bne.n	801690e <__sflush_r+0x76>
 801690a:	682b      	ldr	r3, [r5, #0]
 801690c:	b903      	cbnz	r3, 8016910 <__sflush_r+0x78>
 801690e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016912:	602f      	str	r7, [r5, #0]
 8016914:	b1b9      	cbz	r1, 8016946 <__sflush_r+0xae>
 8016916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801691a:	4299      	cmp	r1, r3
 801691c:	d002      	beq.n	8016924 <__sflush_r+0x8c>
 801691e:	4628      	mov	r0, r5
 8016920:	f7ff fbee 	bl	8016100 <_free_r>
 8016924:	2300      	movs	r3, #0
 8016926:	6363      	str	r3, [r4, #52]	@ 0x34
 8016928:	e00d      	b.n	8016946 <__sflush_r+0xae>
 801692a:	2301      	movs	r3, #1
 801692c:	4628      	mov	r0, r5
 801692e:	47b0      	blx	r6
 8016930:	4602      	mov	r2, r0
 8016932:	1c50      	adds	r0, r2, #1
 8016934:	d1c9      	bne.n	80168ca <__sflush_r+0x32>
 8016936:	682b      	ldr	r3, [r5, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d0c6      	beq.n	80168ca <__sflush_r+0x32>
 801693c:	2b1d      	cmp	r3, #29
 801693e:	d001      	beq.n	8016944 <__sflush_r+0xac>
 8016940:	2b16      	cmp	r3, #22
 8016942:	d11e      	bne.n	8016982 <__sflush_r+0xea>
 8016944:	602f      	str	r7, [r5, #0]
 8016946:	2000      	movs	r0, #0
 8016948:	e022      	b.n	8016990 <__sflush_r+0xf8>
 801694a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801694e:	b21b      	sxth	r3, r3
 8016950:	e01b      	b.n	801698a <__sflush_r+0xf2>
 8016952:	690f      	ldr	r7, [r1, #16]
 8016954:	2f00      	cmp	r7, #0
 8016956:	d0f6      	beq.n	8016946 <__sflush_r+0xae>
 8016958:	0793      	lsls	r3, r2, #30
 801695a:	680e      	ldr	r6, [r1, #0]
 801695c:	bf08      	it	eq
 801695e:	694b      	ldreq	r3, [r1, #20]
 8016960:	600f      	str	r7, [r1, #0]
 8016962:	bf18      	it	ne
 8016964:	2300      	movne	r3, #0
 8016966:	eba6 0807 	sub.w	r8, r6, r7
 801696a:	608b      	str	r3, [r1, #8]
 801696c:	f1b8 0f00 	cmp.w	r8, #0
 8016970:	dde9      	ble.n	8016946 <__sflush_r+0xae>
 8016972:	6a21      	ldr	r1, [r4, #32]
 8016974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016976:	4643      	mov	r3, r8
 8016978:	463a      	mov	r2, r7
 801697a:	4628      	mov	r0, r5
 801697c:	47b0      	blx	r6
 801697e:	2800      	cmp	r0, #0
 8016980:	dc08      	bgt.n	8016994 <__sflush_r+0xfc>
 8016982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801698a:	81a3      	strh	r3, [r4, #12]
 801698c:	f04f 30ff 	mov.w	r0, #4294967295
 8016990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016994:	4407      	add	r7, r0
 8016996:	eba8 0800 	sub.w	r8, r8, r0
 801699a:	e7e7      	b.n	801696c <__sflush_r+0xd4>
 801699c:	dfbffffe 	.word	0xdfbffffe

080169a0 <_fflush_r>:
 80169a0:	b538      	push	{r3, r4, r5, lr}
 80169a2:	690b      	ldr	r3, [r1, #16]
 80169a4:	4605      	mov	r5, r0
 80169a6:	460c      	mov	r4, r1
 80169a8:	b913      	cbnz	r3, 80169b0 <_fflush_r+0x10>
 80169aa:	2500      	movs	r5, #0
 80169ac:	4628      	mov	r0, r5
 80169ae:	bd38      	pop	{r3, r4, r5, pc}
 80169b0:	b118      	cbz	r0, 80169ba <_fflush_r+0x1a>
 80169b2:	6a03      	ldr	r3, [r0, #32]
 80169b4:	b90b      	cbnz	r3, 80169ba <_fflush_r+0x1a>
 80169b6:	f7fe fbfb 	bl	80151b0 <__sinit>
 80169ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d0f3      	beq.n	80169aa <_fflush_r+0xa>
 80169c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80169c4:	07d0      	lsls	r0, r2, #31
 80169c6:	d404      	bmi.n	80169d2 <_fflush_r+0x32>
 80169c8:	0599      	lsls	r1, r3, #22
 80169ca:	d402      	bmi.n	80169d2 <_fflush_r+0x32>
 80169cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169ce:	f7fe fd3a 	bl	8015446 <__retarget_lock_acquire_recursive>
 80169d2:	4628      	mov	r0, r5
 80169d4:	4621      	mov	r1, r4
 80169d6:	f7ff ff5f 	bl	8016898 <__sflush_r>
 80169da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80169dc:	07da      	lsls	r2, r3, #31
 80169de:	4605      	mov	r5, r0
 80169e0:	d4e4      	bmi.n	80169ac <_fflush_r+0xc>
 80169e2:	89a3      	ldrh	r3, [r4, #12]
 80169e4:	059b      	lsls	r3, r3, #22
 80169e6:	d4e1      	bmi.n	80169ac <_fflush_r+0xc>
 80169e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169ea:	f7fe fd2d 	bl	8015448 <__retarget_lock_release_recursive>
 80169ee:	e7dd      	b.n	80169ac <_fflush_r+0xc>

080169f0 <__assert_func>:
 80169f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80169f2:	4614      	mov	r4, r2
 80169f4:	461a      	mov	r2, r3
 80169f6:	4b09      	ldr	r3, [pc, #36]	@ (8016a1c <__assert_func+0x2c>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	4605      	mov	r5, r0
 80169fc:	68d8      	ldr	r0, [r3, #12]
 80169fe:	b954      	cbnz	r4, 8016a16 <__assert_func+0x26>
 8016a00:	4b07      	ldr	r3, [pc, #28]	@ (8016a20 <__assert_func+0x30>)
 8016a02:	461c      	mov	r4, r3
 8016a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a08:	9100      	str	r1, [sp, #0]
 8016a0a:	462b      	mov	r3, r5
 8016a0c:	4905      	ldr	r1, [pc, #20]	@ (8016a24 <__assert_func+0x34>)
 8016a0e:	f000 f841 	bl	8016a94 <fiprintf>
 8016a12:	f7fd fe15 	bl	8014640 <abort>
 8016a16:	4b04      	ldr	r3, [pc, #16]	@ (8016a28 <__assert_func+0x38>)
 8016a18:	e7f4      	b.n	8016a04 <__assert_func+0x14>
 8016a1a:	bf00      	nop
 8016a1c:	2000003c 	.word	0x2000003c
 8016a20:	080188c5 	.word	0x080188c5
 8016a24:	08018897 	.word	0x08018897
 8016a28:	0801888a 	.word	0x0801888a

08016a2c <_calloc_r>:
 8016a2c:	b570      	push	{r4, r5, r6, lr}
 8016a2e:	fba1 5402 	umull	r5, r4, r1, r2
 8016a32:	b93c      	cbnz	r4, 8016a44 <_calloc_r+0x18>
 8016a34:	4629      	mov	r1, r5
 8016a36:	f7fd fe3d 	bl	80146b4 <_malloc_r>
 8016a3a:	4606      	mov	r6, r0
 8016a3c:	b928      	cbnz	r0, 8016a4a <_calloc_r+0x1e>
 8016a3e:	2600      	movs	r6, #0
 8016a40:	4630      	mov	r0, r6
 8016a42:	bd70      	pop	{r4, r5, r6, pc}
 8016a44:	220c      	movs	r2, #12
 8016a46:	6002      	str	r2, [r0, #0]
 8016a48:	e7f9      	b.n	8016a3e <_calloc_r+0x12>
 8016a4a:	462a      	mov	r2, r5
 8016a4c:	4621      	mov	r1, r4
 8016a4e:	f7fe fc28 	bl	80152a2 <memset>
 8016a52:	e7f5      	b.n	8016a40 <_calloc_r+0x14>

08016a54 <__ascii_mbtowc>:
 8016a54:	b082      	sub	sp, #8
 8016a56:	b901      	cbnz	r1, 8016a5a <__ascii_mbtowc+0x6>
 8016a58:	a901      	add	r1, sp, #4
 8016a5a:	b142      	cbz	r2, 8016a6e <__ascii_mbtowc+0x1a>
 8016a5c:	b14b      	cbz	r3, 8016a72 <__ascii_mbtowc+0x1e>
 8016a5e:	7813      	ldrb	r3, [r2, #0]
 8016a60:	600b      	str	r3, [r1, #0]
 8016a62:	7812      	ldrb	r2, [r2, #0]
 8016a64:	1e10      	subs	r0, r2, #0
 8016a66:	bf18      	it	ne
 8016a68:	2001      	movne	r0, #1
 8016a6a:	b002      	add	sp, #8
 8016a6c:	4770      	bx	lr
 8016a6e:	4610      	mov	r0, r2
 8016a70:	e7fb      	b.n	8016a6a <__ascii_mbtowc+0x16>
 8016a72:	f06f 0001 	mvn.w	r0, #1
 8016a76:	e7f8      	b.n	8016a6a <__ascii_mbtowc+0x16>

08016a78 <__ascii_wctomb>:
 8016a78:	4603      	mov	r3, r0
 8016a7a:	4608      	mov	r0, r1
 8016a7c:	b141      	cbz	r1, 8016a90 <__ascii_wctomb+0x18>
 8016a7e:	2aff      	cmp	r2, #255	@ 0xff
 8016a80:	d904      	bls.n	8016a8c <__ascii_wctomb+0x14>
 8016a82:	228a      	movs	r2, #138	@ 0x8a
 8016a84:	601a      	str	r2, [r3, #0]
 8016a86:	f04f 30ff 	mov.w	r0, #4294967295
 8016a8a:	4770      	bx	lr
 8016a8c:	700a      	strb	r2, [r1, #0]
 8016a8e:	2001      	movs	r0, #1
 8016a90:	4770      	bx	lr
	...

08016a94 <fiprintf>:
 8016a94:	b40e      	push	{r1, r2, r3}
 8016a96:	b503      	push	{r0, r1, lr}
 8016a98:	4601      	mov	r1, r0
 8016a9a:	ab03      	add	r3, sp, #12
 8016a9c:	4805      	ldr	r0, [pc, #20]	@ (8016ab4 <fiprintf+0x20>)
 8016a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016aa2:	6800      	ldr	r0, [r0, #0]
 8016aa4:	9301      	str	r3, [sp, #4]
 8016aa6:	f000 f831 	bl	8016b0c <_vfiprintf_r>
 8016aaa:	b002      	add	sp, #8
 8016aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ab0:	b003      	add	sp, #12
 8016ab2:	4770      	bx	lr
 8016ab4:	2000003c 	.word	0x2000003c

08016ab8 <__sfputc_r>:
 8016ab8:	6893      	ldr	r3, [r2, #8]
 8016aba:	3b01      	subs	r3, #1
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	b410      	push	{r4}
 8016ac0:	6093      	str	r3, [r2, #8]
 8016ac2:	da08      	bge.n	8016ad6 <__sfputc_r+0x1e>
 8016ac4:	6994      	ldr	r4, [r2, #24]
 8016ac6:	42a3      	cmp	r3, r4
 8016ac8:	db01      	blt.n	8016ace <__sfputc_r+0x16>
 8016aca:	290a      	cmp	r1, #10
 8016acc:	d103      	bne.n	8016ad6 <__sfputc_r+0x1e>
 8016ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ad2:	f000 b933 	b.w	8016d3c <__swbuf_r>
 8016ad6:	6813      	ldr	r3, [r2, #0]
 8016ad8:	1c58      	adds	r0, r3, #1
 8016ada:	6010      	str	r0, [r2, #0]
 8016adc:	7019      	strb	r1, [r3, #0]
 8016ade:	4608      	mov	r0, r1
 8016ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ae4:	4770      	bx	lr

08016ae6 <__sfputs_r>:
 8016ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ae8:	4606      	mov	r6, r0
 8016aea:	460f      	mov	r7, r1
 8016aec:	4614      	mov	r4, r2
 8016aee:	18d5      	adds	r5, r2, r3
 8016af0:	42ac      	cmp	r4, r5
 8016af2:	d101      	bne.n	8016af8 <__sfputs_r+0x12>
 8016af4:	2000      	movs	r0, #0
 8016af6:	e007      	b.n	8016b08 <__sfputs_r+0x22>
 8016af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016afc:	463a      	mov	r2, r7
 8016afe:	4630      	mov	r0, r6
 8016b00:	f7ff ffda 	bl	8016ab8 <__sfputc_r>
 8016b04:	1c43      	adds	r3, r0, #1
 8016b06:	d1f3      	bne.n	8016af0 <__sfputs_r+0xa>
 8016b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016b0c <_vfiprintf_r>:
 8016b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b10:	460d      	mov	r5, r1
 8016b12:	b09d      	sub	sp, #116	@ 0x74
 8016b14:	4614      	mov	r4, r2
 8016b16:	4698      	mov	r8, r3
 8016b18:	4606      	mov	r6, r0
 8016b1a:	b118      	cbz	r0, 8016b24 <_vfiprintf_r+0x18>
 8016b1c:	6a03      	ldr	r3, [r0, #32]
 8016b1e:	b90b      	cbnz	r3, 8016b24 <_vfiprintf_r+0x18>
 8016b20:	f7fe fb46 	bl	80151b0 <__sinit>
 8016b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016b26:	07d9      	lsls	r1, r3, #31
 8016b28:	d405      	bmi.n	8016b36 <_vfiprintf_r+0x2a>
 8016b2a:	89ab      	ldrh	r3, [r5, #12]
 8016b2c:	059a      	lsls	r2, r3, #22
 8016b2e:	d402      	bmi.n	8016b36 <_vfiprintf_r+0x2a>
 8016b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016b32:	f7fe fc88 	bl	8015446 <__retarget_lock_acquire_recursive>
 8016b36:	89ab      	ldrh	r3, [r5, #12]
 8016b38:	071b      	lsls	r3, r3, #28
 8016b3a:	d501      	bpl.n	8016b40 <_vfiprintf_r+0x34>
 8016b3c:	692b      	ldr	r3, [r5, #16]
 8016b3e:	b99b      	cbnz	r3, 8016b68 <_vfiprintf_r+0x5c>
 8016b40:	4629      	mov	r1, r5
 8016b42:	4630      	mov	r0, r6
 8016b44:	f000 f938 	bl	8016db8 <__swsetup_r>
 8016b48:	b170      	cbz	r0, 8016b68 <_vfiprintf_r+0x5c>
 8016b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016b4c:	07dc      	lsls	r4, r3, #31
 8016b4e:	d504      	bpl.n	8016b5a <_vfiprintf_r+0x4e>
 8016b50:	f04f 30ff 	mov.w	r0, #4294967295
 8016b54:	b01d      	add	sp, #116	@ 0x74
 8016b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b5a:	89ab      	ldrh	r3, [r5, #12]
 8016b5c:	0598      	lsls	r0, r3, #22
 8016b5e:	d4f7      	bmi.n	8016b50 <_vfiprintf_r+0x44>
 8016b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016b62:	f7fe fc71 	bl	8015448 <__retarget_lock_release_recursive>
 8016b66:	e7f3      	b.n	8016b50 <_vfiprintf_r+0x44>
 8016b68:	2300      	movs	r3, #0
 8016b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b6c:	2320      	movs	r3, #32
 8016b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b76:	2330      	movs	r3, #48	@ 0x30
 8016b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016d28 <_vfiprintf_r+0x21c>
 8016b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016b80:	f04f 0901 	mov.w	r9, #1
 8016b84:	4623      	mov	r3, r4
 8016b86:	469a      	mov	sl, r3
 8016b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b8c:	b10a      	cbz	r2, 8016b92 <_vfiprintf_r+0x86>
 8016b8e:	2a25      	cmp	r2, #37	@ 0x25
 8016b90:	d1f9      	bne.n	8016b86 <_vfiprintf_r+0x7a>
 8016b92:	ebba 0b04 	subs.w	fp, sl, r4
 8016b96:	d00b      	beq.n	8016bb0 <_vfiprintf_r+0xa4>
 8016b98:	465b      	mov	r3, fp
 8016b9a:	4622      	mov	r2, r4
 8016b9c:	4629      	mov	r1, r5
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	f7ff ffa1 	bl	8016ae6 <__sfputs_r>
 8016ba4:	3001      	adds	r0, #1
 8016ba6:	f000 80a7 	beq.w	8016cf8 <_vfiprintf_r+0x1ec>
 8016baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016bac:	445a      	add	r2, fp
 8016bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8016bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	f000 809f 	beq.w	8016cf8 <_vfiprintf_r+0x1ec>
 8016bba:	2300      	movs	r3, #0
 8016bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8016bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016bc4:	f10a 0a01 	add.w	sl, sl, #1
 8016bc8:	9304      	str	r3, [sp, #16]
 8016bca:	9307      	str	r3, [sp, #28]
 8016bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8016bd2:	4654      	mov	r4, sl
 8016bd4:	2205      	movs	r2, #5
 8016bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bda:	4853      	ldr	r0, [pc, #332]	@ (8016d28 <_vfiprintf_r+0x21c>)
 8016bdc:	f7e9 fb28 	bl	8000230 <memchr>
 8016be0:	9a04      	ldr	r2, [sp, #16]
 8016be2:	b9d8      	cbnz	r0, 8016c1c <_vfiprintf_r+0x110>
 8016be4:	06d1      	lsls	r1, r2, #27
 8016be6:	bf44      	itt	mi
 8016be8:	2320      	movmi	r3, #32
 8016bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016bee:	0713      	lsls	r3, r2, #28
 8016bf0:	bf44      	itt	mi
 8016bf2:	232b      	movmi	r3, #43	@ 0x2b
 8016bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8016bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8016bfe:	d015      	beq.n	8016c2c <_vfiprintf_r+0x120>
 8016c00:	9a07      	ldr	r2, [sp, #28]
 8016c02:	4654      	mov	r4, sl
 8016c04:	2000      	movs	r0, #0
 8016c06:	f04f 0c0a 	mov.w	ip, #10
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c10:	3b30      	subs	r3, #48	@ 0x30
 8016c12:	2b09      	cmp	r3, #9
 8016c14:	d94b      	bls.n	8016cae <_vfiprintf_r+0x1a2>
 8016c16:	b1b0      	cbz	r0, 8016c46 <_vfiprintf_r+0x13a>
 8016c18:	9207      	str	r2, [sp, #28]
 8016c1a:	e014      	b.n	8016c46 <_vfiprintf_r+0x13a>
 8016c1c:	eba0 0308 	sub.w	r3, r0, r8
 8016c20:	fa09 f303 	lsl.w	r3, r9, r3
 8016c24:	4313      	orrs	r3, r2
 8016c26:	9304      	str	r3, [sp, #16]
 8016c28:	46a2      	mov	sl, r4
 8016c2a:	e7d2      	b.n	8016bd2 <_vfiprintf_r+0xc6>
 8016c2c:	9b03      	ldr	r3, [sp, #12]
 8016c2e:	1d19      	adds	r1, r3, #4
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	9103      	str	r1, [sp, #12]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	bfbb      	ittet	lt
 8016c38:	425b      	neglt	r3, r3
 8016c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8016c3e:	9307      	strge	r3, [sp, #28]
 8016c40:	9307      	strlt	r3, [sp, #28]
 8016c42:	bfb8      	it	lt
 8016c44:	9204      	strlt	r2, [sp, #16]
 8016c46:	7823      	ldrb	r3, [r4, #0]
 8016c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8016c4a:	d10a      	bne.n	8016c62 <_vfiprintf_r+0x156>
 8016c4c:	7863      	ldrb	r3, [r4, #1]
 8016c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c50:	d132      	bne.n	8016cb8 <_vfiprintf_r+0x1ac>
 8016c52:	9b03      	ldr	r3, [sp, #12]
 8016c54:	1d1a      	adds	r2, r3, #4
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	9203      	str	r2, [sp, #12]
 8016c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016c5e:	3402      	adds	r4, #2
 8016c60:	9305      	str	r3, [sp, #20]
 8016c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016d38 <_vfiprintf_r+0x22c>
 8016c66:	7821      	ldrb	r1, [r4, #0]
 8016c68:	2203      	movs	r2, #3
 8016c6a:	4650      	mov	r0, sl
 8016c6c:	f7e9 fae0 	bl	8000230 <memchr>
 8016c70:	b138      	cbz	r0, 8016c82 <_vfiprintf_r+0x176>
 8016c72:	9b04      	ldr	r3, [sp, #16]
 8016c74:	eba0 000a 	sub.w	r0, r0, sl
 8016c78:	2240      	movs	r2, #64	@ 0x40
 8016c7a:	4082      	lsls	r2, r0
 8016c7c:	4313      	orrs	r3, r2
 8016c7e:	3401      	adds	r4, #1
 8016c80:	9304      	str	r3, [sp, #16]
 8016c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c86:	4829      	ldr	r0, [pc, #164]	@ (8016d2c <_vfiprintf_r+0x220>)
 8016c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016c8c:	2206      	movs	r2, #6
 8016c8e:	f7e9 facf 	bl	8000230 <memchr>
 8016c92:	2800      	cmp	r0, #0
 8016c94:	d03f      	beq.n	8016d16 <_vfiprintf_r+0x20a>
 8016c96:	4b26      	ldr	r3, [pc, #152]	@ (8016d30 <_vfiprintf_r+0x224>)
 8016c98:	bb1b      	cbnz	r3, 8016ce2 <_vfiprintf_r+0x1d6>
 8016c9a:	9b03      	ldr	r3, [sp, #12]
 8016c9c:	3307      	adds	r3, #7
 8016c9e:	f023 0307 	bic.w	r3, r3, #7
 8016ca2:	3308      	adds	r3, #8
 8016ca4:	9303      	str	r3, [sp, #12]
 8016ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ca8:	443b      	add	r3, r7
 8016caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016cac:	e76a      	b.n	8016b84 <_vfiprintf_r+0x78>
 8016cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8016cb2:	460c      	mov	r4, r1
 8016cb4:	2001      	movs	r0, #1
 8016cb6:	e7a8      	b.n	8016c0a <_vfiprintf_r+0xfe>
 8016cb8:	2300      	movs	r3, #0
 8016cba:	3401      	adds	r4, #1
 8016cbc:	9305      	str	r3, [sp, #20]
 8016cbe:	4619      	mov	r1, r3
 8016cc0:	f04f 0c0a 	mov.w	ip, #10
 8016cc4:	4620      	mov	r0, r4
 8016cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cca:	3a30      	subs	r2, #48	@ 0x30
 8016ccc:	2a09      	cmp	r2, #9
 8016cce:	d903      	bls.n	8016cd8 <_vfiprintf_r+0x1cc>
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d0c6      	beq.n	8016c62 <_vfiprintf_r+0x156>
 8016cd4:	9105      	str	r1, [sp, #20]
 8016cd6:	e7c4      	b.n	8016c62 <_vfiprintf_r+0x156>
 8016cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8016cdc:	4604      	mov	r4, r0
 8016cde:	2301      	movs	r3, #1
 8016ce0:	e7f0      	b.n	8016cc4 <_vfiprintf_r+0x1b8>
 8016ce2:	ab03      	add	r3, sp, #12
 8016ce4:	9300      	str	r3, [sp, #0]
 8016ce6:	462a      	mov	r2, r5
 8016ce8:	4b12      	ldr	r3, [pc, #72]	@ (8016d34 <_vfiprintf_r+0x228>)
 8016cea:	a904      	add	r1, sp, #16
 8016cec:	4630      	mov	r0, r6
 8016cee:	f7fd fe1b 	bl	8014928 <_printf_float>
 8016cf2:	4607      	mov	r7, r0
 8016cf4:	1c78      	adds	r0, r7, #1
 8016cf6:	d1d6      	bne.n	8016ca6 <_vfiprintf_r+0x19a>
 8016cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016cfa:	07d9      	lsls	r1, r3, #31
 8016cfc:	d405      	bmi.n	8016d0a <_vfiprintf_r+0x1fe>
 8016cfe:	89ab      	ldrh	r3, [r5, #12]
 8016d00:	059a      	lsls	r2, r3, #22
 8016d02:	d402      	bmi.n	8016d0a <_vfiprintf_r+0x1fe>
 8016d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d06:	f7fe fb9f 	bl	8015448 <__retarget_lock_release_recursive>
 8016d0a:	89ab      	ldrh	r3, [r5, #12]
 8016d0c:	065b      	lsls	r3, r3, #25
 8016d0e:	f53f af1f 	bmi.w	8016b50 <_vfiprintf_r+0x44>
 8016d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d14:	e71e      	b.n	8016b54 <_vfiprintf_r+0x48>
 8016d16:	ab03      	add	r3, sp, #12
 8016d18:	9300      	str	r3, [sp, #0]
 8016d1a:	462a      	mov	r2, r5
 8016d1c:	4b05      	ldr	r3, [pc, #20]	@ (8016d34 <_vfiprintf_r+0x228>)
 8016d1e:	a904      	add	r1, sp, #16
 8016d20:	4630      	mov	r0, r6
 8016d22:	f7fe f899 	bl	8014e58 <_printf_i>
 8016d26:	e7e4      	b.n	8016cf2 <_vfiprintf_r+0x1e6>
 8016d28:	080189c7 	.word	0x080189c7
 8016d2c:	080189d1 	.word	0x080189d1
 8016d30:	08014929 	.word	0x08014929
 8016d34:	08016ae7 	.word	0x08016ae7
 8016d38:	080189cd 	.word	0x080189cd

08016d3c <__swbuf_r>:
 8016d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d3e:	460e      	mov	r6, r1
 8016d40:	4614      	mov	r4, r2
 8016d42:	4605      	mov	r5, r0
 8016d44:	b118      	cbz	r0, 8016d4e <__swbuf_r+0x12>
 8016d46:	6a03      	ldr	r3, [r0, #32]
 8016d48:	b90b      	cbnz	r3, 8016d4e <__swbuf_r+0x12>
 8016d4a:	f7fe fa31 	bl	80151b0 <__sinit>
 8016d4e:	69a3      	ldr	r3, [r4, #24]
 8016d50:	60a3      	str	r3, [r4, #8]
 8016d52:	89a3      	ldrh	r3, [r4, #12]
 8016d54:	071a      	lsls	r2, r3, #28
 8016d56:	d501      	bpl.n	8016d5c <__swbuf_r+0x20>
 8016d58:	6923      	ldr	r3, [r4, #16]
 8016d5a:	b943      	cbnz	r3, 8016d6e <__swbuf_r+0x32>
 8016d5c:	4621      	mov	r1, r4
 8016d5e:	4628      	mov	r0, r5
 8016d60:	f000 f82a 	bl	8016db8 <__swsetup_r>
 8016d64:	b118      	cbz	r0, 8016d6e <__swbuf_r+0x32>
 8016d66:	f04f 37ff 	mov.w	r7, #4294967295
 8016d6a:	4638      	mov	r0, r7
 8016d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d6e:	6823      	ldr	r3, [r4, #0]
 8016d70:	6922      	ldr	r2, [r4, #16]
 8016d72:	1a98      	subs	r0, r3, r2
 8016d74:	6963      	ldr	r3, [r4, #20]
 8016d76:	b2f6      	uxtb	r6, r6
 8016d78:	4283      	cmp	r3, r0
 8016d7a:	4637      	mov	r7, r6
 8016d7c:	dc05      	bgt.n	8016d8a <__swbuf_r+0x4e>
 8016d7e:	4621      	mov	r1, r4
 8016d80:	4628      	mov	r0, r5
 8016d82:	f7ff fe0d 	bl	80169a0 <_fflush_r>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	d1ed      	bne.n	8016d66 <__swbuf_r+0x2a>
 8016d8a:	68a3      	ldr	r3, [r4, #8]
 8016d8c:	3b01      	subs	r3, #1
 8016d8e:	60a3      	str	r3, [r4, #8]
 8016d90:	6823      	ldr	r3, [r4, #0]
 8016d92:	1c5a      	adds	r2, r3, #1
 8016d94:	6022      	str	r2, [r4, #0]
 8016d96:	701e      	strb	r6, [r3, #0]
 8016d98:	6962      	ldr	r2, [r4, #20]
 8016d9a:	1c43      	adds	r3, r0, #1
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d004      	beq.n	8016daa <__swbuf_r+0x6e>
 8016da0:	89a3      	ldrh	r3, [r4, #12]
 8016da2:	07db      	lsls	r3, r3, #31
 8016da4:	d5e1      	bpl.n	8016d6a <__swbuf_r+0x2e>
 8016da6:	2e0a      	cmp	r6, #10
 8016da8:	d1df      	bne.n	8016d6a <__swbuf_r+0x2e>
 8016daa:	4621      	mov	r1, r4
 8016dac:	4628      	mov	r0, r5
 8016dae:	f7ff fdf7 	bl	80169a0 <_fflush_r>
 8016db2:	2800      	cmp	r0, #0
 8016db4:	d0d9      	beq.n	8016d6a <__swbuf_r+0x2e>
 8016db6:	e7d6      	b.n	8016d66 <__swbuf_r+0x2a>

08016db8 <__swsetup_r>:
 8016db8:	b538      	push	{r3, r4, r5, lr}
 8016dba:	4b29      	ldr	r3, [pc, #164]	@ (8016e60 <__swsetup_r+0xa8>)
 8016dbc:	4605      	mov	r5, r0
 8016dbe:	6818      	ldr	r0, [r3, #0]
 8016dc0:	460c      	mov	r4, r1
 8016dc2:	b118      	cbz	r0, 8016dcc <__swsetup_r+0x14>
 8016dc4:	6a03      	ldr	r3, [r0, #32]
 8016dc6:	b90b      	cbnz	r3, 8016dcc <__swsetup_r+0x14>
 8016dc8:	f7fe f9f2 	bl	80151b0 <__sinit>
 8016dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dd0:	0719      	lsls	r1, r3, #28
 8016dd2:	d422      	bmi.n	8016e1a <__swsetup_r+0x62>
 8016dd4:	06da      	lsls	r2, r3, #27
 8016dd6:	d407      	bmi.n	8016de8 <__swsetup_r+0x30>
 8016dd8:	2209      	movs	r2, #9
 8016dda:	602a      	str	r2, [r5, #0]
 8016ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016de0:	81a3      	strh	r3, [r4, #12]
 8016de2:	f04f 30ff 	mov.w	r0, #4294967295
 8016de6:	e033      	b.n	8016e50 <__swsetup_r+0x98>
 8016de8:	0758      	lsls	r0, r3, #29
 8016dea:	d512      	bpl.n	8016e12 <__swsetup_r+0x5a>
 8016dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016dee:	b141      	cbz	r1, 8016e02 <__swsetup_r+0x4a>
 8016df0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016df4:	4299      	cmp	r1, r3
 8016df6:	d002      	beq.n	8016dfe <__swsetup_r+0x46>
 8016df8:	4628      	mov	r0, r5
 8016dfa:	f7ff f981 	bl	8016100 <_free_r>
 8016dfe:	2300      	movs	r3, #0
 8016e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8016e02:	89a3      	ldrh	r3, [r4, #12]
 8016e04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016e08:	81a3      	strh	r3, [r4, #12]
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	6063      	str	r3, [r4, #4]
 8016e0e:	6923      	ldr	r3, [r4, #16]
 8016e10:	6023      	str	r3, [r4, #0]
 8016e12:	89a3      	ldrh	r3, [r4, #12]
 8016e14:	f043 0308 	orr.w	r3, r3, #8
 8016e18:	81a3      	strh	r3, [r4, #12]
 8016e1a:	6923      	ldr	r3, [r4, #16]
 8016e1c:	b94b      	cbnz	r3, 8016e32 <__swsetup_r+0x7a>
 8016e1e:	89a3      	ldrh	r3, [r4, #12]
 8016e20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016e28:	d003      	beq.n	8016e32 <__swsetup_r+0x7a>
 8016e2a:	4621      	mov	r1, r4
 8016e2c:	4628      	mov	r0, r5
 8016e2e:	f000 f83f 	bl	8016eb0 <__smakebuf_r>
 8016e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e36:	f013 0201 	ands.w	r2, r3, #1
 8016e3a:	d00a      	beq.n	8016e52 <__swsetup_r+0x9a>
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	60a2      	str	r2, [r4, #8]
 8016e40:	6962      	ldr	r2, [r4, #20]
 8016e42:	4252      	negs	r2, r2
 8016e44:	61a2      	str	r2, [r4, #24]
 8016e46:	6922      	ldr	r2, [r4, #16]
 8016e48:	b942      	cbnz	r2, 8016e5c <__swsetup_r+0xa4>
 8016e4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016e4e:	d1c5      	bne.n	8016ddc <__swsetup_r+0x24>
 8016e50:	bd38      	pop	{r3, r4, r5, pc}
 8016e52:	0799      	lsls	r1, r3, #30
 8016e54:	bf58      	it	pl
 8016e56:	6962      	ldrpl	r2, [r4, #20]
 8016e58:	60a2      	str	r2, [r4, #8]
 8016e5a:	e7f4      	b.n	8016e46 <__swsetup_r+0x8e>
 8016e5c:	2000      	movs	r0, #0
 8016e5e:	e7f7      	b.n	8016e50 <__swsetup_r+0x98>
 8016e60:	2000003c 	.word	0x2000003c

08016e64 <__swhatbuf_r>:
 8016e64:	b570      	push	{r4, r5, r6, lr}
 8016e66:	460c      	mov	r4, r1
 8016e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e6c:	2900      	cmp	r1, #0
 8016e6e:	b096      	sub	sp, #88	@ 0x58
 8016e70:	4615      	mov	r5, r2
 8016e72:	461e      	mov	r6, r3
 8016e74:	da0d      	bge.n	8016e92 <__swhatbuf_r+0x2e>
 8016e76:	89a3      	ldrh	r3, [r4, #12]
 8016e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016e7c:	f04f 0100 	mov.w	r1, #0
 8016e80:	bf14      	ite	ne
 8016e82:	2340      	movne	r3, #64	@ 0x40
 8016e84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016e88:	2000      	movs	r0, #0
 8016e8a:	6031      	str	r1, [r6, #0]
 8016e8c:	602b      	str	r3, [r5, #0]
 8016e8e:	b016      	add	sp, #88	@ 0x58
 8016e90:	bd70      	pop	{r4, r5, r6, pc}
 8016e92:	466a      	mov	r2, sp
 8016e94:	f000 f848 	bl	8016f28 <_fstat_r>
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	dbec      	blt.n	8016e76 <__swhatbuf_r+0x12>
 8016e9c:	9901      	ldr	r1, [sp, #4]
 8016e9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016ea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016ea6:	4259      	negs	r1, r3
 8016ea8:	4159      	adcs	r1, r3
 8016eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016eae:	e7eb      	b.n	8016e88 <__swhatbuf_r+0x24>

08016eb0 <__smakebuf_r>:
 8016eb0:	898b      	ldrh	r3, [r1, #12]
 8016eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016eb4:	079d      	lsls	r5, r3, #30
 8016eb6:	4606      	mov	r6, r0
 8016eb8:	460c      	mov	r4, r1
 8016eba:	d507      	bpl.n	8016ecc <__smakebuf_r+0x1c>
 8016ebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016ec0:	6023      	str	r3, [r4, #0]
 8016ec2:	6123      	str	r3, [r4, #16]
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	6163      	str	r3, [r4, #20]
 8016ec8:	b003      	add	sp, #12
 8016eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ecc:	ab01      	add	r3, sp, #4
 8016ece:	466a      	mov	r2, sp
 8016ed0:	f7ff ffc8 	bl	8016e64 <__swhatbuf_r>
 8016ed4:	9f00      	ldr	r7, [sp, #0]
 8016ed6:	4605      	mov	r5, r0
 8016ed8:	4639      	mov	r1, r7
 8016eda:	4630      	mov	r0, r6
 8016edc:	f7fd fbea 	bl	80146b4 <_malloc_r>
 8016ee0:	b948      	cbnz	r0, 8016ef6 <__smakebuf_r+0x46>
 8016ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ee6:	059a      	lsls	r2, r3, #22
 8016ee8:	d4ee      	bmi.n	8016ec8 <__smakebuf_r+0x18>
 8016eea:	f023 0303 	bic.w	r3, r3, #3
 8016eee:	f043 0302 	orr.w	r3, r3, #2
 8016ef2:	81a3      	strh	r3, [r4, #12]
 8016ef4:	e7e2      	b.n	8016ebc <__smakebuf_r+0xc>
 8016ef6:	89a3      	ldrh	r3, [r4, #12]
 8016ef8:	6020      	str	r0, [r4, #0]
 8016efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016efe:	81a3      	strh	r3, [r4, #12]
 8016f00:	9b01      	ldr	r3, [sp, #4]
 8016f02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016f06:	b15b      	cbz	r3, 8016f20 <__smakebuf_r+0x70>
 8016f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f0c:	4630      	mov	r0, r6
 8016f0e:	f000 f81d 	bl	8016f4c <_isatty_r>
 8016f12:	b128      	cbz	r0, 8016f20 <__smakebuf_r+0x70>
 8016f14:	89a3      	ldrh	r3, [r4, #12]
 8016f16:	f023 0303 	bic.w	r3, r3, #3
 8016f1a:	f043 0301 	orr.w	r3, r3, #1
 8016f1e:	81a3      	strh	r3, [r4, #12]
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	431d      	orrs	r5, r3
 8016f24:	81a5      	strh	r5, [r4, #12]
 8016f26:	e7cf      	b.n	8016ec8 <__smakebuf_r+0x18>

08016f28 <_fstat_r>:
 8016f28:	b538      	push	{r3, r4, r5, lr}
 8016f2a:	4d07      	ldr	r5, [pc, #28]	@ (8016f48 <_fstat_r+0x20>)
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	4604      	mov	r4, r0
 8016f30:	4608      	mov	r0, r1
 8016f32:	4611      	mov	r1, r2
 8016f34:	602b      	str	r3, [r5, #0]
 8016f36:	f7f7 f92d 	bl	800e194 <_fstat>
 8016f3a:	1c43      	adds	r3, r0, #1
 8016f3c:	d102      	bne.n	8016f44 <_fstat_r+0x1c>
 8016f3e:	682b      	ldr	r3, [r5, #0]
 8016f40:	b103      	cbz	r3, 8016f44 <_fstat_r+0x1c>
 8016f42:	6023      	str	r3, [r4, #0]
 8016f44:	bd38      	pop	{r3, r4, r5, pc}
 8016f46:	bf00      	nop
 8016f48:	200006dc 	.word	0x200006dc

08016f4c <_isatty_r>:
 8016f4c:	b538      	push	{r3, r4, r5, lr}
 8016f4e:	4d06      	ldr	r5, [pc, #24]	@ (8016f68 <_isatty_r+0x1c>)
 8016f50:	2300      	movs	r3, #0
 8016f52:	4604      	mov	r4, r0
 8016f54:	4608      	mov	r0, r1
 8016f56:	602b      	str	r3, [r5, #0]
 8016f58:	f7f7 f92c 	bl	800e1b4 <_isatty>
 8016f5c:	1c43      	adds	r3, r0, #1
 8016f5e:	d102      	bne.n	8016f66 <_isatty_r+0x1a>
 8016f60:	682b      	ldr	r3, [r5, #0]
 8016f62:	b103      	cbz	r3, 8016f66 <_isatty_r+0x1a>
 8016f64:	6023      	str	r3, [r4, #0]
 8016f66:	bd38      	pop	{r3, r4, r5, pc}
 8016f68:	200006dc 	.word	0x200006dc

08016f6c <_Unwind_GetDataRelBase>:
 8016f6c:	b508      	push	{r3, lr}
 8016f6e:	f7fd fb67 	bl	8014640 <abort>

08016f72 <_Unwind_GetTextRelBase>:
 8016f72:	b508      	push	{r3, lr}
 8016f74:	f7ff fffa 	bl	8016f6c <_Unwind_GetDataRelBase>

08016f78 <_init>:
 8016f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f7a:	bf00      	nop
 8016f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f7e:	bc08      	pop	{r3}
 8016f80:	469e      	mov	lr, r3
 8016f82:	4770      	bx	lr

08016f84 <_fini>:
 8016f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f86:	bf00      	nop
 8016f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f8a:	bc08      	pop	{r3}
 8016f8c:	469e      	mov	lr, r3
 8016f8e:	4770      	bx	lr
